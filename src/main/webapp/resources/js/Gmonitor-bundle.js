/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(158);
	
	var _reactRouter = __webpack_require__(159);
	
	var _routes = __webpack_require__(216);
	
	var _routes2 = _interopRequireDefault(_routes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//var gmonitorui = require('./src/gmonitorui');
	//var ReactDOM = require('react-dom');
	//var React = require('react');
	//
	//if ( $('#queryboard-content').length > 0 ){
	//    ReactDOM.render(
	//      <gmonitorui.QueryBoardUI />,
	//      document.getElementById('queryboard-content')
	//    );
	//
	//}else if($('#dashboard-content').length > 0){
	//    ReactDOM.render(
	//      <gmonitorui.DashBoardUI />,
	//      document.getElementById('dashboard-content')
	//    );
	//}
	
	(0, _reactDom.render)(_react2.default.createElement(_reactRouter.Router, { routes: _routes2.default, history: _reactRouter.hashHistory }), document.getElementById('content'));

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(2);

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule React
	 */
	
	'use strict';
	
	var ReactDOM = __webpack_require__(3);
	var ReactDOMServer = __webpack_require__(148);
	var ReactIsomorphic = __webpack_require__(152);
	
	var assign = __webpack_require__(39);
	var deprecated = __webpack_require__(157);
	
	// `version` will be added here by ReactIsomorphic.
	var React = {};
	
	assign(React, ReactIsomorphic);
	
	assign(React, {
	  // ReactDOM
	  findDOMNode: deprecated('findDOMNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.findDOMNode),
	  render: deprecated('render', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.render),
	  unmountComponentAtNode: deprecated('unmountComponentAtNode', 'ReactDOM', 'react-dom', ReactDOM, ReactDOM.unmountComponentAtNode),
	
	  // ReactDOMServer
	  renderToString: deprecated('renderToString', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToString),
	  renderToStaticMarkup: deprecated('renderToStaticMarkup', 'ReactDOMServer', 'react-dom/server', ReactDOMServer, ReactDOMServer.renderToStaticMarkup)
	});
	
	React.__SECRET_DOM_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOM;
	React.__SECRET_DOM_SERVER_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactDOMServer;
	
	module.exports = React;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOM
	 */
	
	/* globals __REACT_DEVTOOLS_GLOBAL_HOOK__*/
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdates = __webpack_require__(54);
	var ReactVersion = __webpack_require__(146);
	
	var findDOMNode = __webpack_require__(91);
	var renderSubtreeIntoContainer = __webpack_require__(147);
	var warning = __webpack_require__(25);
	
	ReactDefaultInjection.inject();
	
	var render = ReactPerf.measure('React', 'render', ReactMount.render);
	
	var React = {
	  findDOMNode: findDOMNode,
	  render: render,
	  unmountComponentAtNode: ReactMount.unmountComponentAtNode,
	  version: ReactVersion,
	
	  /* eslint-disable camelcase */
	  unstable_batchedUpdates: ReactUpdates.batchedUpdates,
	  unstable_renderSubtreeIntoContainer: renderSubtreeIntoContainer
	};
	
	// Inject the runtime into a devtools global hook regardless of browser.
	// Allows for debugging when the hook is injected on the page.
	/* eslint-enable camelcase */
	if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
	  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
	    CurrentOwner: ReactCurrentOwner,
	    InstanceHandles: ReactInstanceHandles,
	    Mount: ReactMount,
	    Reconciler: ReactReconciler,
	    TextComponent: ReactDOMTextComponent
	  });
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var ExecutionEnvironment = __webpack_require__(9);
	  if (ExecutionEnvironment.canUseDOM && window.top === window.self) {
	
	    // First check if devtools is not installed
	    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	      // If we're in Chrome or Firefox, provide a download link if not installed.
	      if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
	        console.debug('Download the React DevTools for a better development experience: ' + 'https://fb.me/react-devtools');
	      }
	    }
	
	    // If we're in IE8, check to see if we are in compatibility mode and provide
	    // information on preventing compatibility mode
	    var ieCompatibilityMode = document.documentMode && document.documentMode < 8;
	
	    process.env.NODE_ENV !== 'production' ? warning(!ieCompatibilityMode, 'Internet Explorer is running in compatibility mode; please add the ' + 'following tag to your HTML to prevent this from happening: ' + '<meta http-equiv="X-UA-Compatible" content="IE=edge" />') : undefined;
	
	    var expectedFeatures = [
	    // shims
	    Array.isArray, Array.prototype.every, Array.prototype.forEach, Array.prototype.indexOf, Array.prototype.map, Date.now, Function.prototype.bind, Object.keys, String.prototype.split, String.prototype.trim,
	
	    // shams
	    Object.create, Object.freeze];
	
	    for (var i = 0; i < expectedFeatures.length; i++) {
	      if (!expectedFeatures[i]) {
	        console.error('One or more ES5 shim/shams expected by React are not available: ' + 'https://fb.me/react-warning-polyfills');
	        break;
	      }
	    }
	  }
	}
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	'use strict';
	
	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCurrentOwner
	 */
	
	'use strict';
	
	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	
	var ReactCurrentOwner = {
	
	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null
	
	};
	
	module.exports = ReactCurrentOwner;

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactMount = __webpack_require__(28);
	
	var assign = __webpack_require__(39);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setTextContent = __webpack_require__(20);
	var validateDOMNesting = __webpack_require__(70);
	
	/**
	 * Text nodes violate a couple assumptions that React makes about components:
	 *
	 *  - When mounting text into the DOM, adjacent text nodes are merged.
	 *  - Text nodes cannot be assigned a React root ID.
	 *
	 * This component is used to wrap strings in elements so that they can undergo
	 * the same reconciliation that is applied to elements.
	 *
	 * TODO: Investigate representing React components in the DOM with text nodes.
	 *
	 * @class ReactDOMTextComponent
	 * @extends ReactComponent
	 * @internal
	 */
	var ReactDOMTextComponent = function ReactDOMTextComponent(props) {
	  // This constructor and its argument is currently used by mocks.
	};
	
	assign(ReactDOMTextComponent.prototype, {
	
	  /**
	   * @param {ReactText} text
	   * @internal
	   */
	  construct: function construct(text) {
	    // TODO: This is really a ReactText (ReactNode), not a ReactElement
	    this._currentElement = text;
	    this._stringText = '' + text;
	
	    // Properties
	    this._rootNodeID = null;
	    this._mountIndex = 0;
	  },
	
	  /**
	   * Creates the markup for this text node. This node is not intended to have
	   * any features besides containing text content.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {string} Markup for this text node.
	   * @internal
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting('span', null, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    this._rootNodeID = rootID;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement('span');
	      DOMPropertyOperations.setAttributeForID(el, rootID);
	      // Populate node cache
	      ReactMount.getID(el);
	      setTextContent(el, this._stringText);
	      return el;
	    } else {
	      var escapedText = escapeTextContentForBrowser(this._stringText);
	
	      if (transaction.renderToStaticMarkup) {
	        // Normally we'd wrap this in a `span` for the reasons stated above, but
	        // since this is a situation where React won't take over (static pages),
	        // we can simply return the text as it is.
	        return escapedText;
	      }
	
	      return '<span ' + DOMPropertyOperations.createMarkupForID(rootID) + '>' + escapedText + '</span>';
	    }
	  },
	
	  /**
	   * Updates this component by updating the text content.
	   *
	   * @param {ReactText} nextText The next text content
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  receiveComponent: function receiveComponent(nextText, transaction) {
	    if (nextText !== this._currentElement) {
	      this._currentElement = nextText;
	      var nextStringText = '' + nextText;
	      if (nextStringText !== this._stringText) {
	        // TODO: Save this as pending props and use performUpdateIfNecessary
	        // and/or updateComponent to do the actual update for consistency with
	        // other component types?
	        this._stringText = nextStringText;
	        var node = ReactMount.getNode(this._rootNodeID);
	        DOMChildrenOperations.updateTextContent(node, nextStringText);
	      }
	    }
	  },
	
	  unmountComponent: function unmountComponent() {
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	  }
	
	});
	
	module.exports = ReactDOMTextComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMChildrenOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var Danger = __webpack_require__(8);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	var ReactPerf = __webpack_require__(18);
	
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var invariant = __webpack_require__(13);
	
	/**
	 * Inserts `childNode` as a child of `parentNode` at the `index`.
	 *
	 * @param {DOMElement} parentNode Parent node in which to insert.
	 * @param {DOMElement} childNode Child node to insert.
	 * @param {number} index Index at which to insert the child.
	 * @internal
	 */
	function insertChildAt(parentNode, childNode, index) {
	  // By exploiting arrays returning `undefined` for an undefined index, we can
	  // rely exclusively on `insertBefore(node, null)` instead of also using
	  // `appendChild(node)`. However, using `undefined` is not allowed by all
	  // browsers so we must replace it with `null`.
	
	  // fix render order error in safari
	  // IE8 will throw error when index out of list size.
	  var beforeChild = index >= parentNode.childNodes.length ? null : parentNode.childNodes.item(index);
	
	  parentNode.insertBefore(childNode, beforeChild);
	}
	
	/**
	 * Operations for updating with DOM children.
	 */
	var DOMChildrenOperations = {
	
	  dangerouslyReplaceNodeWithMarkup: Danger.dangerouslyReplaceNodeWithMarkup,
	
	  updateTextContent: setTextContent,
	
	  /**
	   * Updates a component's children by processing a series of updates. The
	   * update configurations are each expected to have a `parentNode` property.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markupList List of markup strings.
	   * @internal
	   */
	  processUpdates: function processUpdates(updates, markupList) {
	    var update;
	    // Mapping from parent IDs to initial child orderings.
	    var initialChildren = null;
	    // List of children that will be moved or removed.
	    var updatedChildren = null;
	
	    for (var i = 0; i < updates.length; i++) {
	      update = updates[i];
	      if (update.type === ReactMultiChildUpdateTypes.MOVE_EXISTING || update.type === ReactMultiChildUpdateTypes.REMOVE_NODE) {
	        var updatedIndex = update.fromIndex;
	        var updatedChild = update.parentNode.childNodes[updatedIndex];
	        var parentID = update.parentID;
	
	        !updatedChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processUpdates(): Unable to find child %s of element. This ' + 'probably means the DOM was unexpectedly mutated (e.g., by the ' + 'browser), usually due to forgetting a <tbody> when using tables, ' + 'nesting tags like <form>, <p>, or <a>, or using non-SVG elements ' + 'in an <svg> parent. Try inspecting the child nodes of the element ' + 'with React ID `%s`.', updatedIndex, parentID) : invariant(false) : undefined;
	
	        initialChildren = initialChildren || {};
	        initialChildren[parentID] = initialChildren[parentID] || [];
	        initialChildren[parentID][updatedIndex] = updatedChild;
	
	        updatedChildren = updatedChildren || [];
	        updatedChildren.push(updatedChild);
	      }
	    }
	
	    var renderedMarkup;
	    // markupList is either a list of markup or just a list of elements
	    if (markupList.length && typeof markupList[0] === 'string') {
	      renderedMarkup = Danger.dangerouslyRenderMarkup(markupList);
	    } else {
	      renderedMarkup = markupList;
	    }
	
	    // Remove updated children first so that `toIndex` is consistent.
	    if (updatedChildren) {
	      for (var j = 0; j < updatedChildren.length; j++) {
	        updatedChildren[j].parentNode.removeChild(updatedChildren[j]);
	      }
	    }
	
	    for (var k = 0; k < updates.length; k++) {
	      update = updates[k];
	      switch (update.type) {
	        case ReactMultiChildUpdateTypes.INSERT_MARKUP:
	          insertChildAt(update.parentNode, renderedMarkup[update.markupIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.MOVE_EXISTING:
	          insertChildAt(update.parentNode, initialChildren[update.parentID][update.fromIndex], update.toIndex);
	          break;
	        case ReactMultiChildUpdateTypes.SET_MARKUP:
	          setInnerHTML(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.TEXT_CONTENT:
	          setTextContent(update.parentNode, update.content);
	          break;
	        case ReactMultiChildUpdateTypes.REMOVE_NODE:
	          // Already removed by the for-loop above.
	          break;
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMChildrenOperations, 'DOMChildrenOperations', {
	  updateTextContent: 'updateTextContent'
	});
	
	module.exports = DOMChildrenOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Danger
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var createNodesFromMarkup = __webpack_require__(10);
	var emptyFunction = __webpack_require__(15);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);
	
	var OPEN_TAG_NAME_EXP = /^(<[^ \/>]+)/;
	var RESULT_INDEX_ATTR = 'data-danger-index';
	
	/**
	 * Extracts the `nodeName` from a string of markup.
	 *
	 * NOTE: Extracting the `nodeName` does not require a regular expression match
	 * because we make assumptions about React-generated markup (i.e. there are no
	 * spaces surrounding the opening tag and there is at least one attribute).
	 *
	 * @param {string} markup String of markup.
	 * @return {string} Node name of the supplied markup.
	 * @see http://jsperf.com/extract-nodename
	 */
	function getNodeName(markup) {
	  return markup.substring(1, markup.indexOf(' '));
	}
	
	var Danger = {
	
	  /**
	   * Renders markup into an array of nodes. The markup is expected to render
	   * into a list of root nodes. Also, the length of `resultList` and
	   * `markupList` should be the same.
	   *
	   * @param {array<string>} markupList List of markup strings to render.
	   * @return {array<DOMElement>} List of rendered nodes.
	   * @internal
	   */
	  dangerouslyRenderMarkup: function dangerouslyRenderMarkup(markupList) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Cannot render markup in a worker ' + 'thread. Make sure `window` and `document` are available globally ' + 'before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString for server rendering.') : invariant(false) : undefined;
	    var nodeName;
	    var markupByNodeName = {};
	    // Group markup by `nodeName` if a wrap is necessary, else by '*'.
	    for (var i = 0; i < markupList.length; i++) {
	      !markupList[i] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyRenderMarkup(...): Missing markup.') : invariant(false) : undefined;
	      nodeName = getNodeName(markupList[i]);
	      nodeName = getMarkupWrap(nodeName) ? nodeName : '*';
	      markupByNodeName[nodeName] = markupByNodeName[nodeName] || [];
	      markupByNodeName[nodeName][i] = markupList[i];
	    }
	    var resultList = [];
	    var resultListAssignmentCount = 0;
	    for (nodeName in markupByNodeName) {
	      if (!markupByNodeName.hasOwnProperty(nodeName)) {
	        continue;
	      }
	      var markupListByNodeName = markupByNodeName[nodeName];
	
	      // This for-in loop skips the holes of the sparse array. The order of
	      // iteration should follow the order of assignment, which happens to match
	      // numerical index order, but we don't rely on that.
	      var resultIndex;
	      for (resultIndex in markupListByNodeName) {
	        if (markupListByNodeName.hasOwnProperty(resultIndex)) {
	          var markup = markupListByNodeName[resultIndex];
	
	          // Push the requested markup with an additional RESULT_INDEX_ATTR
	          // attribute.  If the markup does not start with a < character, it
	          // will be discarded below (with an appropriate console.error).
	          markupListByNodeName[resultIndex] = markup.replace(OPEN_TAG_NAME_EXP,
	          // This index will be parsed back out below.
	          '$1 ' + RESULT_INDEX_ATTR + '="' + resultIndex + '" ');
	        }
	      }
	
	      // Render each group of markup with similar wrapping `nodeName`.
	      var renderNodes = createNodesFromMarkup(markupListByNodeName.join(''), emptyFunction // Do nothing special with <script> tags.
	      );
	
	      for (var j = 0; j < renderNodes.length; ++j) {
	        var renderNode = renderNodes[j];
	        if (renderNode.hasAttribute && renderNode.hasAttribute(RESULT_INDEX_ATTR)) {
	
	          resultIndex = +renderNode.getAttribute(RESULT_INDEX_ATTR);
	          renderNode.removeAttribute(RESULT_INDEX_ATTR);
	
	          !!resultList.hasOwnProperty(resultIndex) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Assigning to an already-occupied result index.') : invariant(false) : undefined;
	
	          resultList[resultIndex] = renderNode;
	
	          // This should match resultList.length and markupList.length when
	          // we're done.
	          resultListAssignmentCount += 1;
	        } else if (process.env.NODE_ENV !== 'production') {
	          console.error('Danger: Discarding unexpected node:', renderNode);
	        }
	      }
	    }
	
	    // Although resultList was populated out of order, it should now be a dense
	    // array.
	    !(resultListAssignmentCount === resultList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Did not assign to every index of resultList.') : invariant(false) : undefined;
	
	    !(resultList.length === markupList.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Danger: Expected markup to render %s nodes, but rendered %s.', markupList.length, resultList.length) : invariant(false) : undefined;
	
	    return resultList;
	  },
	
	  /**
	   * Replaces a node with a string of markup at its current position within its
	   * parent. The markup must render into a single root node.
	   *
	   * @param {DOMElement} oldChild Child node to replace.
	   * @param {string} markup Markup to render in place of the child node.
	   * @internal
	   */
	  dangerouslyReplaceNodeWithMarkup: function dangerouslyReplaceNodeWithMarkup(oldChild, markup) {
	    !ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot render markup in a ' + 'worker thread. Make sure `window` and `document` are available ' + 'globally before requiring React when unit testing or use ' + 'ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	    !markup ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Missing markup.') : invariant(false) : undefined;
	    !(oldChild.tagName.toLowerCase() !== 'html') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'dangerouslyReplaceNodeWithMarkup(...): Cannot replace markup of the ' + '<html> node. This is because browser quirks make this unreliable ' + 'and/or slow. If you want to render to the root you must use ' + 'server rendering. See ReactDOMServer.renderToString().') : invariant(false) : undefined;
	
	    var newChild;
	    if (typeof markup === 'string') {
	      newChild = createNodesFromMarkup(markup, emptyFunction)[0];
	    } else {
	      newChild = markup;
	    }
	    oldChild.parentNode.replaceChild(newChild, oldChild);
	  }
	
	};
	
	module.exports = Danger;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 9 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ExecutionEnvironment
	 */
	
	'use strict';
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	/**
	 * Simple, lightweight module assisting with the detection and context of
	 * Worker. Helps avoid circular dependencies and allows code to reason about
	 * whether or not they are in a Worker, even if they never include the main
	 * `ReactWorker` dependency.
	 */
	var ExecutionEnvironment = {
	
	  canUseDOM: canUseDOM,
	
	  canUseWorkers: typeof Worker !== 'undefined',
	
	  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),
	
	  canUseViewport: canUseDOM && !!window.screen,
	
	  isInWorker: !canUseDOM // For now, this is true - might change in the future.
	
	};
	
	module.exports = ExecutionEnvironment;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createNodesFromMarkup
	 * @typechecks
	 */
	
	/*eslint-disable fb-www/unsafe-html*/
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var createArrayFromMixed = __webpack_require__(11);
	var getMarkupWrap = __webpack_require__(14);
	var invariant = __webpack_require__(13);
	
	/**
	 * Dummy container used to render all markup.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Pattern used by `getNodeName`.
	 */
	var nodeNamePattern = /^\s*<(\w+)/;
	
	/**
	 * Extracts the `nodeName` of the first element in a string of markup.
	 *
	 * @param {string} markup String of markup.
	 * @return {?string} Node name of the supplied markup.
	 */
	function getNodeName(markup) {
	  var nodeNameMatch = markup.match(nodeNamePattern);
	  return nodeNameMatch && nodeNameMatch[1].toLowerCase();
	}
	
	/**
	 * Creates an array containing the nodes rendered from the supplied markup. The
	 * optionally supplied `handleScript` function will be invoked once for each
	 * <script> element that is rendered. If no `handleScript` function is supplied,
	 * an exception is thrown if any <script> elements are rendered.
	 *
	 * @param {string} markup A string of valid HTML markup.
	 * @param {?function} handleScript Invoked once for each rendered <script>.
	 * @return {array<DOMElement|DOMTextNode>} An array of rendered nodes.
	 */
	function createNodesFromMarkup(markup, handleScript) {
	  var node = dummyNode;
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup dummy not initialized') : invariant(false) : undefined;
	  var nodeName = getNodeName(markup);
	
	  var wrap = nodeName && getMarkupWrap(nodeName);
	  if (wrap) {
	    node.innerHTML = wrap[1] + markup + wrap[2];
	
	    var wrapDepth = wrap[0];
	    while (wrapDepth--) {
	      node = node.lastChild;
	    }
	  } else {
	    node.innerHTML = markup;
	  }
	
	  var scripts = node.getElementsByTagName('script');
	  if (scripts.length) {
	    !handleScript ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createNodesFromMarkup(...): Unexpected <script> element rendered.') : invariant(false) : undefined;
	    createArrayFromMixed(scripts).forEach(handleScript);
	  }
	
	  var nodes = createArrayFromMixed(node.childNodes);
	  while (node.lastChild) {
	    node.removeChild(node.lastChild);
	  }
	  return nodes;
	}
	
	module.exports = createNodesFromMarkup;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule createArrayFromMixed
	 * @typechecks
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var toArray = __webpack_require__(12);
	
	/**
	 * Perform a heuristic test to determine if an object is "array-like".
	 *
	 *   A monk asked Joshu, a Zen master, "Has a dog Buddha nature?"
	 *   Joshu replied: "Mu."
	 *
	 * This function determines if its argument has "array nature": it returns
	 * true if the argument is an actual array, an `arguments' object, or an
	 * HTMLCollection (e.g. node.childNodes or node.getElementsByTagName()).
	 *
	 * It will return false for other array-like objects like Filelist.
	 *
	 * @param {*} obj
	 * @return {boolean}
	 */
	function hasArrayNature(obj) {
	  return(
	    // not null/false
	    !!obj && (
	    // arrays are objects, NodeLists are functions in Safari
	    (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) == 'object' || typeof obj == 'function') &&
	    // quacks like an array
	    'length' in obj &&
	    // not window
	    !('setInterval' in obj) &&
	    // no DOM node should be considered an array-like
	    // a 'select' element has 'length' and 'item' properties on IE8
	    typeof obj.nodeType != 'number' && (
	    // a real array
	    Array.isArray(obj) ||
	    // arguments
	    'callee' in obj ||
	    // HTMLCollection/NodeList
	    'item' in obj)
	  );
	}
	
	/**
	 * Ensure that the argument is an array by wrapping it in an array if it is not.
	 * Creates a copy of the argument if it is already an array.
	 *
	 * This is mostly useful idiomatically:
	 *
	 *   var createArrayFromMixed = require('createArrayFromMixed');
	 *
	 *   function takesOneOrMoreThings(things) {
	 *     things = createArrayFromMixed(things);
	 *     ...
	 *   }
	 *
	 * This allows you to treat `things' as an array, but accept scalars in the API.
	 *
	 * If you need to convert an array-like object, like `arguments`, into an array
	 * use toArray instead.
	 *
	 * @param {*} obj
	 * @return {array}
	 */
	function createArrayFromMixed(obj) {
	  if (!hasArrayNature(obj)) {
	    return [obj];
	  } else if (Array.isArray(obj)) {
	    return obj.slice();
	  } else {
	    return toArray(obj);
	  }
	}
	
	module.exports = createArrayFromMixed;

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule toArray
	 * @typechecks
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Convert array-like objects to arrays.
	 *
	 * This API assumes the caller knows the contents of the data type. For less
	 * well defined inputs use createArrayFromMixed.
	 *
	 * @param {object|function|filelist} obj
	 * @return {array}
	 */
	function toArray(obj) {
	  var length = obj.length;
	
	  // Some browse builtin objects can report typeof 'function' (e.g. NodeList in
	  // old versions of Safari).
	  !(!Array.isArray(obj) && ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' || typeof obj === 'function')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Array-like object expected') : invariant(false) : undefined;
	
	  !(typeof length === 'number') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object needs a length property') : invariant(false) : undefined;
	
	  !(length === 0 || length - 1 in obj) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'toArray: Object should have keys for indices') : invariant(false) : undefined;
	
	  // Old IE doesn't give collections access to hasOwnProperty. Assume inputs
	  // without method will throw during the slice call and skip straight to the
	  // fallback.
	  if (obj.hasOwnProperty) {
	    try {
	      return Array.prototype.slice.call(obj);
	    } catch (e) {
	      // IE < 9 does not support Array#slice on collections objects
	    }
	  }
	
	  // Fall back to copying key by key. This assumes all keys have a value,
	  // so will not preserve sparsely populated inputs.
	  var ret = Array(length);
	  for (var ii = 0; ii < length; ii++) {
	    ret[ii] = obj[ii];
	  }
	  return ret;
	}
	
	module.exports = toArray;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule invariant
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getMarkupWrap
	 */
	
	/*eslint-disable fb-www/unsafe-html */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Dummy container used to detect which wraps are necessary.
	 */
	var dummyNode = ExecutionEnvironment.canUseDOM ? document.createElement('div') : null;
	
	/**
	 * Some browsers cannot use `innerHTML` to render certain elements standalone,
	 * so we wrap them, render the wrapped nodes, then extract the desired node.
	 *
	 * In IE8, certain elements cannot render alone, so wrap all elements ('*').
	 */
	
	var shouldWrap = {};
	
	var selectWrap = [1, '<select multiple="true">', '</select>'];
	var tableWrap = [1, '<table>', '</table>'];
	var trWrap = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	var svgWrap = [1, '<svg xmlns="http://www.w3.org/2000/svg">', '</svg>'];
	
	var markupWrap = {
	  '*': [1, '?<div>', '</div>'],
	
	  'area': [1, '<map>', '</map>'],
	  'col': [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
	  'legend': [1, '<fieldset>', '</fieldset>'],
	  'param': [1, '<object>', '</object>'],
	  'tr': [2, '<table><tbody>', '</tbody></table>'],
	
	  'optgroup': selectWrap,
	  'option': selectWrap,
	
	  'caption': tableWrap,
	  'colgroup': tableWrap,
	  'tbody': tableWrap,
	  'tfoot': tableWrap,
	  'thead': tableWrap,
	
	  'td': trWrap,
	  'th': trWrap
	};
	
	// Initialize the SVG elements since we know they'll always need to be wrapped
	// consistently. If they are created inside a <div> they will be initialized in
	// the wrong namespace (and will not display).
	var svgElements = ['circle', 'clipPath', 'defs', 'ellipse', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'text', 'tspan'];
	svgElements.forEach(function (nodeName) {
	  markupWrap[nodeName] = svgWrap;
	  shouldWrap[nodeName] = true;
	});
	
	/**
	 * Gets the markup wrap configuration for the supplied `nodeName`.
	 *
	 * NOTE: This lazily detects which wraps are necessary for the current browser.
	 *
	 * @param {string} nodeName Lowercase `nodeName`.
	 * @return {?array} Markup wrap configuration, if applicable.
	 */
	function getMarkupWrap(nodeName) {
	  !!!dummyNode ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Markup wrapping node not initialized') : invariant(false) : undefined;
	  if (!markupWrap.hasOwnProperty(nodeName)) {
	    nodeName = '*';
	  }
	  if (!shouldWrap.hasOwnProperty(nodeName)) {
	    if (nodeName === '*') {
	      dummyNode.innerHTML = '<link />';
	    } else {
	      dummyNode.innerHTML = '<' + nodeName + '></' + nodeName + '>';
	    }
	    shouldWrap[nodeName] = !dummyNode.firstChild;
	  }
	  return shouldWrap[nodeName] ? markupWrap[nodeName] : null;
	}
	
	module.exports = getMarkupWrap;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyFunction
	 */
	
	"use strict";
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	function emptyFunction() {}
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChildUpdateTypes
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	/**
	 * When a component's children are updated, a series of update configuration
	 * objects are created in order to batch and serialize the required changes.
	 *
	 * Enumerates all the possible types of update configurations.
	 *
	 * @internal
	 */
	var ReactMultiChildUpdateTypes = keyMirror({
	  INSERT_MARKUP: null,
	  MOVE_EXISTING: null,
	  REMOVE_NODE: null,
	  SET_MARKUP: null,
	  TEXT_CONTENT: null
	});
	
	module.exports = ReactMultiChildUpdateTypes;

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyMirror
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function keyMirror(obj) {
	  var ret = {};
	  var key;
	  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : undefined;
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};
	
	module.exports = keyMirror;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * ReactPerf is a general AOP system designed to measure performance. This
	 * module only has the hooks: see ReactDefaultPerf for the analysis tool.
	 */
	
	var ReactPerf = {
	  /**
	   * Boolean to enable/disable measurement. Set to false by default to prevent
	   * accidental logging and perf loss.
	   */
	  enableMeasure: false,
	
	  /**
	   * Holds onto the measure function in use. By default, don't measure
	   * anything, but we'll override this if we inject a measure function.
	   */
	  storedMeasure: _noMeasure,
	
	  /**
	   * @param {object} object
	   * @param {string} objectName
	   * @param {object<string>} methodNames
	   */
	  measureMethods: function measureMethods(object, objectName, methodNames) {
	    if (process.env.NODE_ENV !== 'production') {
	      for (var key in methodNames) {
	        if (!methodNames.hasOwnProperty(key)) {
	          continue;
	        }
	        object[key] = ReactPerf.measure(objectName, methodNames[key], object[key]);
	      }
	    }
	  },
	
	  /**
	   * Use this to wrap methods you want to measure. Zero overhead in production.
	   *
	   * @param {string} objName
	   * @param {string} fnName
	   * @param {function} func
	   * @return {function}
	   */
	  measure: function measure(objName, fnName, func) {
	    if (process.env.NODE_ENV !== 'production') {
	      var measuredFunc = null;
	      var wrapper = function wrapper() {
	        if (ReactPerf.enableMeasure) {
	          if (!measuredFunc) {
	            measuredFunc = ReactPerf.storedMeasure(objName, fnName, func);
	          }
	          return measuredFunc.apply(this, arguments);
	        }
	        return func.apply(this, arguments);
	      };
	      wrapper.displayName = objName + '_' + fnName;
	      return wrapper;
	    }
	    return func;
	  },
	
	  injection: {
	    /**
	     * @param {function} measure
	     */
	    injectMeasure: function injectMeasure(measure) {
	      ReactPerf.storedMeasure = measure;
	    }
	  }
	};
	
	/**
	 * Simply passes through the measured function, without measuring it.
	 *
	 * @param {string} objName
	 * @param {string} fnName
	 * @param {function} func
	 * @return {function}
	 */
	function _noMeasure(objName, fnName, func) {
	  return func;
	}
	
	module.exports = ReactPerf;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setInnerHTML
	 */
	
	/* globals MSApp */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var WHITESPACE_TEST = /^[ \r\n\t\f]/;
	var NONVISIBLE_TEST = /<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/;
	
	/**
	 * Set the innerHTML property of a node, ensuring that whitespace is preserved
	 * even in IE8.
	 *
	 * @param {DOMElement} node
	 * @param {string} html
	 * @internal
	 */
	var setInnerHTML = function setInnerHTML(node, html) {
	  node.innerHTML = html;
	};
	
	// Win8 apps: Allow all html to be inserted
	if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
	  setInnerHTML = function setInnerHTML(node, html) {
	    MSApp.execUnsafeLocalFunction(function () {
	      node.innerHTML = html;
	    });
	  };
	}
	
	if (ExecutionEnvironment.canUseDOM) {
	  // IE8: When updating a just created node with innerHTML only leading
	  // whitespace is removed. When updating an existing node with innerHTML
	  // whitespace in root TextNodes is also collapsed.
	  // @see quirksmode.org/bugreports/archives/2004/11/innerhtml_and_t.html
	
	  // Feature detection; only IE8 is known to behave improperly like this.
	  var testElement = document.createElement('div');
	  testElement.innerHTML = ' ';
	  if (testElement.innerHTML === '') {
	    setInnerHTML = function setInnerHTML(node, html) {
	      // Magic theory: IE8 supposedly differentiates between added and updated
	      // nodes when processing innerHTML, innerHTML on updated nodes suffers
	      // from worse whitespace behavior. Re-adding a node like this triggers
	      // the initial and more favorable whitespace behavior.
	      // TODO: What to do on a detached node?
	      if (node.parentNode) {
	        node.parentNode.replaceChild(node, node);
	      }
	
	      // We also implement a workaround for non-visible tags disappearing into
	      // thin air on IE8, this only happens if there is no visible text
	      // in-front of the non-visible tags. Piggyback on the whitespace fix
	      // and simply check if any non-visible tags appear in the source.
	      if (WHITESPACE_TEST.test(html) || html[0] === '<' && NONVISIBLE_TEST.test(html)) {
	        // Recover leading whitespace by temporarily prepending any character.
	        // \uFEFF has the potential advantage of being zero-width/invisible.
	        // UglifyJS drops U+FEFF chars when parsing, so use String.fromCharCode
	        // in hopes that this is preserved even if "\uFEFF" is transformed to
	        // the actual Unicode character (by Babel, for example).
	        // https://github.com/mishoo/UglifyJS2/blob/v2.4.20/lib/parse.js#L216
	        node.innerHTML = String.fromCharCode(0xFEFF) + html;
	
	        // deleteData leaves an empty `TextNode` which offsets the index of all
	        // children. Definitely want to avoid this.
	        var textNode = node.firstChild;
	        if (textNode.data.length === 1) {
	          node.removeChild(textNode);
	        } else {
	          textNode.deleteData(0, 1);
	        }
	      } else {
	        node.innerHTML = html;
	      }
	    };
	  }
	}
	
	module.exports = setInnerHTML;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule setTextContent
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var setInnerHTML = __webpack_require__(19);
	
	/**
	 * Set the textContent property of a node, ensuring that whitespace is preserved
	 * even in IE8. innerText is a poor substitute for textContent and, among many
	 * issues, inserts <br> instead of the literal newline chars. innerHTML behaves
	 * as it should.
	 *
	 * @param {DOMElement} node
	 * @param {string} text
	 * @internal
	 */
	var setTextContent = function setTextContent(node, text) {
	  node.textContent = text;
	};
	
	if (ExecutionEnvironment.canUseDOM) {
	  if (!('textContent' in document.documentElement)) {
	    setTextContent = function setTextContent(node, text) {
	      setInnerHTML(node, escapeTextContentForBrowser(text));
	    };
	  }
	}
	
	module.exports = setTextContent;

/***/ },
/* 21 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule escapeTextContentForBrowser
	 */
	
	'use strict';
	
	var ESCAPE_LOOKUP = {
	  '&': '&amp;',
	  '>': '&gt;',
	  '<': '&lt;',
	  '"': '&quot;',
	  '\'': '&#x27;'
	};
	
	var ESCAPE_REGEX = /[&><"']/g;
	
	function escaper(match) {
	  return ESCAPE_LOOKUP[match];
	}
	
	/**
	 * Escapes text to prevent scripting attacks.
	 *
	 * @param {*} text Text value to escape.
	 * @return {string} An escaped string.
	 */
	function escapeTextContentForBrowser(text) {
	  return ('' + text).replace(ESCAPE_REGEX, escaper);
	}
	
	module.exports = escapeTextContentForBrowser;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ReactPerf = __webpack_require__(18);
	
	var quoteAttributeValueForBrowser = __webpack_require__(24);
	var warning = __webpack_require__(25);
	
	// Simplified subset
	var VALID_ATTRIBUTE_NAME_REGEX = /^[a-zA-Z_][\w\.\-]*$/;
	var illegalAttributeNameCache = {};
	var validatedAttributeNameCache = {};
	
	function isAttributeNameSafe(attributeName) {
	  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {
	    return true;
	  }
	  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {
	    return false;
	  }
	  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
	    validatedAttributeNameCache[attributeName] = true;
	    return true;
	  }
	  illegalAttributeNameCache[attributeName] = true;
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid attribute name: `%s`', attributeName) : undefined;
	  return false;
	}
	
	function shouldIgnoreValue(propertyInfo, value) {
	  return value == null || propertyInfo.hasBooleanValue && !value || propertyInfo.hasNumericValue && isNaN(value) || propertyInfo.hasPositiveNumericValue && value < 1 || propertyInfo.hasOverloadedBooleanValue && value === false;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  var reactProps = {
	    children: true,
	    dangerouslySetInnerHTML: true,
	    key: true,
	    ref: true
	  };
	  var warnedProperties = {};
	
	  var warnUnknownProperty = function warnUnknownProperty(name) {
	    if (reactProps.hasOwnProperty(name) && reactProps[name] || warnedProperties.hasOwnProperty(name) && warnedProperties[name]) {
	      return;
	    }
	
	    warnedProperties[name] = true;
	    var lowerCasedName = name.toLowerCase();
	
	    // data-* attributes should be lowercase; suggest the lowercase version
	    var standardName = DOMProperty.isCustomAttribute(lowerCasedName) ? lowerCasedName : DOMProperty.getPossibleStandardName.hasOwnProperty(lowerCasedName) ? DOMProperty.getPossibleStandardName[lowerCasedName] : null;
	
	    // For now, only warn when we have a suggested correction. This prevents
	    // logging too much when using transferPropsTo.
	    process.env.NODE_ENV !== 'production' ? warning(standardName == null, 'Unknown DOM property %s. Did you mean %s?', name, standardName) : undefined;
	  };
	}
	
	/**
	 * Operations for dealing with DOM properties.
	 */
	var DOMPropertyOperations = {
	
	  /**
	   * Creates markup for the ID property.
	   *
	   * @param {string} id Unescaped ID.
	   * @return {string} Markup string.
	   */
	  createMarkupForID: function createMarkupForID(id) {
	    return DOMProperty.ID_ATTRIBUTE_NAME + '=' + quoteAttributeValueForBrowser(id);
	  },
	
	  setAttributeForID: function setAttributeForID(node, id) {
	    node.setAttribute(DOMProperty.ID_ATTRIBUTE_NAME, id);
	  },
	
	  /**
	   * Creates markup for a property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {?string} Markup string, or null if the property was invalid.
	   */
	  createMarkupForProperty: function createMarkupForProperty(name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      if (shouldIgnoreValue(propertyInfo, value)) {
	        return '';
	      }
	      var attributeName = propertyInfo.attributeName;
	      if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	        return attributeName + '=""';
	      }
	      return attributeName + '=' + quoteAttributeValueForBrowser(value);
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      if (value == null) {
	        return '';
	      }
	      return name + '=' + quoteAttributeValueForBrowser(value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	    return null;
	  },
	
	  /**
	   * Creates markup for a custom property.
	   *
	   * @param {string} name
	   * @param {*} value
	   * @return {string} Markup string, or empty string if the property was invalid.
	   */
	  createMarkupForCustomAttribute: function createMarkupForCustomAttribute(name, value) {
	    if (!isAttributeNameSafe(name) || value == null) {
	      return '';
	    }
	    return name + '=' + quoteAttributeValueForBrowser(value);
	  },
	
	  /**
	   * Sets the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   * @param {*} value
	   */
	  setValueForProperty: function setValueForProperty(node, name, value) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, value);
	      } else if (shouldIgnoreValue(propertyInfo, value)) {
	        this.deleteValueForProperty(node, name);
	      } else if (propertyInfo.mustUseAttribute) {
	        var attributeName = propertyInfo.attributeName;
	        var namespace = propertyInfo.attributeNamespace;
	        // `setAttribute` with objects becomes only `[object]` in IE8/9,
	        // ('' + value) makes it output the correct toString()-value.
	        if (namespace) {
	          node.setAttributeNS(namespace, attributeName, '' + value);
	        } else if (propertyInfo.hasBooleanValue || propertyInfo.hasOverloadedBooleanValue && value === true) {
	          node.setAttribute(attributeName, '');
	        } else {
	          node.setAttribute(attributeName, '' + value);
	        }
	      } else {
	        var propName = propertyInfo.propertyName;
	        // Must explicitly cast values for HAS_SIDE_EFFECTS-properties to the
	        // property type before comparing; only `value` does and is string.
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== '' + value) {
	          // Contrary to `setAttribute`, object properties are properly
	          // `toString`ed by IE8/9.
	          node[propName] = value;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      DOMPropertyOperations.setValueForAttribute(node, name, value);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  },
	
	  setValueForAttribute: function setValueForAttribute(node, name, value) {
	    if (!isAttributeNameSafe(name)) {
	      return;
	    }
	    if (value == null) {
	      node.removeAttribute(name);
	    } else {
	      node.setAttribute(name, '' + value);
	    }
	  },
	
	  /**
	   * Deletes the value for a property on a node.
	   *
	   * @param {DOMElement} node
	   * @param {string} name
	   */
	  deleteValueForProperty: function deleteValueForProperty(node, name) {
	    var propertyInfo = DOMProperty.properties.hasOwnProperty(name) ? DOMProperty.properties[name] : null;
	    if (propertyInfo) {
	      var mutationMethod = propertyInfo.mutationMethod;
	      if (mutationMethod) {
	        mutationMethod(node, undefined);
	      } else if (propertyInfo.mustUseAttribute) {
	        node.removeAttribute(propertyInfo.attributeName);
	      } else {
	        var propName = propertyInfo.propertyName;
	        var defaultValue = DOMProperty.getDefaultValueForProperty(node.nodeName, propName);
	        if (!propertyInfo.hasSideEffects || '' + node[propName] !== defaultValue) {
	          node[propName] = defaultValue;
	        }
	      }
	    } else if (DOMProperty.isCustomAttribute(name)) {
	      node.removeAttribute(name);
	    } else if (process.env.NODE_ENV !== 'production') {
	      warnUnknownProperty(name);
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(DOMPropertyOperations, 'DOMPropertyOperations', {
	  setValueForProperty: 'setValueForProperty',
	  setValueForAttribute: 'setValueForAttribute',
	  deleteValueForProperty: 'deleteValueForProperty'
	});
	
	module.exports = DOMPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DOMProperty
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	function checkMask(value, bitmask) {
	  return (value & bitmask) === bitmask;
	}
	
	var DOMPropertyInjection = {
	  /**
	   * Mapping from normalized, camelcased property names to a configuration that
	   * specifies how the associated DOM property should be accessed or rendered.
	   */
	  MUST_USE_ATTRIBUTE: 0x1,
	  MUST_USE_PROPERTY: 0x2,
	  HAS_SIDE_EFFECTS: 0x4,
	  HAS_BOOLEAN_VALUE: 0x8,
	  HAS_NUMERIC_VALUE: 0x10,
	  HAS_POSITIVE_NUMERIC_VALUE: 0x20 | 0x10,
	  HAS_OVERLOADED_BOOLEAN_VALUE: 0x40,
	
	  /**
	   * Inject some specialized knowledge about the DOM. This takes a config object
	   * with the following properties:
	   *
	   * isCustomAttribute: function that given an attribute name will return true
	   * if it can be inserted into the DOM verbatim. Useful for data-* or aria-*
	   * attributes where it's impossible to enumerate all of the possible
	   * attribute names,
	   *
	   * Properties: object mapping DOM property name to one of the
	   * DOMPropertyInjection constants or null. If your attribute isn't in here,
	   * it won't get written to the DOM.
	   *
	   * DOMAttributeNames: object mapping React attribute name to the DOM
	   * attribute name. Attribute names not specified use the **lowercase**
	   * normalized name.
	   *
	   * DOMAttributeNamespaces: object mapping React attribute name to the DOM
	   * attribute namespace URL. (Attribute names not specified use no namespace.)
	   *
	   * DOMPropertyNames: similar to DOMAttributeNames but for DOM properties.
	   * Property names not specified use the normalized name.
	   *
	   * DOMMutationMethods: Properties that require special mutation methods. If
	   * `value` is undefined, the mutation method should unset the property.
	   *
	   * @param {object} domPropertyConfig the config as described above.
	   */
	  injectDOMPropertyConfig: function injectDOMPropertyConfig(domPropertyConfig) {
	    var Injection = DOMPropertyInjection;
	    var Properties = domPropertyConfig.Properties || {};
	    var DOMAttributeNamespaces = domPropertyConfig.DOMAttributeNamespaces || {};
	    var DOMAttributeNames = domPropertyConfig.DOMAttributeNames || {};
	    var DOMPropertyNames = domPropertyConfig.DOMPropertyNames || {};
	    var DOMMutationMethods = domPropertyConfig.DOMMutationMethods || {};
	
	    if (domPropertyConfig.isCustomAttribute) {
	      DOMProperty._isCustomAttributeFunctions.push(domPropertyConfig.isCustomAttribute);
	    }
	
	    for (var propName in Properties) {
	      !!DOMProperty.properties.hasOwnProperty(propName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'injectDOMPropertyConfig(...): You\'re trying to inject DOM property ' + '\'%s\' which has already been injected. You may be accidentally ' + 'injecting the same DOM property config twice, or you may be ' + 'injecting two configs that have conflicting property names.', propName) : invariant(false) : undefined;
	
	      var lowerCased = propName.toLowerCase();
	      var propConfig = Properties[propName];
	
	      var propertyInfo = {
	        attributeName: lowerCased,
	        attributeNamespace: null,
	        propertyName: propName,
	        mutationMethod: null,
	
	        mustUseAttribute: checkMask(propConfig, Injection.MUST_USE_ATTRIBUTE),
	        mustUseProperty: checkMask(propConfig, Injection.MUST_USE_PROPERTY),
	        hasSideEffects: checkMask(propConfig, Injection.HAS_SIDE_EFFECTS),
	        hasBooleanValue: checkMask(propConfig, Injection.HAS_BOOLEAN_VALUE),
	        hasNumericValue: checkMask(propConfig, Injection.HAS_NUMERIC_VALUE),
	        hasPositiveNumericValue: checkMask(propConfig, Injection.HAS_POSITIVE_NUMERIC_VALUE),
	        hasOverloadedBooleanValue: checkMask(propConfig, Injection.HAS_OVERLOADED_BOOLEAN_VALUE)
	      };
	
	      !(!propertyInfo.mustUseAttribute || !propertyInfo.mustUseProperty) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Cannot require using both attribute and property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.mustUseProperty || !propertyInfo.hasSideEffects) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Properties that have side effects must use property: %s', propName) : invariant(false) : undefined;
	      !(propertyInfo.hasBooleanValue + propertyInfo.hasNumericValue + propertyInfo.hasOverloadedBooleanValue <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'DOMProperty: Value can be one of boolean, overloaded boolean, or ' + 'numeric value, but not a combination: %s', propName) : invariant(false) : undefined;
	
	      if (process.env.NODE_ENV !== 'production') {
	        DOMProperty.getPossibleStandardName[lowerCased] = propName;
	      }
	
	      if (DOMAttributeNames.hasOwnProperty(propName)) {
	        var attributeName = DOMAttributeNames[propName];
	        propertyInfo.attributeName = attributeName;
	        if (process.env.NODE_ENV !== 'production') {
	          DOMProperty.getPossibleStandardName[attributeName] = propName;
	        }
	      }
	
	      if (DOMAttributeNamespaces.hasOwnProperty(propName)) {
	        propertyInfo.attributeNamespace = DOMAttributeNamespaces[propName];
	      }
	
	      if (DOMPropertyNames.hasOwnProperty(propName)) {
	        propertyInfo.propertyName = DOMPropertyNames[propName];
	      }
	
	      if (DOMMutationMethods.hasOwnProperty(propName)) {
	        propertyInfo.mutationMethod = DOMMutationMethods[propName];
	      }
	
	      DOMProperty.properties[propName] = propertyInfo;
	    }
	  }
	};
	var defaultValueCache = {};
	
	/**
	 * DOMProperty exports lookup objects that can be used like functions:
	 *
	 *   > DOMProperty.isValid['id']
	 *   true
	 *   > DOMProperty.isValid['foobar']
	 *   undefined
	 *
	 * Although this may be confusing, it performs better in general.
	 *
	 * @see http://jsperf.com/key-exists
	 * @see http://jsperf.com/key-missing
	 */
	var DOMProperty = {
	
	  ID_ATTRIBUTE_NAME: 'data-reactid',
	
	  /**
	   * Map from property "standard name" to an object with info about how to set
	   * the property in the DOM. Each object contains:
	   *
	   * attributeName:
	   *   Used when rendering markup or with `*Attribute()`.
	   * attributeNamespace
	   * propertyName:
	   *   Used on DOM node instances. (This includes properties that mutate due to
	   *   external factors.)
	   * mutationMethod:
	   *   If non-null, used instead of the property or `setAttribute()` after
	   *   initial render.
	   * mustUseAttribute:
	   *   Whether the property must be accessed and mutated using `*Attribute()`.
	   *   (This includes anything that fails `<propName> in <element>`.)
	   * mustUseProperty:
	   *   Whether the property must be accessed and mutated as an object property.
	   * hasSideEffects:
	   *   Whether or not setting a value causes side effects such as triggering
	   *   resources to be loaded or text selection changes. If true, we read from
	   *   the DOM before updating to ensure that the value is only set if it has
	   *   changed.
	   * hasBooleanValue:
	   *   Whether the property should be removed when set to a falsey value.
	   * hasNumericValue:
	   *   Whether the property must be numeric or parse as a numeric and should be
	   *   removed when set to a falsey value.
	   * hasPositiveNumericValue:
	   *   Whether the property must be positive numeric or parse as a positive
	   *   numeric and should be removed when set to a falsey value.
	   * hasOverloadedBooleanValue:
	   *   Whether the property can be used as a flag as well as with a value.
	   *   Removed when strictly equal to false; present without a value when
	   *   strictly equal to true; present with a value otherwise.
	   */
	  properties: {},
	
	  /**
	   * Mapping from lowercase property names to the properly cased version, used
	   * to warn in the case of missing properties. Available only in __DEV__.
	   * @type {Object}
	   */
	  getPossibleStandardName: process.env.NODE_ENV !== 'production' ? {} : null,
	
	  /**
	   * All of the isCustomAttribute() functions that have been injected.
	   */
	  _isCustomAttributeFunctions: [],
	
	  /**
	   * Checks whether a property name is a custom attribute.
	   * @method
	   */
	  isCustomAttribute: function isCustomAttribute(attributeName) {
	    for (var i = 0; i < DOMProperty._isCustomAttributeFunctions.length; i++) {
	      var isCustomAttributeFn = DOMProperty._isCustomAttributeFunctions[i];
	      if (isCustomAttributeFn(attributeName)) {
	        return true;
	      }
	    }
	    return false;
	  },
	
	  /**
	   * Returns the default property value for a DOM property (i.e., not an
	   * attribute). Most default values are '' or false, but not all. Worse yet,
	   * some (in particular, `type`) vary depending on the type of element.
	   *
	   * TODO: Is it better to grab all the possible properties when creating an
	   * element to avoid having to create the same element twice?
	   */
	  getDefaultValueForProperty: function getDefaultValueForProperty(nodeName, prop) {
	    var nodeDefaults = defaultValueCache[nodeName];
	    var testElement;
	    if (!nodeDefaults) {
	      defaultValueCache[nodeName] = nodeDefaults = {};
	    }
	    if (!(prop in nodeDefaults)) {
	      testElement = document.createElement(nodeName);
	      nodeDefaults[prop] = testElement[prop];
	    }
	    return nodeDefaults[prop];
	  },
	
	  injection: DOMPropertyInjection
	};
	
	module.exports = DOMProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule quoteAttributeValueForBrowser
	 */
	
	'use strict';
	
	var escapeTextContentForBrowser = __webpack_require__(21);
	
	/**
	 * Escapes attribute value to prevent scripting attacks.
	 *
	 * @param {*} value Value to escape.
	 * @return {string} An escaped string.
	 */
	function quoteAttributeValueForBrowser(value) {
	  return '"' + escapeTextContentForBrowser(value) + '"';
	}
	
	module.exports = quoteAttributeValueForBrowser;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule warning
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format) {
	    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	      args[_key - 2] = arguments[_key];
	    }
	
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentBrowserEnvironment
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactMount = __webpack_require__(28);
	
	/**
	 * Abstracts away all functionality of the reconciler that requires knowledge of
	 * the browser context. TODO: These callers should be refactored to avoid the
	 * need for this injection.
	 */
	var ReactComponentBrowserEnvironment = {
	
	  processChildrenUpdates: ReactDOMIDOperations.dangerouslyProcessChildrenUpdates,
	
	  replaceNodeWithMarkupByID: ReactDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,
	
	  /**
	   * If a particular environment requires that some resources be cleaned up,
	   * specify this in the injected Mixin. In the DOM, we would likely want to
	   * purge any cached node ID lookups.
	   *
	   * @private
	   */
	  unmountIDFromEnvironment: function unmountIDFromEnvironment(rootNodeID) {
	    ReactMount.purgeID(rootNodeID);
	  }
	
	};
	
	module.exports = ReactComponentBrowserEnvironment;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMIDOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var DOMChildrenOperations = __webpack_require__(7);
	var DOMPropertyOperations = __webpack_require__(22);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Errors for properties that should not be updated with `updatePropertyByID()`.
	 *
	 * @type {object}
	 * @private
	 */
	var INVALID_PROPERTY_ERRORS = {
	  dangerouslySetInnerHTML: '`dangerouslySetInnerHTML` must be set using `updateInnerHTMLByID()`.',
	  style: '`style` must be set using `updateStylesByID()`.'
	};
	
	/**
	 * Operations used to process updates to DOM nodes.
	 */
	var ReactDOMIDOperations = {
	
	  /**
	   * Updates a DOM node with new property values. This should only be used to
	   * update DOM properties in `DOMProperty`.
	   *
	   * @param {string} id ID of the node to update.
	   * @param {string} name A valid property name, see `DOMProperty`.
	   * @param {*} value New value of the property.
	   * @internal
	   */
	  updatePropertyByID: function updatePropertyByID(id, name, value) {
	    var node = ReactMount.getNode(id);
	    !!INVALID_PROPERTY_ERRORS.hasOwnProperty(name) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'updatePropertyByID(...): %s', INVALID_PROPERTY_ERRORS[name]) : invariant(false) : undefined;
	
	    // If we're updating to null or undefined, we should remove the property
	    // from the DOM node instead of inadvertantly setting to a string. This
	    // brings us in line with the same behavior we have on initial render.
	    if (value != null) {
	      DOMPropertyOperations.setValueForProperty(node, name, value);
	    } else {
	      DOMPropertyOperations.deleteValueForProperty(node, name);
	    }
	  },
	
	  /**
	   * Replaces a DOM node that exists in the document with markup.
	   *
	   * @param {string} id ID of child to be replaced.
	   * @param {string} markup Dangerous markup to inject in place of child.
	   * @internal
	   * @see {Danger.dangerouslyReplaceNodeWithMarkup}
	   */
	  dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, markup) {
	    var node = ReactMount.getNode(id);
	    DOMChildrenOperations.dangerouslyReplaceNodeWithMarkup(node, markup);
	  },
	
	  /**
	   * Updates a component's children by processing a series of updates.
	   *
	   * @param {array<object>} updates List of update configurations.
	   * @param {array<string>} markup List of markup strings.
	   * @internal
	   */
	  dangerouslyProcessChildrenUpdates: function dangerouslyProcessChildrenUpdates(updates, markup) {
	    for (var i = 0; i < updates.length; i++) {
	      updates[i].parentNode = ReactMount.getNode(updates[i].parentID);
	    }
	    DOMChildrenOperations.processUpdates(updates, markup);
	  }
	};
	
	ReactPerf.measureMethods(ReactDOMIDOperations, 'ReactDOMIDOperations', {
	  dangerouslyReplaceNodeWithMarkupByID: 'dangerouslyReplaceNodeWithMarkupByID',
	  dangerouslyProcessChildrenUpdates: 'dangerouslyProcessChildrenUpdates'
	});
	
	module.exports = ReactDOMIDOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMount
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var containsNode = __webpack_require__(59);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	var setInnerHTML = __webpack_require__(19);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);
	
	var ATTR_NAME = DOMProperty.ID_ATTRIBUTE_NAME;
	var nodeCache = {};
	
	var ELEMENT_NODE_TYPE = 1;
	var DOC_NODE_TYPE = 9;
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	var ownerDocumentContextKey = '__ReactMount_ownerDocument$' + Math.random().toString(36).slice(2);
	
	/** Mapping from reactRootID to React component instance. */
	var instancesByReactRootID = {};
	
	/** Mapping from reactRootID to `container` nodes. */
	var containersByReactRootID = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  /** __DEV__-only mapping from reactRootID to root elements. */
	  var rootElementsByReactRootID = {};
	}
	
	// Used to store breadth-first search state in findComponentRoot.
	var findComponentRootReusableArray = [];
	
	/**
	 * Finds the index of the first character
	 * that's not common between the two given strings.
	 *
	 * @return {number} the index of the character where the strings diverge
	 */
	function firstDifferenceIndex(string1, string2) {
	  var minLen = Math.min(string1.length, string2.length);
	  for (var i = 0; i < minLen; i++) {
	    if (string1.charAt(i) !== string2.charAt(i)) {
	      return i;
	    }
	  }
	  return string1.length === string2.length ? -1 : minLen;
	}
	
	/**
	 * @param {DOMElement|DOMDocument} container DOM element that may contain
	 * a React component
	 * @return {?*} DOM element that may have the reactRoot ID, or null.
	 */
	function getReactRootElementInContainer(container) {
	  if (!container) {
	    return null;
	  }
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    return container.documentElement;
	  } else {
	    return container.firstChild;
	  }
	}
	
	/**
	 * @param {DOMElement} container DOM element that may contain a React component.
	 * @return {?string} A "reactRoot" ID, if a React component is rendered.
	 */
	function getReactRootID(container) {
	  var rootElement = getReactRootElementInContainer(container);
	  return rootElement && ReactMount.getID(rootElement);
	}
	
	/**
	 * Accessing node[ATTR_NAME] or calling getAttribute(ATTR_NAME) on a form
	 * element can return its control whose name or ID equals ATTR_NAME. All
	 * DOM nodes support `getAttributeNode` but this can also get called on
	 * other objects so just return '' if we're given something other than a
	 * DOM node (such as window).
	 *
	 * @param {?DOMElement|DOMWindow|DOMDocument|DOMTextNode} node DOM node.
	 * @return {string} ID of the supplied `domNode`.
	 */
	function getID(node) {
	  var id = internalGetID(node);
	  if (id) {
	    if (nodeCache.hasOwnProperty(id)) {
	      var cached = nodeCache[id];
	      if (cached !== node) {
	        !!isValid(cached, id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Two valid but unequal nodes with the same `%s`: %s', ATTR_NAME, id) : invariant(false) : undefined;
	
	        nodeCache[id] = node;
	      }
	    } else {
	      nodeCache[id] = node;
	    }
	  }
	
	  return id;
	}
	
	function internalGetID(node) {
	  // If node is something like a window, document, or text node, none of
	  // which support attributes or a .getAttribute method, gracefully return
	  // the empty string, as if the attribute were missing.
	  return node && node.getAttribute && node.getAttribute(ATTR_NAME) || '';
	}
	
	/**
	 * Sets the React-specific ID of the given node.
	 *
	 * @param {DOMElement} node The DOM node whose ID will be set.
	 * @param {string} id The value of the ID attribute.
	 */
	function setID(node, id) {
	  var oldID = internalGetID(node);
	  if (oldID !== id) {
	    delete nodeCache[oldID];
	  }
	  node.setAttribute(ATTR_NAME, id);
	  nodeCache[id] = node;
	}
	
	/**
	 * Finds the node with the supplied React-generated DOM ID.
	 *
	 * @param {string} id A React-generated DOM ID.
	 * @return {DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNode(id) {
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * Finds the node with the supplied public React instance.
	 *
	 * @param {*} instance A public React instance.
	 * @return {?DOMElement} DOM node with the suppled `id`.
	 * @internal
	 */
	function getNodeFromInstance(instance) {
	  var id = ReactInstanceMap.get(instance)._rootNodeID;
	  if (ReactEmptyComponentRegistry.isNullComponentID(id)) {
	    return null;
	  }
	  if (!nodeCache.hasOwnProperty(id) || !isValid(nodeCache[id], id)) {
	    nodeCache[id] = ReactMount.findReactNodeByID(id);
	  }
	  return nodeCache[id];
	}
	
	/**
	 * A node is "valid" if it is contained by a currently mounted container.
	 *
	 * This means that the node does not have to be contained by a document in
	 * order to be considered valid.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @param {string} id The expected ID of the node.
	 * @return {boolean} Whether the node is contained by a mounted container.
	 */
	function isValid(node, id) {
	  if (node) {
	    !(internalGetID(node) === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactMount: Unexpected modification of `%s`', ATTR_NAME) : invariant(false) : undefined;
	
	    var container = ReactMount.findReactContainerForID(id);
	    if (container && containsNode(container, node)) {
	      return true;
	    }
	  }
	
	  return false;
	}
	
	/**
	 * Causes the cache to forget about one React-specific ID.
	 *
	 * @param {string} id The ID to forget.
	 */
	function purgeID(id) {
	  delete nodeCache[id];
	}
	
	var deepestNodeSoFar = null;
	function findDeepestCachedAncestorImpl(ancestorID) {
	  var ancestor = nodeCache[ancestorID];
	  if (ancestor && isValid(ancestor, ancestorID)) {
	    deepestNodeSoFar = ancestor;
	  } else {
	    // This node isn't populated in the cache, so presumably none of its
	    // descendants are. Break out of the loop.
	    return false;
	  }
	}
	
	/**
	 * Return the deepest cached node whose ID is a prefix of `targetID`.
	 */
	function findDeepestCachedAncestor(targetID) {
	  deepestNodeSoFar = null;
	  ReactInstanceHandles.traverseAncestors(targetID, findDeepestCachedAncestorImpl);
	
	  var foundNode = deepestNodeSoFar;
	  deepestNodeSoFar = null;
	  return foundNode;
	}
	
	/**
	 * Mounts this component and inserts it into the DOM.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {ReactReconcileTransaction} transaction
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function mountComponentIntoNode(componentInstance, rootID, container, transaction, shouldReuseMarkup, context) {
	  if (ReactDOMFeatureFlags.useCreateElement) {
	    context = assign({}, context);
	    if (container.nodeType === DOC_NODE_TYPE) {
	      context[ownerDocumentContextKey] = container;
	    } else {
	      context[ownerDocumentContextKey] = container.ownerDocument;
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (context === emptyObject) {
	      context = {};
	    }
	    var tag = container.nodeName.toLowerCase();
	    context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(null, tag, null);
	  }
	  var markup = ReactReconciler.mountComponent(componentInstance, rootID, transaction, context);
	  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
	  ReactMount._mountImageIntoNode(markup, container, shouldReuseMarkup, transaction);
	}
	
	/**
	 * Batched mount.
	 *
	 * @param {ReactComponent} componentInstance The instance to mount.
	 * @param {string} rootID DOM ID of the root node.
	 * @param {DOMElement} container DOM element to mount into.
	 * @param {boolean} shouldReuseMarkup If true, do not insert markup
	 */
	function batchedMountComponentIntoNode(componentInstance, rootID, container, shouldReuseMarkup, context) {
	  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled(
	  /* forceHTML */shouldReuseMarkup);
	  transaction.perform(mountComponentIntoNode, null, componentInstance, rootID, container, transaction, shouldReuseMarkup, context);
	  ReactUpdates.ReactReconcileTransaction.release(transaction);
	}
	
	/**
	 * Unmounts a component and removes it from the DOM.
	 *
	 * @param {ReactComponent} instance React component instance.
	 * @param {DOMElement} container DOM element to unmount from.
	 * @final
	 * @internal
	 * @see {ReactMount.unmountComponentAtNode}
	 */
	function unmountComponentFromNode(instance, container) {
	  ReactReconciler.unmountComponent(instance);
	
	  if (container.nodeType === DOC_NODE_TYPE) {
	    container = container.documentElement;
	  }
	
	  // http://jsperf.com/emptying-a-node
	  while (container.lastChild) {
	    container.removeChild(container.lastChild);
	  }
	}
	
	/**
	 * True if the supplied DOM node has a direct React-rendered child that is
	 * not a React root element. Useful for warning in `render`,
	 * `unmountComponentAtNode`, etc.
	 *
	 * @param {?DOMElement} node The candidate DOM node.
	 * @return {boolean} True if the DOM element contains a direct child that was
	 * rendered by React but is not a root element.
	 * @internal
	 */
	function hasNonRootReactChild(node) {
	  var reactRootID = getReactRootID(node);
	  return reactRootID ? reactRootID !== ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID) : false;
	}
	
	/**
	 * Returns the first (deepest) ancestor of a node which is rendered by this copy
	 * of React.
	 */
	function findFirstReactDOMImpl(node) {
	  // This node might be from another React instance, so we make sure not to
	  // examine the node cache here
	  for (; node && node.parentNode !== node; node = node.parentNode) {
	    if (node.nodeType !== 1) {
	      // Not a DOMElement, therefore not a React component
	      continue;
	    }
	    var nodeID = internalGetID(node);
	    if (!nodeID) {
	      continue;
	    }
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	
	    // If containersByReactRootID contains the container we find by crawling up
	    // the tree, we know that this instance of React rendered the node.
	    // nb. isValid's strategy (with containsNode) does not work because render
	    // trees may be nested and we don't want a false positive in that case.
	    var current = node;
	    var lastID;
	    do {
	      lastID = internalGetID(current);
	      current = current.parentNode;
	      if (current == null) {
	        // The passed-in node has been detached from the container it was
	        // originally rendered into.
	        return null;
	      }
	    } while (lastID !== reactRootID);
	
	    if (current === containersByReactRootID[reactRootID]) {
	      return node;
	    }
	  }
	  return null;
	}
	
	/**
	 * Temporary (?) hack so that we can store all top-level pending updates on
	 * composites instead of having to worry about different types of components
	 * here.
	 */
	var TopLevelWrapper = function TopLevelWrapper() {};
	TopLevelWrapper.prototype.isReactComponent = {};
	if (process.env.NODE_ENV !== 'production') {
	  TopLevelWrapper.displayName = 'TopLevelWrapper';
	}
	TopLevelWrapper.prototype.render = function () {
	  // this.props is actually a ReactElement
	  return this.props;
	};
	
	/**
	 * Mounting is the process of initializing a React component by creating its
	 * representative DOM elements and inserting them into a supplied `container`.
	 * Any prior content inside `container` is destroyed in the process.
	 *
	 *   ReactMount.render(
	 *     component,
	 *     document.getElementById('container')
	 *   );
	 *
	 *   <div id="container">                   <-- Supplied `container`.
	 *     <div data-reactid=".3">              <-- Rendered reactRoot of React
	 *       // ...                                 component.
	 *     </div>
	 *   </div>
	 *
	 * Inside of `container`, the first element rendered is the "reactRoot".
	 */
	var ReactMount = {
	
	  TopLevelWrapper: TopLevelWrapper,
	
	  /** Exposed for debugging purposes **/
	  _instancesByReactRootID: instancesByReactRootID,
	
	  /**
	   * This is a hook provided to support rendering React components while
	   * ensuring that the apparent scroll position of its `container` does not
	   * change.
	   *
	   * @param {DOMElement} container The `container` being rendered into.
	   * @param {function} renderCallback This must be called once to do the render.
	   */
	  scrollMonitor: function scrollMonitor(container, renderCallback) {
	    renderCallback();
	  },
	
	  /**
	   * Take a component that's already mounted into the DOM and replace its props
	   * @param {ReactComponent} prevComponent component instance already in the DOM
	   * @param {ReactElement} nextElement component instance to render
	   * @param {DOMElement} container container to render into
	   * @param {?function} callback function triggered on completion
	   */
	  _updateRootComponent: function _updateRootComponent(prevComponent, nextElement, container, callback) {
	    ReactMount.scrollMonitor(container, function () {
	      ReactUpdateQueue.enqueueElementInternal(prevComponent, nextElement);
	      if (callback) {
	        ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
	      }
	    });
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[getReactRootID(container)] = getReactRootElementInContainer(container);
	    }
	
	    return prevComponent;
	  },
	
	  /**
	   * Register a component into the instance map and starts scroll value
	   * monitoring
	   * @param {ReactComponent} nextComponent component instance to render
	   * @param {DOMElement} container container to render into
	   * @return {string} reactRoot ID prefix
	   */
	  _registerComponent: function _registerComponent(nextComponent, container) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '_registerComponent(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    ReactBrowserEventEmitter.ensureScrollValueMonitoring();
	
	    var reactRootID = ReactMount.registerContainer(container);
	    instancesByReactRootID[reactRootID] = nextComponent;
	    return reactRootID;
	  },
	
	  /**
	   * Render a new component into the DOM.
	   * @param {ReactElement} nextElement element to render
	   * @param {DOMElement} container container to render into
	   * @param {boolean} shouldReuseMarkup if we should skip the markup insertion
	   * @return {ReactComponent} nextComponent
	   */
	  _renderNewRootComponent: function _renderNewRootComponent(nextElement, container, shouldReuseMarkup, context) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case.
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '_renderNewRootComponent(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from ' + 'render is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    var componentInstance = instantiateReactComponent(nextElement, null);
	    var reactRootID = ReactMount._registerComponent(componentInstance, container);
	
	    // The initial render is synchronous but any updates that happen during
	    // rendering, in componentWillMount or componentDidMount, will be batched
	    // according to the current batching strategy.
	
	    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, componentInstance, reactRootID, container, shouldReuseMarkup, context);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Record the root element in case it later gets transplanted.
	      rootElementsByReactRootID[reactRootID] = getReactRootElementInContainer(container);
	    }
	
	    return componentInstance;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactComponent} parentComponent The conceptual parent of this render tree.
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  renderSubtreeIntoContainer: function renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !(parentComponent != null && parentComponent._reactInternalInstance != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'parentComponent must be a valid React Component') : invariant(false) : undefined;
	    return ReactMount._renderSubtreeIntoContainer(parentComponent, nextElement, container, callback);
	  },
	
	  _renderSubtreeIntoContainer: function _renderSubtreeIntoContainer(parentComponent, nextElement, container, callback) {
	    !ReactElement.isValidElement(nextElement) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOM.render(): Invalid component element.%s', typeof nextElement === 'string' ? ' Instead of passing an element string, make sure to instantiate ' + 'it by passing it to React.createElement.' : typeof nextElement === 'function' ? ' Instead of passing a component class, make sure to instantiate ' + 'it by passing it to React.createElement.' :
	    // Check if it quacks like an element
	    nextElement != null && nextElement.props !== undefined ? ' This may be caused by unintentionally loading two independent ' + 'copies of React.' : '') : invariant(false) : undefined;
	
	    process.env.NODE_ENV !== 'production' ? warning(!container || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : undefined;
	
	    var nextWrappedElement = new ReactElement(TopLevelWrapper, null, null, null, null, null, nextElement);
	
	    var prevComponent = instancesByReactRootID[getReactRootID(container)];
	
	    if (prevComponent) {
	      var prevWrappedElement = prevComponent._currentElement;
	      var prevElement = prevWrappedElement.props;
	      if (shouldUpdateReactComponent(prevElement, nextElement)) {
	        var publicInst = prevComponent._renderedComponent.getPublicInstance();
	        var updatedCallback = callback && function () {
	          callback.call(publicInst);
	        };
	        ReactMount._updateRootComponent(prevComponent, nextWrappedElement, container, updatedCallback);
	        return publicInst;
	      } else {
	        ReactMount.unmountComponentAtNode(container);
	      }
	    }
	
	    var reactRootElement = getReactRootElementInContainer(container);
	    var containerHasReactMarkup = reactRootElement && !!internalGetID(reactRootElement);
	    var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : undefined;
	
	      if (!containerHasReactMarkup || reactRootElement.nextSibling) {
	        var rootElementSibling = reactRootElement;
	        while (rootElementSibling) {
	          if (internalGetID(rootElementSibling)) {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.') : undefined;
	            break;
	          }
	          rootElementSibling = rootElementSibling.nextSibling;
	        }
	      }
	    }
	
	    var shouldReuseMarkup = containerHasReactMarkup && !prevComponent && !containerHasNonRootReactChild;
	    var component = ReactMount._renderNewRootComponent(nextWrappedElement, container, shouldReuseMarkup, parentComponent != null ? parentComponent._reactInternalInstance._processChildContext(parentComponent._reactInternalInstance._context) : emptyObject)._renderedComponent.getPublicInstance();
	    if (callback) {
	      callback.call(component);
	    }
	    return component;
	  },
	
	  /**
	   * Renders a React component into the DOM in the supplied `container`.
	   *
	   * If the React component was previously rendered into `container`, this will
	   * perform an update on it and only mutate the DOM as necessary to reflect the
	   * latest React component.
	   *
	   * @param {ReactElement} nextElement Component element to render.
	   * @param {DOMElement} container DOM element to render into.
	   * @param {?function} callback function triggered on completion
	   * @return {ReactComponent} Component instance rendered in `container`.
	   */
	  render: function render(nextElement, container, callback) {
	    return ReactMount._renderSubtreeIntoContainer(null, nextElement, container, callback);
	  },
	
	  /**
	   * Registers a container node into which React components will be rendered.
	   * This also creates the "reactRoot" ID that will be assigned to the element
	   * rendered within.
	   *
	   * @param {DOMElement} container DOM element to register as a container.
	   * @return {string} The "reactRoot" ID of elements rendered within.
	   */
	  registerContainer: function registerContainer(container) {
	    var reactRootID = getReactRootID(container);
	    if (reactRootID) {
	      // If one exists, make sure it is a valid "reactRoot" ID.
	      reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(reactRootID);
	    }
	    if (!reactRootID) {
	      // No valid "reactRoot" ID found, create one.
	      reactRootID = ReactInstanceHandles.createReactRootID();
	    }
	    containersByReactRootID[reactRootID] = container;
	    return reactRootID;
	  },
	
	  /**
	   * Unmounts and destroys the React component rendered in the `container`.
	   *
	   * @param {DOMElement} container DOM element containing a React component.
	   * @return {boolean} True if a component was found in and unmounted from
	   *                   `container`
	   */
	  unmountComponentAtNode: function unmountComponentAtNode(container) {
	    // Various parts of our code (such as ReactCompositeComponent's
	    // _renderValidatedComponent) assume that calls to render aren't nested;
	    // verify that that's the case. (Strictly speaking, unmounting won't cause a
	    // render but we still don't expect to be in a render call here.)
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, 'unmountComponentAtNode(): Render methods should be a pure function ' + 'of props and state; triggering nested component updates from render ' + 'is not allowed. If necessary, trigger nested updates in ' + 'componentDidUpdate. Check the render method of %s.', ReactCurrentOwner.current && ReactCurrentOwner.current.getName() || 'ReactCompositeComponent') : undefined;
	
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : invariant(false) : undefined;
	
	    var reactRootID = getReactRootID(container);
	    var component = instancesByReactRootID[reactRootID];
	    if (!component) {
	      // Check if the node being unmounted was rendered by React, but isn't a
	      // root node.
	      var containerHasNonRootReactChild = hasNonRootReactChild(container);
	
	      // Check if the container itself is a React root node.
	      var containerID = internalGetID(container);
	      var isContainerReactRoot = containerID && containerID === ReactInstanceHandles.getReactRootIDFromNodeID(containerID);
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(!containerHasNonRootReactChild, 'unmountComponentAtNode(): The node you\'re attempting to unmount ' + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : undefined;
	      }
	
	      return false;
	    }
	    ReactUpdates.batchedUpdates(unmountComponentFromNode, component, container);
	    delete instancesByReactRootID[reactRootID];
	    delete containersByReactRootID[reactRootID];
	    if (process.env.NODE_ENV !== 'production') {
	      delete rootElementsByReactRootID[reactRootID];
	    }
	    return true;
	  },
	
	  /**
	   * Finds the container DOM element that contains React component to which the
	   * supplied DOM `id` belongs.
	   *
	   * @param {string} id The ID of an element rendered by a React component.
	   * @return {?DOMElement} DOM element that contains the `id`.
	   */
	  findReactContainerForID: function findReactContainerForID(id) {
	    var reactRootID = ReactInstanceHandles.getReactRootIDFromNodeID(id);
	    var container = containersByReactRootID[reactRootID];
	
	    if (process.env.NODE_ENV !== 'production') {
	      var rootElement = rootElementsByReactRootID[reactRootID];
	      if (rootElement && rootElement.parentNode !== container) {
	        process.env.NODE_ENV !== 'production' ? warning(
	        // Call internalGetID here because getID calls isValid which calls
	        // findReactContainerForID (this function).
	        internalGetID(rootElement) === reactRootID, 'ReactMount: Root element ID differed from reactRootID.') : undefined;
	        var containerChild = container.firstChild;
	        if (containerChild && reactRootID === internalGetID(containerChild)) {
	          // If the container has a new child with the same ID as the old
	          // root element, then rootElementsByReactRootID[reactRootID] is
	          // just stale and needs to be updated. The case that deserves a
	          // warning is when the container is empty.
	          rootElementsByReactRootID[reactRootID] = containerChild;
	        } else {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'ReactMount: Root element has been removed from its original ' + 'container. New container: %s', rootElement.parentNode) : undefined;
	        }
	      }
	    }
	
	    return container;
	  },
	
	  /**
	   * Finds an element rendered by React with the supplied ID.
	   *
	   * @param {string} id ID of a DOM node in the React component.
	   * @return {DOMElement} Root DOM node of the React component.
	   */
	  findReactNodeByID: function findReactNodeByID(id) {
	    var reactRoot = ReactMount.findReactContainerForID(id);
	    return ReactMount.findComponentRoot(reactRoot, id);
	  },
	
	  /**
	   * Traverses up the ancestors of the supplied node to find a node that is a
	   * DOM representation of a React component rendered by this copy of React.
	   *
	   * @param {*} node
	   * @return {?DOMEventTarget}
	   * @internal
	   */
	  getFirstReactDOM: function getFirstReactDOM(node) {
	    return findFirstReactDOMImpl(node);
	  },
	
	  /**
	   * Finds a node with the supplied `targetID` inside of the supplied
	   * `ancestorNode`.  Exploits the ID naming scheme to perform the search
	   * quickly.
	   *
	   * @param {DOMEventTarget} ancestorNode Search from this root.
	   * @pararm {string} targetID ID of the DOM representation of the component.
	   * @return {DOMEventTarget} DOM node with the supplied `targetID`.
	   * @internal
	   */
	  findComponentRoot: function findComponentRoot(ancestorNode, targetID) {
	    var firstChildren = findComponentRootReusableArray;
	    var childIndex = 0;
	
	    var deepestAncestor = findDeepestCachedAncestor(targetID) || ancestorNode;
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw on the next line; give an early warning
	      process.env.NODE_ENV !== 'production' ? warning(deepestAncestor != null, 'React can\'t find the root component node for data-reactid value ' + '`%s`. If you\'re seeing this message, it probably means that ' + 'you\'ve loaded two copies of React on the page. At this time, only ' + 'a single copy of React can be loaded at a time.', targetID) : undefined;
	    }
	
	    firstChildren[0] = deepestAncestor.firstChild;
	    firstChildren.length = 1;
	
	    while (childIndex < firstChildren.length) {
	      var child = firstChildren[childIndex++];
	      var targetChild;
	
	      while (child) {
	        var childID = ReactMount.getID(child);
	        if (childID) {
	          // Even if we find the node we're looking for, we finish looping
	          // through its siblings to ensure they're cached so that we don't have
	          // to revisit this node again. Otherwise, we make n^2 calls to getID
	          // when visiting the many children of a single node in order.
	
	          if (targetID === childID) {
	            targetChild = child;
	          } else if (ReactInstanceHandles.isAncestorIDOf(childID, targetID)) {
	            // If we find a child whose ID is an ancestor of the given ID,
	            // then we can be sure that we only want to search the subtree
	            // rooted at this child, so we can throw out the rest of the
	            // search state.
	            firstChildren.length = childIndex = 0;
	            firstChildren.push(child.firstChild);
	          }
	        } else {
	          // If this child had no ID, then there's a chance that it was
	          // injected automatically by the browser, as when a `<table>`
	          // element sprouts an extra `<tbody>` child as a side effect of
	          // `.innerHTML` parsing. Optimistically continue down this
	          // branch, but not before examining the other siblings.
	          firstChildren.push(child.firstChild);
	        }
	
	        child = child.nextSibling;
	      }
	
	      if (targetChild) {
	        // Emptying firstChildren/findComponentRootReusableArray is
	        // not necessary for correctness, but it helps the GC reclaim
	        // any nodes that were left at the end of the search.
	        firstChildren.length = 0;
	
	        return targetChild;
	      }
	    }
	
	    firstChildren.length = 0;
	
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findComponentRoot(..., %s): Unable to find element. This probably ' + 'means the DOM was unexpectedly mutated (e.g., by the browser), ' + 'usually due to forgetting a <tbody> when using tables, nesting tags ' + 'like <form>, <p>, or <a>, or using non-SVG elements in an <svg> ' + 'parent. ' + 'Try inspecting the child nodes of the element with React ID `%s`.', targetID, ReactMount.getID(ancestorNode)) : invariant(false) : undefined;
	  },
	
	  _mountImageIntoNode: function _mountImageIntoNode(markup, container, shouldReuseMarkup, transaction) {
	    !(container && (container.nodeType === ELEMENT_NODE_TYPE || container.nodeType === DOC_NODE_TYPE || container.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mountComponentIntoNode(...): Target container is not valid.') : invariant(false) : undefined;
	
	    if (shouldReuseMarkup) {
	      var rootElement = getReactRootElementInContainer(container);
	      if (ReactMarkupChecksum.canReuseMarkup(markup, rootElement)) {
	        return;
	      } else {
	        var checksum = rootElement.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	        rootElement.removeAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	
	        var rootMarkup = rootElement.outerHTML;
	        rootElement.setAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME, checksum);
	
	        var normalizedMarkup = markup;
	        if (process.env.NODE_ENV !== 'production') {
	          // because rootMarkup is retrieved from the DOM, various normalizations
	          // will have occurred which will not be present in `markup`. Here,
	          // insert markup into a <div> or <iframe> depending on the container
	          // type to perform the same normalizations before comparing.
	          var normalizer;
	          if (container.nodeType === ELEMENT_NODE_TYPE) {
	            normalizer = document.createElement('div');
	            normalizer.innerHTML = markup;
	            normalizedMarkup = normalizer.innerHTML;
	          } else {
	            normalizer = document.createElement('iframe');
	            document.body.appendChild(normalizer);
	            normalizer.contentDocument.write(markup);
	            normalizedMarkup = normalizer.contentDocument.documentElement.outerHTML;
	            document.body.removeChild(normalizer);
	          }
	        }
	
	        var diffIndex = firstDifferenceIndex(normalizedMarkup, rootMarkup);
	        var difference = ' (client) ' + normalizedMarkup.substring(diffIndex - 20, diffIndex + 20) + '\n (server) ' + rootMarkup.substring(diffIndex - 20, diffIndex + 20);
	
	        !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document using ' + 'server rendering but the checksum was invalid. This usually ' + 'means you rendered a different component type or props on ' + 'the client from the one on the server, or your render() ' + 'methods are impure. React cannot handle this case due to ' + 'cross-browser quirks by rendering at the document root. You ' + 'should look for environment dependent code in your components ' + 'and ensure the props are the same client and server side:\n%s', difference) : invariant(false) : undefined;
	
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(false, 'React attempted to reuse markup in a container but the ' + 'checksum was invalid. This generally means that you are ' + 'using server rendering and the markup generated on the ' + 'server was not what the client was expecting. React injected ' + 'new markup to compensate which works but you have lost many ' + 'of the benefits of server rendering. Instead, figure out ' + 'why the markup being generated is different on the client ' + 'or server:\n%s', difference) : undefined;
	        }
	      }
	    }
	
	    !(container.nodeType !== DOC_NODE_TYPE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'You\'re trying to render a component to the document but ' + 'you didn\'t use server rendering. We can\'t do this ' + 'without using server rendering due to cross-browser quirks. ' + 'See ReactDOMServer.renderToString() for server rendering.') : invariant(false) : undefined;
	
	    if (transaction.useCreateElement) {
	      while (container.lastChild) {
	        container.removeChild(container.lastChild);
	      }
	      container.appendChild(markup);
	    } else {
	      setInnerHTML(container, markup);
	    }
	  },
	
	  ownerDocumentContextKey: ownerDocumentContextKey,
	
	  /**
	   * React ID utilities.
	   */
	
	  getReactRootID: getReactRootID,
	
	  getID: getID,
	
	  setID: setID,
	
	  getNode: getNode,
	
	  getNodeFromInstance: getNodeFromInstance,
	
	  isValid: isValid,
	
	  purgeID: purgeID
	};
	
	ReactPerf.measureMethods(ReactMount, 'ReactMount', {
	  _renderNewRootComponent: '_renderNewRootComponent',
	  _mountImageIntoNode: '_mountImageIntoNode'
	});
	
	module.exports = ReactMount;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserEventEmitter
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPluginRegistry = __webpack_require__(32);
	var ReactEventEmitterMixin = __webpack_require__(37);
	var ReactPerf = __webpack_require__(18);
	var ViewportMetrics = __webpack_require__(38);
	
	var assign = __webpack_require__(39);
	var isEventSupported = __webpack_require__(40);
	
	/**
	 * Summary of `ReactBrowserEventEmitter` event handling:
	 *
	 *  - Top-level delegation is used to trap most native browser events. This
	 *    may only occur in the main thread and is the responsibility of
	 *    ReactEventListener, which is injected and can therefore support pluggable
	 *    event sources. This is the only work that occurs in the main thread.
	 *
	 *  - We normalize and de-duplicate events to account for browser quirks. This
	 *    may be done in the worker thread.
	 *
	 *  - Forward these native events (with the associated top-level type used to
	 *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
	 *    to extract any synthetic events.
	 *
	 *  - The `EventPluginHub` will then process each event by annotating them with
	 *    "dispatches", a sequence of listeners and IDs that care about that event.
	 *
	 *  - The `EventPluginHub` then dispatches the events.
	 *
	 * Overview of React and the event system:
	 *
	 * +------------+    .
	 * |    DOM     |    .
	 * +------------+    .
	 *       |           .
	 *       v           .
	 * +------------+    .
	 * | ReactEvent |    .
	 * |  Listener  |    .
	 * +------------+    .                         +-----------+
	 *       |           .               +--------+|SimpleEvent|
	 *       |           .               |         |Plugin     |
	 * +-----|------+    .               v         +-----------+
	 * |     |      |    .    +--------------+                    +------------+
	 * |     +-----------.--->|EventPluginHub|                    |    Event   |
	 * |            |    .    |              |     +-----------+  | Propagators|
	 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
	 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
	 * |            |    .    |              |     +-----------+  |  utilities |
	 * |     +-----------.--->|              |                    +------------+
	 * |     |      |    .    +--------------+
	 * +-----|------+    .                ^        +-----------+
	 *       |           .                |        |Enter/Leave|
	 *       +           .                +-------+|Plugin     |
	 * +-------------+   .                         +-----------+
	 * | application |   .
	 * |-------------|   .
	 * |             |   .
	 * |             |   .
	 * +-------------+   .
	 *                   .
	 *    React Core     .  General Purpose Event Plugin System
	 */
	
	var alreadyListeningTo = {};
	var isMonitoringScrollValue = false;
	var reactTopListenersCounter = 0;
	
	// For events like 'submit' which don't consistently bubble (which we trap at a
	// lower node than `document`), binding at `document` would cause duplicate
	// events so we don't include them here
	var topEventMapping = {
	  topAbort: 'abort',
	  topBlur: 'blur',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topChange: 'change',
	  topClick: 'click',
	  topCompositionEnd: 'compositionend',
	  topCompositionStart: 'compositionstart',
	  topCompositionUpdate: 'compositionupdate',
	  topContextMenu: 'contextmenu',
	  topCopy: 'copy',
	  topCut: 'cut',
	  topDoubleClick: 'dblclick',
	  topDrag: 'drag',
	  topDragEnd: 'dragend',
	  topDragEnter: 'dragenter',
	  topDragExit: 'dragexit',
	  topDragLeave: 'dragleave',
	  topDragOver: 'dragover',
	  topDragStart: 'dragstart',
	  topDrop: 'drop',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topFocus: 'focus',
	  topInput: 'input',
	  topKeyDown: 'keydown',
	  topKeyPress: 'keypress',
	  topKeyUp: 'keyup',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topMouseDown: 'mousedown',
	  topMouseMove: 'mousemove',
	  topMouseOut: 'mouseout',
	  topMouseOver: 'mouseover',
	  topMouseUp: 'mouseup',
	  topPaste: 'paste',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topScroll: 'scroll',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topSelectionChange: 'selectionchange',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTextInput: 'textInput',
	  topTimeUpdate: 'timeupdate',
	  topTouchCancel: 'touchcancel',
	  topTouchEnd: 'touchend',
	  topTouchMove: 'touchmove',
	  topTouchStart: 'touchstart',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting',
	  topWheel: 'wheel'
	};
	
	/**
	 * To ensure no conflicts with other potential React instances on the page
	 */
	var topListenersIDKey = '_reactListenersID' + String(Math.random()).slice(2);
	
	function getListeningForDocument(mountAt) {
	  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
	  // directly.
	  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
	    mountAt[topListenersIDKey] = reactTopListenersCounter++;
	    alreadyListeningTo[mountAt[topListenersIDKey]] = {};
	  }
	  return alreadyListeningTo[mountAt[topListenersIDKey]];
	}
	
	/**
	 * `ReactBrowserEventEmitter` is used to attach top-level event listeners. For
	 * example:
	 *
	 *   ReactBrowserEventEmitter.putListener('myID', 'onClick', myFunction);
	 *
	 * This would allocate a "registration" of `('onClick', myFunction)` on 'myID'.
	 *
	 * @internal
	 */
	var ReactBrowserEventEmitter = assign({}, ReactEventEmitterMixin, {
	
	  /**
	   * Injectable event backend
	   */
	  ReactEventListener: null,
	
	  injection: {
	    /**
	     * @param {object} ReactEventListener
	     */
	    injectReactEventListener: function injectReactEventListener(ReactEventListener) {
	      ReactEventListener.setHandleTopLevel(ReactBrowserEventEmitter.handleTopLevel);
	      ReactBrowserEventEmitter.ReactEventListener = ReactEventListener;
	    }
	  },
	
	  /**
	   * Sets whether or not any created callbacks should be enabled.
	   *
	   * @param {boolean} enabled True if callbacks should be enabled.
	   */
	  setEnabled: function setEnabled(enabled) {
	    if (ReactBrowserEventEmitter.ReactEventListener) {
	      ReactBrowserEventEmitter.ReactEventListener.setEnabled(enabled);
	    }
	  },
	
	  /**
	   * @return {boolean} True if callbacks are enabled.
	   */
	  isEnabled: function isEnabled() {
	    return !!(ReactBrowserEventEmitter.ReactEventListener && ReactBrowserEventEmitter.ReactEventListener.isEnabled());
	  },
	
	  /**
	   * We listen for bubbled touch events on the document object.
	   *
	   * Firefox v8.01 (and possibly others) exhibited strange behavior when
	   * mounting `onmousemove` events at some node that was not the document
	   * element. The symptoms were that if your mouse is not moving over something
	   * contained within that mount point (for example on the background) the
	   * top-level listeners for `onmousemove` won't be called. However, if you
	   * register the `mousemove` on the document object, then it will of course
	   * catch all `mousemove`s. This along with iOS quirks, justifies restricting
	   * top-level listeners to the document object only, at least for these
	   * movement types of events and possibly all events.
	   *
	   * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
	   *
	   * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
	   * they bubble to document.
	   *
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {object} contentDocumentHandle Document which owns the container
	   */
	  listenTo: function listenTo(registrationName, contentDocumentHandle) {
	    var mountAt = contentDocumentHandle;
	    var isListening = getListeningForDocument(mountAt);
	    var dependencies = EventPluginRegistry.registrationNameDependencies[registrationName];
	
	    var topLevelTypes = EventConstants.topLevelTypes;
	    for (var i = 0; i < dependencies.length; i++) {
	      var dependency = dependencies[i];
	      if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
	        if (dependency === topLevelTypes.topWheel) {
	          if (isEventSupported('wheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'wheel', mountAt);
	          } else if (isEventSupported('mousewheel')) {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'mousewheel', mountAt);
	          } else {
	            // Firefox needs to capture a different mouse scroll event.
	            // @see http://www.quirksmode.org/dom/events/tests/scroll.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topWheel, 'DOMMouseScroll', mountAt);
	          }
	        } else if (dependency === topLevelTypes.topScroll) {
	
	          if (isEventSupported('scroll', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topScroll, 'scroll', mountAt);
	          } else {
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topScroll, 'scroll', ReactBrowserEventEmitter.ReactEventListener.WINDOW_HANDLE);
	          }
	        } else if (dependency === topLevelTypes.topFocus || dependency === topLevelTypes.topBlur) {
	
	          if (isEventSupported('focus', true)) {
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topFocus, 'focus', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelTypes.topBlur, 'blur', mountAt);
	          } else if (isEventSupported('focusin')) {
	            // IE has `focusin` and `focusout` events which bubble.
	            // @see http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topFocus, 'focusin', mountAt);
	            ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelTypes.topBlur, 'focusout', mountAt);
	          }
	
	          // to make sure blur and focus event listeners are only attached once
	          isListening[topLevelTypes.topBlur] = true;
	          isListening[topLevelTypes.topFocus] = true;
	        } else if (topEventMapping.hasOwnProperty(dependency)) {
	          ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(dependency, topEventMapping[dependency], mountAt);
	        }
	
	        isListening[dependency] = true;
	      }
	    }
	  },
	
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapBubbledEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    return ReactBrowserEventEmitter.ReactEventListener.trapCapturedEvent(topLevelType, handlerBaseName, handle);
	  },
	
	  /**
	   * Listens to window scroll and resize events. We cache scroll values so that
	   * application code can access them without triggering reflows.
	   *
	   * NOTE: Scroll events do not bubble.
	   *
	   * @see http://www.quirksmode.org/dom/events/scroll.html
	   */
	  ensureScrollValueMonitoring: function ensureScrollValueMonitoring() {
	    if (!isMonitoringScrollValue) {
	      var refresh = ViewportMetrics.refreshScrollValues;
	      ReactBrowserEventEmitter.ReactEventListener.monitorScrollValue(refresh);
	      isMonitoringScrollValue = true;
	    }
	  },
	
	  eventNameDispatchConfigs: EventPluginHub.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginHub.registrationNameModules,
	
	  putListener: EventPluginHub.putListener,
	
	  getListener: EventPluginHub.getListener,
	
	  deleteListener: EventPluginHub.deleteListener,
	
	  deleteAllListeners: EventPluginHub.deleteAllListeners
	
	});
	
	ReactPerf.measureMethods(ReactBrowserEventEmitter, 'ReactBrowserEventEmitter', {
	  putListener: 'putListener',
	  deleteListener: 'deleteListener'
	});
	
	module.exports = ReactBrowserEventEmitter;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventConstants
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	var PropagationPhases = keyMirror({ bubbled: null, captured: null });
	
	/**
	 * Types of raw signals from the browser caught at the top level.
	 */
	var topLevelTypes = keyMirror({
	  topAbort: null,
	  topBlur: null,
	  topCanPlay: null,
	  topCanPlayThrough: null,
	  topChange: null,
	  topClick: null,
	  topCompositionEnd: null,
	  topCompositionStart: null,
	  topCompositionUpdate: null,
	  topContextMenu: null,
	  topCopy: null,
	  topCut: null,
	  topDoubleClick: null,
	  topDrag: null,
	  topDragEnd: null,
	  topDragEnter: null,
	  topDragExit: null,
	  topDragLeave: null,
	  topDragOver: null,
	  topDragStart: null,
	  topDrop: null,
	  topDurationChange: null,
	  topEmptied: null,
	  topEncrypted: null,
	  topEnded: null,
	  topError: null,
	  topFocus: null,
	  topInput: null,
	  topKeyDown: null,
	  topKeyPress: null,
	  topKeyUp: null,
	  topLoad: null,
	  topLoadedData: null,
	  topLoadedMetadata: null,
	  topLoadStart: null,
	  topMouseDown: null,
	  topMouseMove: null,
	  topMouseOut: null,
	  topMouseOver: null,
	  topMouseUp: null,
	  topPaste: null,
	  topPause: null,
	  topPlay: null,
	  topPlaying: null,
	  topProgress: null,
	  topRateChange: null,
	  topReset: null,
	  topScroll: null,
	  topSeeked: null,
	  topSeeking: null,
	  topSelectionChange: null,
	  topStalled: null,
	  topSubmit: null,
	  topSuspend: null,
	  topTextInput: null,
	  topTimeUpdate: null,
	  topTouchCancel: null,
	  topTouchEnd: null,
	  topTouchMove: null,
	  topTouchStart: null,
	  topVolumeChange: null,
	  topWaiting: null,
	  topWheel: null
	});
	
	var EventConstants = {
	  topLevelTypes: topLevelTypes,
	  PropagationPhases: PropagationPhases
	};
	
	module.exports = EventConstants;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginHub
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var EventPluginRegistry = __webpack_require__(32);
	var EventPluginUtils = __webpack_require__(33);
	var ReactErrorUtils = __webpack_require__(34);
	
	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Internal store for event listeners
	 */
	var listenerBank = {};
	
	/**
	 * Internal queue of events that have accumulated their dispatches and are
	 * waiting to have their dispatches executed.
	 */
	var eventQueue = null;
	
	/**
	 * Dispatches an event and releases it back into the pool, unless persistent.
	 *
	 * @param {?object} event Synthetic event to be dispatched.
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @private
	 */
	var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
	  if (event) {
	    EventPluginUtils.executeDispatchesInOrder(event, simulated);
	
	    if (!event.isPersistent()) {
	      event.constructor.release(event);
	    }
	  }
	};
	var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
	  return executeDispatchesAndRelease(e, true);
	};
	var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
	  return executeDispatchesAndRelease(e, false);
	};
	
	/**
	 * - `InstanceHandle`: [required] Module that performs logical traversals of DOM
	 *   hierarchy given ids of the logical DOM elements involved.
	 */
	var InstanceHandle = null;
	
	function validateInstanceHandle() {
	  var valid = InstanceHandle && InstanceHandle.traverseTwoPhase && InstanceHandle.traverseEnterLeave;
	  process.env.NODE_ENV !== 'production' ? warning(valid, 'InstanceHandle not injected before use!') : undefined;
	}
	
	/**
	 * This is a unified interface for event plugins to be installed and configured.
	 *
	 * Event plugins can implement the following properties:
	 *
	 *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
	 *     Required. When a top-level event is fired, this method is expected to
	 *     extract synthetic events that will in turn be queued and dispatched.
	 *
	 *   `eventTypes` {object}
	 *     Optional, plugins that fire events must publish a mapping of registration
	 *     names that are used to register listeners. Values of this mapping must
	 *     be objects that contain `registrationName` or `phasedRegistrationNames`.
	 *
	 *   `executeDispatch` {function(object, function, string)}
	 *     Optional, allows plugins to override how an event gets dispatched. By
	 *     default, the listener is simply invoked.
	 *
	 * Each plugin that is injected into `EventsPluginHub` is immediately operable.
	 *
	 * @public
	 */
	var EventPluginHub = {
	
	  /**
	   * Methods for injecting dependencies.
	   */
	  injection: {
	
	    /**
	     * @param {object} InjectedMount
	     * @public
	     */
	    injectMount: EventPluginUtils.injection.injectMount,
	
	    /**
	     * @param {object} InjectedInstanceHandle
	     * @public
	     */
	    injectInstanceHandle: function injectInstanceHandle(InjectedInstanceHandle) {
	      InstanceHandle = InjectedInstanceHandle;
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	    },
	
	    getInstanceHandle: function getInstanceHandle() {
	      if (process.env.NODE_ENV !== 'production') {
	        validateInstanceHandle();
	      }
	      return InstanceHandle;
	    },
	
	    /**
	     * @param {array} InjectedEventPluginOrder
	     * @public
	     */
	    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,
	
	    /**
	     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	     */
	    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName
	
	  },
	
	  eventNameDispatchConfigs: EventPluginRegistry.eventNameDispatchConfigs,
	
	  registrationNameModules: EventPluginRegistry.registrationNameModules,
	
	  /**
	   * Stores `listener` at `listenerBank[registrationName][id]`. Is idempotent.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @param {?function} listener The callback to store.
	   */
	  putListener: function putListener(id, registrationName, listener) {
	    !(typeof listener === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) : invariant(false) : undefined;
	
	    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
	    bankForRegistrationName[id] = listener;
	
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.didPutListener) {
	      PluginModule.didPutListener(id, registrationName, listener);
	    }
	  },
	
	  /**
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   * @return {?function} The stored callback.
	   */
	  getListener: function getListener(id, registrationName) {
	    var bankForRegistrationName = listenerBank[registrationName];
	    return bankForRegistrationName && bankForRegistrationName[id];
	  },
	
	  /**
	   * Deletes a listener from the registration bank.
	   *
	   * @param {string} id ID of the DOM element.
	   * @param {string} registrationName Name of listener (e.g. `onClick`).
	   */
	  deleteListener: function deleteListener(id, registrationName) {
	    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	    if (PluginModule && PluginModule.willDeleteListener) {
	      PluginModule.willDeleteListener(id, registrationName);
	    }
	
	    var bankForRegistrationName = listenerBank[registrationName];
	    // TODO: This should never be null -- when is it?
	    if (bankForRegistrationName) {
	      delete bankForRegistrationName[id];
	    }
	  },
	
	  /**
	   * Deletes all listeners for the DOM element with the supplied ID.
	   *
	   * @param {string} id ID of the DOM element.
	   */
	  deleteAllListeners: function deleteAllListeners(id) {
	    for (var registrationName in listenerBank) {
	      if (!listenerBank[registrationName][id]) {
	        continue;
	      }
	
	      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
	      if (PluginModule && PluginModule.willDeleteListener) {
	        PluginModule.willDeleteListener(id, registrationName);
	      }
	
	      delete listenerBank[registrationName][id];
	    }
	  },
	
	  /**
	   * Allows registered plugins an opportunity to extract events from top-level
	   * native browser events.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @internal
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events;
	    var plugins = EventPluginRegistry.plugins;
	    for (var i = 0; i < plugins.length; i++) {
	      // Not every plugin in the ordering may be loaded at runtime.
	      var possiblePlugin = plugins[i];
	      if (possiblePlugin) {
	        var extractedEvents = possiblePlugin.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	        if (extractedEvents) {
	          events = accumulateInto(events, extractedEvents);
	        }
	      }
	    }
	    return events;
	  },
	
	  /**
	   * Enqueues a synthetic event that should be dispatched when
	   * `processEventQueue` is invoked.
	   *
	   * @param {*} events An accumulation of synthetic events.
	   * @internal
	   */
	  enqueueEvents: function enqueueEvents(events) {
	    if (events) {
	      eventQueue = accumulateInto(eventQueue, events);
	    }
	  },
	
	  /**
	   * Dispatches all synthetic events on the event queue.
	   *
	   * @internal
	   */
	  processEventQueue: function processEventQueue(simulated) {
	    // Set `eventQueue` to null before processing it so that we can tell if more
	    // events get enqueued while processing.
	    var processingEventQueue = eventQueue;
	    eventQueue = null;
	    if (simulated) {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
	    } else {
	      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
	    }
	    !!eventQueue ? process.env.NODE_ENV !== 'production' ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.') : invariant(false) : undefined;
	    // This would be a good time to rethrow if any of the event handlers threw.
	    ReactErrorUtils.rethrowCaughtError();
	  },
	
	  /**
	   * These are needed for tests only. Do not use!
	   */
	  __purge: function __purge() {
	    listenerBank = {};
	  },
	
	  __getListenerBank: function __getListenerBank() {
	    return listenerBank;
	  }
	
	};
	
	module.exports = EventPluginHub;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginRegistry
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Injectable ordering of event plugins.
	 */
	var EventPluginOrder = null;
	
	/**
	 * Injectable mapping from names to event plugin modules.
	 */
	var namesToPlugins = {};
	
	/**
	 * Recomputes the plugin list using the injected plugins and plugin ordering.
	 *
	 * @private
	 */
	function recomputePluginOrdering() {
	  if (!EventPluginOrder) {
	    // Wait until an `EventPluginOrder` is injected.
	    return;
	  }
	  for (var pluginName in namesToPlugins) {
	    var PluginModule = namesToPlugins[pluginName];
	    var pluginIndex = EventPluginOrder.indexOf(pluginName);
	    !(pluginIndex > -1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName) : invariant(false) : undefined;
	    if (EventPluginRegistry.plugins[pluginIndex]) {
	      continue;
	    }
	    !PluginModule.extractEvents ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName) : invariant(false) : undefined;
	    EventPluginRegistry.plugins[pluginIndex] = PluginModule;
	    var publishedEvents = PluginModule.eventTypes;
	    for (var eventName in publishedEvents) {
	      !publishEventForPlugin(publishedEvents[eventName], PluginModule, eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : invariant(false) : undefined;
	    }
	  }
	}
	
	/**
	 * Publishes an event so that it can be dispatched by the supplied plugin.
	 *
	 * @param {object} dispatchConfig Dispatch configuration for the event.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @return {boolean} True if the event was successfully published.
	 * @private
	 */
	function publishEventForPlugin(dispatchConfig, PluginModule, eventName) {
	  !!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName) : invariant(false) : undefined;
	  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;
	
	  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
	  if (phasedRegistrationNames) {
	    for (var phaseName in phasedRegistrationNames) {
	      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
	        var phasedRegistrationName = phasedRegistrationNames[phaseName];
	        publishRegistrationName(phasedRegistrationName, PluginModule, eventName);
	      }
	    }
	    return true;
	  } else if (dispatchConfig.registrationName) {
	    publishRegistrationName(dispatchConfig.registrationName, PluginModule, eventName);
	    return true;
	  }
	  return false;
	}
	
	/**
	 * Publishes a registration name that is used to identify dispatched events and
	 * can be used with `EventPluginHub.putListener` to register listeners.
	 *
	 * @param {string} registrationName Registration name to add.
	 * @param {object} PluginModule Plugin publishing the event.
	 * @private
	 */
	function publishRegistrationName(registrationName, PluginModule, eventName) {
	  !!EventPluginRegistry.registrationNameModules[registrationName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName) : invariant(false) : undefined;
	  EventPluginRegistry.registrationNameModules[registrationName] = PluginModule;
	  EventPluginRegistry.registrationNameDependencies[registrationName] = PluginModule.eventTypes[eventName].dependencies;
	}
	
	/**
	 * Registers plugins so that they can extract and dispatch events.
	 *
	 * @see {EventPluginHub}
	 */
	var EventPluginRegistry = {
	
	  /**
	   * Ordered list of injected plugins.
	   */
	  plugins: [],
	
	  /**
	   * Mapping from event name to dispatch config
	   */
	  eventNameDispatchConfigs: {},
	
	  /**
	   * Mapping from registration name to plugin module
	   */
	  registrationNameModules: {},
	
	  /**
	   * Mapping from registration name to event name
	   */
	  registrationNameDependencies: {},
	
	  /**
	   * Injects an ordering of plugins (by plugin name). This allows the ordering
	   * to be decoupled from injection of the actual plugins so that ordering is
	   * always deterministic regardless of packaging, on-the-fly injection, etc.
	   *
	   * @param {array} InjectedEventPluginOrder
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginOrder}
	   */
	  injectEventPluginOrder: function injectEventPluginOrder(InjectedEventPluginOrder) {
	    !!EventPluginOrder ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.') : invariant(false) : undefined;
	    // Clone the ordering so it cannot be dynamically mutated.
	    EventPluginOrder = Array.prototype.slice.call(InjectedEventPluginOrder);
	    recomputePluginOrdering();
	  },
	
	  /**
	   * Injects plugins to be used by `EventPluginHub`. The plugin names must be
	   * in the ordering injected by `injectEventPluginOrder`.
	   *
	   * Plugins can be injected as part of page initialization or on-the-fly.
	   *
	   * @param {object} injectedNamesToPlugins Map from names to plugin modules.
	   * @internal
	   * @see {EventPluginHub.injection.injectEventPluginsByName}
	   */
	  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
	    var isOrderingDirty = false;
	    for (var pluginName in injectedNamesToPlugins) {
	      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
	        continue;
	      }
	      var PluginModule = injectedNamesToPlugins[pluginName];
	      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== PluginModule) {
	        !!namesToPlugins[pluginName] ? process.env.NODE_ENV !== 'production' ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName) : invariant(false) : undefined;
	        namesToPlugins[pluginName] = PluginModule;
	        isOrderingDirty = true;
	      }
	    }
	    if (isOrderingDirty) {
	      recomputePluginOrdering();
	    }
	  },
	
	  /**
	   * Looks up the plugin for the supplied event.
	   *
	   * @param {object} event A synthetic event.
	   * @return {?object} The plugin that created the supplied event.
	   * @internal
	   */
	  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
	    var dispatchConfig = event.dispatchConfig;
	    if (dispatchConfig.registrationName) {
	      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
	    }
	    for (var phase in dispatchConfig.phasedRegistrationNames) {
	      if (!dispatchConfig.phasedRegistrationNames.hasOwnProperty(phase)) {
	        continue;
	      }
	      var PluginModule = EventPluginRegistry.registrationNameModules[dispatchConfig.phasedRegistrationNames[phase]];
	      if (PluginModule) {
	        return PluginModule;
	      }
	    }
	    return null;
	  },
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _resetEventPlugins: function _resetEventPlugins() {
	    EventPluginOrder = null;
	    for (var pluginName in namesToPlugins) {
	      if (namesToPlugins.hasOwnProperty(pluginName)) {
	        delete namesToPlugins[pluginName];
	      }
	    }
	    EventPluginRegistry.plugins.length = 0;
	
	    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
	    for (var eventName in eventNameDispatchConfigs) {
	      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
	        delete eventNameDispatchConfigs[eventName];
	      }
	    }
	
	    var registrationNameModules = EventPluginRegistry.registrationNameModules;
	    for (var registrationName in registrationNameModules) {
	      if (registrationNameModules.hasOwnProperty(registrationName)) {
	        delete registrationNameModules[registrationName];
	      }
	    }
	  }
	
	};
	
	module.exports = EventPluginRegistry;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPluginUtils
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var ReactErrorUtils = __webpack_require__(34);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Injected dependencies:
	 */
	
	/**
	 * - `Mount`: [required] Module that can convert between React dom IDs and
	 *   actual node references.
	 */
	var injection = {
	  Mount: null,
	  injectMount: function injectMount(InjectedMount) {
	    injection.Mount = InjectedMount;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(InjectedMount && InjectedMount.getNode && InjectedMount.getID, 'EventPluginUtils.injection.injectMount(...): Injected Mount ' + 'module is missing getNode or getID.') : undefined;
	    }
	  }
	};
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	function isEndish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseUp || topLevelType === topLevelTypes.topTouchEnd || topLevelType === topLevelTypes.topTouchCancel;
	}
	
	function isMoveish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseMove || topLevelType === topLevelTypes.topTouchMove;
	}
	function isStartish(topLevelType) {
	  return topLevelType === topLevelTypes.topMouseDown || topLevelType === topLevelTypes.topTouchStart;
	}
	
	var validateEventDispatches;
	if (process.env.NODE_ENV !== 'production') {
	  validateEventDispatches = function validateEventDispatches(event) {
	    var dispatchListeners = event._dispatchListeners;
	    var dispatchIDs = event._dispatchIDs;
	
	    var listenersIsArr = Array.isArray(dispatchListeners);
	    var idsIsArr = Array.isArray(dispatchIDs);
	    var IDsLen = idsIsArr ? dispatchIDs.length : dispatchIDs ? 1 : 0;
	    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
	
	    process.env.NODE_ENV !== 'production' ? warning(idsIsArr === listenersIsArr && IDsLen === listenersLen, 'EventPluginUtils: Invalid `event`.') : undefined;
	  };
	}
	
	/**
	 * Dispatch the event to the listener.
	 * @param {SyntheticEvent} event SyntheticEvent to handle
	 * @param {boolean} simulated If the event is simulated (changes exn behavior)
	 * @param {function} listener Application-level callback
	 * @param {string} domID DOM id to pass to the callback.
	 */
	function executeDispatch(event, simulated, listener, domID) {
	  var type = event.type || 'unknown-event';
	  event.currentTarget = injection.Mount.getNode(domID);
	  if (simulated) {
	    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event, domID);
	  } else {
	    ReactErrorUtils.invokeGuardedCallback(type, listener, event, domID);
	  }
	  event.currentTarget = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches.
	 */
	function executeDispatchesInOrder(event, simulated) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      executeDispatch(event, simulated, dispatchListeners[i], dispatchIDs[i]);
	    }
	  } else if (dispatchListeners) {
	    executeDispatch(event, simulated, dispatchListeners, dispatchIDs);
	  }
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	}
	
	/**
	 * Standard/simple iteration through an event's collected dispatches, but stops
	 * at the first dispatch execution returning true, and returns that id.
	 *
	 * @return {?string} id of the first dispatch execution who's listener returns
	 * true, or null if no listener returned true.
	 */
	function executeDispatchesInOrderStopAtTrueImpl(event) {
	  var dispatchListeners = event._dispatchListeners;
	  var dispatchIDs = event._dispatchIDs;
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  if (Array.isArray(dispatchListeners)) {
	    for (var i = 0; i < dispatchListeners.length; i++) {
	      if (event.isPropagationStopped()) {
	        break;
	      }
	      // Listeners and IDs are two parallel arrays that are always in sync.
	      if (dispatchListeners[i](event, dispatchIDs[i])) {
	        return dispatchIDs[i];
	      }
	    }
	  } else if (dispatchListeners) {
	    if (dispatchListeners(event, dispatchIDs)) {
	      return dispatchIDs;
	    }
	  }
	  return null;
	}
	
	/**
	 * @see executeDispatchesInOrderStopAtTrueImpl
	 */
	function executeDispatchesInOrderStopAtTrue(event) {
	  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
	  event._dispatchIDs = null;
	  event._dispatchListeners = null;
	  return ret;
	}
	
	/**
	 * Execution of a "direct" dispatch - there must be at most one dispatch
	 * accumulated on the event or it is considered an error. It doesn't really make
	 * sense for an event with multiple dispatches (bubbled) to keep track of the
	 * return values at each dispatch execution, but it does tend to make sense when
	 * dealing with "direct" dispatches.
	 *
	 * @return {*} The return value of executing the single dispatch.
	 */
	function executeDirectDispatch(event) {
	  if (process.env.NODE_ENV !== 'production') {
	    validateEventDispatches(event);
	  }
	  var dispatchListener = event._dispatchListeners;
	  var dispatchID = event._dispatchIDs;
	  !!Array.isArray(dispatchListener) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'executeDirectDispatch(...): Invalid `event`.') : invariant(false) : undefined;
	  var res = dispatchListener ? dispatchListener(event, dispatchID) : null;
	  event._dispatchListeners = null;
	  event._dispatchIDs = null;
	  return res;
	}
	
	/**
	 * @param {SyntheticEvent} event
	 * @return {boolean} True iff number of dispatches accumulated is greater than 0.
	 */
	function hasDispatches(event) {
	  return !!event._dispatchListeners;
	}
	
	/**
	 * General utilities that are useful in creating custom Event Plugins.
	 */
	var EventPluginUtils = {
	  isEndish: isEndish,
	  isMoveish: isMoveish,
	  isStartish: isStartish,
	
	  executeDirectDispatch: executeDirectDispatch,
	  executeDispatchesInOrder: executeDispatchesInOrder,
	  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
	  hasDispatches: hasDispatches,
	
	  getNode: function getNode(id) {
	    return injection.Mount.getNode(id);
	  },
	  getID: function getID(node) {
	    return injection.Mount.getID(node);
	  },
	
	  injection: injection
	};
	
	module.exports = EventPluginUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactErrorUtils
	 * @typechecks
	 */
	
	'use strict';
	
	var caughtError = null;
	
	/**
	 * Call a function while guarding against errors that happens within it.
	 *
	 * @param {?String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} a First argument
	 * @param {*} b Second argument
	 */
	function invokeGuardedCallback(name, func, a, b) {
	  try {
	    return func(a, b);
	  } catch (x) {
	    if (caughtError === null) {
	      caughtError = x;
	    }
	    return undefined;
	  }
	}
	
	var ReactErrorUtils = {
	  invokeGuardedCallback: invokeGuardedCallback,
	
	  /**
	   * Invoked by ReactTestUtils.Simulate so that any errors thrown by the event
	   * handler are sure to be rethrown by rethrowCaughtError.
	   */
	  invokeGuardedCallbackWithCatch: invokeGuardedCallback,
	
	  /**
	   * During execution of guarded functions we will capture the first error which
	   * we will rethrow to be handled by the top level error handler.
	   */
	  rethrowCaughtError: function rethrowCaughtError() {
	    if (caughtError) {
	      var error = caughtError;
	      caughtError = null;
	      throw error;
	    }
	  }
	};
	
	if (process.env.NODE_ENV !== 'production') {
	  /**
	   * To help development we can get better devtools integration by simulating a
	   * real browser event.
	   */
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');
	    ReactErrorUtils.invokeGuardedCallback = function (name, func, a, b) {
	      var boundFunc = func.bind(null, a, b);
	      var evtType = 'react-' + name;
	      fakeNode.addEventListener(evtType, boundFunc, false);
	      var evt = document.createEvent('Event');
	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);
	      fakeNode.removeEventListener(evtType, boundFunc, false);
	    };
	  }
	}
	
	module.exports = ReactErrorUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule accumulateInto
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 *
	 * Accumulates items that must not be null or undefined into the first one. This
	 * is used to conserve memory by avoiding array allocations, and thus sacrifices
	 * API cleanness. Since `current` can be null before being passed in and not
	 * null after this function, make sure to assign it back to `current`:
	 *
	 * `a = accumulateInto(a, b);`
	 *
	 * This API should be sparingly used. Try `accumulate` for something cleaner.
	 *
	 * @return {*|array<*>} An accumulation of items.
	 */
	
	function accumulateInto(current, next) {
	  !(next != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : invariant(false) : undefined;
	  if (current == null) {
	    return next;
	  }
	
	  // Both are not empty. Warning: Never call x.concat(y) when you are not
	  // certain that x is an Array (x could be a string with concat method).
	  var currentIsArray = Array.isArray(current);
	  var nextIsArray = Array.isArray(next);
	
	  if (currentIsArray && nextIsArray) {
	    current.push.apply(current, next);
	    return current;
	  }
	
	  if (currentIsArray) {
	    current.push(next);
	    return current;
	  }
	
	  if (nextIsArray) {
	    // A bit too dangerous to mutate `next`.
	    return [current].concat(next);
	  }
	
	  return [current, next];
	}
	
	module.exports = accumulateInto;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule forEachAccumulated
	 */
	
	'use strict';
	
	/**
	 * @param {array} arr an "accumulation" of items which is either an Array or
	 * a single item. Useful when paired with the `accumulate` module. This is a
	 * simple utility that allows us to reason about a collection of items, but
	 * handling the case when there is exactly one item (and we do not need to
	 * allocate an array).
	 */
	
	var forEachAccumulated = function forEachAccumulated(arr, cb, scope) {
	  if (Array.isArray(arr)) {
	    arr.forEach(cb, scope);
	  } else if (arr) {
	    cb.call(scope, arr);
	  }
	};
	
	module.exports = forEachAccumulated;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventEmitterMixin
	 */
	
	'use strict';
	
	var EventPluginHub = __webpack_require__(31);
	
	function runEventQueueInBatch(events) {
	  EventPluginHub.enqueueEvents(events);
	  EventPluginHub.processEventQueue(false);
	}
	
	var ReactEventEmitterMixin = {
	
	  /**
	   * Streams a fired top-level event to `EventPluginHub` where plugins have the
	   * opportunity to create `ReactEvent`s to be dispatched.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {object} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native environment event.
	   */
	  handleTopLevel: function handleTopLevel(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var events = EventPluginHub.extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget);
	    runEventQueueInBatch(events);
	  }
	};
	
	module.exports = ReactEventEmitterMixin;

/***/ },
/* 38 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ViewportMetrics
	 */
	
	'use strict';
	
	var ViewportMetrics = {
	
	  currentScrollLeft: 0,
	
	  currentScrollTop: 0,
	
	  refreshScrollValues: function refreshScrollValues(scrollPosition) {
	    ViewportMetrics.currentScrollLeft = scrollPosition.x;
	    ViewportMetrics.currentScrollTop = scrollPosition.y;
	  }
	
	};
	
	module.exports = ViewportMetrics;

/***/ },
/* 39 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Object.assign
	 */
	
	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.assign
	
	'use strict';
	
	function assign(target, sources) {
	  if (target == null) {
	    throw new TypeError('Object.assign target cannot be null or undefined');
	  }
	
	  var to = Object(target);
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
	    var nextSource = arguments[nextIndex];
	    if (nextSource == null) {
	      continue;
	    }
	
	    var from = Object(nextSource);
	
	    // We don't currently support accessors nor proxies. Therefore this
	    // copy cannot throw. If we ever supported this then we must handle
	    // exceptions and side-effects. We don't support symbols so they won't
	    // be transferred.
	
	    for (var key in from) {
	      if (hasOwnProperty.call(from, key)) {
	        to[key] = from[key];
	      }
	    }
	  }
	
	  return to;
	}
	
	module.exports = assign;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isEventSupported
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var useHasFeature;
	if (ExecutionEnvironment.canUseDOM) {
	  useHasFeature = document.implementation && document.implementation.hasFeature &&
	  // always returns true in newer browsers as per the standard.
	  // @see http://dom.spec.whatwg.org/#dom-domimplementation-hasfeature
	  document.implementation.hasFeature('', '') !== true;
	}
	
	/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
	function isEventSupported(eventNameSuffix, capture) {
	  if (!ExecutionEnvironment.canUseDOM || capture && !('addEventListener' in document)) {
	    return false;
	  }
	
	  var eventName = 'on' + eventNameSuffix;
	  var isSupported = eventName in document;
	
	  if (!isSupported) {
	    var element = document.createElement('div');
	    element.setAttribute(eventName, 'return;');
	    isSupported = typeof element[eventName] === 'function';
	  }
	
	  if (!isSupported && useHasFeature && eventNameSuffix === 'wheel') {
	    // This is the only way to test support for the `wheel` event in IE9+.
	    isSupported = document.implementation.hasFeature('Events.wheel', '3.0');
	  }
	
	  return isSupported;
	}
	
	module.exports = isEventSupported;

/***/ },
/* 41 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFeatureFlags
	 */
	
	'use strict';
	
	var ReactDOMFeatureFlags = {
	  useCreateElement: false
	};
	
	module.exports = ReactDOMFeatureFlags;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElement
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCurrentOwner = __webpack_require__(5);
	
	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	
	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;
	
	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};
	
	/**
	 * Base constructor for all React elements. This is only used to make this
	 * work with a dynamic instanceof check. Nothing should live on this prototype.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,
	
	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,
	
	    // Record the component responsible for creating this element.
	    _owner: owner
	  };
	
	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};
	
	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    Object.freeze(element.props);
	    Object.freeze(element);
	  }
	
	  return element;
	};
	
	ReactElement.createElement = function (type, config, children) {
	  var propName;
	
	  // Reserved names are extracted
	  var props = {};
	
	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;
	
	  if (config != null) {
	    ref = config.ref === undefined ? null : config.ref;
	    key = config.key === undefined ? null : '' + config.key;
	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (typeof props[propName] === 'undefined') {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};
	
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};
	
	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
	
	  return newElement;
	};
	
	ReactElement.cloneAndReplaceProps = function (oldElement, newProps) {
	  var newElement = ReactElement(oldElement.type, oldElement.key, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, newProps);
	
	  if (process.env.NODE_ENV !== 'production') {
	    // If the key on the original is valid, then the clone is valid
	    newElement._store.validated = oldElement._store.validated;
	  }
	
	  return newElement;
	};
	
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;
	
	  // Original props are copied
	  var props = assign({}, element.props);
	
	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;
	
	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;
	
	  if (config != null) {
	    if (config.ref !== undefined) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (config.key !== undefined) {
	      key = '' + config.key;
	    }
	    // Remaining properties override existing props
	    for (propName in config) {
	      if (config.hasOwnProperty(propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }
	
	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }
	
	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};
	
	/**
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};
	
	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule canDefineProperty
	 */
	
	'use strict';
	
	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    Object.defineProperty({}, 'x', { get: function get() {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}
	
	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponentRegistry
	 */
	
	'use strict';
	
	// This registry keeps track of the React IDs of the components that rendered to
	// `null` (in reality a placeholder such as `noscript`)
	
	var nullComponentIDsRegistry = {};
	
	/**
	 * @param {string} id Component's `_rootNodeID`.
	 * @return {boolean} True if the component is rendered to null.
	 */
	function isNullComponentID(id) {
	  return !!nullComponentIDsRegistry[id];
	}
	
	/**
	 * Mark the component as having rendered to null.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function registerNullComponentID(id) {
	  nullComponentIDsRegistry[id] = true;
	}
	
	/**
	 * Unmark the component as having rendered to null: it renders to something now.
	 * @param {string} id Component's `_rootNodeID`.
	 */
	function deregisterNullComponentID(id) {
	  delete nullComponentIDsRegistry[id];
	}
	
	var ReactEmptyComponentRegistry = {
	  isNullComponentID: isNullComponentID,
	  registerNullComponentID: registerNullComponentID,
	  deregisterNullComponentID: deregisterNullComponentID
	};
	
	module.exports = ReactEmptyComponentRegistry;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceHandles
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactRootIndex = __webpack_require__(46);
	
	var invariant = __webpack_require__(13);
	
	var SEPARATOR = '.';
	var SEPARATOR_LENGTH = SEPARATOR.length;
	
	/**
	 * Maximum depth of traversals before we consider the possibility of a bad ID.
	 */
	var MAX_TREE_DEPTH = 10000;
	
	/**
	 * Creates a DOM ID prefix to use when mounting React components.
	 *
	 * @param {number} index A unique integer
	 * @return {string} React root ID.
	 * @internal
	 */
	function getReactRootIDString(index) {
	  return SEPARATOR + index.toString(36);
	}
	
	/**
	 * Checks if a character in the supplied ID is a separator or the end.
	 *
	 * @param {string} id A React DOM ID.
	 * @param {number} index Index of the character to check.
	 * @return {boolean} True if the character is a separator or end of the ID.
	 * @private
	 */
	function isBoundary(id, index) {
	  return id.charAt(index) === SEPARATOR || index === id.length;
	}
	
	/**
	 * Checks if the supplied string is a valid React DOM ID.
	 *
	 * @param {string} id A React DOM ID, maybe.
	 * @return {boolean} True if the string is a valid React DOM ID.
	 * @private
	 */
	function isValidID(id) {
	  return id === '' || id.charAt(0) === SEPARATOR && id.charAt(id.length - 1) !== SEPARATOR;
	}
	
	/**
	 * Checks if the first ID is an ancestor of or equal to the second ID.
	 *
	 * @param {string} ancestorID
	 * @param {string} descendantID
	 * @return {boolean} True if `ancestorID` is an ancestor of `descendantID`.
	 * @internal
	 */
	function isAncestorIDOf(ancestorID, descendantID) {
	  return descendantID.indexOf(ancestorID) === 0 && isBoundary(descendantID, ancestorID.length);
	}
	
	/**
	 * Gets the parent ID of the supplied React DOM ID, `id`.
	 *
	 * @param {string} id ID of a component.
	 * @return {string} ID of the parent, or an empty string.
	 * @private
	 */
	function getParentID(id) {
	  return id ? id.substr(0, id.lastIndexOf(SEPARATOR)) : '';
	}
	
	/**
	 * Gets the next DOM ID on the tree path from the supplied `ancestorID` to the
	 * supplied `destinationID`. If they are equal, the ID is returned.
	 *
	 * @param {string} ancestorID ID of an ancestor node of `destinationID`.
	 * @param {string} destinationID ID of the destination node.
	 * @return {string} Next ID on the path from `ancestorID` to `destinationID`.
	 * @private
	 */
	function getNextDescendantID(ancestorID, destinationID) {
	  !(isValidID(ancestorID) && isValidID(destinationID)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(%s, %s): Received an invalid React DOM ID.', ancestorID, destinationID) : invariant(false) : undefined;
	  !isAncestorIDOf(ancestorID, destinationID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getNextDescendantID(...): React has made an invalid assumption about ' + 'the DOM hierarchy. Expected `%s` to be an ancestor of `%s`.', ancestorID, destinationID) : invariant(false) : undefined;
	  if (ancestorID === destinationID) {
	    return ancestorID;
	  }
	  // Skip over the ancestor and the immediate separator. Traverse until we hit
	  // another separator or we reach the end of `destinationID`.
	  var start = ancestorID.length + SEPARATOR_LENGTH;
	  var i;
	  for (i = start; i < destinationID.length; i++) {
	    if (isBoundary(destinationID, i)) {
	      break;
	    }
	  }
	  return destinationID.substr(0, i);
	}
	
	/**
	 * Gets the nearest common ancestor ID of two IDs.
	 *
	 * Using this ID scheme, the nearest common ancestor ID is the longest common
	 * prefix of the two IDs that immediately preceded a "marker" in both strings.
	 *
	 * @param {string} oneID
	 * @param {string} twoID
	 * @return {string} Nearest common ancestor ID, or the empty string if none.
	 * @private
	 */
	function getFirstCommonAncestorID(oneID, twoID) {
	  var minLength = Math.min(oneID.length, twoID.length);
	  if (minLength === 0) {
	    return '';
	  }
	  var lastCommonMarkerIndex = 0;
	  // Use `<=` to traverse until the "EOL" of the shorter string.
	  for (var i = 0; i <= minLength; i++) {
	    if (isBoundary(oneID, i) && isBoundary(twoID, i)) {
	      lastCommonMarkerIndex = i;
	    } else if (oneID.charAt(i) !== twoID.charAt(i)) {
	      break;
	    }
	  }
	  var longestCommonID = oneID.substr(0, lastCommonMarkerIndex);
	  !isValidID(longestCommonID) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'getFirstCommonAncestorID(%s, %s): Expected a valid React DOM ID: %s', oneID, twoID, longestCommonID) : invariant(false) : undefined;
	  return longestCommonID;
	}
	
	/**
	 * Traverses the parent path between two IDs (either up or down). The IDs must
	 * not be the same, and there must exist a parent path between them. If the
	 * callback returns `false`, traversal is stopped.
	 *
	 * @param {?string} start ID at which to start traversal.
	 * @param {?string} stop ID at which to end traversal.
	 * @param {function} cb Callback to invoke each ID with.
	 * @param {*} arg Argument to invoke the callback with.
	 * @param {?boolean} skipFirst Whether or not to skip the first node.
	 * @param {?boolean} skipLast Whether or not to skip the last node.
	 * @private
	 */
	function traverseParentPath(start, stop, cb, arg, skipFirst, skipLast) {
	  start = start || '';
	  stop = stop || '';
	  !(start !== stop) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(...): Cannot traverse from and to the same ID, `%s`.', start) : invariant(false) : undefined;
	  var traverseUp = isAncestorIDOf(stop, start);
	  !(traverseUp || isAncestorIDOf(start, stop)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Cannot traverse from two IDs that do ' + 'not have a parent path.', start, stop) : invariant(false) : undefined;
	  // Traverse from `start` to `stop` one depth at a time.
	  var depth = 0;
	  var traverse = traverseUp ? getParentID : getNextDescendantID;
	  for (var id = start;; /* until break */id = traverse(id, stop)) {
	    var ret;
	    if ((!skipFirst || id !== start) && (!skipLast || id !== stop)) {
	      ret = cb(id, traverseUp, arg);
	    }
	    if (ret === false || id === stop) {
	      // Only break //after// visiting `stop`.
	      break;
	    }
	    !(depth++ < MAX_TREE_DEPTH) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'traverseParentPath(%s, %s, ...): Detected an infinite loop while ' + 'traversing the React DOM ID tree. This may be due to malformed IDs: %s', start, stop, id) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Manages the IDs assigned to DOM representations of React components. This
	 * uses a specific scheme in order to traverse the DOM efficiently (e.g. in
	 * order to simulate events).
	 *
	 * @internal
	 */
	var ReactInstanceHandles = {
	
	  /**
	   * Constructs a React root ID
	   * @return {string} A React root ID.
	   */
	  createReactRootID: function createReactRootID() {
	    return getReactRootIDString(ReactRootIndex.createReactRootIndex());
	  },
	
	  /**
	   * Constructs a React ID by joining a root ID with a name.
	   *
	   * @param {string} rootID Root ID of a parent component.
	   * @param {string} name A component's name (as flattened children).
	   * @return {string} A React ID.
	   * @internal
	   */
	  createReactID: function createReactID(rootID, name) {
	    return rootID + name;
	  },
	
	  /**
	   * Gets the DOM ID of the React component that is the root of the tree that
	   * contains the React component with the supplied DOM ID.
	   *
	   * @param {string} id DOM ID of a React component.
	   * @return {?string} DOM ID of the React component that is the root.
	   * @internal
	   */
	  getReactRootIDFromNodeID: function getReactRootIDFromNodeID(id) {
	    if (id && id.charAt(0) === SEPARATOR && id.length > 1) {
	      var index = id.indexOf(SEPARATOR, 1);
	      return index > -1 ? id.substr(0, index) : id;
	    }
	    return null;
	  },
	
	  /**
	   * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
	   * should would receive a `mouseEnter` or `mouseLeave` event.
	   *
	   * NOTE: Does not invoke the callback on the nearest common ancestor because
	   * nothing "entered" or "left" that element.
	   *
	   * @param {string} leaveID ID being left.
	   * @param {string} enterID ID being entered.
	   * @param {function} cb Callback to invoke on each entered/left ID.
	   * @param {*} upArg Argument to invoke the callback with on left IDs.
	   * @param {*} downArg Argument to invoke the callback with on entered IDs.
	   * @internal
	   */
	  traverseEnterLeave: function traverseEnterLeave(leaveID, enterID, cb, upArg, downArg) {
	    var ancestorID = getFirstCommonAncestorID(leaveID, enterID);
	    if (ancestorID !== leaveID) {
	      traverseParentPath(leaveID, ancestorID, cb, upArg, false, true);
	    }
	    if (ancestorID !== enterID) {
	      traverseParentPath(ancestorID, enterID, cb, downArg, true, false);
	    }
	  },
	
	  /**
	   * Simulates the traversal of a two-phase, capture/bubble event dispatch.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseTwoPhase: function traverseTwoPhase(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, false);
	      traverseParentPath(targetID, '', cb, arg, false, true);
	    }
	  },
	
	  /**
	   * Same as `traverseTwoPhase` but skips the `targetID`.
	   */
	  traverseTwoPhaseSkipTarget: function traverseTwoPhaseSkipTarget(targetID, cb, arg) {
	    if (targetID) {
	      traverseParentPath('', targetID, cb, arg, true, true);
	      traverseParentPath(targetID, '', cb, arg, true, true);
	    }
	  },
	
	  /**
	   * Traverse a node ID, calling the supplied `cb` for each ancestor ID. For
	   * example, passing `.0.$row-0.1` would result in `cb` getting called
	   * with `.0`, `.0.$row-0`, and `.0.$row-0.1`.
	   *
	   * NOTE: This traversal happens on IDs without touching the DOM.
	   *
	   * @param {string} targetID ID of the target node.
	   * @param {function} cb Callback to invoke.
	   * @param {*} arg Argument to invoke the callback with.
	   * @internal
	   */
	  traverseAncestors: function traverseAncestors(targetID, cb, arg) {
	    traverseParentPath('', targetID, cb, arg, true, false);
	  },
	
	  getFirstCommonAncestorID: getFirstCommonAncestorID,
	
	  /**
	   * Exposed for unit testing.
	   * @private
	   */
	  _getNextDescendantID: getNextDescendantID,
	
	  isAncestorIDOf: isAncestorIDOf,
	
	  SEPARATOR: SEPARATOR
	
	};
	
	module.exports = ReactInstanceHandles;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 46 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactRootIndexInjection = {
	  /**
	   * @param {function} _createReactRootIndex
	   */
	  injectCreateReactRootIndex: function injectCreateReactRootIndex(_createReactRootIndex) {
	    ReactRootIndex.createReactRootIndex = _createReactRootIndex;
	  }
	};
	
	var ReactRootIndex = {
	  createReactRootIndex: null,
	  injection: ReactRootIndexInjection
	};
	
	module.exports = ReactRootIndex;

/***/ },
/* 47 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInstanceMap
	 */
	
	'use strict';
	
	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 */
	
	// TODO: Replace this with ES6: var ReactInstanceMap = new Map();
	
	var ReactInstanceMap = {
	
	  /**
	   * This API should be called `delete` but we'd have to make sure to always
	   * transform these to strings for IE support. When this transform is fully
	   * supported we can rename it.
	   */
	  remove: function remove(key) {
	    key._reactInternalInstance = undefined;
	  },
	
	  get: function get(key) {
	    return key._reactInternalInstance;
	  },
	
	  has: function has(key) {
	    return key._reactInternalInstance !== undefined;
	  },
	
	  set: function set(key, value) {
	    key._reactInternalInstance = value;
	  }
	
	};
	
	module.exports = ReactInstanceMap;

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMarkupChecksum
	 */
	
	'use strict';
	
	var adler32 = __webpack_require__(49);
	
	var TAG_END = /\/?>/;
	
	var ReactMarkupChecksum = {
	  CHECKSUM_ATTR_NAME: 'data-react-checksum',
	
	  /**
	   * @param {string} markup Markup string
	   * @return {string} Markup string with checksum attribute attached
	   */
	  addChecksumToMarkup: function addChecksumToMarkup(markup) {
	    var checksum = adler32(markup);
	
	    // Add checksum (handle both parent tags and self-closing tags)
	    return markup.replace(TAG_END, ' ' + ReactMarkupChecksum.CHECKSUM_ATTR_NAME + '="' + checksum + '"$&');
	  },
	
	  /**
	   * @param {string} markup to use
	   * @param {DOMElement} element root React element
	   * @returns {boolean} whether or not the markup is the same
	   */
	  canReuseMarkup: function canReuseMarkup(markup, element) {
	    var existingChecksum = element.getAttribute(ReactMarkupChecksum.CHECKSUM_ATTR_NAME);
	    existingChecksum = existingChecksum && parseInt(existingChecksum, 10);
	    var markupChecksum = adler32(markup);
	    return markupChecksum === existingChecksum;
	  }
	};
	
	module.exports = ReactMarkupChecksum;

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule adler32
	 */
	
	'use strict';
	
	var MOD = 65521;
	
	// adler32 is not cryptographically strong, and is only used to sanity check that
	// markup generated on the server matches the markup generated on the client.
	// This implementation (a modified version of the SheetJS version) has been optimized
	// for our use case, at the expense of conforming to the adler32 specification
	// for non-ascii inputs.
	function adler32(data) {
	  var a = 1;
	  var b = 0;
	  var i = 0;
	  var l = data.length;
	  var m = l & ~0x3;
	  while (i < m) {
	    for (; i < Math.min(i + 4096, m); i += 4) {
	      b += (a += data.charCodeAt(i)) + (a += data.charCodeAt(i + 1)) + (a += data.charCodeAt(i + 2)) + (a += data.charCodeAt(i + 3));
	    }
	    a %= MOD;
	    b %= MOD;
	  }
	  for (; i < l; i++) {
	    b += a += data.charCodeAt(i);
	  }
	  a %= MOD;
	  b %= MOD;
	  return a | b << 16;
	}
	
	module.exports = adler32;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconciler
	 */
	
	'use strict';
	
	var ReactRef = __webpack_require__(51);
	
	/**
	 * Helper to call ReactRef.attachRefs with this composite component, split out
	 * to avoid allocations in the transaction mount-ready queue.
	 */
	function attachRefs() {
	  ReactRef.attachRefs(this, this._currentElement);
	}
	
	var ReactReconciler = {
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(internalInstance, rootID, transaction, context) {
	    var markup = internalInstance.mountComponent(rootID, transaction, context);
	    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent(internalInstance) {
	    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
	    internalInstance.unmountComponent();
	  },
	
	  /**
	   * Update a component using a new element.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @internal
	   */
	  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
	    var prevElement = internalInstance._currentElement;
	
	    if (nextElement === prevElement && context === internalInstance._context) {
	      // Since elements are immutable after the owner is rendered,
	      // we can do a cheap identity compare here to determine if this is a
	      // superfluous reconcile. It's possible for state to be mutable but such
	      // change should trigger an update of the owner which would recreate
	      // the element. We explicitly check for the existence of an owner since
	      // it's possible for an element created outside a composite to be
	      // deeply mutated and reused.
	
	      // TODO: Bailing out early is just a perf optimization right?
	      // TODO: Removing the return statement should affect correctness?
	      return;
	    }
	
	    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);
	
	    if (refsChanged) {
	      ReactRef.detachRefs(internalInstance, prevElement);
	    }
	
	    internalInstance.receiveComponent(nextElement, transaction, context);
	
	    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
	      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
	    }
	  },
	
	  /**
	   * Flush any dirty changes in a component.
	   *
	   * @param {ReactComponent} internalInstance
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction) {
	    internalInstance.performUpdateIfNecessary(transaction);
	  }
	
	};
	
	module.exports = ReactReconciler;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactRef
	 */
	
	'use strict';
	
	var ReactOwner = __webpack_require__(52);
	
	var ReactRef = {};
	
	function attachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(component.getPublicInstance());
	  } else {
	    // Legacy ref
	    ReactOwner.addComponentAsRefTo(component, ref, owner);
	  }
	}
	
	function detachRef(ref, component, owner) {
	  if (typeof ref === 'function') {
	    ref(null);
	  } else {
	    // Legacy ref
	    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
	  }
	}
	
	ReactRef.attachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    attachRef(ref, instance, element._owner);
	  }
	};
	
	ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {
	  // If either the owner or a `ref` has changed, make sure the newest owner
	  // has stored a reference to `this`, and the previous owner (if different)
	  // has forgotten the reference to `this`. We use the element instead
	  // of the public this.props because the post processing cannot determine
	  // a ref. The ref conceptually lives on the element.
	
	  // TODO: Should this even be possible? The owner cannot change because
	  // it's forbidden by shouldUpdateReactComponent. The ref can change
	  // if you swap the keys of but not the refs. Reconsider where this check
	  // is made. It probably belongs where the key checking and
	  // instantiateReactComponent is done.
	
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	
	  return(
	    // This has a few false positives w/r/t empty components.
	    prevEmpty || nextEmpty || nextElement._owner !== prevElement._owner || nextElement.ref !== prevElement.ref
	  );
	};
	
	ReactRef.detachRefs = function (instance, element) {
	  if (element === null || element === false) {
	    return;
	  }
	  var ref = element.ref;
	  if (ref != null) {
	    detachRef(ref, instance, element._owner);
	  }
	};
	
	module.exports = ReactRef;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactOwner
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * ReactOwners are capable of storing references to owned components.
	 *
	 * All components are capable of //being// referenced by owner components, but
	 * only ReactOwner components are capable of //referencing// owned components.
	 * The named reference is known as a "ref".
	 *
	 * Refs are available when mounted and updated during reconciliation.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return (
	 *         <div onClick={this.handleClick}>
	 *           <CustomComponent ref="custom" />
	 *         </div>
	 *       );
	 *     },
	 *     handleClick: function() {
	 *       this.refs.custom.handleClick();
	 *     },
	 *     componentDidMount: function() {
	 *       this.refs.custom.initialize();
	 *     }
	 *   });
	 *
	 * Refs should rarely be used. When refs are used, they should only be done to
	 * control data that is not handled by React's data flow.
	 *
	 * @class ReactOwner
	 */
	var ReactOwner = {
	
	  /**
	   * @param {?object} object
	   * @return {boolean} True if `object` is a valid owner.
	   * @final
	   */
	  isValidOwner: function isValidOwner(object) {
	    return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
	  },
	
	  /**
	   * Adds a component by ref to an owner component.
	   *
	   * @param {ReactComponent} component Component to reference.
	   * @param {string} ref Name by which to refer to the component.
	   * @param {ReactOwner} owner Component on which to record the ref.
	   * @final
	   * @internal
	   */
	  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    owner.attachRef(ref, component);
	  },
	
	  /**
	   * Removes a component by ref from an owner component.
	   *
	   * @param {ReactComponent} component Component to dereference.
	   * @param {string} ref Name of the ref to remove.
	   * @param {ReactOwner} owner Component on which the ref is recorded.
	   * @final
	   * @internal
	   */
	  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
	    !ReactOwner.isValidOwner(owner) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).') : invariant(false) : undefined;
	    // Check that `component` is still the current ref because we do not want to
	    // detach the ref if another component stole it.
	    if (owner.getPublicInstance().refs[ref] === component.getPublicInstance()) {
	      owner.detachRef(ref);
	    }
	  }
	
	};
	
	module.exports = ReactOwner;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdateQueue
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function enqueueUpdate(internalInstance) {
	  ReactUpdates.enqueueUpdate(internalInstance);
	}
	
	function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
	  var internalInstance = ReactInstanceMap.get(publicInstance);
	  if (!internalInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      // Only warn when we have a callerName. Otherwise we should be silent.
	      // We're probably calling from enqueueCallback. We don't want to warn
	      // there because we already warned for the corresponding lifecycle method.
	      process.env.NODE_ENV !== 'production' ? warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor.displayName) : undefined;
	    }
	    return null;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition ' + '(such as within `render`). Render methods should be a pure function ' + 'of props and state.', callerName) : undefined;
	  }
	
	  return internalInstance;
	}
	
	/**
	 * ReactUpdateQueue allows for state updates to be scheduled into a later
	 * reconciliation step.
	 */
	var ReactUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    if (process.env.NODE_ENV !== 'production') {
	      var owner = ReactCurrentOwner.current;
	      if (owner !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	        owner._warnedAboutRefsInRender = true;
	      }
	    }
	    var internalInstance = ReactInstanceMap.get(publicInstance);
	    if (internalInstance) {
	      // During componentWillMount and render this will still be null but after
	      // that will always render to something. At least for now. So we can use
	      // this hack.
	      return !!internalInstance._renderedComponent;
	    } else {
	      return false;
	    }
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);
	
	    // Previously we would throw an error if we didn't have an internal
	    // instance. Since we want to make it a no-op instead, we mirror the same
	    // behavior we have in other enqueue* methods.
	    // We also need to ignore callbacks in componentWillMount. See
	    // enqueueUpdates.
	    if (!internalInstance) {
	      return null;
	    }
	
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    // TODO: The callback here is ignored when setState is called from
	    // componentWillMount. Either fix it or disallow doing so completely in
	    // favor of getInitialState. Alternatively, we can disallow
	    // componentWillMount during server-side rendering.
	    enqueueUpdate(internalInstance);
	  },
	
	  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
	    !(typeof callback === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'enqueueCallback(...): You called `setProps`, `replaceProps`, ' + '`setState`, `replaceState`, or `forceUpdate` with a callback that ' + 'isn\'t callable.') : invariant(false) : undefined;
	    if (internalInstance._pendingCallbacks) {
	      internalInstance._pendingCallbacks.push(callback);
	    } else {
	      internalInstance._pendingCallbacks = [callback];
	    }
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingForceUpdate = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    internalInstance._pendingStateQueue = [completeState];
	    internalInstance._pendingReplaceState = true;
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');
	
	    if (!internalInstance) {
	      return;
	    }
	
	    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
	    queue.push(partialState);
	
	    enqueueUpdate(internalInstance);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueSetPropsInternal(internalInstance, partialProps);
	  },
	
	  enqueueSetPropsInternal: function enqueueSetPropsInternal(internalInstance, partialProps) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setProps(...): You called `setProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    var props = assign({}, element.props, partialProps);
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceProps');
	    if (!internalInstance) {
	      return;
	    }
	    ReactUpdateQueue.enqueueReplacePropsInternal(internalInstance, props);
	  },
	
	  enqueueReplacePropsInternal: function enqueueReplacePropsInternal(internalInstance, props) {
	    var topLevelWrapper = internalInstance._topLevelWrapper;
	    !topLevelWrapper ? process.env.NODE_ENV !== 'production' ? invariant(false, 'replaceProps(...): You called `replaceProps` on a ' + 'component with a parent. This is an anti-pattern since props will ' + 'get reactively updated when rendered. Instead, change the owner\'s ' + '`render` method to pass the correct value as props to the component ' + 'where it is created.') : invariant(false) : undefined;
	
	    // Merge with the pending element if it exists, otherwise with existing
	    // element props.
	    var wrapElement = topLevelWrapper._pendingElement || topLevelWrapper._currentElement;
	    var element = wrapElement.props;
	    topLevelWrapper._pendingElement = ReactElement.cloneAndReplaceProps(wrapElement, ReactElement.cloneAndReplaceProps(element, props));
	
	    enqueueUpdate(topLevelWrapper);
	  },
	
	  enqueueElementInternal: function enqueueElementInternal(internalInstance, newElement) {
	    internalInstance._pendingElement = newElement;
	    enqueueUpdate(internalInstance);
	  }
	
	};
	
	module.exports = ReactUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactUpdates
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactPerf = __webpack_require__(18);
	var ReactReconciler = __webpack_require__(50);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var dirtyComponents = [];
	var asapCallbackQueue = CallbackQueue.getPooled();
	var asapEnqueued = false;
	
	var batchingStrategy = null;
	
	function ensureInjected() {
	  !(ReactUpdates.ReactReconcileTransaction && batchingStrategy) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy') : invariant(false) : undefined;
	}
	
	var NESTED_UPDATES = {
	  initialize: function initialize() {
	    this.dirtyComponentsLength = dirtyComponents.length;
	  },
	  close: function close() {
	    if (this.dirtyComponentsLength !== dirtyComponents.length) {
	      // Additional updates were enqueued by componentDidUpdate handlers or
	      // similar; before our own UPDATE_QUEUEING wrapper closes, we want to run
	      // these new updates so that if A's componentDidUpdate calls setState on
	      // B, B will update before the callback A's updater provided when calling
	      // setState.
	      dirtyComponents.splice(0, this.dirtyComponentsLength);
	      flushBatchedUpdates();
	    } else {
	      dirtyComponents.length = 0;
	    }
	  }
	};
	
	var UPDATE_QUEUEING = {
	  initialize: function initialize() {
	    this.callbackQueue.reset();
	  },
	  close: function close() {
	    this.callbackQueue.notifyAll();
	  }
	};
	
	var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];
	
	function ReactUpdatesFlushTransaction() {
	  this.reinitializeTransaction();
	  this.dirtyComponentsLength = null;
	  this.callbackQueue = CallbackQueue.getPooled();
	  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled( /* forceHTML */false);
	}
	
	assign(ReactUpdatesFlushTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  destructor: function destructor() {
	    this.dirtyComponentsLength = null;
	    CallbackQueue.release(this.callbackQueue);
	    this.callbackQueue = null;
	    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
	    this.reconcileTransaction = null;
	  },
	
	  perform: function perform(method, scope, a) {
	    // Essentially calls `this.reconcileTransaction.perform(method, scope, a)`
	    // with this transaction's wrappers around it.
	    return Transaction.Mixin.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
	  }
	});
	
	PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);
	
	function batchedUpdates(callback, a, b, c, d, e) {
	  ensureInjected();
	  batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
	}
	
	/**
	 * Array comparator for ReactComponents by mount ordering.
	 *
	 * @param {ReactComponent} c1 first component you're comparing
	 * @param {ReactComponent} c2 second component you're comparing
	 * @return {number} Return value usable by Array.prototype.sort().
	 */
	function mountOrderComparator(c1, c2) {
	  return c1._mountOrder - c2._mountOrder;
	}
	
	function runBatchedUpdates(transaction) {
	  var len = transaction.dirtyComponentsLength;
	  !(len === dirtyComponents.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length) : invariant(false) : undefined;
	
	  // Since reconciling a component higher in the owner hierarchy usually (not
	  // always -- see shouldComponentUpdate()) will reconcile children, reconcile
	  // them before their children by sorting the array.
	  dirtyComponents.sort(mountOrderComparator);
	
	  for (var i = 0; i < len; i++) {
	    // If a component is unmounted before pending changes apply, it will still
	    // be here, but we assume that it has cleared its _pendingCallbacks and
	    // that performUpdateIfNecessary is a noop.
	    var component = dirtyComponents[i];
	
	    // If performUpdateIfNecessary happens to enqueue any new updates, we
	    // shouldn't execute the callbacks until the next render happens, so
	    // stash the callbacks first
	    var callbacks = component._pendingCallbacks;
	    component._pendingCallbacks = null;
	
	    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction);
	
	    if (callbacks) {
	      for (var j = 0; j < callbacks.length; j++) {
	        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
	      }
	    }
	  }
	}
	
	var flushBatchedUpdates = function flushBatchedUpdates() {
	  // ReactUpdatesFlushTransaction's wrappers will clear the dirtyComponents
	  // array and perform any updates enqueued by mount-ready handlers (i.e.,
	  // componentDidUpdate) but we need to check here too in order to catch
	  // updates enqueued by setState callbacks and asap calls.
	  while (dirtyComponents.length || asapEnqueued) {
	    if (dirtyComponents.length) {
	      var transaction = ReactUpdatesFlushTransaction.getPooled();
	      transaction.perform(runBatchedUpdates, null, transaction);
	      ReactUpdatesFlushTransaction.release(transaction);
	    }
	
	    if (asapEnqueued) {
	      asapEnqueued = false;
	      var queue = asapCallbackQueue;
	      asapCallbackQueue = CallbackQueue.getPooled();
	      queue.notifyAll();
	      CallbackQueue.release(queue);
	    }
	  }
	};
	flushBatchedUpdates = ReactPerf.measure('ReactUpdates', 'flushBatchedUpdates', flushBatchedUpdates);
	
	/**
	 * Mark a component as needing a rerender, adding an optional callback to a
	 * list of functions which will be executed once the rerender occurs.
	 */
	function enqueueUpdate(component) {
	  ensureInjected();
	
	  // Various parts of our code (such as ReactCompositeComponent's
	  // _renderValidatedComponent) assume that calls to render aren't nested;
	  // verify that that's the case. (This is called by each top-level update
	  // function, like setProps, setState, forceUpdate, etc.; creation and
	  // destruction of top-level components is guarded in ReactMount.)
	
	  if (!batchingStrategy.isBatchingUpdates) {
	    batchingStrategy.batchedUpdates(enqueueUpdate, component);
	    return;
	  }
	
	  dirtyComponents.push(component);
	}
	
	/**
	 * Enqueue a callback to be run at the end of the current batching cycle. Throws
	 * if no updates are currently being performed.
	 */
	function asap(callback, context) {
	  !batchingStrategy.isBatchingUpdates ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.') : invariant(false) : undefined;
	  asapCallbackQueue.enqueue(callback, context);
	  asapEnqueued = true;
	}
	
	var ReactUpdatesInjection = {
	  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
	    !ReconcileTransaction ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a reconcile transaction class') : invariant(false) : undefined;
	    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
	  },
	
	  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
	    !_batchingStrategy ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batching strategy') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.batchedUpdates === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide a batchedUpdates() function') : invariant(false) : undefined;
	    !(typeof _batchingStrategy.isBatchingUpdates === 'boolean') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactUpdates: must provide an isBatchingUpdates boolean attribute') : invariant(false) : undefined;
	    batchingStrategy = _batchingStrategy;
	  }
	};
	
	var ReactUpdates = {
	  /**
	   * React references `ReactReconcileTransaction` using this property in order
	   * to allow dependency injection.
	   *
	   * @internal
	   */
	  ReactReconcileTransaction: null,
	
	  batchedUpdates: batchedUpdates,
	  enqueueUpdate: enqueueUpdate,
	  flushBatchedUpdates: flushBatchedUpdates,
	  injection: ReactUpdatesInjection,
	  asap: asap
	};
	
	module.exports = ReactUpdates;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CallbackQueue
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	/**
	 * A specialized pseudo-event module to help keep track of components waiting to
	 * be notified when their DOM representations are available for use.
	 *
	 * This implements `PooledClass`, so you should never need to instantiate this.
	 * Instead, use `CallbackQueue.getPooled()`.
	 *
	 * @class ReactMountReady
	 * @implements PooledClass
	 * @internal
	 */
	function CallbackQueue() {
	  this._callbacks = null;
	  this._contexts = null;
	}
	
	assign(CallbackQueue.prototype, {
	
	  /**
	   * Enqueues a callback to be invoked when `notifyAll` is invoked.
	   *
	   * @param {function} callback Invoked when `notifyAll` is invoked.
	   * @param {?object} context Context to call `callback` with.
	   * @internal
	   */
	  enqueue: function enqueue(callback, context) {
	    this._callbacks = this._callbacks || [];
	    this._contexts = this._contexts || [];
	    this._callbacks.push(callback);
	    this._contexts.push(context);
	  },
	
	  /**
	   * Invokes all enqueued callbacks and clears the queue. This is invoked after
	   * the DOM representation of a component has been created or updated.
	   *
	   * @internal
	   */
	  notifyAll: function notifyAll() {
	    var callbacks = this._callbacks;
	    var contexts = this._contexts;
	    if (callbacks) {
	      !(callbacks.length === contexts.length) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Mismatched list of contexts in callback queue') : invariant(false) : undefined;
	      this._callbacks = null;
	      this._contexts = null;
	      for (var i = 0; i < callbacks.length; i++) {
	        callbacks[i].call(contexts[i]);
	      }
	      callbacks.length = 0;
	      contexts.length = 0;
	    }
	  },
	
	  /**
	   * Resets the internal queue.
	   *
	   * @internal
	   */
	  reset: function reset() {
	    this._callbacks = null;
	    this._contexts = null;
	  },
	
	  /**
	   * `PooledClass` looks for this.
	   */
	  destructor: function destructor() {
	    this.reset();
	  }
	
	});
	
	PooledClass.addPoolingTo(CallbackQueue);
	
	module.exports = CallbackQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule PooledClass
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};
	
	var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};
	
	var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};
	
	var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};
	
	var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4, a5);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4, a5);
	  }
	};
	
	var standardReleaser = function standardReleaser(instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : invariant(false) : undefined;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};
	
	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;
	
	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances (optional).
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};
	
	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler,
	  fiveArgumentPooler: fiveArgumentPooler
	};
	
	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule Transaction
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	/**
	 * `Transaction` creates a black box that is able to wrap any method such that
	 * certain invariants are maintained before and after the method is invoked
	 * (Even if an exception is thrown while invoking the wrapped method). Whoever
	 * instantiates a transaction can provide enforcers of the invariants at
	 * creation time. The `Transaction` class itself will supply one additional
	 * automatic invariant for you - the invariant that any transaction instance
	 * should not be run while it is already being run. You would typically create a
	 * single instance of a `Transaction` for reuse multiple times, that potentially
	 * is used to wrap several different methods. Wrappers are extremely simple -
	 * they only require implementing two methods.
	 *
	 * <pre>
	 *                       wrappers (injected at creation time)
	 *                                      +        +
	 *                                      |        |
	 *                    +-----------------|--------|--------------+
	 *                    |                 v        |              |
	 *                    |      +---------------+   |              |
	 *                    |   +--|    wrapper1   |---|----+         |
	 *                    |   |  +---------------+   v    |         |
	 *                    |   |          +-------------+  |         |
	 *                    |   |     +----|   wrapper2  |--------+   |
	 *                    |   |     |    +-------------+  |     |   |
	 *                    |   |     |                     |     |   |
	 *                    |   v     v                     v     v   | wrapper
	 *                    | +---+ +---+   +---------+   +---+ +---+ | invariants
	 * perform(anyMethod) | |   | |   |   |         |   |   | |   | | maintained
	 * +----------------->|-|---|-|---|-->|anyMethod|---|---|-|---|-|-------->
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | |   | |   |   |         |   |   | |   | |
	 *                    | +---+ +---+   +---------+   +---+ +---+ |
	 *                    |  initialize                    close    |
	 *                    +-----------------------------------------+
	 * </pre>
	 *
	 * Use cases:
	 * - Preserving the input selection ranges before/after reconciliation.
	 *   Restoring selection even in the event of an unexpected error.
	 * - Deactivating events while rearranging the DOM, preventing blurs/focuses,
	 *   while guaranteeing that afterwards, the event system is reactivated.
	 * - Flushing a queue of collected DOM mutations to the main UI thread after a
	 *   reconciliation takes place in a worker thread.
	 * - Invoking any collected `componentDidUpdate` callbacks after rendering new
	 *   content.
	 * - (Future use case): Wrapping particular flushes of the `ReactWorker` queue
	 *   to preserve the `scrollTop` (an automatic scroll aware DOM).
	 * - (Future use case): Layout calculations before and after DOM updates.
	 *
	 * Transactional plugin API:
	 * - A module that has an `initialize` method that returns any precomputation.
	 * - and a `close` method that accepts the precomputation. `close` is invoked
	 *   when the wrapped process is completed, or has failed.
	 *
	 * @param {Array<TransactionalWrapper>} transactionWrapper Wrapper modules
	 * that implement `initialize` and `close`.
	 * @return {Transaction} Single transaction for reuse in thread.
	 *
	 * @class Transaction
	 */
	var Mixin = {
	  /**
	   * Sets up this instance so that it is prepared for collecting metrics. Does
	   * so such that this setup method may be used on an instance that is already
	   * initialized, in a way that does not consume additional memory upon reuse.
	   * That can be useful if you decide to make your subclass of this mixin a
	   * "PooledClass".
	   */
	  reinitializeTransaction: function reinitializeTransaction() {
	    this.transactionWrappers = this.getTransactionWrappers();
	    if (this.wrapperInitData) {
	      this.wrapperInitData.length = 0;
	    } else {
	      this.wrapperInitData = [];
	    }
	    this._isInTransaction = false;
	  },
	
	  _isInTransaction: false,
	
	  /**
	   * @abstract
	   * @return {Array<TransactionWrapper>} Array of transaction wrappers.
	   */
	  getTransactionWrappers: null,
	
	  isInTransaction: function isInTransaction() {
	    return !!this._isInTransaction;
	  },
	
	  /**
	   * Executes the function within a safety window. Use this for the top level
	   * methods that result in large amounts of computation/mutations that would
	   * need to be safety checked. The optional arguments helps prevent the need
	   * to bind in many cases.
	   *
	   * @param {function} method Member of scope to call.
	   * @param {Object} scope Scope to invoke from.
	   * @param {Object?=} a Argument to pass to the method.
	   * @param {Object?=} b Argument to pass to the method.
	   * @param {Object?=} c Argument to pass to the method.
	   * @param {Object?=} d Argument to pass to the method.
	   * @param {Object?=} e Argument to pass to the method.
	   * @param {Object?=} f Argument to pass to the method.
	   *
	   * @return {*} Return value from `method`.
	   */
	  perform: function perform(method, scope, a, b, c, d, e, f) {
	    !!this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.') : invariant(false) : undefined;
	    var errorThrown;
	    var ret;
	    try {
	      this._isInTransaction = true;
	      // Catching errors makes debugging more difficult, so we start with
	      // errorThrown set to true before setting it to false after calling
	      // close -- if it's still set to true in the finally block, it means
	      // one of these calls threw.
	      errorThrown = true;
	      this.initializeAll(0);
	      ret = method.call(scope, a, b, c, d, e, f);
	      errorThrown = false;
	    } finally {
	      try {
	        if (errorThrown) {
	          // If `method` throws, prefer to show that stack trace over any thrown
	          // by invoking `closeAll`.
	          try {
	            this.closeAll(0);
	          } catch (err) {}
	        } else {
	          // Since `method` didn't throw, we don't want to silence the exception
	          // here.
	          this.closeAll(0);
	        }
	      } finally {
	        this._isInTransaction = false;
	      }
	    }
	    return ret;
	  },
	
	  initializeAll: function initializeAll(startIndex) {
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      try {
	        // Catching errors makes debugging more difficult, so we start with the
	        // OBSERVED_ERROR state before overwriting it with the real return value
	        // of initialize -- if it's still set to OBSERVED_ERROR in the finally
	        // block, it means wrapper.initialize threw.
	        this.wrapperInitData[i] = Transaction.OBSERVED_ERROR;
	        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
	      } finally {
	        if (this.wrapperInitData[i] === Transaction.OBSERVED_ERROR) {
	          // The initializer for wrapper i threw an error; initialize the
	          // remaining wrappers but silence any exceptions from them to ensure
	          // that the first error is the one to bubble up.
	          try {
	            this.initializeAll(i + 1);
	          } catch (err) {}
	        }
	      }
	    }
	  },
	
	  /**
	   * Invokes each of `this.transactionWrappers.close[i]` functions, passing into
	   * them the respective return values of `this.transactionWrappers.init[i]`
	   * (`close`rs that correspond to initializers that failed will not be
	   * invoked).
	   */
	  closeAll: function closeAll(startIndex) {
	    !this.isInTransaction() ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Transaction.closeAll(): Cannot close transaction when none are open.') : invariant(false) : undefined;
	    var transactionWrappers = this.transactionWrappers;
	    for (var i = startIndex; i < transactionWrappers.length; i++) {
	      var wrapper = transactionWrappers[i];
	      var initData = this.wrapperInitData[i];
	      var errorThrown;
	      try {
	        // Catching errors makes debugging more difficult, so we start with
	        // errorThrown set to true before setting it to false after calling
	        // close -- if it's still set to true in the finally block, it means
	        // wrapper.close threw.
	        errorThrown = true;
	        if (initData !== Transaction.OBSERVED_ERROR && wrapper.close) {
	          wrapper.close.call(this, initData);
	        }
	        errorThrown = false;
	      } finally {
	        if (errorThrown) {
	          // The closer for wrapper i threw an error; close the remaining
	          // wrappers but silence any exceptions from them to ensure that the
	          // first error is the one to bubble up.
	          try {
	            this.closeAll(i + 1);
	          } catch (e) {}
	        }
	      }
	    }
	    this.wrapperInitData.length = 0;
	  }
	};
	
	var Transaction = {
	
	  Mixin: Mixin,
	
	  /**
	   * Token to look for to determine if an error occurred.
	   */
	  OBSERVED_ERROR: {}
	
	};
	
	module.exports = Transaction;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule emptyObject
	 */
	
	'use strict';
	
	var emptyObject = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}
	
	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule containsNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isTextNode = __webpack_require__(60);
	
	/*eslint-disable no-bitwise */
	
	/**
	 * Checks if a given DOM node contains or is another DOM node.
	 *
	 * @param {?DOMNode} outerNode Outer DOM node.
	 * @param {?DOMNode} innerNode Inner DOM node.
	 * @return {boolean} True if `outerNode` contains or is `innerNode`.
	 */
	function containsNode(_x, _x2) {
	  var _again = true;
	
	  _function: while (_again) {
	    var outerNode = _x,
	        innerNode = _x2;
	    _again = false;
	
	    if (!outerNode || !innerNode) {
	      return false;
	    } else if (outerNode === innerNode) {
	      return true;
	    } else if (isTextNode(outerNode)) {
	      return false;
	    } else if (isTextNode(innerNode)) {
	      _x = outerNode;
	      _x2 = innerNode.parentNode;
	      _again = true;
	      continue _function;
	    } else if (outerNode.contains) {
	      return outerNode.contains(innerNode);
	    } else if (outerNode.compareDocumentPosition) {
	      return !!(outerNode.compareDocumentPosition(innerNode) & 16);
	    } else {
	      return false;
	    }
	  }
	}
	
	module.exports = containsNode;

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextNode
	 * @typechecks
	 */
	
	'use strict';
	
	var isNode = __webpack_require__(61);
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM text node.
	 */
	function isTextNode(object) {
	  return isNode(object) && object.nodeType == 3;
	}
	
	module.exports = isTextNode;

/***/ },
/* 61 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isNode
	 * @typechecks
	 */
	
	/**
	 * @param {*} object The object to check.
	 * @return {boolean} Whether or not the object is a DOM node.
	 */
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	function isNode(object) {
	  return !!(object && (typeof Node === 'function' ? object instanceof Node : (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
	}
	
	module.exports = isNode;

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule instantiateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCompositeComponent = __webpack_require__(63);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactNativeComponent = __webpack_require__(69);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	// To avoid a cyclic dependency, we create the final class in this module
	var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper() {};
	assign(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent.Mixin, {
	  _instantiateReactComponent: instantiateReactComponent
	});
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Check if the type reference is a known internal type. I.e. not a user
	 * provided composite type.
	 *
	 * @param {function} type
	 * @return {boolean} Returns true if this is a valid internal type.
	 */
	function isInternalComponentType(type) {
	  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
	}
	
	/**
	 * Given a ReactNode, create an instance that will actually be mounted.
	 *
	 * @param {ReactNode} node
	 * @return {object} A new instance of the element's constructor.
	 * @protected
	 */
	function instantiateReactComponent(node) {
	  var instance;
	
	  if (node === null || node === false) {
	    instance = new ReactEmptyComponent(instantiateReactComponent);
	  } else if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) === 'object') {
	    var element = node;
	    !(element && (typeof element.type === 'function' || typeof element.type === 'string')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : _typeof(element.type), getDeclarationErrorAddendum(element._owner)) : invariant(false) : undefined;
	
	    // Special case string values
	    if (typeof element.type === 'string') {
	      instance = ReactNativeComponent.createInternalComponent(element);
	    } else if (isInternalComponentType(element.type)) {
	      // This is temporarily available for custom components that are not string
	      // representations. I.e. ART. Once those are updated to use the string
	      // representation, we can drop this code path.
	      instance = new element.type(element);
	    } else {
	      instance = new ReactCompositeComponentWrapper();
	    }
	  } else if (typeof node === 'string' || typeof node === 'number') {
	    instance = ReactNativeComponent.createInstanceForText(node);
	  } else {
	     true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Encountered invalid React node of type %s', typeof node === 'undefined' ? 'undefined' : _typeof(node)) : invariant(false) : undefined;
	  }
	
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(typeof instance.construct === 'function' && typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.') : undefined;
	  }
	
	  // Sets up the instance. This can probably just move into the constructor now.
	  instance.construct(node);
	
	  // These two fields are used by the DOM and ART diffing algorithms
	  // respectively. Instead of using expandos on components, we should be
	  // storing the state needed by the diffing algorithms elsewhere.
	  instance._mountIndex = 0;
	  instance._mountImage = null;
	
	  if (process.env.NODE_ENV !== 'production') {
	    instance._isOwnerNecessary = false;
	    instance._warnedAboutRefsInRender = false;
	  }
	
	  // Internal instances should fully constructed at this point, so they should
	  // not get any new fields added to them at this point.
	  if (process.env.NODE_ENV !== 'production') {
	    if (Object.preventExtensions) {
	      Object.preventExtensions(instance);
	    }
	  }
	
	  return instance;
	}
	
	module.exports = instantiateReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactCompositeComponent
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactPerf = __webpack_require__(18);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactReconciler = __webpack_require__(50);
	var ReactUpdateQueue = __webpack_require__(53);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var warning = __webpack_require__(25);
	
	function getDeclarationErrorAddendum(component) {
	  var owner = component._currentElement._owner || null;
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	function StatelessComponent(Component) {}
	StatelessComponent.prototype.render = function () {
	  var Component = ReactInstanceMap.get(this)._currentElement.type;
	  return Component(this.props, this.context, this.updater);
	};
	
	/**
	 * ------------------ The Life-Cycle of a Composite Component ------------------
	 *
	 * - constructor: Initialization of state. The instance is now retained.
	 *   - componentWillMount
	 *   - render
	 *   - [children's constructors]
	 *     - [children's componentWillMount and render]
	 *     - [children's componentDidMount]
	 *     - componentDidMount
	 *
	 *       Update Phases:
	 *       - componentWillReceiveProps (only called if parent updated)
	 *       - shouldComponentUpdate
	 *         - componentWillUpdate
	 *           - render
	 *           - [children's constructors or receive props phases]
	 *         - componentDidUpdate
	 *
	 *     - componentWillUnmount
	 *     - [children's componentWillUnmount]
	 *   - [children destroyed]
	 * - (destroyed): The instance is now blank, released by React and ready for GC.
	 *
	 * -----------------------------------------------------------------------------
	 */
	
	/**
	 * An incrementing ID assigned to each component when it is mounted. This is
	 * used to enforce the order in which `ReactUpdates` updates dirty components.
	 *
	 * @private
	 */
	var nextMountID = 1;
	
	/**
	 * @lends {ReactCompositeComponent.prototype}
	 */
	var ReactCompositeComponentMixin = {
	
	  /**
	   * Base constructor for all composite component.
	   *
	   * @param {ReactElement} element
	   * @final
	   * @internal
	   */
	  construct: function construct(element) {
	    this._currentElement = element;
	    this._rootNodeID = null;
	    this._instance = null;
	
	    // See ReactUpdateQueue
	    this._pendingElement = null;
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    this._renderedComponent = null;
	
	    this._context = null;
	    this._mountOrder = 0;
	    this._topLevelWrapper = null;
	
	    // See ReactUpdates and ReactUpdateQueue.
	    this._pendingCallbacks = null;
	  },
	
	  /**
	   * Initializes the component, renders markup, and registers event listeners.
	   *
	   * @param {string} rootID DOM ID of the root node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @return {?string} Rendered markup to be inserted into the DOM.
	   * @final
	   * @internal
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._context = context;
	    this._mountOrder = nextMountID++;
	    this._rootNodeID = rootID;
	
	    var publicProps = this._processProps(this._currentElement.props);
	    var publicContext = this._processContext(context);
	
	    var Component = this._currentElement.type;
	
	    // Initialize the public class
	    var inst;
	    var renderedElement;
	
	    // This is a way to detect if Component is a stateless arrow function
	    // component, which is not newable. It might not be 100% reliable but is
	    // something we can do until we start detecting that Component extends
	    // React.Component. We already assume that typeof Component === 'function'.
	    var canInstantiate = 'prototype' in Component;
	
	    if (canInstantiate) {
	      if (process.env.NODE_ENV !== 'production') {
	        ReactCurrentOwner.current = this;
	        try {
	          inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	        } finally {
	          ReactCurrentOwner.current = null;
	        }
	      } else {
	        inst = new Component(publicProps, publicContext, ReactUpdateQueue);
	      }
	    }
	
	    if (!canInstantiate || inst === null || inst === false || ReactElement.isValidElement(inst)) {
	      renderedElement = inst;
	      inst = new StatelessComponent(Component);
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This will throw later in _renderValidatedComponent, but add an early
	      // warning now to help debugging
	      if (inst.render == null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`, returned ' + 'null/false from a stateless component, or tried to render an ' + 'element whose type is a function that isn\'t a React component.', Component.displayName || Component.name || 'Component') : undefined;
	      } else {
	        // We support ES6 inheriting from React.Component, the module pattern,
	        // and stateless components, but not ES6 classes that don't extend
	        process.env.NODE_ENV !== 'production' ? warning(Component.prototype && Component.prototype.isReactComponent || !canInstantiate || !(inst instanceof Component), '%s(...): React component classes must extend React.Component.', Component.displayName || Component.name || 'Component') : undefined;
	      }
	    }
	
	    // These should be set up in the constructor, but as a convenience for
	    // simpler class abstractions, we set them up after the fact.
	    inst.props = publicProps;
	    inst.context = publicContext;
	    inst.refs = emptyObject;
	    inst.updater = ReactUpdateQueue;
	
	    this._instance = inst;
	
	    // Store a reference from the instance back to the internal representation
	    ReactInstanceMap.set(inst, this);
	
	    if (process.env.NODE_ENV !== 'production') {
	      // Since plain JS classes are defined without any special initialization
	      // logic, we can not catch common errors early. Therefore, we have to
	      // catch them here, at initialization time, instead.
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component') : undefined;
	    }
	
	    var initialState = inst.state;
	    if (initialState === undefined) {
	      inst.state = initialState = null;
	    }
	    !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	
	    if (inst.componentWillMount) {
	      inst.componentWillMount();
	      // When mounting, calls to `setState` by `componentWillMount` will set
	      // `this._pendingStateQueue` without triggering a re-render.
	      if (this._pendingStateQueue) {
	        inst.state = this._processPendingState(inst.props, inst.context);
	      }
	    }
	
	    // If not a stateless component, we now render
	    if (renderedElement === undefined) {
	      renderedElement = this._renderValidatedComponent();
	    }
	
	    this._renderedComponent = this._instantiateReactComponent(renderedElement);
	
	    var markup = ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, this._processChildContext(context));
	    if (inst.componentDidMount) {
	      transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
	    }
	
	    return markup;
	  },
	
	  /**
	   * Releases any resources allocated by `mountComponent`.
	   *
	   * @final
	   * @internal
	   */
	  unmountComponent: function unmountComponent() {
	    var inst = this._instance;
	
	    if (inst.componentWillUnmount) {
	      inst.componentWillUnmount();
	    }
	
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    this._renderedComponent = null;
	    this._instance = null;
	
	    // Reset pending fields
	    // Even if this component is scheduled for another update in ReactUpdates,
	    // it would still be ignored because these fields are reset.
	    this._pendingStateQueue = null;
	    this._pendingReplaceState = false;
	    this._pendingForceUpdate = false;
	    this._pendingCallbacks = null;
	    this._pendingElement = null;
	
	    // These fields do not really need to be reset since this object is no
	    // longer accessible.
	    this._context = null;
	    this._rootNodeID = null;
	    this._topLevelWrapper = null;
	
	    // Delete the reference from the instance to this internal representation
	    // which allow the internals to be properly cleaned up even if the user
	    // leaks a reference to the public instance.
	    ReactInstanceMap.remove(inst);
	
	    // Some existing components rely on inst.props even after they've been
	    // destroyed (in event handlers).
	    // TODO: inst.props = null;
	    // TODO: inst.state = null;
	    // TODO: inst.context = null;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _maskContext: function _maskContext(context) {
	    var maskedContext = null;
	    var Component = this._currentElement.type;
	    var contextTypes = Component.contextTypes;
	    if (!contextTypes) {
	      return emptyObject;
	    }
	    maskedContext = {};
	    for (var contextName in contextTypes) {
	      maskedContext[contextName] = context[contextName];
	    }
	    return maskedContext;
	  },
	
	  /**
	   * Filters the context object to only contain keys specified in
	   * `contextTypes`, and asserts that they are valid.
	   *
	   * @param {object} context
	   * @return {?object}
	   * @private
	   */
	  _processContext: function _processContext(context) {
	    var maskedContext = this._maskContext(context);
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.contextTypes) {
	        this._checkPropTypes(Component.contextTypes, maskedContext, ReactPropTypeLocations.context);
	      }
	    }
	    return maskedContext;
	  },
	
	  /**
	   * @param {object} currentContext
	   * @return {object}
	   * @private
	   */
	  _processChildContext: function _processChildContext(currentContext) {
	    var Component = this._currentElement.type;
	    var inst = this._instance;
	    var childContext = inst.getChildContext && inst.getChildContext();
	    if (childContext) {
	      !(_typeof(Component.childContextTypes) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	      if (process.env.NODE_ENV !== 'production') {
	        this._checkPropTypes(Component.childContextTypes, childContext, ReactPropTypeLocations.childContext);
	      }
	      for (var name in childContext) {
	        !(name in Component.childContextTypes) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name) : invariant(false) : undefined;
	      }
	      return assign({}, currentContext, childContext);
	    }
	    return currentContext;
	  },
	
	  /**
	   * Processes props by setting default values for unspecified props and
	   * asserting that the props are valid. Does not mutate its argument; returns
	   * a new props object with defaults merged in.
	   *
	   * @param {object} newProps
	   * @return {object}
	   * @private
	   */
	  _processProps: function _processProps(newProps) {
	    if (process.env.NODE_ENV !== 'production') {
	      var Component = this._currentElement.type;
	      if (Component.propTypes) {
	        this._checkPropTypes(Component.propTypes, newProps, ReactPropTypeLocations.prop);
	      }
	    }
	    return newProps;
	  },
	
	  /**
	   * Assert that the props are valid
	   *
	   * @param {object} propTypes Map of prop name to a ReactPropType
	   * @param {object} props
	   * @param {string} location e.g. "prop", "context", "child context"
	   * @private
	   */
	  _checkPropTypes: function _checkPropTypes(propTypes, props, location) {
	    // TODO: Stop validating prop types here and only use the element
	    // validation.
	    var componentName = this.getName();
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error;
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually ' + 'from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	          error = propTypes[propName](props, propName, componentName, location);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error instanceof Error) {
	          // We may want to extend this logic for similar errors in
	          // top-level render calls, so I'm abstracting it away into
	          // a function to minimize refactoring in the future
	          var addendum = getDeclarationErrorAddendum(this);
	
	          if (location === ReactPropTypeLocations.prop) {
	            // Preface gives us something to blacklist in warning module
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Composite propType: %s%s', error.message, addendum) : undefined;
	          } else {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Failed Context Types: %s%s', error.message, addendum) : undefined;
	          }
	        }
	      }
	    }
	  },
	
	  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
	    var prevElement = this._currentElement;
	    var prevContext = this._context;
	
	    this._pendingElement = null;
	
	    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
	  },
	
	  /**
	   * If any of `_pendingElement`, `_pendingStateQueue`, or `_pendingForceUpdate`
	   * is set, update the component.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
	    if (this._pendingElement != null) {
	      ReactReconciler.receiveComponent(this, this._pendingElement || this._currentElement, transaction, this._context);
	    }
	
	    if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
	      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
	    }
	  },
	
	  /**
	   * Perform an update to a mounted component. The componentWillReceiveProps and
	   * shouldComponentUpdate methods are called, then (assuming the update isn't
	   * skipped) the remaining update lifecycle methods are called and the DOM
	   * representation is updated.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevParentElement
	   * @param {ReactElement} nextParentElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
	    var inst = this._instance;
	
	    var nextContext = this._context === nextUnmaskedContext ? inst.context : this._processContext(nextUnmaskedContext);
	    var nextProps;
	
	    // Distinguish between a props update versus a simple state update
	    if (prevParentElement === nextParentElement) {
	      // Skip checking prop types again -- we don't read inst.props to avoid
	      // warning for DOM component props in this upgrade
	      nextProps = nextParentElement.props;
	    } else {
	      nextProps = this._processProps(nextParentElement.props);
	      // An update here will schedule an update but immediately set
	      // _pendingStateQueue which will ensure that any state updates gets
	      // immediately reconciled instead of waiting for the next batch.
	
	      if (inst.componentWillReceiveProps) {
	        inst.componentWillReceiveProps(nextProps, nextContext);
	      }
	    }
	
	    var nextState = this._processPendingState(nextProps, nextContext);
	
	    var shouldUpdate = this._pendingForceUpdate || !inst.shouldComponentUpdate || inst.shouldComponentUpdate(nextProps, nextState, nextContext);
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(typeof shouldUpdate !== 'undefined', '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent') : undefined;
	    }
	
	    if (shouldUpdate) {
	      this._pendingForceUpdate = false;
	      // Will set `this.props`, `this.state` and `this.context`.
	      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
	    } else {
	      // If it's determined that a component should not update, we still want
	      // to set props and state but we shortcut the rest of the update.
	      this._currentElement = nextParentElement;
	      this._context = nextUnmaskedContext;
	      inst.props = nextProps;
	      inst.state = nextState;
	      inst.context = nextContext;
	    }
	  },
	
	  _processPendingState: function _processPendingState(props, context) {
	    var inst = this._instance;
	    var queue = this._pendingStateQueue;
	    var replace = this._pendingReplaceState;
	    this._pendingReplaceState = false;
	    this._pendingStateQueue = null;
	
	    if (!queue) {
	      return inst.state;
	    }
	
	    if (replace && queue.length === 1) {
	      return queue[0];
	    }
	
	    var nextState = assign({}, replace ? queue[0] : inst.state);
	    for (var i = replace ? 1 : 0; i < queue.length; i++) {
	      var partial = queue[i];
	      assign(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
	    }
	
	    return nextState;
	  },
	
	  /**
	   * Merges new props and state, notifies delegate methods of update and
	   * performs update.
	   *
	   * @param {ReactElement} nextElement Next element
	   * @param {object} nextProps Next public object to set as properties.
	   * @param {?object} nextState Next object to set as state.
	   * @param {?object} nextContext Next public object to set as context.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?object} unmaskedContext
	   * @private
	   */
	  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
	    var inst = this._instance;
	
	    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
	    var prevProps;
	    var prevState;
	    var prevContext;
	    if (hasComponentDidUpdate) {
	      prevProps = inst.props;
	      prevState = inst.state;
	      prevContext = inst.context;
	    }
	
	    if (inst.componentWillUpdate) {
	      inst.componentWillUpdate(nextProps, nextState, nextContext);
	    }
	
	    this._currentElement = nextElement;
	    this._context = unmaskedContext;
	    inst.props = nextProps;
	    inst.state = nextState;
	    inst.context = nextContext;
	
	    this._updateRenderedComponent(transaction, unmaskedContext);
	
	    if (hasComponentDidUpdate) {
	      transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
	    }
	  },
	
	  /**
	   * Call the component's `render` method and update the DOM accordingly.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   */
	  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
	    var prevComponentInstance = this._renderedComponent;
	    var prevRenderedElement = prevComponentInstance._currentElement;
	    var nextRenderedElement = this._renderValidatedComponent();
	    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
	      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
	    } else {
	      // These two IDs are actually the same! But nothing should rely on that.
	      var thisID = this._rootNodeID;
	      var prevComponentID = prevComponentInstance._rootNodeID;
	      ReactReconciler.unmountComponent(prevComponentInstance);
	
	      this._renderedComponent = this._instantiateReactComponent(nextRenderedElement);
	      var nextMarkup = ReactReconciler.mountComponent(this._renderedComponent, thisID, transaction, this._processChildContext(context));
	      this._replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	    }
	  },
	
	  /**
	   * @protected
	   */
	  _replaceNodeWithMarkupByID: function _replaceNodeWithMarkupByID(prevComponentID, nextMarkup) {
	    ReactComponentEnvironment.replaceNodeWithMarkupByID(prevComponentID, nextMarkup);
	  },
	
	  /**
	   * @protected
	   */
	  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
	    var inst = this._instance;
	    var renderedComponent = inst.render();
	    if (process.env.NODE_ENV !== 'production') {
	      // We allow auto-mocks to proceed as if they're returning null.
	      if (typeof renderedComponent === 'undefined' && inst.render._isMockFunction) {
	        // This is probably bad practice. Consider warning here and
	        // deprecating this convenience.
	        renderedComponent = null;
	      }
	    }
	
	    return renderedComponent;
	  },
	
	  /**
	   * @private
	   */
	  _renderValidatedComponent: function _renderValidatedComponent() {
	    var renderedComponent;
	    ReactCurrentOwner.current = this;
	    try {
	      renderedComponent = this._renderValidatedComponentWithoutOwnerOrContext();
	    } finally {
	      ReactCurrentOwner.current = null;
	    }
	    !(
	    // TODO: An `isValidNode` function would probably be more appropriate
	    renderedComponent === null || renderedComponent === false || ReactElement.isValidElement(renderedComponent)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.render(): A valid ReactComponent must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent') : invariant(false) : undefined;
	    return renderedComponent;
	  },
	
	  /**
	   * Lazily allocates the refs object and stores `component` as `ref`.
	   *
	   * @param {string} ref Reference name.
	   * @param {component} component Component to store as `ref`.
	   * @final
	   * @private
	   */
	  attachRef: function attachRef(ref, component) {
	    var inst = this.getPublicInstance();
	    !(inst != null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Stateless function components cannot have refs.') : invariant(false) : undefined;
	    var publicComponentInstance = component.getPublicInstance();
	    if (process.env.NODE_ENV !== 'production') {
	      var componentName = component && component.getName ? component.getName() : 'a component';
	      process.env.NODE_ENV !== 'production' ? warning(publicComponentInstance != null, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName()) : undefined;
	    }
	    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
	    refs[ref] = publicComponentInstance;
	  },
	
	  /**
	   * Detaches a reference name.
	   *
	   * @param {string} ref Name to dereference.
	   * @final
	   * @private
	   */
	  detachRef: function detachRef(ref) {
	    var refs = this.getPublicInstance().refs;
	    delete refs[ref];
	  },
	
	  /**
	   * Get a text description of the component that can be used to identify it
	   * in error messages.
	   * @return {string} The name or null.
	   * @internal
	   */
	  getName: function getName() {
	    var type = this._currentElement.type;
	    var constructor = this._instance && this._instance.constructor;
	    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
	  },
	
	  /**
	   * Get the publicly accessible representation of this component - i.e. what
	   * is exposed by refs and returned by render. Can be null for stateless
	   * components.
	   *
	   * @return {ReactComponent} the public component instance.
	   * @internal
	   */
	  getPublicInstance: function getPublicInstance() {
	    var inst = this._instance;
	    if (inst instanceof StatelessComponent) {
	      return null;
	    }
	    return inst;
	  },
	
	  // Stub
	  _instantiateReactComponent: null
	
	};
	
	ReactPerf.measureMethods(ReactCompositeComponentMixin, 'ReactCompositeComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent',
	  _renderValidatedComponent: '_renderValidatedComponent'
	});
	
	var ReactCompositeComponent = {
	
	  Mixin: ReactCompositeComponentMixin
	
	};
	
	module.exports = ReactCompositeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponentEnvironment
	 */
	
	'use strict';
	
	var invariant = __webpack_require__(13);
	
	var injected = false;
	
	var ReactComponentEnvironment = {
	
	  /**
	   * Optionally injectable environment dependent cleanup hook. (server vs.
	   * browser etc). Example: A browser system caches DOM nodes based on component
	   * ID and must remove that cache entry when this instance is unmounted.
	   */
	  unmountIDFromEnvironment: null,
	
	  /**
	   * Optionally injectable hook for swapping out mount images in the middle of
	   * the tree.
	   */
	  replaceNodeWithMarkupByID: null,
	
	  /**
	   * Optionally injectable hook for processing a queue of child updates. Will
	   * later move into MultiChildComponents.
	   */
	  processChildrenUpdates: null,
	
	  injection: {
	    injectEnvironment: function injectEnvironment(environment) {
	      !!injected ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactCompositeComponent: injectEnvironment() can only be called once.') : invariant(false) : undefined;
	      ReactComponentEnvironment.unmountIDFromEnvironment = environment.unmountIDFromEnvironment;
	      ReactComponentEnvironment.replaceNodeWithMarkupByID = environment.replaceNodeWithMarkupByID;
	      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
	      injected = true;
	    }
	  }
	
	};
	
	module.exports = ReactComponentEnvironment;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocations
	 */
	
	'use strict';
	
	var keyMirror = __webpack_require__(17);
	
	var ReactPropTypeLocations = keyMirror({
	  prop: null,
	  context: null,
	  childContext: null
	});
	
	module.exports = ReactPropTypeLocations;

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypeLocationNames
	 */
	
	'use strict';
	
	var ReactPropTypeLocationNames = {};
	
	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}
	
	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 67 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shouldUpdateReactComponent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Given a `prevElement` and `nextElement`, determines if the existing
	 * instance should be updated as opposed to being destroyed or replaced by a new
	 * instance. Both arguments are elements. This ensures that this logic can
	 * operate on stateless trees without any backing instance.
	 *
	 * @param {?object} prevElement
	 * @param {?object} nextElement
	 * @return {boolean} True if the existing instance should be updated.
	 * @protected
	 */
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	function shouldUpdateReactComponent(prevElement, nextElement) {
	  var prevEmpty = prevElement === null || prevElement === false;
	  var nextEmpty = nextElement === null || nextElement === false;
	  if (prevEmpty || nextEmpty) {
	    return prevEmpty === nextEmpty;
	  }
	
	  var prevType = typeof prevElement === 'undefined' ? 'undefined' : _typeof(prevElement);
	  var nextType = typeof nextElement === 'undefined' ? 'undefined' : _typeof(nextElement);
	  if (prevType === 'string' || prevType === 'number') {
	    return nextType === 'string' || nextType === 'number';
	  } else {
	    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
	  }
	  return false;
	}
	
	module.exports = shouldUpdateReactComponent;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEmptyComponent
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactEmptyComponentRegistry = __webpack_require__(44);
	var ReactReconciler = __webpack_require__(50);
	
	var assign = __webpack_require__(39);
	
	var placeholderElement;
	
	var ReactEmptyComponentInjection = {
	  injectEmptyComponent: function injectEmptyComponent(component) {
	    placeholderElement = ReactElement.createElement(component);
	  }
	};
	
	var ReactEmptyComponent = function ReactEmptyComponent(instantiate) {
	  this._currentElement = null;
	  this._rootNodeID = null;
	  this._renderedComponent = instantiate(placeholderElement);
	};
	assign(ReactEmptyComponent.prototype, {
	  construct: function construct(element) {},
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    ReactEmptyComponentRegistry.registerNullComponentID(rootID);
	    this._rootNodeID = rootID;
	    return ReactReconciler.mountComponent(this._renderedComponent, rootID, transaction, context);
	  },
	  receiveComponent: function receiveComponent() {},
	  unmountComponent: function unmountComponent(rootID, transaction, context) {
	    ReactReconciler.unmountComponent(this._renderedComponent);
	    ReactEmptyComponentRegistry.deregisterNullComponentID(this._rootNodeID);
	    this._rootNodeID = null;
	    this._renderedComponent = null;
	  }
	});
	
	ReactEmptyComponent.injection = ReactEmptyComponentInjection;
	
	module.exports = ReactEmptyComponent;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNativeComponent
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var autoGenerateWrapperClass = null;
	var genericComponentClass = null;
	// This registry keeps track of wrapper classes around native tags.
	var tagToComponentClass = {};
	var textComponentClass = null;
	
	var ReactNativeComponentInjection = {
	  // This accepts a class that receives the tag string. This is a catch all
	  // that can render any kind of tag.
	  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
	    genericComponentClass = componentClass;
	  },
	  // This accepts a text component class that takes the text string to be
	  // rendered as props.
	  injectTextComponentClass: function injectTextComponentClass(componentClass) {
	    textComponentClass = componentClass;
	  },
	  // This accepts a keyed object with classes as values. Each key represents a
	  // tag. That particular tag will use this class instead of the generic one.
	  injectComponentClasses: function injectComponentClasses(componentClasses) {
	    assign(tagToComponentClass, componentClasses);
	  }
	};
	
	/**
	 * Get a composite component wrapper class for a specific tag.
	 *
	 * @param {ReactElement} element The tag for which to get the class.
	 * @return {function} The React class constructor function.
	 */
	function getComponentClassForElement(element) {
	  if (typeof element.type === 'function') {
	    return element.type;
	  }
	  var tag = element.type;
	  var componentClass = tagToComponentClass[tag];
	  if (componentClass == null) {
	    tagToComponentClass[tag] = componentClass = autoGenerateWrapperClass(tag);
	  }
	  return componentClass;
	}
	
	/**
	 * Get a native internal component class for a specific tag.
	 *
	 * @param {ReactElement} element The element to create.
	 * @return {function} The internal class constructor function.
	 */
	function createInternalComponent(element) {
	  !genericComponentClass ? process.env.NODE_ENV !== 'production' ? invariant(false, 'There is no registered component for the tag %s', element.type) : invariant(false) : undefined;
	  return new genericComponentClass(element.type, element.props);
	}
	
	/**
	 * @param {ReactText} text
	 * @return {ReactComponent}
	 */
	function createInstanceForText(text) {
	  return new textComponentClass(text);
	}
	
	/**
	 * @param {ReactComponent} component
	 * @return {boolean}
	 */
	function isTextComponent(component) {
	  return component instanceof textComponentClass;
	}
	
	var ReactNativeComponent = {
	  getComponentClassForElement: getComponentClassForElement,
	  createInternalComponent: createInternalComponent,
	  createInstanceForText: createInstanceForText,
	  isTextComponent: isTextComponent,
	  injection: ReactNativeComponentInjection
	};
	
	module.exports = ReactNativeComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule validateDOMNesting
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);
	
	var validateDOMNesting = emptyFunction;
	
	if (process.env.NODE_ENV !== 'production') {
	  // This validation code was written based on the HTML5 parsing spec:
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  //
	  // Note: this does not catch all invalid nesting, nor does it try to (as it's
	  // not clear what practical benefit doing so provides); instead, we warn only
	  // for cases where the parser will give a parse tree differing from what React
	  // intended. For example, <b><div></div></b> is invalid but we don't warn
	  // because it still parses correctly; we do warn for other cases like nested
	  // <p> tags where the beginning of the second element implicitly closes the
	  // first, causing a confusing mess.
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#special
	  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
	  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
	  // TODO: Distinguish by namespace here -- for <title>, including it here
	  // errs on the side of fewer warnings
	  'foreignObject', 'desc', 'title'];
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
	  var buttonScopeTags = inScopeTags.concat(['button']);
	
	  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
	  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
	
	  var emptyAncestorInfo = {
	    parentTag: null,
	
	    formTag: null,
	    aTagInScope: null,
	    buttonTagInScope: null,
	    nobrTagInScope: null,
	    pTagInButtonScope: null,
	
	    listItemTagAutoclosing: null,
	    dlItemTagAutoclosing: null
	  };
	
	  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {
	    var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
	    var info = { tag: tag, instance: instance };
	
	    if (inScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.aTagInScope = null;
	      ancestorInfo.buttonTagInScope = null;
	      ancestorInfo.nobrTagInScope = null;
	    }
	    if (buttonScopeTags.indexOf(tag) !== -1) {
	      ancestorInfo.pTagInButtonScope = null;
	    }
	
	    // See rules for 'li', 'dd', 'dt' start tags in
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
	      ancestorInfo.listItemTagAutoclosing = null;
	      ancestorInfo.dlItemTagAutoclosing = null;
	    }
	
	    ancestorInfo.parentTag = info;
	
	    if (tag === 'form') {
	      ancestorInfo.formTag = info;
	    }
	    if (tag === 'a') {
	      ancestorInfo.aTagInScope = info;
	    }
	    if (tag === 'button') {
	      ancestorInfo.buttonTagInScope = info;
	    }
	    if (tag === 'nobr') {
	      ancestorInfo.nobrTagInScope = info;
	    }
	    if (tag === 'p') {
	      ancestorInfo.pTagInButtonScope = info;
	    }
	    if (tag === 'li') {
	      ancestorInfo.listItemTagAutoclosing = info;
	    }
	    if (tag === 'dd' || tag === 'dt') {
	      ancestorInfo.dlItemTagAutoclosing = info;
	    }
	
	    return ancestorInfo;
	  };
	
	  /**
	   * Returns whether
	   */
	  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {
	    // First, let's check if we're in an unusual parsing mode...
	    switch (parentTag) {
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
	      case 'select':
	        return tag === 'option' || tag === 'optgroup' || tag === '#text';
	      case 'optgroup':
	        return tag === 'option' || tag === '#text';
	      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
	      // but
	      case 'option':
	        return tag === '#text';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
	      // No special behavior since these rules fall back to "in body" mode for
	      // all except special table nodes which cause bad parsing behavior anyway.
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
	      case 'tr':
	        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
	      case 'tbody':
	      case 'thead':
	      case 'tfoot':
	        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
	      case 'colgroup':
	        return tag === 'col' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
	      case 'table':
	        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
	      case 'head':
	        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
	
	      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
	      case 'html':
	        return tag === 'head' || tag === 'body';
	    }
	
	    // Probably in the "in body" parsing mode, so we outlaw only tag combos
	    // where the parsing rules cause implicit opens or closes to be added.
	    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
	    switch (tag) {
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';
	
	      case 'rp':
	      case 'rt':
	        return impliedEndTags.indexOf(parentTag) === -1;
	
	      case 'caption':
	      case 'col':
	      case 'colgroup':
	      case 'frame':
	      case 'head':
	      case 'tbody':
	      case 'td':
	      case 'tfoot':
	      case 'th':
	      case 'thead':
	      case 'tr':
	        // These tags are only valid with a few parents that have special child
	        // parsing rules -- if we're down here, then none of those matched and
	        // so we allow it only if we don't know what the parent is, as all other
	        // cases are invalid.
	        return parentTag == null;
	    }
	
	    return true;
	  };
	
	  /**
	   * Returns whether
	   */
	  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {
	    switch (tag) {
	      case 'address':
	      case 'article':
	      case 'aside':
	      case 'blockquote':
	      case 'center':
	      case 'details':
	      case 'dialog':
	      case 'dir':
	      case 'div':
	      case 'dl':
	      case 'fieldset':
	      case 'figcaption':
	      case 'figure':
	      case 'footer':
	      case 'header':
	      case 'hgroup':
	      case 'main':
	      case 'menu':
	      case 'nav':
	      case 'ol':
	      case 'p':
	      case 'section':
	      case 'summary':
	      case 'ul':
	
	      case 'pre':
	      case 'listing':
	
	      case 'table':
	
	      case 'hr':
	
	      case 'xmp':
	
	      case 'h1':
	      case 'h2':
	      case 'h3':
	      case 'h4':
	      case 'h5':
	      case 'h6':
	        return ancestorInfo.pTagInButtonScope;
	
	      case 'form':
	        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
	
	      case 'li':
	        return ancestorInfo.listItemTagAutoclosing;
	
	      case 'dd':
	      case 'dt':
	        return ancestorInfo.dlItemTagAutoclosing;
	
	      case 'button':
	        return ancestorInfo.buttonTagInScope;
	
	      case 'a':
	        // Spec says something about storing a list of markers, but it sounds
	        // equivalent to this check.
	        return ancestorInfo.aTagInScope;
	
	      case 'nobr':
	        return ancestorInfo.nobrTagInScope;
	    }
	
	    return null;
	  };
	
	  /**
	   * Given a ReactCompositeComponent instance, return a list of its recursive
	   * owners, starting at the root and ending with the instance itself.
	   */
	  var findOwnerStack = function findOwnerStack(instance) {
	    if (!instance) {
	      return [];
	    }
	
	    var stack = [];
	    /*eslint-disable space-after-keywords */
	    do {
	      /*eslint-enable space-after-keywords */
	      stack.push(instance);
	    } while (instance = instance._currentElement._owner);
	    stack.reverse();
	    return stack;
	  };
	
	  var didWarn = {};
	
	  validateDOMNesting = function validateDOMNesting(childTag, childInstance, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	
	    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
	    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
	    var problematic = invalidParent || invalidAncestor;
	
	    if (problematic) {
	      var ancestorTag = problematic.tag;
	      var ancestorInstance = problematic.instance;
	
	      var childOwner = childInstance && childInstance._currentElement._owner;
	      var ancestorOwner = ancestorInstance && ancestorInstance._currentElement._owner;
	
	      var childOwners = findOwnerStack(childOwner);
	      var ancestorOwners = findOwnerStack(ancestorOwner);
	
	      var minStackLen = Math.min(childOwners.length, ancestorOwners.length);
	      var i;
	
	      var deepestCommon = -1;
	      for (i = 0; i < minStackLen; i++) {
	        if (childOwners[i] === ancestorOwners[i]) {
	          deepestCommon = i;
	        } else {
	          break;
	        }
	      }
	
	      var UNKNOWN = '(unknown)';
	      var childOwnerNames = childOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ancestorOwnerNames = ancestorOwners.slice(deepestCommon + 1).map(function (inst) {
	        return inst.getName() || UNKNOWN;
	      });
	      var ownerInfo = [].concat(
	      // If the parent and child instances have a common owner ancestor, start
	      // with that -- otherwise we just start with the parent's owners.
	      deepestCommon !== -1 ? childOwners[deepestCommon].getName() || UNKNOWN : [], ancestorOwnerNames, ancestorTag,
	      // If we're warning about an invalid (non-parent) ancestry, add '...'
	      invalidAncestor ? ['...'] : [], childOwnerNames, childTag).join(' > ');
	
	      var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + ownerInfo;
	      if (didWarn[warnKey]) {
	        return;
	      }
	      didWarn[warnKey] = true;
	
	      if (invalidParent) {
	        var info = '';
	        if (ancestorTag === 'table' && childTag === 'tr') {
	          info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
	        }
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a child of <%s>. ' + 'See %s.%s', childTag, ancestorTag, ownerInfo, info) : undefined;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'validateDOMNesting(...): <%s> cannot appear as a descendant of ' + '<%s>. See %s.', childTag, ancestorTag, ownerInfo) : undefined;
	      }
	    }
	  };
	
	  validateDOMNesting.ancestorInfoContextKey = '__validateDOMNesting_ancestorInfo$' + Math.random().toString(36).slice(2);
	
	  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;
	
	  // For testing
	  validateDOMNesting.isTagValidInContext = function (tag, ancestorInfo) {
	    ancestorInfo = ancestorInfo || emptyAncestorInfo;
	    var parentInfo = ancestorInfo.parentTag;
	    var parentTag = parentInfo && parentInfo.tag;
	    return isTagValidWithParent(tag, parentTag) && !findInvalidAncestorForTag(tag, ancestorInfo);
	  };
	}
	
	module.exports = validateDOMNesting;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultInjection
	 */
	
	'use strict';
	
	var BeforeInputEventPlugin = __webpack_require__(72);
	var ChangeEventPlugin = __webpack_require__(80);
	var ClientReactRootIndex = __webpack_require__(83);
	var DefaultEventPluginOrder = __webpack_require__(84);
	var EnterLeaveEventPlugin = __webpack_require__(85);
	var ExecutionEnvironment = __webpack_require__(9);
	var HTMLDOMPropertyConfig = __webpack_require__(89);
	var ReactBrowserComponentMixin = __webpack_require__(90);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactDOMComponent = __webpack_require__(93);
	var ReactDOMTextComponent = __webpack_require__(6);
	var ReactEventListener = __webpack_require__(118);
	var ReactInjection = __webpack_require__(121);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactReconcileTransaction = __webpack_require__(125);
	var SelectEventPlugin = __webpack_require__(130);
	var ServerReactRootIndex = __webpack_require__(131);
	var SimpleEventPlugin = __webpack_require__(132);
	var SVGDOMPropertyConfig = __webpack_require__(141);
	
	var alreadyInjected = false;
	
	function inject() {
	  if (alreadyInjected) {
	    // TODO: This is currently true because these injections are shared between
	    // the client and the server package. They should be built independently
	    // and not share any injection state. Then this problem will be solved.
	    return;
	  }
	  alreadyInjected = true;
	
	  ReactInjection.EventEmitter.injectReactEventListener(ReactEventListener);
	
	  /**
	   * Inject modules for resolving DOM hierarchy and plugin ordering.
	   */
	  ReactInjection.EventPluginHub.injectEventPluginOrder(DefaultEventPluginOrder);
	  ReactInjection.EventPluginHub.injectInstanceHandle(ReactInstanceHandles);
	  ReactInjection.EventPluginHub.injectMount(ReactMount);
	
	  /**
	   * Some important event plugins included by default (without having to require
	   * them).
	   */
	  ReactInjection.EventPluginHub.injectEventPluginsByName({
	    SimpleEventPlugin: SimpleEventPlugin,
	    EnterLeaveEventPlugin: EnterLeaveEventPlugin,
	    ChangeEventPlugin: ChangeEventPlugin,
	    SelectEventPlugin: SelectEventPlugin,
	    BeforeInputEventPlugin: BeforeInputEventPlugin
	  });
	
	  ReactInjection.NativeComponent.injectGenericComponentClass(ReactDOMComponent);
	
	  ReactInjection.NativeComponent.injectTextComponentClass(ReactDOMTextComponent);
	
	  ReactInjection.Class.injectMixin(ReactBrowserComponentMixin);
	
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(HTMLDOMPropertyConfig);
	  ReactInjection.DOMProperty.injectDOMPropertyConfig(SVGDOMPropertyConfig);
	
	  ReactInjection.EmptyComponent.injectEmptyComponent('noscript');
	
	  ReactInjection.Updates.injectReconcileTransaction(ReactReconcileTransaction);
	  ReactInjection.Updates.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	
	  ReactInjection.RootIndex.injectCreateReactRootIndex(ExecutionEnvironment.canUseDOM ? ClientReactRootIndex.createReactRootIndex : ServerReactRootIndex.createReactRootIndex);
	
	  ReactInjection.Component.injectEnvironment(ReactComponentBrowserEnvironment);
	
	  if (process.env.NODE_ENV !== 'production') {
	    var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
	    if (/[?&]react_perf\b/.test(url)) {
	      var ReactDefaultPerf = __webpack_require__(142);
	      ReactDefaultPerf.start();
	    }
	  }
	}
	
	module.exports = {
	  inject: inject
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015 Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule BeforeInputEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var FallbackCompositionState = __webpack_require__(74);
	var SyntheticCompositionEvent = __webpack_require__(76);
	var SyntheticInputEvent = __webpack_require__(78);
	
	var keyOf = __webpack_require__(79);
	
	var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space
	var START_KEYCODE = 229;
	
	var canUseCompositionEvent = ExecutionEnvironment.canUseDOM && 'CompositionEvent' in window;
	
	var documentMode = null;
	if (ExecutionEnvironment.canUseDOM && 'documentMode' in document) {
	  documentMode = document.documentMode;
	}
	
	// Webkit offers a very useful `textInput` event that can be used to
	// directly represent `beforeInput`. The IE `textinput` event is not as
	// useful, so we don't use it.
	var canUseTextInputEvent = ExecutionEnvironment.canUseDOM && 'TextEvent' in window && !documentMode && !isPresto();
	
	// In IE9+, we have access to composition events, but the data supplied
	// by the native compositionend event may be incorrect. Japanese ideographic
	// spaces, for instance (\u3000) are not recorded correctly.
	var useFallbackCompositionData = ExecutionEnvironment.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
	
	/**
	 * Opera <= 12 includes TextEvent in window, but does not fire
	 * text input events. Rely on keypress instead.
	 */
	function isPresto() {
	  var opera = window.opera;
	  return (typeof opera === 'undefined' ? 'undefined' : _typeof(opera)) === 'object' && typeof opera.version === 'function' && parseInt(opera.version(), 10) <= 12;
	}
	
	var SPACEBAR_CODE = 32;
	var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	// Events and their corresponding property names.
	var eventTypes = {
	  beforeInput: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBeforeInput: null }),
	      captured: keyOf({ onBeforeInputCapture: null })
	    },
	    dependencies: [topLevelTypes.topCompositionEnd, topLevelTypes.topKeyPress, topLevelTypes.topTextInput, topLevelTypes.topPaste]
	  },
	  compositionEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionEnd: null }),
	      captured: keyOf({ onCompositionEndCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionEnd, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionStart: null }),
	      captured: keyOf({ onCompositionStartCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionStart, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  },
	  compositionUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCompositionUpdate: null }),
	      captured: keyOf({ onCompositionUpdateCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topCompositionUpdate, topLevelTypes.topKeyDown, topLevelTypes.topKeyPress, topLevelTypes.topKeyUp, topLevelTypes.topMouseDown]
	  }
	};
	
	// Track whether we've ever handled a keypress on the space key.
	var hasSpaceKeypress = false;
	
	/**
	 * Return whether a native keypress event is assumed to be a command.
	 * This is required because Firefox fires `keypress` events for key commands
	 * (cut, copy, select-all, etc.) even though no character is inserted.
	 */
	function isKeypressCommand(nativeEvent) {
	  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&
	  // ctrlKey && altKey is equivalent to AltGr, and is not a command.
	  !(nativeEvent.ctrlKey && nativeEvent.altKey);
	}
	
	/**
	 * Translate native top level events into event types.
	 *
	 * @param {string} topLevelType
	 * @return {object}
	 */
	function getCompositionEventType(topLevelType) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionStart:
	      return eventTypes.compositionStart;
	    case topLevelTypes.topCompositionEnd:
	      return eventTypes.compositionEnd;
	    case topLevelTypes.topCompositionUpdate:
	      return eventTypes.compositionUpdate;
	  }
	}
	
	/**
	 * Does our fallback best-guess model think this event signifies that
	 * composition has begun?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionStart(topLevelType, nativeEvent) {
	  return topLevelType === topLevelTypes.topKeyDown && nativeEvent.keyCode === START_KEYCODE;
	}
	
	/**
	 * Does our fallback mode think that this event is the end of composition?
	 *
	 * @param {string} topLevelType
	 * @param {object} nativeEvent
	 * @return {boolean}
	 */
	function isFallbackCompositionEnd(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topKeyUp:
	      // Command keys insert or clear IME input.
	      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
	    case topLevelTypes.topKeyDown:
	      // Expect IME keyCode on each keydown. If we get any other
	      // code we must have exited earlier.
	      return nativeEvent.keyCode !== START_KEYCODE;
	    case topLevelTypes.topKeyPress:
	    case topLevelTypes.topMouseDown:
	    case topLevelTypes.topBlur:
	      // Events are not possible without cancelling IME.
	      return true;
	    default:
	      return false;
	  }
	}
	
	/**
	 * Google Input Tools provides composition data via a CustomEvent,
	 * with the `data` property populated in the `detail` object. If this
	 * is available on the event object, use it. If not, this is a plain
	 * composition event and we have nothing special to extract.
	 *
	 * @param {object} nativeEvent
	 * @return {?string}
	 */
	function getDataFromCustomEvent(nativeEvent) {
	  var detail = nativeEvent.detail;
	  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {
	    return detail.data;
	  }
	  return null;
	}
	
	// Track the current IME composition fallback object, if any.
	var currentComposition = null;
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticCompositionEvent.
	 */
	function extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var eventType;
	  var fallbackData;
	
	  if (canUseCompositionEvent) {
	    eventType = getCompositionEventType(topLevelType);
	  } else if (!currentComposition) {
	    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
	      eventType = eventTypes.compositionStart;
	    }
	  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	    eventType = eventTypes.compositionEnd;
	  }
	
	  if (!eventType) {
	    return null;
	  }
	
	  if (useFallbackCompositionData) {
	    // The current composition is stored statically and must not be
	    // overwritten while composition continues.
	    if (!currentComposition && eventType === eventTypes.compositionStart) {
	      currentComposition = FallbackCompositionState.getPooled(topLevelTarget);
	    } else if (eventType === eventTypes.compositionEnd) {
	      if (currentComposition) {
	        fallbackData = currentComposition.getData();
	      }
	    }
	  }
	
	  var event = SyntheticCompositionEvent.getPooled(eventType, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  if (fallbackData) {
	    // Inject data generated from fallback path into the synthetic event.
	    // This matches the property of native CompositionEventInterface.
	    event.data = fallbackData;
	  } else {
	    var customData = getDataFromCustomEvent(nativeEvent);
	    if (customData !== null) {
	      event.data = customData;
	    }
	  }
	
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The string corresponding to this `beforeInput` event.
	 */
	function getNativeBeforeInputChars(topLevelType, nativeEvent) {
	  switch (topLevelType) {
	    case topLevelTypes.topCompositionEnd:
	      return getDataFromCustomEvent(nativeEvent);
	    case topLevelTypes.topKeyPress:
	      /**
	       * If native `textInput` events are available, our goal is to make
	       * use of them. However, there is a special case: the spacebar key.
	       * In Webkit, preventing default on a spacebar `textInput` event
	       * cancels character insertion, but it *also* causes the browser
	       * to fall back to its default spacebar behavior of scrolling the
	       * page.
	       *
	       * Tracking at:
	       * https://code.google.com/p/chromium/issues/detail?id=355103
	       *
	       * To avoid this issue, use the keypress event as if no `textInput`
	       * event is available.
	       */
	      var which = nativeEvent.which;
	      if (which !== SPACEBAR_CODE) {
	        return null;
	      }
	
	      hasSpaceKeypress = true;
	      return SPACEBAR_CHAR;
	
	    case topLevelTypes.topTextInput:
	      // Record the characters to be added to the DOM.
	      var chars = nativeEvent.data;
	
	      // If it's a spacebar character, assume that we have already handled
	      // it at the keypress level and bail immediately. Android Chrome
	      // doesn't give us keycodes, so we need to blacklist it.
	      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
	        return null;
	      }
	
	      return chars;
	
	    default:
	      // For other native event types, do nothing.
	      return null;
	  }
	}
	
	/**
	 * For browsers that do not provide the `textInput` event, extract the
	 * appropriate string to use for SyntheticInputEvent.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?string} The fallback string for this `beforeInput` event.
	 */
	function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
	  // If we are currently composing (IME) and using a fallback to do so,
	  // try to extract the composed characters from the fallback object.
	  if (currentComposition) {
	    if (topLevelType === topLevelTypes.topCompositionEnd || isFallbackCompositionEnd(topLevelType, nativeEvent)) {
	      var chars = currentComposition.getData();
	      FallbackCompositionState.release(currentComposition);
	      currentComposition = null;
	      return chars;
	    }
	    return null;
	  }
	
	  switch (topLevelType) {
	    case topLevelTypes.topPaste:
	      // If a paste event occurs after a keypress, throw out the input
	      // chars. Paste events should not lead to BeforeInput events.
	      return null;
	    case topLevelTypes.topKeyPress:
	      /**
	       * As of v27, Firefox may fire keypress events even when no character
	       * will be inserted. A few possibilities:
	       *
	       * - `which` is `0`. Arrow keys, Esc key, etc.
	       *
	       * - `which` is the pressed key code, but no char is available.
	       *   Ex: 'AltGr + d` in Polish. There is no modified character for
	       *   this key combination and no character is inserted into the
	       *   document, but FF fires the keypress for char code `100` anyway.
	       *   No `input` event will occur.
	       *
	       * - `which` is the pressed key code, but a command combination is
	       *   being used. Ex: `Cmd+C`. No character is inserted, and no
	       *   `input` event will occur.
	       */
	      if (nativeEvent.which && !isKeypressCommand(nativeEvent)) {
	        return String.fromCharCode(nativeEvent.which);
	      }
	      return null;
	    case topLevelTypes.topCompositionEnd:
	      return useFallbackCompositionData ? null : nativeEvent.data;
	    default:
	      return null;
	  }
	}
	
	/**
	 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
	 * `textInput` or fallback behavior.
	 *
	 * @param {string} topLevelType Record from `EventConstants`.
	 * @param {DOMEventTarget} topLevelTarget The listening component root node.
	 * @param {string} topLevelTargetID ID of `topLevelTarget`.
	 * @param {object} nativeEvent Native browser event.
	 * @return {?object} A SyntheticInputEvent.
	 */
	function extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	  var chars;
	
	  if (canUseTextInputEvent) {
	    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
	  } else {
	    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
	  }
	
	  // If no characters are being inserted, no BeforeInput event should
	  // be fired.
	  if (!chars) {
	    return null;
	  }
	
	  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, topLevelTargetID, nativeEvent, nativeEventTarget);
	
	  event.data = chars;
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	  return event;
	}
	
	/**
	 * Create an `onBeforeInput` event to match
	 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
	 *
	 * This event plugin is based on the native `textInput` event
	 * available in Chrome, Safari, Opera, and IE. This event fires after
	 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
	 *
	 * `beforeInput` is spec'd but not implemented in any browsers, and
	 * the `input` event does not provide any useful information about what has
	 * actually been added, contrary to the spec. Thus, `textInput` is the best
	 * available event to identify the characters that have actually been inserted
	 * into the target node.
	 *
	 * This plugin is also responsible for emitting `composition` events, thus
	 * allowing us to share composition fallback code for both `beforeInput` and
	 * `composition` event types.
	 */
	var BeforeInputEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    return [extractCompositionEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget), extractBeforeInputEvent(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget)];
	  }
	};
	
	module.exports = BeforeInputEventPlugin;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EventPropagators
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	
	var warning = __webpack_require__(25);
	
	var accumulateInto = __webpack_require__(35);
	var forEachAccumulated = __webpack_require__(36);
	
	var PropagationPhases = EventConstants.PropagationPhases;
	var getListener = EventPluginHub.getListener;
	
	/**
	 * Some event types have a notion of different registration names for different
	 * "phases" of propagation. This finds listeners by a given phase.
	 */
	function listenerAtPhase(id, event, propagationPhase) {
	  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
	  return getListener(id, registrationName);
	}
	
	/**
	 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
	 * here, allows us to not have to bind or create functions for each event.
	 * Mutating the event's members allows us to not have to create a wrapping
	 * "dispatch" object that pairs the event with the listener.
	 */
	function accumulateDirectionalDispatches(domID, upwards, event) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(domID, 'Dispatching id must not be null') : undefined;
	  }
	  var phase = upwards ? PropagationPhases.bubbled : PropagationPhases.captured;
	  var listener = listenerAtPhase(domID, event, phase);
	  if (listener) {
	    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	    event._dispatchIDs = accumulateInto(event._dispatchIDs, domID);
	  }
	}
	
	/**
	 * Collect dispatches (must be entirely collected before dispatching - see unit
	 * tests). Lazily allocate the array to conserve memory.  We must loop through
	 * each event and perform the traversal for each one. We cannot perform a
	 * single traversal for the entire collection of events because each event may
	 * have a different target.
	 */
	function accumulateTwoPhaseDispatchesSingle(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhase(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.
	 */
	function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
	  if (event && event.dispatchConfig.phasedRegistrationNames) {
	    EventPluginHub.injection.getInstanceHandle().traverseTwoPhaseSkipTarget(event.dispatchMarker, accumulateDirectionalDispatches, event);
	  }
	}
	
	/**
	 * Accumulates without regard to direction, does not look for phased
	 * registration names. Same as `accumulateDirectDispatchesSingle` but without
	 * requiring that the `dispatchMarker` be the same as the dispatched ID.
	 */
	function accumulateDispatches(id, ignoredDirection, event) {
	  if (event && event.dispatchConfig.registrationName) {
	    var registrationName = event.dispatchConfig.registrationName;
	    var listener = getListener(id, registrationName);
	    if (listener) {
	      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
	      event._dispatchIDs = accumulateInto(event._dispatchIDs, id);
	    }
	  }
	}
	
	/**
	 * Accumulates dispatches on an `SyntheticEvent`, but only for the
	 * `dispatchMarker`.
	 * @param {SyntheticEvent} event
	 */
	function accumulateDirectDispatchesSingle(event) {
	  if (event && event.dispatchConfig.registrationName) {
	    accumulateDispatches(event.dispatchMarker, null, event);
	  }
	}
	
	function accumulateTwoPhaseDispatches(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
	}
	
	function accumulateTwoPhaseDispatchesSkipTarget(events) {
	  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
	}
	
	function accumulateEnterLeaveDispatches(leave, enter, fromID, toID) {
	  EventPluginHub.injection.getInstanceHandle().traverseEnterLeave(fromID, toID, accumulateDispatches, leave, enter);
	}
	
	function accumulateDirectDispatches(events) {
	  forEachAccumulated(events, accumulateDirectDispatchesSingle);
	}
	
	/**
	 * A small set of propagation patterns, each of which will accept a small amount
	 * of information, and generate a set of "dispatch ready event objects" - which
	 * are sets of events that have already been annotated with a set of dispatched
	 * listener functions/ids. The API is designed this way to discourage these
	 * propagation strategies from actually executing the dispatches, since we
	 * always want to collect the entire set of dispatches before executing event a
	 * single one.
	 *
	 * @constructor EventPropagators
	 */
	var EventPropagators = {
	  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
	  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
	  accumulateDirectDispatches: accumulateDirectDispatches,
	  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
	};
	
	module.exports = EventPropagators;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule FallbackCompositionState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var getTextContentAccessor = __webpack_require__(75);
	
	/**
	 * This helper class stores information about text content of a target node,
	 * allowing comparison of content before and after a given event.
	 *
	 * Identify the node where selection currently begins, then observe
	 * both its text content and its current position in the DOM. Since the
	 * browser may natively replace the target node during composition, we can
	 * use its position to find its replacement.
	 *
	 * @param {DOMEventTarget} root
	 */
	function FallbackCompositionState(root) {
	  this._root = root;
	  this._startText = this.getText();
	  this._fallbackText = null;
	}
	
	assign(FallbackCompositionState.prototype, {
	  destructor: function destructor() {
	    this._root = null;
	    this._startText = null;
	    this._fallbackText = null;
	  },
	
	  /**
	   * Get current text of input.
	   *
	   * @return {string}
	   */
	  getText: function getText() {
	    if ('value' in this._root) {
	      return this._root.value;
	    }
	    return this._root[getTextContentAccessor()];
	  },
	
	  /**
	   * Determine the differing substring between the initially stored
	   * text content and the current content.
	   *
	   * @return {string}
	   */
	  getData: function getData() {
	    if (this._fallbackText) {
	      return this._fallbackText;
	    }
	
	    var start;
	    var startValue = this._startText;
	    var startLength = startValue.length;
	    var end;
	    var endValue = this.getText();
	    var endLength = endValue.length;
	
	    for (start = 0; start < startLength; start++) {
	      if (startValue[start] !== endValue[start]) {
	        break;
	      }
	    }
	
	    var minEnd = startLength - start;
	    for (end = 1; end <= minEnd; end++) {
	      if (startValue[startLength - end] !== endValue[endLength - end]) {
	        break;
	      }
	    }
	
	    var sliceTail = end > 1 ? 1 - end : undefined;
	    this._fallbackText = endValue.slice(start, sliceTail);
	    return this._fallbackText;
	  }
	});
	
	PooledClass.addPoolingTo(FallbackCompositionState);
	
	module.exports = FallbackCompositionState;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getTextContentAccessor
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var contentKey = null;
	
	/**
	 * Gets the key used to access text content on a DOM node.
	 *
	 * @return {?string} Key used to access text content.
	 * @internal
	 */
	function getTextContentAccessor() {
	  if (!contentKey && ExecutionEnvironment.canUseDOM) {
	    // Prefer textContent to innerText because many browsers support both but
	    // SVG <text> elements don't support innerText even when <div> does.
	    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';
	  }
	  return contentKey;
	}
	
	module.exports = getTextContentAccessor;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticCompositionEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
	 */
	var CompositionEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticCompositionEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticCompositionEvent, CompositionEventInterface);
	
	module.exports = SyntheticCompositionEvent;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	var warning = __webpack_require__(25);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function timeStamp(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 */
	function SyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  this.dispatchConfig = dispatchConfig;
	  this.dispatchMarker = dispatchMarker;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	}
	
	assign(SyntheticEvent.prototype, {
	
	  preventDefault: function preventDefault() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `preventDefault` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function stopPropagation() {
	    var event = this.nativeEvent;
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(event, 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re calling `stopPropagation` on a ' + 'released/nullified synthetic event. This is a no-op. See ' + 'https://fb.me/react-event-pooling for more information.') : undefined;
	    }
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else {
	      event.cancelBubble = true;
	    }
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function persist() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function destructor() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      this[propName] = null;
	    }
	    this.dispatchConfig = null;
	    this.dispatchMarker = null;
	    this.nativeEvent = null;
	  }
	
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function (Class, Interface) {
	  var Super = this;
	
	  var prototype = Object.create(Super.prototype);
	  assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	
	  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
	};
	
	PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);
	
	module.exports = SyntheticEvent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticInputEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
	 *      /#events-inputevents
	 */
	var InputEventInterface = {
	  data: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticInputEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticInputEvent, InputEventInterface);
	
	module.exports = SyntheticInputEvent;

/***/ },
/* 79 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule keyOf
	 */
	
	/**
	 * Allows extraction of a minified key. Let's the build system minify keys
	 * without losing the ability to dynamically use key strings as values
	 * themselves. Pass in an object with a single key/val pair and it will return
	 * you the string key of that single record. Suppose you want to grab the
	 * value for a key 'className' inside of an object. Key/val minification may
	 * have aliased that key to be 'xa12'. keyOf({className: null}) will return
	 * 'xa12' in that case. Resolve keys you want to use once at startup time, then
	 * reuse those resolutions.
	 */
	"use strict";
	
	var keyOf = function keyOf(oneKeyObj) {
	  var key;
	  for (key in oneKeyObj) {
	    if (!oneKeyObj.hasOwnProperty(key)) {
	      continue;
	    }
	    return key;
	  }
	  return null;
	};
	
	module.exports = keyOf;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ChangeEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPluginHub = __webpack_require__(31);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactUpdates = __webpack_require__(54);
	var SyntheticEvent = __webpack_require__(77);
	
	var getEventTarget = __webpack_require__(81);
	var isEventSupported = __webpack_require__(40);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  change: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onChange: null }),
	      captured: keyOf({ onChangeCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topChange, topLevelTypes.topClick, topLevelTypes.topFocus, topLevelTypes.topInput, topLevelTypes.topKeyDown, topLevelTypes.topKeyUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	/**
	 * For IE shims
	 */
	var activeElement = null;
	var activeElementID = null;
	var activeElementValue = null;
	var activeElementValueProp = null;
	
	/**
	 * SECTION: handle `change` event
	 */
	function shouldUseChangeEvent(elem) {
	  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
	}
	
	var doesChangeEventBubble = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // See `handleChange` comment below
	  doesChangeEventBubble = isEventSupported('change') && (!('documentMode' in document) || document.documentMode > 8);
	}
	
	function manualDispatchChangeEvent(nativeEvent) {
	  var event = SyntheticEvent.getPooled(eventTypes.change, activeElementID, nativeEvent, getEventTarget(nativeEvent));
	  EventPropagators.accumulateTwoPhaseDispatches(event);
	
	  // If change and propertychange bubbled, we'd just bind to it like all the
	  // other events and have it go through ReactBrowserEventEmitter. Since it
	  // doesn't, we manually listen for the events and so we have to enqueue and
	  // process the abstract event manually.
	  //
	  // Batching is necessary here in order to ensure that all event handlers run
	  // before the next rerender (including event handlers attached to ancestor
	  // elements instead of directly on the input). Without this, controlled
	  // components don't work properly in conjunction with event bubbling because
	  // the component is rerendered and the value reverted before all the event
	  // handlers can run. See https://github.com/facebook/react/issues/708.
	  ReactUpdates.batchedUpdates(runEventInBatch, event);
	}
	
	function runEventInBatch(event) {
	  EventPluginHub.enqueueEvents(event);
	  EventPluginHub.processEventQueue(false);
	}
	
	function startWatchingForChangeEventIE8(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElement.attachEvent('onchange', manualDispatchChangeEvent);
	}
	
	function stopWatchingForChangeEventIE8() {
	  if (!activeElement) {
	    return;
	  }
	  activeElement.detachEvent('onchange', manualDispatchChangeEvent);
	  activeElement = null;
	  activeElementID = null;
	}
	
	function getTargetIDForChangeEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topChange) {
	    return topLevelTargetID;
	  }
	}
	function handleEventsForChangeEventIE8(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForChangeEventIE8();
	    startWatchingForChangeEventIE8(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForChangeEventIE8();
	  }
	}
	
	/**
	 * SECTION: handle `input` event
	 */
	var isInputEventSupported = false;
	if (ExecutionEnvironment.canUseDOM) {
	  // IE9 claims to support the input event but fails to trigger it when
	  // deleting text, so we ignore its input events
	  isInputEventSupported = isEventSupported('input') && (!('documentMode' in document) || document.documentMode > 9);
	}
	
	/**
	 * (For old IE.) Replacement getter/setter for the `value` property that gets
	 * set on the active element.
	 */
	var newValueProp = {
	  get: function get() {
	    return activeElementValueProp.get.call(this);
	  },
	  set: function set(val) {
	    // Cast to a string so we can do equality checks.
	    activeElementValue = '' + val;
	    activeElementValueProp.set.call(this, val);
	  }
	};
	
	/**
	 * (For old IE.) Starts tracking propertychange events on the passed-in element
	 * and override the value property so that we can distinguish user events from
	 * value changes in JS.
	 */
	function startWatchingForValueChange(target, targetID) {
	  activeElement = target;
	  activeElementID = targetID;
	  activeElementValue = target.value;
	  activeElementValueProp = Object.getOwnPropertyDescriptor(target.constructor.prototype, 'value');
	
	  // Not guarded in a canDefineProperty check: IE8 supports defineProperty only
	  // on DOM elements
	  Object.defineProperty(activeElement, 'value', newValueProp);
	  activeElement.attachEvent('onpropertychange', handlePropertyChange);
	}
	
	/**
	 * (For old IE.) Removes the event listeners from the currently-tracked element,
	 * if any exists.
	 */
	function stopWatchingForValueChange() {
	  if (!activeElement) {
	    return;
	  }
	
	  // delete restores the original property definition
	  delete activeElement.value;
	  activeElement.detachEvent('onpropertychange', handlePropertyChange);
	
	  activeElement = null;
	  activeElementID = null;
	  activeElementValue = null;
	  activeElementValueProp = null;
	}
	
	/**
	 * (For old IE.) Handles a propertychange event, sending a `change` event if
	 * the value of the active element has changed.
	 */
	function handlePropertyChange(nativeEvent) {
	  if (nativeEvent.propertyName !== 'value') {
	    return;
	  }
	  var value = nativeEvent.srcElement.value;
	  if (value === activeElementValue) {
	    return;
	  }
	  activeElementValue = value;
	
	  manualDispatchChangeEvent(nativeEvent);
	}
	
	/**
	 * If a `change` event should be fired, returns the target's ID.
	 */
	function getTargetIDForInputEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topInput) {
	    // In modern browsers (i.e., not IE8 or IE9), the input event is exactly
	    // what we want so fall through here and trigger an abstract event
	    return topLevelTargetID;
	  }
	}
	
	// For IE8 and IE9.
	function handleEventsForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topFocus) {
	    // In IE8, we can capture almost all .value changes by adding a
	    // propertychange handler and looking for events with propertyName
	    // equal to 'value'
	    // In IE9, propertychange fires for most input events but is buggy and
	    // doesn't fire when text is deleted, but conveniently, selectionchange
	    // appears to fire in all of the remaining cases so we catch those and
	    // forward the event if the value has changed
	    // In either case, we don't want to call the event handler if the value
	    // is changed from JS so we redefine a setter for `.value` that updates
	    // our activeElementValue variable, allowing us to ignore those changes
	    //
	    // stopWatching() should be a noop here but we call it just in case we
	    // missed a blur event somehow.
	    stopWatchingForValueChange();
	    startWatchingForValueChange(topLevelTarget, topLevelTargetID);
	  } else if (topLevelType === topLevelTypes.topBlur) {
	    stopWatchingForValueChange();
	  }
	}
	
	// For IE8 and IE9.
	function getTargetIDForInputEventIE(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topSelectionChange || topLevelType === topLevelTypes.topKeyUp || topLevelType === topLevelTypes.topKeyDown) {
	    // On the selectionchange event, the target is just document which isn't
	    // helpful for us so just check activeElement instead.
	    //
	    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
	    // propertychange on the first input event after setting `value` from a
	    // script and fires only keydown, keypress, keyup. Catching keyup usually
	    // gets it and catching keydown lets us fire an event for the first
	    // keystroke if user does a key repeat (it'll be a little delayed: right
	    // before the second keystroke). Other input methods (e.g., paste) seem to
	    // fire selectionchange normally.
	    if (activeElement && activeElement.value !== activeElementValue) {
	      activeElementValue = activeElement.value;
	      return activeElementID;
	    }
	  }
	}
	
	/**
	 * SECTION: handle `click` event
	 */
	function shouldUseClickEvent(elem) {
	  // Use the `click` event to detect changes to checkbox and radio inputs.
	  // This approach works across all browsers, whereas `change` does not fire
	  // until `blur` in IE8.
	  return elem.nodeName && elem.nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
	}
	
	function getTargetIDForClickEvent(topLevelType, topLevelTarget, topLevelTargetID) {
	  if (topLevelType === topLevelTypes.topClick) {
	    return topLevelTargetID;
	  }
	}
	
	/**
	 * This plugin creates an `onChange` event that normalizes change events
	 * across form elements. This event fires at a time when it's possible to
	 * change the element's value without seeing a flicker.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - select
	 */
	var ChangeEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	
	    var getTargetIDFunc, handleEventFunc;
	    if (shouldUseChangeEvent(topLevelTarget)) {
	      if (doesChangeEventBubble) {
	        getTargetIDFunc = getTargetIDForChangeEvent;
	      } else {
	        handleEventFunc = handleEventsForChangeEventIE8;
	      }
	    } else if (isTextInputElement(topLevelTarget)) {
	      if (isInputEventSupported) {
	        getTargetIDFunc = getTargetIDForInputEvent;
	      } else {
	        getTargetIDFunc = getTargetIDForInputEventIE;
	        handleEventFunc = handleEventsForInputEventIE;
	      }
	    } else if (shouldUseClickEvent(topLevelTarget)) {
	      getTargetIDFunc = getTargetIDForClickEvent;
	    }
	
	    if (getTargetIDFunc) {
	      var targetID = getTargetIDFunc(topLevelType, topLevelTarget, topLevelTargetID);
	      if (targetID) {
	        var event = SyntheticEvent.getPooled(eventTypes.change, targetID, nativeEvent, nativeEventTarget);
	        event.type = 'change';
	        EventPropagators.accumulateTwoPhaseDispatches(event);
	        return event;
	      }
	    }
	
	    if (handleEventFunc) {
	      handleEventFunc(topLevelType, topLevelTarget, topLevelTargetID);
	    }
	  }
	
	};
	
	module.exports = ChangeEventPlugin;

/***/ },
/* 81 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventTarget
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Gets the target node from a native browser event by accounting for
	 * inconsistencies in browser DOM APIs.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {DOMEventTarget} Target node.
	 */
	
	function getEventTarget(nativeEvent) {
	  var target = nativeEvent.target || nativeEvent.srcElement || window;
	  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
	  // @see http://www.quirksmode.org/js/events_properties.html
	  return target.nodeType === 3 ? target.parentNode : target;
	}
	
	module.exports = getEventTarget;

/***/ },
/* 82 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule isTextInputElement
	 */
	
	'use strict';
	
	/**
	 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
	 */
	
	var supportedInputTypes = {
	  'color': true,
	  'date': true,
	  'datetime': true,
	  'datetime-local': true,
	  'email': true,
	  'month': true,
	  'number': true,
	  'password': true,
	  'range': true,
	  'search': true,
	  'tel': true,
	  'text': true,
	  'time': true,
	  'url': true,
	  'week': true
	};
	
	function isTextInputElement(elem) {
	  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	  return nodeName && (nodeName === 'input' && supportedInputTypes[elem.type] || nodeName === 'textarea');
	}
	
	module.exports = isTextInputElement;

/***/ },
/* 83 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ClientReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	var nextReactRootIndex = 0;
	
	var ClientReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return nextReactRootIndex++;
	  }
	};
	
	module.exports = ClientReactRootIndex;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule DefaultEventPluginOrder
	 */
	
	'use strict';
	
	var keyOf = __webpack_require__(79);
	
	/**
	 * Module that is injectable into `EventPluginHub`, that specifies a
	 * deterministic ordering of `EventPlugin`s. A convenient way to reason about
	 * plugins, without having to package every one of them. This is better than
	 * having plugins be ordered in the same order that they are injected because
	 * that ordering would be influenced by the packaging order.
	 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
	 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
	 */
	var DefaultEventPluginOrder = [keyOf({ ResponderEventPlugin: null }), keyOf({ SimpleEventPlugin: null }), keyOf({ TapEventPlugin: null }), keyOf({ EnterLeaveEventPlugin: null }), keyOf({ ChangeEventPlugin: null }), keyOf({ SelectEventPlugin: null }), keyOf({ BeforeInputEventPlugin: null })];
	
	module.exports = DefaultEventPluginOrder;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule EnterLeaveEventPlugin
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var SyntheticMouseEvent = __webpack_require__(86);
	
	var ReactMount = __webpack_require__(28);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	var getFirstReactDOM = ReactMount.getFirstReactDOM;
	
	var eventTypes = {
	  mouseEnter: {
	    registrationName: keyOf({ onMouseEnter: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  },
	  mouseLeave: {
	    registrationName: keyOf({ onMouseLeave: null }),
	    dependencies: [topLevelTypes.topMouseOut, topLevelTypes.topMouseOver]
	  }
	};
	
	var extractedEvents = [null, null];
	
	var EnterLeaveEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * For almost every interaction we care about, there will be both a top-level
	   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
	   * we do not extract duplicate events. However, moving the mouse into the
	   * browser from outside will not fire a `mouseout` event. In this case, we use
	   * the `mouseover` top-level event.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (topLevelType === topLevelTypes.topMouseOver && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
	      return null;
	    }
	    if (topLevelType !== topLevelTypes.topMouseOut && topLevelType !== topLevelTypes.topMouseOver) {
	      // Must not be a mouse in or mouse out - ignoring.
	      return null;
	    }
	
	    var win;
	    if (topLevelTarget.window === topLevelTarget) {
	      // `topLevelTarget` is probably a window object.
	      win = topLevelTarget;
	    } else {
	      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	      var doc = topLevelTarget.ownerDocument;
	      if (doc) {
	        win = doc.defaultView || doc.parentWindow;
	      } else {
	        win = window;
	      }
	    }
	
	    var from;
	    var to;
	    var fromID = '';
	    var toID = '';
	    if (topLevelType === topLevelTypes.topMouseOut) {
	      from = topLevelTarget;
	      fromID = topLevelTargetID;
	      to = getFirstReactDOM(nativeEvent.relatedTarget || nativeEvent.toElement);
	      if (to) {
	        toID = ReactMount.getID(to);
	      } else {
	        to = win;
	      }
	      to = to || win;
	    } else {
	      from = win;
	      to = topLevelTarget;
	      toID = topLevelTargetID;
	    }
	
	    if (from === to) {
	      // Nothing pertains to our managed components.
	      return null;
	    }
	
	    var leave = SyntheticMouseEvent.getPooled(eventTypes.mouseLeave, fromID, nativeEvent, nativeEventTarget);
	    leave.type = 'mouseleave';
	    leave.target = from;
	    leave.relatedTarget = to;
	
	    var enter = SyntheticMouseEvent.getPooled(eventTypes.mouseEnter, toID, nativeEvent, nativeEventTarget);
	    enter.type = 'mouseenter';
	    enter.target = to;
	    enter.relatedTarget = from;
	
	    EventPropagators.accumulateEnterLeaveDispatches(leave, enter, fromID, toID);
	
	    extractedEvents[0] = leave;
	    extractedEvents[1] = enter;
	
	    return extractedEvents;
	  }
	
	};
	
	module.exports = EnterLeaveEventPlugin;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticMouseEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	var ViewportMetrics = __webpack_require__(38);
	
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface MouseEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var MouseEventInterface = {
	  screenX: null,
	  screenY: null,
	  clientX: null,
	  clientY: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  getModifierState: getEventModifierState,
	  button: function button(event) {
	    // Webkit, Firefox, IE9+
	    // which:  1 2 3
	    // button: 0 1 2 (standard)
	    var button = event.button;
	    if ('which' in event) {
	      return button;
	    }
	    // IE<9
	    // which:  undefined
	    // button: 0 0 0
	    // button: 1 4 2 (onmouseup)
	    return button === 2 ? 2 : button === 4 ? 1 : 0;
	  },
	  buttons: null,
	  relatedTarget: function relatedTarget(event) {
	    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
	  },
	  // "Proprietary" Interface.
	  pageX: function pageX(event) {
	    return 'pageX' in event ? event.pageX : event.clientX + ViewportMetrics.currentScrollLeft;
	  },
	  pageY: function pageY(event) {
	    return 'pageY' in event ? event.pageY : event.clientY + ViewportMetrics.currentScrollTop;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticMouseEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticMouseEvent, MouseEventInterface);
	
	module.exports = SyntheticMouseEvent;

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticUIEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	var getEventTarget = __webpack_require__(81);
	
	/**
	 * @interface UIEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var UIEventInterface = {
	  view: function view(event) {
	    if (event.view) {
	      return event.view;
	    }
	
	    var target = getEventTarget(event);
	    if (target != null && target.window === target) {
	      // target is a window object
	      return target;
	    }
	
	    var doc = target.ownerDocument;
	    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
	    if (doc) {
	      return doc.defaultView || doc.parentWindow;
	    } else {
	      return window;
	    }
	  },
	  detail: function detail(event) {
	    return event.detail || 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticEvent}
	 */
	function SyntheticUIEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticUIEvent, UIEventInterface);
	
	module.exports = SyntheticUIEvent;

/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventModifierState
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Translation from modifier key to the associated property in the event.
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
	 */
	
	var modifierKeyToProp = {
	  'Alt': 'altKey',
	  'Control': 'ctrlKey',
	  'Meta': 'metaKey',
	  'Shift': 'shiftKey'
	};
	
	// IE8 does not implement getModifierState so we simply map it to the only
	// modifier keys exposed by the event itself, does not support Lock-keys.
	// Currently, all major browsers except Chrome seems to support Lock-keys.
	function modifierStateGetter(keyArg) {
	  var syntheticEvent = this;
	  var nativeEvent = syntheticEvent.nativeEvent;
	  if (nativeEvent.getModifierState) {
	    return nativeEvent.getModifierState(keyArg);
	  }
	  var keyProp = modifierKeyToProp[keyArg];
	  return keyProp ? !!nativeEvent[keyProp] : false;
	}
	
	function getEventModifierState(nativeEvent) {
	  return modifierStateGetter;
	}
	
	module.exports = getEventModifierState;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule HTMLDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var ExecutionEnvironment = __webpack_require__(9);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	var MUST_USE_PROPERTY = DOMProperty.injection.MUST_USE_PROPERTY;
	var HAS_BOOLEAN_VALUE = DOMProperty.injection.HAS_BOOLEAN_VALUE;
	var HAS_SIDE_EFFECTS = DOMProperty.injection.HAS_SIDE_EFFECTS;
	var HAS_NUMERIC_VALUE = DOMProperty.injection.HAS_NUMERIC_VALUE;
	var HAS_POSITIVE_NUMERIC_VALUE = DOMProperty.injection.HAS_POSITIVE_NUMERIC_VALUE;
	var HAS_OVERLOADED_BOOLEAN_VALUE = DOMProperty.injection.HAS_OVERLOADED_BOOLEAN_VALUE;
	
	var hasSVG;
	if (ExecutionEnvironment.canUseDOM) {
	  var implementation = document.implementation;
	  hasSVG = implementation && implementation.hasFeature && implementation.hasFeature('http://www.w3.org/TR/SVG11/feature#BasicStructure', '1.1');
	}
	
	var HTMLDOMPropertyConfig = {
	  isCustomAttribute: RegExp.prototype.test.bind(/^(data|aria)-[a-z_][a-z\d_.\-]*$/),
	  Properties: {
	    /**
	     * Standard Properties
	     */
	    accept: null,
	    acceptCharset: null,
	    accessKey: null,
	    action: null,
	    allowFullScreen: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    allowTransparency: MUST_USE_ATTRIBUTE,
	    alt: null,
	    async: HAS_BOOLEAN_VALUE,
	    autoComplete: null,
	    // autoFocus is polyfilled/normalized by AutoFocusUtils
	    // autoFocus: HAS_BOOLEAN_VALUE,
	    autoPlay: HAS_BOOLEAN_VALUE,
	    capture: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    cellPadding: null,
	    cellSpacing: null,
	    charSet: MUST_USE_ATTRIBUTE,
	    challenge: MUST_USE_ATTRIBUTE,
	    checked: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    classID: MUST_USE_ATTRIBUTE,
	    // To set className on SVG elements, it's necessary to use .setAttribute;
	    // this works on HTML elements too in all browsers except IE8. Conveniently,
	    // IE8 doesn't support SVG and so we can simply use the attribute in
	    // browsers that support SVG and the property in browsers that don't,
	    // regardless of whether the element is HTML or SVG.
	    className: hasSVG ? MUST_USE_ATTRIBUTE : MUST_USE_PROPERTY,
	    cols: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    colSpan: null,
	    content: null,
	    contentEditable: null,
	    contextMenu: MUST_USE_ATTRIBUTE,
	    controls: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    coords: null,
	    crossOrigin: null,
	    data: null, // For `<object />` acts as `src`.
	    dateTime: MUST_USE_ATTRIBUTE,
	    'default': HAS_BOOLEAN_VALUE,
	    defer: HAS_BOOLEAN_VALUE,
	    dir: null,
	    disabled: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    download: HAS_OVERLOADED_BOOLEAN_VALUE,
	    draggable: null,
	    encType: null,
	    form: MUST_USE_ATTRIBUTE,
	    formAction: MUST_USE_ATTRIBUTE,
	    formEncType: MUST_USE_ATTRIBUTE,
	    formMethod: MUST_USE_ATTRIBUTE,
	    formNoValidate: HAS_BOOLEAN_VALUE,
	    formTarget: MUST_USE_ATTRIBUTE,
	    frameBorder: MUST_USE_ATTRIBUTE,
	    headers: null,
	    height: MUST_USE_ATTRIBUTE,
	    hidden: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    high: null,
	    href: null,
	    hrefLang: null,
	    htmlFor: null,
	    httpEquiv: null,
	    icon: null,
	    id: MUST_USE_PROPERTY,
	    inputMode: MUST_USE_ATTRIBUTE,
	    integrity: null,
	    is: MUST_USE_ATTRIBUTE,
	    keyParams: MUST_USE_ATTRIBUTE,
	    keyType: MUST_USE_ATTRIBUTE,
	    kind: null,
	    label: null,
	    lang: null,
	    list: MUST_USE_ATTRIBUTE,
	    loop: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    low: null,
	    manifest: MUST_USE_ATTRIBUTE,
	    marginHeight: null,
	    marginWidth: null,
	    max: null,
	    maxLength: MUST_USE_ATTRIBUTE,
	    media: MUST_USE_ATTRIBUTE,
	    mediaGroup: null,
	    method: null,
	    min: null,
	    minLength: MUST_USE_ATTRIBUTE,
	    multiple: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    muted: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    name: null,
	    nonce: MUST_USE_ATTRIBUTE,
	    noValidate: HAS_BOOLEAN_VALUE,
	    open: HAS_BOOLEAN_VALUE,
	    optimum: null,
	    pattern: null,
	    placeholder: null,
	    poster: null,
	    preload: null,
	    radioGroup: null,
	    readOnly: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    rel: null,
	    required: HAS_BOOLEAN_VALUE,
	    reversed: HAS_BOOLEAN_VALUE,
	    role: MUST_USE_ATTRIBUTE,
	    rows: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    rowSpan: null,
	    sandbox: null,
	    scope: null,
	    scoped: HAS_BOOLEAN_VALUE,
	    scrolling: null,
	    seamless: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    selected: MUST_USE_PROPERTY | HAS_BOOLEAN_VALUE,
	    shape: null,
	    size: MUST_USE_ATTRIBUTE | HAS_POSITIVE_NUMERIC_VALUE,
	    sizes: MUST_USE_ATTRIBUTE,
	    span: HAS_POSITIVE_NUMERIC_VALUE,
	    spellCheck: null,
	    src: null,
	    srcDoc: MUST_USE_PROPERTY,
	    srcLang: null,
	    srcSet: MUST_USE_ATTRIBUTE,
	    start: HAS_NUMERIC_VALUE,
	    step: null,
	    style: null,
	    summary: null,
	    tabIndex: null,
	    target: null,
	    title: null,
	    type: null,
	    useMap: null,
	    value: MUST_USE_PROPERTY | HAS_SIDE_EFFECTS,
	    width: MUST_USE_ATTRIBUTE,
	    wmode: MUST_USE_ATTRIBUTE,
	    wrap: null,
	
	    /**
	     * RDFa Properties
	     */
	    about: MUST_USE_ATTRIBUTE,
	    datatype: MUST_USE_ATTRIBUTE,
	    inlist: MUST_USE_ATTRIBUTE,
	    prefix: MUST_USE_ATTRIBUTE,
	    // property is also supported for OpenGraph in meta tags.
	    property: MUST_USE_ATTRIBUTE,
	    resource: MUST_USE_ATTRIBUTE,
	    'typeof': MUST_USE_ATTRIBUTE,
	    vocab: MUST_USE_ATTRIBUTE,
	
	    /**
	     * Non-standard Properties
	     */
	    // autoCapitalize and autoCorrect are supported in Mobile Safari for
	    // keyboard hints.
	    autoCapitalize: MUST_USE_ATTRIBUTE,
	    autoCorrect: MUST_USE_ATTRIBUTE,
	    // autoSave allows WebKit/Blink to persist values of input fields on page reloads
	    autoSave: null,
	    // color is for Safari mask-icon link
	    color: null,
	    // itemProp, itemScope, itemType are for
	    // Microdata support. See http://schema.org/docs/gs.html
	    itemProp: MUST_USE_ATTRIBUTE,
	    itemScope: MUST_USE_ATTRIBUTE | HAS_BOOLEAN_VALUE,
	    itemType: MUST_USE_ATTRIBUTE,
	    // itemID and itemRef are for Microdata support as well but
	    // only specified in the the WHATWG spec document. See
	    // https://html.spec.whatwg.org/multipage/microdata.html#microdata-dom-api
	    itemID: MUST_USE_ATTRIBUTE,
	    itemRef: MUST_USE_ATTRIBUTE,
	    // results show looking glass icon and recent searches on input
	    // search fields in WebKit/Blink
	    results: null,
	    // IE-only attribute that specifies security restrictions on an iframe
	    // as an alternative to the sandbox attribute on IE<10
	    security: MUST_USE_ATTRIBUTE,
	    // IE-only attribute that controls focus behavior
	    unselectable: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNames: {
	    acceptCharset: 'accept-charset',
	    className: 'class',
	    htmlFor: 'for',
	    httpEquiv: 'http-equiv'
	  },
	  DOMPropertyNames: {
	    autoComplete: 'autocomplete',
	    autoFocus: 'autofocus',
	    autoPlay: 'autoplay',
	    autoSave: 'autosave',
	    // `encoding` is equivalent to `enctype`, IE8 lacks an `enctype` setter.
	    // http://www.w3.org/TR/html5/forms.html#dom-fs-encoding
	    encType: 'encoding',
	    hrefLang: 'hreflang',
	    radioGroup: 'radiogroup',
	    spellCheck: 'spellcheck',
	    srcDoc: 'srcdoc',
	    srcSet: 'srcset'
	  }
	};
	
	module.exports = HTMLDOMPropertyConfig;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactBrowserComponentMixin
	 */
	
	'use strict';
	
	var ReactInstanceMap = __webpack_require__(47);
	
	var findDOMNode = __webpack_require__(91);
	var warning = __webpack_require__(25);
	
	var didWarnKey = '_getDOMNodeDidWarn';
	
	var ReactBrowserComponentMixin = {
	  /**
	   * Returns the DOM node rendered by this component.
	   *
	   * @return {DOMElement} The root node of this component.
	   * @final
	   * @protected
	   */
	  getDOMNode: function getDOMNode() {
	    process.env.NODE_ENV !== 'production' ? warning(this.constructor[didWarnKey], '%s.getDOMNode(...) is deprecated. Please use ' + 'ReactDOM.findDOMNode(instance) instead.', ReactInstanceMap.get(this).getName() || this.tagName || 'Unknown') : undefined;
	    this.constructor[didWarnKey] = true;
	    return findDOMNode(this);
	  }
	};
	
	module.exports = ReactBrowserComponentMixin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule findDOMNode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactInstanceMap = __webpack_require__(47);
	var ReactMount = __webpack_require__(28);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Returns the DOM node rendered by this element.
	 *
	 * @param {ReactComponent|DOMElement} componentOrElement
	 * @return {?DOMElement} The root node of this element.
	 */
	function findDOMNode(componentOrElement) {
	  if (process.env.NODE_ENV !== 'production') {
	    var owner = ReactCurrentOwner.current;
	    if (owner !== null) {
	      process.env.NODE_ENV !== 'production' ? warning(owner._warnedAboutRefsInRender, '%s is accessing getDOMNode or findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component') : undefined;
	      owner._warnedAboutRefsInRender = true;
	    }
	  }
	  if (componentOrElement == null) {
	    return null;
	  }
	  if (componentOrElement.nodeType === 1) {
	    return componentOrElement;
	  }
	  if (ReactInstanceMap.has(componentOrElement)) {
	    return ReactMount.getNodeFromInstance(componentOrElement);
	  }
	  !(componentOrElement.render == null || typeof componentOrElement.render !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'findDOMNode was called on an unmounted component.') : invariant(false) : undefined;
	   true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Element appears to be neither ReactComponent nor DOMNode (keys: %s)', Object.keys(componentOrElement)) : invariant(false) : undefined;
	}
	
	module.exports = findDOMNode;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultBatchingStrategy
	 */
	
	'use strict';
	
	var ReactUpdates = __webpack_require__(54);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	
	var RESET_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: function close() {
	    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
	  }
	};
	
	var FLUSH_BATCHED_UPDATES = {
	  initialize: emptyFunction,
	  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
	};
	
	var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];
	
	function ReactDefaultBatchingStrategyTransaction() {
	  this.reinitializeTransaction();
	}
	
	assign(ReactDefaultBatchingStrategyTransaction.prototype, Transaction.Mixin, {
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  }
	});
	
	var transaction = new ReactDefaultBatchingStrategyTransaction();
	
	var ReactDefaultBatchingStrategy = {
	  isBatchingUpdates: false,
	
	  /**
	   * Call the provided function in a context within which calls to `setState`
	   * and friends are batched such that components aren't updated unnecessarily.
	   */
	  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
	    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;
	
	    ReactDefaultBatchingStrategy.isBatchingUpdates = true;
	
	    // The code is written this way to avoid extra allocations
	    if (alreadyBatchingUpdates) {
	      callback(a, b, c, d, e);
	    } else {
	      transaction.perform(callback, null, a, b, c, d, e);
	    }
	  }
	};
	
	module.exports = ReactDefaultBatchingStrategy;

/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMComponent
	 * @typechecks static-only
	 */
	
	/* global hasOwnProperty:true */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var AutoFocusUtils = __webpack_require__(94);
	var CSSPropertyOperations = __webpack_require__(96);
	var DOMProperty = __webpack_require__(23);
	var DOMPropertyOperations = __webpack_require__(22);
	var EventConstants = __webpack_require__(30);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactComponentBrowserEnvironment = __webpack_require__(26);
	var ReactDOMButton = __webpack_require__(104);
	var ReactDOMInput = __webpack_require__(105);
	var ReactDOMOption = __webpack_require__(109);
	var ReactDOMSelect = __webpack_require__(112);
	var ReactDOMTextarea = __webpack_require__(113);
	var ReactMount = __webpack_require__(28);
	var ReactMultiChild = __webpack_require__(114);
	var ReactPerf = __webpack_require__(18);
	var ReactUpdateQueue = __webpack_require__(53);
	
	var assign = __webpack_require__(39);
	var canDefineProperty = __webpack_require__(43);
	var escapeTextContentForBrowser = __webpack_require__(21);
	var invariant = __webpack_require__(13);
	var isEventSupported = __webpack_require__(40);
	var keyOf = __webpack_require__(79);
	var setInnerHTML = __webpack_require__(19);
	var setTextContent = __webpack_require__(20);
	var shallowEqual = __webpack_require__(117);
	var validateDOMNesting = __webpack_require__(70);
	var warning = __webpack_require__(25);
	
	var deleteListener = ReactBrowserEventEmitter.deleteListener;
	var listenTo = ReactBrowserEventEmitter.listenTo;
	var registrationNameModules = ReactBrowserEventEmitter.registrationNameModules;
	
	// For quickly matching children type, to test if can be treated as content.
	var CONTENT_TYPES = { 'string': true, 'number': true };
	
	var CHILDREN = keyOf({ children: null });
	var STYLE = keyOf({ style: null });
	var HTML = keyOf({ __html: null });
	
	var ELEMENT_NODE_TYPE = 1;
	
	function getDeclarationErrorAddendum(internalInstance) {
	  if (internalInstance) {
	    var owner = internalInstance._currentElement._owner || null;
	    if (owner) {
	      var name = owner.getName();
	      if (name) {
	        return ' This DOM node was rendered by `' + name + '`.';
	      }
	    }
	  }
	  return '';
	}
	
	var legacyPropsDescriptor;
	if (process.env.NODE_ENV !== 'production') {
	  legacyPropsDescriptor = {
	    props: {
	      enumerable: false,
	      get: function get() {
	        var component = this._reactInternalComponent;
	        process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .props of a DOM node; instead, ' + 'recreate the props as `render` did originally or read the DOM ' + 'properties/attributes directly from this node (e.g., ' + 'this.refs.box.className).%s', getDeclarationErrorAddendum(component)) : undefined;
	        return component._currentElement.props;
	      }
	    }
	  };
	}
	
	function legacyGetDOMNode() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .getDOMNode() of a DOM node; ' + 'instead, use the node directly.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return this;
	}
	
	function legacyIsMounted() {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .isMounted() of a DOM node.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  return !!component;
	}
	
	function legacySetStateEtc() {
	  if (process.env.NODE_ENV !== 'production') {
	    var component = this._reactInternalComponent;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setState(), .replaceState(), or ' + '.forceUpdate() of a DOM node. This is a no-op.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	}
	
	function legacySetProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .setProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueSetPropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function legacyReplaceProps(partialProps, callback) {
	  var component = this._reactInternalComponent;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, 'ReactDOMComponent: Do not access .replaceProps() of a DOM node. ' + 'Instead, call ReactDOM.render again at the top level.%s', getDeclarationErrorAddendum(component)) : undefined;
	  }
	  if (!component) {
	    return;
	  }
	  ReactUpdateQueue.enqueueReplacePropsInternal(component, partialProps);
	  if (callback) {
	    ReactUpdateQueue.enqueueCallbackInternal(component, callback);
	  }
	}
	
	function friendlyStringify(obj) {
	  if ((typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object') {
	    if (Array.isArray(obj)) {
	      return '[' + obj.map(friendlyStringify).join(', ') + ']';
	    } else {
	      var pairs = [];
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) {
	          var keyEscaped = /^[a-z$_][\w$_]*$/i.test(key) ? key : JSON.stringify(key);
	          pairs.push(keyEscaped + ': ' + friendlyStringify(obj[key]));
	        }
	      }
	      return '{' + pairs.join(', ') + '}';
	    }
	  } else if (typeof obj === 'string') {
	    return JSON.stringify(obj);
	  } else if (typeof obj === 'function') {
	    return '[function object]';
	  }
	  // Differs from JSON.stringify in that undefined becauses undefined and that
	  // inf and nan don't become null
	  return String(obj);
	}
	
	var styleMutationWarning = {};
	
	function checkAndWarnForMutatedStyle(style1, style2, component) {
	  if (style1 == null || style2 == null) {
	    return;
	  }
	  if (shallowEqual(style1, style2)) {
	    return;
	  }
	
	  var componentName = component._tag;
	  var owner = component._currentElement._owner;
	  var ownerName;
	  if (owner) {
	    ownerName = owner.getName();
	  }
	
	  var hash = ownerName + '|' + componentName;
	
	  if (styleMutationWarning.hasOwnProperty(hash)) {
	    return;
	  }
	
	  styleMutationWarning[hash] = true;
	
	  process.env.NODE_ENV !== 'production' ? warning(false, '`%s` was passed a style object that has previously been mutated. ' + 'Mutating `style` is deprecated. Consider cloning it beforehand. Check ' + 'the `render` %s. Previous style: %s. Mutated style: %s.', componentName, owner ? 'of `' + ownerName + '`' : 'using <' + componentName + '>', friendlyStringify(style1), friendlyStringify(style2)) : undefined;
	}
	
	/**
	 * @param {object} component
	 * @param {?object} props
	 */
	function assertValidProps(component, props) {
	  if (!props) {
	    return;
	  }
	  // Note the use of `==` which checks for null or undefined.
	  if (process.env.NODE_ENV !== 'production') {
	    if (voidElementTags[component._tag]) {
	      process.env.NODE_ENV !== 'production' ? warning(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must not have `children` or ' + 'use `props.dangerouslySetInnerHTML`.%s', component._tag, component._currentElement._owner ? ' Check the render method of ' + component._currentElement._owner.getName() + '.' : '') : undefined;
	    }
	  }
	  if (props.dangerouslySetInnerHTML != null) {
	    !(props.children == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : invariant(false) : undefined;
	    !(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.') : invariant(false) : undefined;
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(props.innerHTML == null, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.') : undefined;
	    process.env.NODE_ENV !== 'production' ? warning(!props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : undefined;
	  }
	  !(props.style == null || _typeof(props.style) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'The `style` prop expects a mapping from style properties to values, ' + 'not a string. For example, style={{marginRight: spacing + \'em\'}} when ' + 'using JSX.%s', getDeclarationErrorAddendum(component)) : invariant(false) : undefined;
	}
	
	function enqueuePutListener(id, registrationName, listener, transaction) {
	  if (process.env.NODE_ENV !== 'production') {
	    // IE8 has no API for event capturing and the `onScroll` event doesn't
	    // bubble.
	    process.env.NODE_ENV !== 'production' ? warning(registrationName !== 'onScroll' || isEventSupported('scroll', true), 'This browser doesn\'t support the `onScroll` event') : undefined;
	  }
	  var container = ReactMount.findReactContainerForID(id);
	  if (container) {
	    var doc = container.nodeType === ELEMENT_NODE_TYPE ? container.ownerDocument : container;
	    listenTo(registrationName, doc);
	  }
	  transaction.getReactMountReady().enqueue(putListener, {
	    id: id,
	    registrationName: registrationName,
	    listener: listener
	  });
	}
	
	function putListener() {
	  var listenerToPut = this;
	  ReactBrowserEventEmitter.putListener(listenerToPut.id, listenerToPut.registrationName, listenerToPut.listener);
	}
	
	// There are so many media events, it makes sense to just
	// maintain a list rather than create a `trapBubbledEvent` for each
	var mediaEvents = {
	  topAbort: 'abort',
	  topCanPlay: 'canplay',
	  topCanPlayThrough: 'canplaythrough',
	  topDurationChange: 'durationchange',
	  topEmptied: 'emptied',
	  topEncrypted: 'encrypted',
	  topEnded: 'ended',
	  topError: 'error',
	  topLoadedData: 'loadeddata',
	  topLoadedMetadata: 'loadedmetadata',
	  topLoadStart: 'loadstart',
	  topPause: 'pause',
	  topPlay: 'play',
	  topPlaying: 'playing',
	  topProgress: 'progress',
	  topRateChange: 'ratechange',
	  topSeeked: 'seeked',
	  topSeeking: 'seeking',
	  topStalled: 'stalled',
	  topSuspend: 'suspend',
	  topTimeUpdate: 'timeupdate',
	  topVolumeChange: 'volumechange',
	  topWaiting: 'waiting'
	};
	
	function trapBubbledEventsLocal() {
	  var inst = this;
	  // If a component renders to null or if another component fatals and causes
	  // the state of the tree to be corrupted, `node` here can be null.
	  !inst._rootNodeID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Must be mounted to trap events') : invariant(false) : undefined;
	  var node = ReactMount.getNode(inst._rootNodeID);
	  !node ? process.env.NODE_ENV !== 'production' ? invariant(false, 'trapBubbledEvent(...): Requires node to be rendered.') : invariant(false) : undefined;
	
	  switch (inst._tag) {
	    case 'iframe':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'video':
	    case 'audio':
	
	      inst._wrapperState.listeners = [];
	      // create listener for each media event
	      for (var event in mediaEvents) {
	        if (mediaEvents.hasOwnProperty(event)) {
	          inst._wrapperState.listeners.push(ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes[event], mediaEvents[event], node));
	        }
	      }
	
	      break;
	    case 'img':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topError, 'error', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topLoad, 'load', node)];
	      break;
	    case 'form':
	      inst._wrapperState.listeners = [ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topReset, 'reset', node), ReactBrowserEventEmitter.trapBubbledEvent(EventConstants.topLevelTypes.topSubmit, 'submit', node)];
	      break;
	  }
	}
	
	function mountReadyInputWrapper() {
	  ReactDOMInput.mountReadyWrapper(this);
	}
	
	function postUpdateSelectWrapper() {
	  ReactDOMSelect.postUpdateWrapper(this);
	}
	
	// For HTML, certain tags should omit their close tag. We keep a whitelist for
	// those special cased tags.
	
	var omittedCloseTags = {
	  'area': true,
	  'base': true,
	  'br': true,
	  'col': true,
	  'embed': true,
	  'hr': true,
	  'img': true,
	  'input': true,
	  'keygen': true,
	  'link': true,
	  'meta': true,
	  'param': true,
	  'source': true,
	  'track': true,
	  'wbr': true
	};
	
	// NOTE: menuitem's close tag should be omitted, but that causes problems.
	var newlineEatingTags = {
	  'listing': true,
	  'pre': true,
	  'textarea': true
	};
	
	// For HTML, certain tags cannot have children. This has the same purpose as
	// `omittedCloseTags` except that `menuitem` should still have its closing tag.
	
	var voidElementTags = assign({
	  'menuitem': true
	}, omittedCloseTags);
	
	// We accept any tag to be rendered but since this gets injected into arbitrary
	// HTML, we want to make sure that it's a safe tag.
	// http://www.w3.org/TR/REC-xml/#NT-Name
	
	var VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/; // Simplified subset
	var validatedTagCache = {};
	var hasOwnProperty = {}.hasOwnProperty;
	
	function validateDangerousTag(tag) {
	  if (!hasOwnProperty.call(validatedTagCache, tag)) {
	    !VALID_TAG_REGEX.test(tag) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Invalid tag: %s', tag) : invariant(false) : undefined;
	    validatedTagCache[tag] = true;
	  }
	}
	
	function processChildContextDev(context, inst) {
	  // Pass down our tag name to child components for validation purposes
	  context = assign({}, context);
	  var info = context[validateDOMNesting.ancestorInfoContextKey];
	  context[validateDOMNesting.ancestorInfoContextKey] = validateDOMNesting.updatedAncestorInfo(info, inst._tag, inst);
	  return context;
	}
	
	function isCustomComponent(tagName, props) {
	  return tagName.indexOf('-') >= 0 || props.is != null;
	}
	
	/**
	 * Creates a new React class that is idempotent and capable of containing other
	 * React components. It accepts event listeners and DOM properties that are
	 * valid according to `DOMProperty`.
	 *
	 *  - Event listeners: `onClick`, `onMouseDown`, etc.
	 *  - DOM properties: `className`, `name`, `title`, etc.
	 *
	 * The `style` property functions differently from the DOM API. It accepts an
	 * object mapping of style properties to values.
	 *
	 * @constructor ReactDOMComponent
	 * @extends ReactMultiChild
	 */
	function ReactDOMComponent(tag) {
	  validateDangerousTag(tag);
	  this._tag = tag.toLowerCase();
	  this._renderedChildren = null;
	  this._previousStyle = null;
	  this._previousStyleCopy = null;
	  this._rootNodeID = null;
	  this._wrapperState = null;
	  this._topLevelWrapper = null;
	  this._nodeWithLegacyProperties = null;
	  if (process.env.NODE_ENV !== 'production') {
	    this._unprocessedContextDev = null;
	    this._processedContextDev = null;
	  }
	}
	
	ReactDOMComponent.displayName = 'ReactDOMComponent';
	
	ReactDOMComponent.Mixin = {
	
	  construct: function construct(element) {
	    this._currentElement = element;
	  },
	
	  /**
	   * Generates root tag markup then recurses. This method has side effects and
	   * is not idempotent.
	   *
	   * @internal
	   * @param {string} rootID The root DOM ID for this node.
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   * @return {string} The computed markup.
	   */
	  mountComponent: function mountComponent(rootID, transaction, context) {
	    this._rootNodeID = rootID;
	
	    var props = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        this._wrapperState = {
	          listeners: null
	        };
	        transaction.getReactMountReady().enqueue(trapBubbledEventsLocal, this);
	        break;
	      case 'button':
	        props = ReactDOMButton.getNativeProps(this, props, context);
	        break;
	      case 'input':
	        ReactDOMInput.mountWrapper(this, props, context);
	        props = ReactDOMInput.getNativeProps(this, props, context);
	        break;
	      case 'option':
	        ReactDOMOption.mountWrapper(this, props, context);
	        props = ReactDOMOption.getNativeProps(this, props, context);
	        break;
	      case 'select':
	        ReactDOMSelect.mountWrapper(this, props, context);
	        props = ReactDOMSelect.getNativeProps(this, props, context);
	        context = ReactDOMSelect.processChildContext(this, props, context);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.mountWrapper(this, props, context);
	        props = ReactDOMTextarea.getNativeProps(this, props, context);
	        break;
	    }
	
	    assertValidProps(this, props);
	    if (process.env.NODE_ENV !== 'production') {
	      if (context[validateDOMNesting.ancestorInfoContextKey]) {
	        validateDOMNesting(this._tag, this, context[validateDOMNesting.ancestorInfoContextKey]);
	      }
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      this._unprocessedContextDev = context;
	      this._processedContextDev = processChildContextDev(context, this);
	      context = this._processedContextDev;
	    }
	
	    var mountImage;
	    if (transaction.useCreateElement) {
	      var ownerDocument = context[ReactMount.ownerDocumentContextKey];
	      var el = ownerDocument.createElement(this._currentElement.type);
	      DOMPropertyOperations.setAttributeForID(el, this._rootNodeID);
	      // Populate node cache
	      ReactMount.getID(el);
	      this._updateDOMProperties({}, props, transaction, el);
	      this._createInitialChildren(transaction, props, context, el);
	      mountImage = el;
	    } else {
	      var tagOpen = this._createOpenTagMarkupAndPutListeners(transaction, props);
	      var tagContent = this._createContentMarkup(transaction, props, context);
	      if (!tagContent && omittedCloseTags[this._tag]) {
	        mountImage = tagOpen + '/>';
	      } else {
	        mountImage = tagOpen + '>' + tagContent + '</' + this._currentElement.type + '>';
	      }
	    }
	
	    switch (this._tag) {
	      case 'input':
	        transaction.getReactMountReady().enqueue(mountReadyInputWrapper, this);
	      // falls through
	      case 'button':
	      case 'select':
	      case 'textarea':
	        if (props.autoFocus) {
	          transaction.getReactMountReady().enqueue(AutoFocusUtils.focusDOMComponent, this);
	        }
	        break;
	    }
	
	    return mountImage;
	  },
	
	  /**
	   * Creates markup for the open tag and all attributes.
	   *
	   * This method has side effects because events get registered.
	   *
	   * Iterating over object properties is faster than iterating over arrays.
	   * @see http://jsperf.com/obj-vs-arr-iteration
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @return {string} Markup of opening tag.
	   */
	  _createOpenTagMarkupAndPutListeners: function _createOpenTagMarkupAndPutListeners(transaction, props) {
	    var ret = '<' + this._currentElement.type;
	
	    for (var propKey in props) {
	      if (!props.hasOwnProperty(propKey)) {
	        continue;
	      }
	      var propValue = props[propKey];
	      if (propValue == null) {
	        continue;
	      }
	      if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (propValue) {
	          enqueuePutListener(this._rootNodeID, propKey, propValue, transaction);
	        }
	      } else {
	        if (propKey === STYLE) {
	          if (propValue) {
	            if (process.env.NODE_ENV !== 'production') {
	              // See `_updateDOMProperties`. style block
	              this._previousStyle = propValue;
	            }
	            propValue = this._previousStyleCopy = assign({}, props.style);
	          }
	          propValue = CSSPropertyOperations.createMarkupForStyles(propValue);
	        }
	        var markup = null;
	        if (this._tag != null && isCustomComponent(this._tag, props)) {
	          if (propKey !== CHILDREN) {
	            markup = DOMPropertyOperations.createMarkupForCustomAttribute(propKey, propValue);
	          }
	        } else {
	          markup = DOMPropertyOperations.createMarkupForProperty(propKey, propValue);
	        }
	        if (markup) {
	          ret += ' ' + markup;
	        }
	      }
	    }
	
	    // For static pages, no need to put React ID and checksum. Saves lots of
	    // bytes.
	    if (transaction.renderToStaticMarkup) {
	      return ret;
	    }
	
	    var markupForID = DOMPropertyOperations.createMarkupForID(this._rootNodeID);
	    return ret + ' ' + markupForID;
	  },
	
	  /**
	   * Creates markup for the content between the tags.
	   *
	   * @private
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} props
	   * @param {object} context
	   * @return {string} Content markup.
	   */
	  _createContentMarkup: function _createContentMarkup(transaction, props, context) {
	    var ret = '';
	
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        ret = innerHTML.__html;
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        ret = escapeTextContentForBrowser(contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        ret = mountImages.join('');
	      }
	    }
	    if (newlineEatingTags[this._tag] && ret.charAt(0) === '\n') {
	      // text/html ignores the first character in these tags if it's a newline
	      // Prefer to break application/xml over text/html (for now) by adding
	      // a newline specifically to get eaten by the parser. (Alternately for
	      // textareas, replacing "^\n" with "\r\n" doesn't get eaten, and the first
	      // \r is normalized out by HTMLTextAreaElement#value.)
	      // See: <http://www.w3.org/TR/html-polyglot/#newlines-in-textarea-and-pre>
	      // See: <http://www.w3.org/TR/html5/syntax.html#element-restrictions>
	      // See: <http://www.w3.org/TR/html5/syntax.html#newlines>
	      // See: Parsing of "textarea" "listing" and "pre" elements
	      //  from <http://www.w3.org/TR/html5/syntax.html#parsing-main-inbody>
	      return '\n' + ret;
	    } else {
	      return ret;
	    }
	  },
	
	  _createInitialChildren: function _createInitialChildren(transaction, props, context, el) {
	    // Intentional use of != to avoid catching zero/false.
	    var innerHTML = props.dangerouslySetInnerHTML;
	    if (innerHTML != null) {
	      if (innerHTML.__html != null) {
	        setInnerHTML(el, innerHTML.__html);
	      }
	    } else {
	      var contentToUse = CONTENT_TYPES[_typeof(props.children)] ? props.children : null;
	      var childrenToUse = contentToUse != null ? null : props.children;
	      if (contentToUse != null) {
	        // TODO: Validate that text is allowed as a child of this node
	        setTextContent(el, contentToUse);
	      } else if (childrenToUse != null) {
	        var mountImages = this.mountChildren(childrenToUse, transaction, context);
	        for (var i = 0; i < mountImages.length; i++) {
	          el.appendChild(mountImages[i]);
	        }
	      }
	    }
	  },
	
	  /**
	   * Receives a next element and updates the component.
	   *
	   * @internal
	   * @param {ReactElement} nextElement
	   * @param {ReactReconcileTransaction|ReactServerRenderingTransaction} transaction
	   * @param {object} context
	   */
	  receiveComponent: function receiveComponent(nextElement, transaction, context) {
	    var prevElement = this._currentElement;
	    this._currentElement = nextElement;
	    this.updateComponent(transaction, prevElement, nextElement, context);
	  },
	
	  /**
	   * Updates a native DOM component after it has already been allocated and
	   * attached to the DOM. Reconciles the root DOM node, then recurses.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @param {ReactElement} prevElement
	   * @param {ReactElement} nextElement
	   * @internal
	   * @overridable
	   */
	  updateComponent: function updateComponent(transaction, prevElement, nextElement, context) {
	    var lastProps = prevElement.props;
	    var nextProps = this._currentElement.props;
	
	    switch (this._tag) {
	      case 'button':
	        lastProps = ReactDOMButton.getNativeProps(this, lastProps);
	        nextProps = ReactDOMButton.getNativeProps(this, nextProps);
	        break;
	      case 'input':
	        ReactDOMInput.updateWrapper(this);
	        lastProps = ReactDOMInput.getNativeProps(this, lastProps);
	        nextProps = ReactDOMInput.getNativeProps(this, nextProps);
	        break;
	      case 'option':
	        lastProps = ReactDOMOption.getNativeProps(this, lastProps);
	        nextProps = ReactDOMOption.getNativeProps(this, nextProps);
	        break;
	      case 'select':
	        lastProps = ReactDOMSelect.getNativeProps(this, lastProps);
	        nextProps = ReactDOMSelect.getNativeProps(this, nextProps);
	        break;
	      case 'textarea':
	        ReactDOMTextarea.updateWrapper(this);
	        lastProps = ReactDOMTextarea.getNativeProps(this, lastProps);
	        nextProps = ReactDOMTextarea.getNativeProps(this, nextProps);
	        break;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // If the context is reference-equal to the old one, pass down the same
	      // processed object so the update bailout in ReactReconciler behaves
	      // correctly (and identically in dev and prod). See #5005.
	      if (this._unprocessedContextDev !== context) {
	        this._unprocessedContextDev = context;
	        this._processedContextDev = processChildContextDev(context, this);
	      }
	      context = this._processedContextDev;
	    }
	
	    assertValidProps(this, nextProps);
	    this._updateDOMProperties(lastProps, nextProps, transaction, null);
	    this._updateDOMChildren(lastProps, nextProps, transaction, context);
	
	    if (!canDefineProperty && this._nodeWithLegacyProperties) {
	      this._nodeWithLegacyProperties.props = nextProps;
	    }
	
	    if (this._tag === 'select') {
	      // <select> value update needs to occur after <option> children
	      // reconciliation
	      transaction.getReactMountReady().enqueue(postUpdateSelectWrapper, this);
	    }
	  },
	
	  /**
	   * Reconciles the properties by detecting differences in property values and
	   * updating the DOM as necessary. This function is probably the single most
	   * critical path for performance optimization.
	   *
	   * TODO: Benchmark whether checking for changed values in memory actually
	   *       improves performance (especially statically positioned elements).
	   * TODO: Benchmark the effects of putting this at the top since 99% of props
	   *       do not change for a given reconciliation.
	   * TODO: Benchmark areas that can be improved with caching.
	   *
	   * @private
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {?DOMElement} node
	   */
	  _updateDOMProperties: function _updateDOMProperties(lastProps, nextProps, transaction, node) {
	    var propKey;
	    var styleName;
	    var styleUpdates;
	    for (propKey in lastProps) {
	      if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey)) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        var lastStyle = this._previousStyleCopy;
	        for (styleName in lastStyle) {
	          if (lastStyle.hasOwnProperty(styleName)) {
	            styleUpdates = styleUpdates || {};
	            styleUpdates[styleName] = '';
	          }
	        }
	        this._previousStyleCopy = null;
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (lastProps[propKey]) {
	          // Only call deleteListener if there was a listener previously or
	          // else willDeleteListener gets called when there wasn't actually a
	          // listener (e.g., onClick={null})
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        DOMPropertyOperations.deleteValueForProperty(node, propKey);
	      }
	    }
	    for (propKey in nextProps) {
	      var nextProp = nextProps[propKey];
	      var lastProp = propKey === STYLE ? this._previousStyleCopy : lastProps[propKey];
	      if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp) {
	        continue;
	      }
	      if (propKey === STYLE) {
	        if (nextProp) {
	          if (process.env.NODE_ENV !== 'production') {
	            checkAndWarnForMutatedStyle(this._previousStyleCopy, this._previousStyle, this);
	            this._previousStyle = nextProp;
	          }
	          nextProp = this._previousStyleCopy = assign({}, nextProp);
	        } else {
	          this._previousStyleCopy = null;
	        }
	        if (lastProp) {
	          // Unset styles on `lastProp` but not on `nextProp`.
	          for (styleName in lastProp) {
	            if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = '';
	            }
	          }
	          // Update styles that changed since `lastProp`.
	          for (styleName in nextProp) {
	            if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
	              styleUpdates = styleUpdates || {};
	              styleUpdates[styleName] = nextProp[styleName];
	            }
	          }
	        } else {
	          // Relies on `updateStylesByID` not mutating `styleUpdates`.
	          styleUpdates = nextProp;
	        }
	      } else if (registrationNameModules.hasOwnProperty(propKey)) {
	        if (nextProp) {
	          enqueuePutListener(this._rootNodeID, propKey, nextProp, transaction);
	        } else if (lastProp) {
	          deleteListener(this._rootNodeID, propKey);
	        }
	      } else if (isCustomComponent(this._tag, nextProps)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        if (propKey === CHILDREN) {
	          nextProp = null;
	        }
	        DOMPropertyOperations.setValueForAttribute(node, propKey, nextProp);
	      } else if (DOMProperty.properties[propKey] || DOMProperty.isCustomAttribute(propKey)) {
	        if (!node) {
	          node = ReactMount.getNode(this._rootNodeID);
	        }
	        // If we're updating to null or undefined, we should remove the property
	        // from the DOM node instead of inadvertantly setting to a string. This
	        // brings us in line with the same behavior we have on initial render.
	        if (nextProp != null) {
	          DOMPropertyOperations.setValueForProperty(node, propKey, nextProp);
	        } else {
	          DOMPropertyOperations.deleteValueForProperty(node, propKey);
	        }
	      }
	    }
	    if (styleUpdates) {
	      if (!node) {
	        node = ReactMount.getNode(this._rootNodeID);
	      }
	      CSSPropertyOperations.setValueForStyles(node, styleUpdates);
	    }
	  },
	
	  /**
	   * Reconciles the children with the various properties that affect the
	   * children content.
	   *
	   * @param {object} lastProps
	   * @param {object} nextProps
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   */
	  _updateDOMChildren: function _updateDOMChildren(lastProps, nextProps, transaction, context) {
	    var lastContent = CONTENT_TYPES[_typeof(lastProps.children)] ? lastProps.children : null;
	    var nextContent = CONTENT_TYPES[_typeof(nextProps.children)] ? nextProps.children : null;
	
	    var lastHtml = lastProps.dangerouslySetInnerHTML && lastProps.dangerouslySetInnerHTML.__html;
	    var nextHtml = nextProps.dangerouslySetInnerHTML && nextProps.dangerouslySetInnerHTML.__html;
	
	    // Note the use of `!=` which checks for null or undefined.
	    var lastChildren = lastContent != null ? null : lastProps.children;
	    var nextChildren = nextContent != null ? null : nextProps.children;
	
	    // If we're switching from children to content/html or vice versa, remove
	    // the old content
	    var lastHasContentOrHtml = lastContent != null || lastHtml != null;
	    var nextHasContentOrHtml = nextContent != null || nextHtml != null;
	    if (lastChildren != null && nextChildren == null) {
	      this.updateChildren(null, transaction, context);
	    } else if (lastHasContentOrHtml && !nextHasContentOrHtml) {
	      this.updateTextContent('');
	    }
	
	    if (nextContent != null) {
	      if (lastContent !== nextContent) {
	        this.updateTextContent('' + nextContent);
	      }
	    } else if (nextHtml != null) {
	      if (lastHtml !== nextHtml) {
	        this.updateMarkup('' + nextHtml);
	      }
	    } else if (nextChildren != null) {
	      this.updateChildren(nextChildren, transaction, context);
	    }
	  },
	
	  /**
	   * Destroys all event registrations for this instance. Does not remove from
	   * the DOM. That must be done by the parent.
	   *
	   * @internal
	   */
	  unmountComponent: function unmountComponent() {
	    switch (this._tag) {
	      case 'iframe':
	      case 'img':
	      case 'form':
	      case 'video':
	      case 'audio':
	        var listeners = this._wrapperState.listeners;
	        if (listeners) {
	          for (var i = 0; i < listeners.length; i++) {
	            listeners[i].remove();
	          }
	        }
	        break;
	      case 'input':
	        ReactDOMInput.unmountWrapper(this);
	        break;
	      case 'html':
	      case 'head':
	      case 'body':
	        /**
	         * Components like <html> <head> and <body> can't be removed or added
	         * easily in a cross-browser way, however it's valuable to be able to
	         * take advantage of React's reconciliation for styling and <title>
	         * management. So we just document it and throw in dangerous cases.
	         */
	         true ? process.env.NODE_ENV !== 'production' ? invariant(false, '<%s> tried to unmount. Because of cross-browser quirks it is ' + 'impossible to unmount some top-level components (eg <html>, ' + '<head>, and <body>) reliably and efficiently. To fix this, have a ' + 'single top-level component that never unmounts render these ' + 'elements.', this._tag) : invariant(false) : undefined;
	        break;
	    }
	
	    this.unmountChildren();
	    ReactBrowserEventEmitter.deleteAllListeners(this._rootNodeID);
	    ReactComponentBrowserEnvironment.unmountIDFromEnvironment(this._rootNodeID);
	    this._rootNodeID = null;
	    this._wrapperState = null;
	    if (this._nodeWithLegacyProperties) {
	      var node = this._nodeWithLegacyProperties;
	      node._reactInternalComponent = null;
	      this._nodeWithLegacyProperties = null;
	    }
	  },
	
	  getPublicInstance: function getPublicInstance() {
	    if (!this._nodeWithLegacyProperties) {
	      var node = ReactMount.getNode(this._rootNodeID);
	
	      node._reactInternalComponent = this;
	      node.getDOMNode = legacyGetDOMNode;
	      node.isMounted = legacyIsMounted;
	      node.setState = legacySetStateEtc;
	      node.replaceState = legacySetStateEtc;
	      node.forceUpdate = legacySetStateEtc;
	      node.setProps = legacySetProps;
	      node.replaceProps = legacyReplaceProps;
	
	      if (process.env.NODE_ENV !== 'production') {
	        if (canDefineProperty) {
	          Object.defineProperties(node, legacyPropsDescriptor);
	        } else {
	          // updateComponent will update this property on subsequent renders
	          node.props = this._currentElement.props;
	        }
	      } else {
	        // updateComponent will update this property on subsequent renders
	        node.props = this._currentElement.props;
	      }
	
	      this._nodeWithLegacyProperties = node;
	    }
	    return this._nodeWithLegacyProperties;
	  }
	
	};
	
	ReactPerf.measureMethods(ReactDOMComponent, 'ReactDOMComponent', {
	  mountComponent: 'mountComponent',
	  updateComponent: 'updateComponent'
	});
	
	assign(ReactDOMComponent.prototype, ReactDOMComponent.Mixin, ReactMultiChild.Mixin);
	
	module.exports = ReactDOMComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule AutoFocusUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactMount = __webpack_require__(28);
	
	var findDOMNode = __webpack_require__(91);
	var focusNode = __webpack_require__(95);
	
	var Mixin = {
	  componentDidMount: function componentDidMount() {
	    if (this.props.autoFocus) {
	      focusNode(findDOMNode(this));
	    }
	  }
	};
	
	var AutoFocusUtils = {
	  Mixin: Mixin,
	
	  focusDOMComponent: function focusDOMComponent() {
	    focusNode(ReactMount.getNode(this._rootNodeID));
	  }
	};
	
	module.exports = AutoFocusUtils;

/***/ },
/* 95 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule focusNode
	 */
	
	'use strict';
	
	/**
	 * @param {DOMElement} node input/textarea to focus
	 */
	
	function focusNode(node) {
	  // IE8 can throw "Can't move focus to the control because it is invisible,
	  // not enabled, or of a type that does not accept the focus." for all kinds of
	  // reasons that are too expensive and fragile to test.
	  try {
	    node.focus();
	  } catch (e) {}
	}
	
	module.exports = focusNode;

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSPropertyOperations
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(97);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactPerf = __webpack_require__(18);
	
	var camelizeStyleName = __webpack_require__(98);
	var dangerousStyleValue = __webpack_require__(100);
	var hyphenateStyleName = __webpack_require__(101);
	var memoizeStringOnly = __webpack_require__(103);
	var warning = __webpack_require__(25);
	
	var processStyleName = memoizeStringOnly(function (styleName) {
	  return hyphenateStyleName(styleName);
	});
	
	var hasShorthandPropertyBug = false;
	var styleFloatAccessor = 'cssFloat';
	if (ExecutionEnvironment.canUseDOM) {
	  var tempStyle = document.createElement('div').style;
	  try {
	    // IE8 throws "Invalid argument." if resetting shorthand style properties.
	    tempStyle.font = '';
	  } catch (e) {
	    hasShorthandPropertyBug = true;
	  }
	  // IE8 only supports accessing cssFloat (standard) as styleFloat
	  if (document.documentElement.style.cssFloat === undefined) {
	    styleFloatAccessor = 'styleFloat';
	  }
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  // 'msTransform' is correct, but the other prefixes should be capitalized
	  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
	
	  // style values shouldn't contain a semicolon
	  var badStyleValueWithSemicolonPattern = /;\s*$/;
	
	  var warnedStyleNames = {};
	  var warnedStyleValues = {};
	
	  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported style property %s. Did you mean %s?', name, camelizeStyleName(name)) : undefined;
	  };
	
	  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name) {
	    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
	      return;
	    }
	
	    warnedStyleNames[name] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1)) : undefined;
	  };
	
	  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value) {
	    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
	      return;
	    }
	
	    warnedStyleValues[value] = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'Style property values shouldn\'t contain a semicolon. ' + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, '')) : undefined;
	  };
	
	  /**
	   * @param {string} name
	   * @param {*} value
	   */
	  var warnValidStyle = function warnValidStyle(name, value) {
	    if (name.indexOf('-') > -1) {
	      warnHyphenatedStyleName(name);
	    } else if (badVendoredStyleNamePattern.test(name)) {
	      warnBadVendoredStyleName(name);
	    } else if (badStyleValueWithSemicolonPattern.test(value)) {
	      warnStyleValueWithSemicolon(name, value);
	    }
	  };
	}
	
	/**
	 * Operations for dealing with CSS properties.
	 */
	var CSSPropertyOperations = {
	
	  /**
	   * Serializes a mapping of style properties for use as inline styles:
	   *
	   *   > createMarkupForStyles({width: '200px', height: 0})
	   *   "width:200px;height:0;"
	   *
	   * Undefined values are ignored so that declarative programming is easier.
	   * The result should be HTML-escaped before insertion into the DOM.
	   *
	   * @param {object} styles
	   * @return {?string}
	   */
	  createMarkupForStyles: function createMarkupForStyles(styles) {
	    var serialized = '';
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      var styleValue = styles[styleName];
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styleValue);
	      }
	      if (styleValue != null) {
	        serialized += processStyleName(styleName) + ':';
	        serialized += dangerousStyleValue(styleName, styleValue) + ';';
	      }
	    }
	    return serialized || null;
	  },
	
	  /**
	   * Sets the value for multiple styles on a node.  If a value is specified as
	   * '' (empty string), the corresponding style property will be unset.
	   *
	   * @param {DOMElement} node
	   * @param {object} styles
	   */
	  setValueForStyles: function setValueForStyles(node, styles) {
	    var style = node.style;
	    for (var styleName in styles) {
	      if (!styles.hasOwnProperty(styleName)) {
	        continue;
	      }
	      if (process.env.NODE_ENV !== 'production') {
	        warnValidStyle(styleName, styles[styleName]);
	      }
	      var styleValue = dangerousStyleValue(styleName, styles[styleName]);
	      if (styleName === 'float') {
	        styleName = styleFloatAccessor;
	      }
	      if (styleValue) {
	        style[styleName] = styleValue;
	      } else {
	        var expansion = hasShorthandPropertyBug && CSSProperty.shorthandPropertyExpansions[styleName];
	        if (expansion) {
	          // Shorthand property that IE8 won't like unsetting, so unset each
	          // component to placate it
	          for (var individualStyleName in expansion) {
	            style[individualStyleName] = '';
	          }
	        } else {
	          style[styleName] = '';
	        }
	      }
	    }
	  }
	
	};
	
	ReactPerf.measureMethods(CSSPropertyOperations, 'CSSPropertyOperations', {
	  setValueForStyles: 'setValueForStyles'
	});
	
	module.exports = CSSPropertyOperations;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 97 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule CSSProperty
	 */
	
	'use strict';
	
	/**
	 * CSS properties which accept numbers but are not in units of "px".
	 */
	
	var isUnitlessNumber = {
	  animationIterationCount: true,
	  boxFlex: true,
	  boxFlexGroup: true,
	  boxOrdinalGroup: true,
	  columnCount: true,
	  flex: true,
	  flexGrow: true,
	  flexPositive: true,
	  flexShrink: true,
	  flexNegative: true,
	  flexOrder: true,
	  fontWeight: true,
	  lineClamp: true,
	  lineHeight: true,
	  opacity: true,
	  order: true,
	  orphans: true,
	  tabSize: true,
	  widows: true,
	  zIndex: true,
	  zoom: true,
	
	  // SVG-related properties
	  fillOpacity: true,
	  stopOpacity: true,
	  strokeDashoffset: true,
	  strokeOpacity: true,
	  strokeWidth: true
	};
	
	/**
	 * @param {string} prefix vendor-specific prefix, eg: Webkit
	 * @param {string} key style name, eg: transitionDuration
	 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
	 * WebkitTransitionDuration
	 */
	function prefixKey(prefix, key) {
	  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
	}
	
	/**
	 * Support style names that may come passed in prefixed by adding permutations
	 * of vendor prefixes.
	 */
	var prefixes = ['Webkit', 'ms', 'Moz', 'O'];
	
	// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
	// infinite loop, because it iterates over the newly added props too.
	Object.keys(isUnitlessNumber).forEach(function (prop) {
	  prefixes.forEach(function (prefix) {
	    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
	  });
	});
	
	/**
	 * Most style properties can be unset by doing .style[prop] = '' but IE8
	 * doesn't like doing that with shorthand properties so for the properties that
	 * IE8 breaks on, which are listed here, we instead unset each of the
	 * individual properties. See http://bugs.jquery.com/ticket/12385.
	 * The 4-value 'clock' properties like margin, padding, border-width seem to
	 * behave without any problems. Curiously, list-style works too without any
	 * special prodding.
	 */
	var shorthandPropertyExpansions = {
	  background: {
	    backgroundAttachment: true,
	    backgroundColor: true,
	    backgroundImage: true,
	    backgroundPositionX: true,
	    backgroundPositionY: true,
	    backgroundRepeat: true
	  },
	  backgroundPosition: {
	    backgroundPositionX: true,
	    backgroundPositionY: true
	  },
	  border: {
	    borderWidth: true,
	    borderStyle: true,
	    borderColor: true
	  },
	  borderBottom: {
	    borderBottomWidth: true,
	    borderBottomStyle: true,
	    borderBottomColor: true
	  },
	  borderLeft: {
	    borderLeftWidth: true,
	    borderLeftStyle: true,
	    borderLeftColor: true
	  },
	  borderRight: {
	    borderRightWidth: true,
	    borderRightStyle: true,
	    borderRightColor: true
	  },
	  borderTop: {
	    borderTopWidth: true,
	    borderTopStyle: true,
	    borderTopColor: true
	  },
	  font: {
	    fontStyle: true,
	    fontVariant: true,
	    fontWeight: true,
	    fontSize: true,
	    lineHeight: true,
	    fontFamily: true
	  },
	  outline: {
	    outlineWidth: true,
	    outlineStyle: true,
	    outlineColor: true
	  }
	};
	
	var CSSProperty = {
	  isUnitlessNumber: isUnitlessNumber,
	  shorthandPropertyExpansions: shorthandPropertyExpansions
	};
	
	module.exports = CSSProperty;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelizeStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var camelize = __webpack_require__(99);
	
	var msPattern = /^-ms-/;
	
	/**
	 * Camelcases a hyphenated CSS property name, for example:
	 *
	 *   > camelizeStyleName('background-color')
	 *   < "backgroundColor"
	 *   > camelizeStyleName('-moz-transition')
	 *   < "MozTransition"
	 *   > camelizeStyleName('-ms-transition')
	 *   < "msTransition"
	 *
	 * As Andi Smith suggests
	 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
	 * is converted to lowercase `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelizeStyleName(string) {
	  return camelize(string.replace(msPattern, 'ms-'));
	}
	
	module.exports = camelizeStyleName;

/***/ },
/* 99 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule camelize
	 * @typechecks
	 */
	
	"use strict";
	
	var _hyphenPattern = /-(.)/g;
	
	/**
	 * Camelcases a hyphenated string, for example:
	 *
	 *   > camelize('background-color')
	 *   < "backgroundColor"
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function camelize(string) {
	  return string.replace(_hyphenPattern, function (_, character) {
	    return character.toUpperCase();
	  });
	}
	
	module.exports = camelize;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule dangerousStyleValue
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CSSProperty = __webpack_require__(97);
	
	var isUnitlessNumber = CSSProperty.isUnitlessNumber;
	
	/**
	 * Convert a value into the proper css writable value. The style name `name`
	 * should be logical (no hyphens), as specified
	 * in `CSSProperty.isUnitlessNumber`.
	 *
	 * @param {string} name CSS property name such as `topMargin`.
	 * @param {*} value CSS property value such as `10px`.
	 * @return {string} Normalized style value with dimensions applied.
	 */
	function dangerousStyleValue(name, value) {
	  // Note that we've removed escapeTextForBrowser() calls here since the
	  // whole string will be escaped when the attribute is injected into
	  // the markup. If you provide unsafe user data here they can inject
	  // arbitrary CSS which may be problematic (I couldn't repro this):
	  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
	  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
	  // This is not an XSS hole but instead a potential CSS injection issue
	  // which has lead to a greater discussion about how we're going to
	  // trust URLs moving forward. See #2115901
	
	  var isEmpty = value == null || typeof value === 'boolean' || value === '';
	  if (isEmpty) {
	    return '';
	  }
	
	  var isNonNumeric = isNaN(value);
	  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
	    return '' + value; // cast to string
	  }
	
	  if (typeof value === 'string') {
	    value = value.trim();
	  }
	  return value + 'px';
	}
	
	module.exports = dangerousStyleValue;

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenateStyleName
	 * @typechecks
	 */
	
	'use strict';
	
	var hyphenate = __webpack_require__(102);
	
	var msPattern = /^ms-/;
	
	/**
	 * Hyphenates a camelcased CSS property name, for example:
	 *
	 *   > hyphenateStyleName('backgroundColor')
	 *   < "background-color"
	 *   > hyphenateStyleName('MozTransition')
	 *   < "-moz-transition"
	 *   > hyphenateStyleName('msTransition')
	 *   < "-ms-transition"
	 *
	 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
	 * is converted to `-ms-`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenateStyleName(string) {
	  return hyphenate(string).replace(msPattern, '-ms-');
	}
	
	module.exports = hyphenateStyleName;

/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule hyphenate
	 * @typechecks
	 */
	
	'use strict';
	
	var _uppercasePattern = /([A-Z])/g;
	
	/**
	 * Hyphenates a camelcased string, for example:
	 *
	 *   > hyphenate('backgroundColor')
	 *   < "background-color"
	 *
	 * For CSS style names, use `hyphenateStyleName` instead which works properly
	 * with all vendor prefixes, including `ms`.
	 *
	 * @param {string} string
	 * @return {string}
	 */
	function hyphenate(string) {
	  return string.replace(_uppercasePattern, '-$1').toLowerCase();
	}
	
	module.exports = hyphenate;

/***/ },
/* 103 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule memoizeStringOnly
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * Memoizes the return value of a function that accepts one string argument.
	 *
	 * @param {function} callback
	 * @return {function}
	 */
	
	function memoizeStringOnly(callback) {
	  var cache = {};
	  return function (string) {
	    if (!cache.hasOwnProperty(string)) {
	      cache[string] = callback.call(this, string);
	    }
	    return cache[string];
	  };
	}
	
	module.exports = memoizeStringOnly;

/***/ },
/* 104 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMButton
	 */
	
	'use strict';
	
	var mouseListenerNames = {
	  onClick: true,
	  onDoubleClick: true,
	  onMouseDown: true,
	  onMouseMove: true,
	  onMouseUp: true,
	
	  onClickCapture: true,
	  onDoubleClickCapture: true,
	  onMouseDownCapture: true,
	  onMouseMoveCapture: true,
	  onMouseUpCapture: true
	};
	
	/**
	 * Implements a <button> native component that does not receive mouse events
	 * when `disabled` is set.
	 */
	var ReactDOMButton = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    if (!props.disabled) {
	      return props;
	    }
	
	    // Copy the props, except the mouse listeners
	    var nativeProps = {};
	    for (var key in props) {
	      if (props.hasOwnProperty(key) && !mouseListenerNames[key]) {
	        nativeProps[key] = props[key];
	      }
	    }
	
	    return nativeProps;
	  }
	};
	
	module.exports = ReactDOMButton;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMInput
	 */
	
	'use strict';
	
	var ReactDOMIDOperations = __webpack_require__(27);
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	
	var instancesByReactID = {};
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMInput.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements an <input> native component that allows setting these optional
	 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
	 *
	 * If `checked` or `value` are not supplied (or null/undefined), user actions
	 * that affect the checked state or value will trigger updates to the element.
	 *
	 * If they are supplied (and not null/undefined), the rendered element will not
	 * trigger updates to the element. Instead, the props must change in order for
	 * the rendered element to be updated.
	 *
	 * The rendered element will be initialized as unchecked (or `defaultChecked`)
	 * with an empty value (or `defaultValue`).
	 *
	 * @see http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
	 */
	var ReactDOMInput = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    var value = LinkedValueUtils.getValue(props);
	    var checked = LinkedValueUtils.getChecked(props);
	
	    var nativeProps = assign({}, props, {
	      defaultChecked: undefined,
	      defaultValue: undefined,
	      value: value != null ? value : inst._wrapperState.initialValue,
	      checked: checked != null ? checked : inst._wrapperState.initialChecked,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('input', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    inst._wrapperState = {
	      initialChecked: props.defaultChecked || false,
	      initialValue: defaultValue != null ? defaultValue : null,
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  mountReadyWrapper: function mountReadyWrapper(inst) {
	    // Can't be in mountWrapper or else server rendering leaks.
	    instancesByReactID[inst._rootNodeID] = inst;
	  },
	
	  unmountWrapper: function unmountWrapper(inst) {
	    delete instancesByReactID[inst._rootNodeID];
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // TODO: Shouldn't this be getChecked(props)?
	    var checked = props.checked;
	    if (checked != null) {
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'checked', checked || false);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  // Here we use asap to wait until all updates have propagated, which
	  // is important when using controlled components within layers:
	  // https://github.com/facebook/react/issues/1698
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	
	  var name = props.name;
	  if (props.type === 'radio' && name != null) {
	    var rootNode = ReactMount.getNode(this._rootNodeID);
	    var queryRoot = rootNode;
	
	    while (queryRoot.parentNode) {
	      queryRoot = queryRoot.parentNode;
	    }
	
	    // If `rootNode.form` was non-null, then we could try `form.elements`,
	    // but that sometimes behaves strangely in IE8. We could also try using
	    // `form.getElementsByName`, but that will only return direct children
	    // and won't include inputs that use the HTML5 `form=` attribute. Since
	    // the input might not even be in a form, let's just use the global
	    // `querySelectorAll` to ensure we don't miss anything.
	    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');
	
	    for (var i = 0; i < group.length; i++) {
	      var otherNode = group[i];
	      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
	        continue;
	      }
	      // This will throw if radio buttons rendered by different copies of React
	      // and the same name are rendered into the same form (same as #1939).
	      // That's probably okay; we don't support it just as we don't support
	      // mixing React with non-React.
	      var otherID = ReactMount.getID(otherNode);
	      !otherID ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.') : invariant(false) : undefined;
	      var otherInstance = instancesByReactID[otherID];
	      !otherInstance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactDOMInput: Unknown radio button ID %s.', otherID) : invariant(false) : undefined;
	      // If this is a controlled radio button group, forcing the input that
	      // was previously checked to update will cause it to be come re-checked
	      // as appropriate.
	      ReactUpdates.asap(forceUpdateIfMounted, otherInstance);
	    }
	  }
	
	  return returnValue;
	}
	
	module.exports = ReactDOMInput;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule LinkedValueUtils
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactPropTypes = __webpack_require__(107);
	var ReactPropTypeLocations = __webpack_require__(65);
	
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	var hasReadOnlyValue = {
	  'button': true,
	  'checkbox': true,
	  'image': true,
	  'hidden': true,
	  'radio': true,
	  'reset': true,
	  'submit': true
	};
	
	function _assertSingleLink(inputProps) {
	  !(inputProps.checkedLink == null || inputProps.valueLink == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a valueLink. If you want to use ' + 'checkedLink, you probably don\'t want to use valueLink and vice versa.') : invariant(false) : undefined;
	}
	function _assertValueLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.value == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a valueLink and a value or onChange event. If you want ' + 'to use value or onChange, you probably don\'t want to use valueLink.') : invariant(false) : undefined;
	}
	
	function _assertCheckedLink(inputProps) {
	  _assertSingleLink(inputProps);
	  !(inputProps.checked == null && inputProps.onChange == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot provide a checkedLink and a checked property or onChange event. ' + 'If you want to use checked or onChange, you probably don\'t want to ' + 'use checkedLink') : invariant(false) : undefined;
	}
	
	var propTypes = {
	  value: function value(props, propName, componentName) {
	    if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  checked: function checked(props, propName, componentName) {
	    if (!props[propName] || props.onChange || props.readOnly || props.disabled) {
	      return null;
	    }
	    return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
	  },
	  onChange: ReactPropTypes.func
	};
	
	var loggedTypeFailures = {};
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Provide a linked `value` attribute for controlled forms. You should not use
	 * this outside of the ReactDOM controlled form components.
	 */
	var LinkedValueUtils = {
	  checkPropTypes: function checkPropTypes(tagName, props, owner) {
	    for (var propName in propTypes) {
	      if (propTypes.hasOwnProperty(propName)) {
	        var error = propTypes[propName](props, propName, tagName, ReactPropTypeLocations.prop);
	      }
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum(owner);
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed form propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current value of the input either from value prop or link.
	   */
	  getValue: function getValue(inputProps) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.value;
	    }
	    return inputProps.value;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @return {*} current checked status of the input either from checked prop
	   *             or link.
	   */
	  getChecked: function getChecked(inputProps) {
	    if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.value;
	    }
	    return inputProps.checked;
	  },
	
	  /**
	   * @param {object} inputProps Props for form component
	   * @param {SyntheticEvent} event change event to handle
	   */
	  executeOnChange: function executeOnChange(inputProps, event) {
	    if (inputProps.valueLink) {
	      _assertValueLink(inputProps);
	      return inputProps.valueLink.requestChange(event.target.value);
	    } else if (inputProps.checkedLink) {
	      _assertCheckedLink(inputProps);
	      return inputProps.checkedLink.requestChange(event.target.checked);
	    } else if (inputProps.onChange) {
	      return inputProps.onChange.call(undefined, event);
	    }
	  }
	};
	
	module.exports = LinkedValueUtils;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactPropTypes
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	
	var emptyFunction = __webpack_require__(15);
	var getIteratorFn = __webpack_require__(108);
	
	/**
	 * Collection of methods that allow declaration and validation of props that are
	 * supplied to React components. Example usage:
	 *
	 *   var Props = require('ReactPropTypes');
	 *   var MyArticle = React.createClass({
	 *     propTypes: {
	 *       // An optional string prop named "description".
	 *       description: Props.string,
	 *
	 *       // A required enum prop named "category".
	 *       category: Props.oneOf(['News','Photos']).isRequired,
	 *
	 *       // A prop named "dialog" that requires an instance of Dialog.
	 *       dialog: Props.instanceOf(Dialog).isRequired
	 *     },
	 *     render: function() { ... }
	 *   });
	 *
	 * A more formal specification of how these methods are used:
	 *
	 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	 *   decl := ReactPropTypes.{type}(.isRequired)?
	 *
	 * Each and every declaration produces a function with the same signature. This
	 * allows the creation of custom validation functions. For example:
	 *
	 *  var MyLink = React.createClass({
	 *    propTypes: {
	 *      // An optional string or URI prop named "href".
	 *      href: function(props, propName, componentName) {
	 *        var propValue = props[propName];
	 *        if (propValue != null && typeof propValue !== 'string' &&
	 *            !(propValue instanceof URI)) {
	 *          return new Error(
	 *            'Expected a string or an URI for ' + propName + ' in ' +
	 *            componentName
	 *          );
	 *        }
	 *      }
	 *    },
	 *    render: function() {...}
	 *  });
	 *
	 * @internal
	 */
	
	var ANONYMOUS = '<<anonymous>>';
	
	var ReactPropTypes = {
	  array: createPrimitiveTypeChecker('array'),
	  bool: createPrimitiveTypeChecker('boolean'),
	  func: createPrimitiveTypeChecker('function'),
	  number: createPrimitiveTypeChecker('number'),
	  object: createPrimitiveTypeChecker('object'),
	  string: createPrimitiveTypeChecker('string'),
	
	  any: createAnyTypeChecker(),
	  arrayOf: createArrayOfTypeChecker,
	  element: createElementTypeChecker(),
	  instanceOf: createInstanceTypeChecker,
	  node: createNodeChecker(),
	  objectOf: createObjectOfTypeChecker,
	  oneOf: createEnumTypeChecker,
	  oneOfType: createUnionTypeChecker,
	  shape: createShapeTypeChecker
	};
	
	function createChainableTypeChecker(validate) {
	  function checkType(isRequired, props, propName, componentName, location, propFullName) {
	    componentName = componentName || ANONYMOUS;
	    propFullName = propFullName || propName;
	    if (props[propName] == null) {
	      var locationName = ReactPropTypeLocationNames[location];
	      if (isRequired) {
	        return new Error('Required ' + locationName + ' `' + propFullName + '` was not specified in ' + ('`' + componentName + '`.'));
	      }
	      return null;
	    } else {
	      return validate(props, propName, componentName, location, propFullName);
	    }
	  }
	
	  var chainedCheckType = checkType.bind(null, false);
	  chainedCheckType.isRequired = checkType.bind(null, true);
	
	  return chainedCheckType;
	}
	
	function createPrimitiveTypeChecker(expectedType) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== expectedType) {
	      var locationName = ReactPropTypeLocationNames[location];
	      // `propValue` being instance of, say, date/regexp, pass the 'object'
	      // check, but we can offer a more precise error message here rather than
	      // 'of type `object`'.
	      var preciseType = getPreciseType(propValue);
	
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createAnyTypeChecker() {
	  return createChainableTypeChecker(emptyFunction.thatReturns(null));
	}
	
	function createArrayOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    if (!Array.isArray(propValue)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var propType = getPropType(propValue);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	    }
	    for (var i = 0; i < propValue.length; i++) {
	      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']');
	      if (error instanceof Error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createElementTypeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!ReactElement.isValidElement(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a single ReactElement.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createInstanceTypeChecker(expectedClass) {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!(props[propName] instanceof expectedClass)) {
	      var locationName = ReactPropTypeLocationNames[location];
	      var expectedClassName = expectedClass.name || ANONYMOUS;
	      var actualClassName = getClassName(props[propName]);
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createEnumTypeChecker(expectedValues) {
	  if (!Array.isArray(expectedValues)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOf, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    for (var i = 0; i < expectedValues.length; i++) {
	      if (propValue === expectedValues[i]) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    var valuesString = JSON.stringify(expectedValues);
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createObjectOfTypeChecker(typeChecker) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	    }
	    for (var key in propValue) {
	      if (propValue.hasOwnProperty(key)) {
	        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createUnionTypeChecker(arrayOfTypeCheckers) {
	  if (!Array.isArray(arrayOfTypeCheckers)) {
	    return createChainableTypeChecker(function () {
	      return new Error('Invalid argument supplied to oneOfType, expected an instance of array.');
	    });
	  }
	
	  function validate(props, propName, componentName, location, propFullName) {
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (checker(props, propName, componentName, location, propFullName) == null) {
	        return null;
	      }
	    }
	
	    var locationName = ReactPropTypeLocationNames[location];
	    return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createNodeChecker() {
	  function validate(props, propName, componentName, location, propFullName) {
	    if (!isNode(props[propName])) {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function createShapeTypeChecker(shapeTypes) {
	  function validate(props, propName, componentName, location, propFullName) {
	    var propValue = props[propName];
	    var propType = getPropType(propValue);
	    if (propType !== 'object') {
	      var locationName = ReactPropTypeLocationNames[location];
	      return new Error('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	    }
	    for (var key in shapeTypes) {
	      var checker = shapeTypes[key];
	      if (!checker) {
	        continue;
	      }
	      var error = checker(propValue, key, componentName, location, propFullName + '.' + key);
	      if (error) {
	        return error;
	      }
	    }
	    return null;
	  }
	  return createChainableTypeChecker(validate);
	}
	
	function isNode(propValue) {
	  switch (typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue)) {
	    case 'number':
	    case 'string':
	    case 'undefined':
	      return true;
	    case 'boolean':
	      return !propValue;
	    case 'object':
	      if (Array.isArray(propValue)) {
	        return propValue.every(isNode);
	      }
	      if (propValue === null || ReactElement.isValidElement(propValue)) {
	        return true;
	      }
	
	      var iteratorFn = getIteratorFn(propValue);
	      if (iteratorFn) {
	        var iterator = iteratorFn.call(propValue);
	        var step;
	        if (iteratorFn !== propValue.entries) {
	          while (!(step = iterator.next()).done) {
	            if (!isNode(step.value)) {
	              return false;
	            }
	          }
	        } else {
	          // Iterator will provide entry [k,v] tuples rather than values.
	          while (!(step = iterator.next()).done) {
	            var entry = step.value;
	            if (entry) {
	              if (!isNode(entry[1])) {
	                return false;
	              }
	            }
	          }
	        }
	      } else {
	        return false;
	      }
	
	      return true;
	    default:
	      return false;
	  }
	}
	
	// Equivalent of `typeof` but with special handling for array and regexp.
	function getPropType(propValue) {
	  var propType = typeof propValue === 'undefined' ? 'undefined' : _typeof(propValue);
	  if (Array.isArray(propValue)) {
	    return 'array';
	  }
	  if (propValue instanceof RegExp) {
	    // Old webkits (at least until Android 4.0) return 'function' rather than
	    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	    // passes PropTypes.object.
	    return 'object';
	  }
	  return propType;
	}
	
	// This handles more types than `getPropType`. Only used for error messages.
	// See `createPrimitiveTypeChecker`.
	function getPreciseType(propValue) {
	  var propType = getPropType(propValue);
	  if (propType === 'object') {
	    if (propValue instanceof Date) {
	      return 'date';
	    } else if (propValue instanceof RegExp) {
	      return 'regexp';
	    }
	  }
	  return propType;
	}
	
	// Returns class name of the object, if any.
	function getClassName(propValue) {
	  if (!propValue.constructor || !propValue.constructor.name) {
	    return '<<anonymous>>';
	  }
	  return propValue.constructor.name;
	}
	
	module.exports = ReactPropTypes;

/***/ },
/* 108 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getIteratorFn
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/* global Symbol */
	
	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}
	
	module.exports = getIteratorFn;

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMOption
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(110);
	var ReactDOMSelect = __webpack_require__(112);
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	var valueContextKey = ReactDOMSelect.valueContextKey;
	
	/**
	 * Implements an <option> native component that warns when `selected` is set.
	 */
	var ReactDOMOption = {
	  mountWrapper: function mountWrapper(inst, props, context) {
	    // TODO (yungsters): Remove support for `selected` in <option>.
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(props.selected == null, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.') : undefined;
	    }
	
	    // Look up whether this option is 'selected' via context
	    var selectValue = context[valueContextKey];
	
	    // If context key is null (e.g., no specified value or after initial mount)
	    // or missing (e.g., for <datalist>), we don't change props.selected
	    var selected = null;
	    if (selectValue != null) {
	      selected = false;
	      if (Array.isArray(selectValue)) {
	        // multiple
	        for (var i = 0; i < selectValue.length; i++) {
	          if ('' + selectValue[i] === '' + props.value) {
	            selected = true;
	            break;
	          }
	        }
	      } else {
	        selected = '' + selectValue === '' + props.value;
	      }
	    }
	
	    inst._wrapperState = { selected: selected };
	  },
	
	  getNativeProps: function getNativeProps(inst, props, context) {
	    var nativeProps = assign({ selected: undefined, children: undefined }, props);
	
	    // Read state only from initial mount because <select> updates value
	    // manually; we need the initial state only for server rendering
	    if (inst._wrapperState.selected != null) {
	      nativeProps.selected = inst._wrapperState.selected;
	    }
	
	    var content = '';
	
	    // Flatten children and warn if they aren't strings or numbers;
	    // invalid types are ignored.
	    ReactChildren.forEach(props.children, function (child) {
	      if (child == null) {
	        return;
	      }
	      if (typeof child === 'string' || typeof child === 'number') {
	        content += child;
	      } else {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Only strings and numbers are supported as <option> children.') : undefined;
	      }
	    });
	
	    if (content) {
	      nativeProps.children = content;
	    }
	
	    return nativeProps;
	  }
	
	};
	
	module.exports = ReactDOMOption;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildren
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	var ReactElement = __webpack_require__(42);
	
	var emptyFunction = __webpack_require__(15);
	var traverseAllChildren = __webpack_require__(111);
	
	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;
	
	var userProvidedKeyEscapeRegex = /\/(?!\/)/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '//');
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);
	
	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  func.call(context, child, bookKeeping.count++);
	}
	
	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}
	
	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);
	
	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result;
	  var keyPrefix = bookKeeping.keyPrefix;
	  var func = bookKeeping.func;
	  var context = bookKeeping.context;
	
	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild !== child ? escapeUserProvidedKey(mappedChild.key || '') + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}
	
	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}
	
	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}
	
	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}
	
	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}
	
	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}
	
	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};
	
	module.exports = ReactChildren;

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule traverseAllChildren
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	var SEPARATOR = ReactInstanceHandles.SEPARATOR;
	var SUBSEPARATOR = ':';
	
	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */
	
	var userProvidedKeyEscaperLookup = {
	  '=': '=0',
	  '.': '=1',
	  ':': '=2'
	};
	
	var userProvidedKeyEscapeRegex = /[=.:]/g;
	
	var didWarnAboutMaps = false;
	
	function userProvidedKeyEscaper(match) {
	  return userProvidedKeyEscaperLookup[match];
	}
	
	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  if (component && component.key != null) {
	    // Explicit key
	    return wrapUserProvidedKey(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}
	
	/**
	 * Escape a component key so that it is safe to use in a reactid.
	 *
	 * @param {*} text Component key to be escaped.
	 * @return {string} An escaped string.
	 */
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, userProvidedKeyEscaper);
	}
	
	/**
	 * Wrap a `key` value explicitly provided by the user to distinguish it from
	 * implicitly-generated keys generated by a component's index in its parent.
	 *
	 * @param {string} key Value of a user-provided `key` attribute
	 * @return {string}
	 */
	function wrapUserProvidedKey(key) {
	  return '$' + escapeUserProvidedKey(key);
	}
	
	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);
	
	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }
	
	  if (children === null || type === 'string' || type === 'number' || ReactElement.isValidElement(children)) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }
	
	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
	
	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.') : undefined;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + wrapUserProvidedKey(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : invariant(false) : undefined;
	    }
	  }
	
	  return subtreeCount;
	}
	
	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }
	
	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}
	
	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelect
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(106);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	var valueContextKey = '__ReactDOMSelect_value$' + Math.random().toString(36).slice(2);
	
	function updateOptionsIfPendingUpdateAndMounted() {
	  if (this._rootNodeID && this._wrapperState.pendingUpdate) {
	    this._wrapperState.pendingUpdate = false;
	
	    var props = this._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	
	    if (value != null) {
	      updateOptions(this, Boolean(props.multiple), value);
	    }
	  }
	}
	
	function getDeclarationErrorAddendum(owner) {
	  if (owner) {
	    var name = owner.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	var valuePropNames = ['value', 'defaultValue'];
	
	/**
	 * Validation function for `value` and `defaultValue`.
	 * @private
	 */
	function checkSelectPropTypes(inst, props) {
	  var owner = inst._currentElement._owner;
	  LinkedValueUtils.checkPropTypes('select', props, owner);
	
	  for (var i = 0; i < valuePropNames.length; i++) {
	    var propName = valuePropNames[i];
	    if (props[propName] == null) {
	      continue;
	    }
	    if (props.multiple) {
	      process.env.NODE_ENV !== 'production' ? warning(Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    } else {
	      process.env.NODE_ENV !== 'production' ? warning(!Array.isArray(props[propName]), 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum(owner)) : undefined;
	    }
	  }
	}
	
	/**
	 * @param {ReactDOMComponent} inst
	 * @param {boolean} multiple
	 * @param {*} propValue A stringable (with `multiple`, a list of stringables).
	 * @private
	 */
	function updateOptions(inst, multiple, propValue) {
	  var selectedValue, i;
	  var options = ReactMount.getNode(inst._rootNodeID).options;
	
	  if (multiple) {
	    selectedValue = {};
	    for (i = 0; i < propValue.length; i++) {
	      selectedValue['' + propValue[i]] = true;
	    }
	    for (i = 0; i < options.length; i++) {
	      var selected = selectedValue.hasOwnProperty(options[i].value);
	      if (options[i].selected !== selected) {
	        options[i].selected = selected;
	      }
	    }
	  } else {
	    // Do not set `select.value` as exact behavior isn't consistent across all
	    // browsers for all cases.
	    selectedValue = '' + propValue;
	    for (i = 0; i < options.length; i++) {
	      if (options[i].value === selectedValue) {
	        options[i].selected = true;
	        return;
	      }
	    }
	    if (options.length) {
	      options[0].selected = true;
	    }
	  }
	}
	
	/**
	 * Implements a <select> native component that allows optionally setting the
	 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
	 * stringable. If `multiple` is true, the prop must be an array of stringables.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that change the
	 * selected option will trigger updates to the rendered options.
	 *
	 * If it is supplied (and not null/undefined), the rendered options will not
	 * update in response to user actions. Instead, the `value` prop must change in
	 * order for the rendered options to update.
	 *
	 * If `defaultValue` is provided, any options with the supplied values will be
	 * selected.
	 */
	var ReactDOMSelect = {
	  valueContextKey: valueContextKey,
	
	  getNativeProps: function getNativeProps(inst, props, context) {
	    return assign({}, props, {
	      onChange: inst._wrapperState.onChange,
	      value: undefined
	    });
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      checkSelectPropTypes(inst, props);
	    }
	
	    var value = LinkedValueUtils.getValue(props);
	    inst._wrapperState = {
	      pendingUpdate: false,
	      initialValue: value != null ? value : props.defaultValue,
	      onChange: _handleChange.bind(inst),
	      wasMultiple: Boolean(props.multiple)
	    };
	  },
	
	  processChildContext: function processChildContext(inst, props, context) {
	    // Pass down initial value so initial generated markup has correct
	    // `selected` attributes
	    var childContext = assign({}, context);
	    childContext[valueContextKey] = inst._wrapperState.initialValue;
	    return childContext;
	  },
	
	  postUpdateWrapper: function postUpdateWrapper(inst) {
	    var props = inst._currentElement.props;
	
	    // After the initial mount, we control selected-ness manually so don't pass
	    // the context value down
	    inst._wrapperState.initialValue = undefined;
	
	    var wasMultiple = inst._wrapperState.wasMultiple;
	    inst._wrapperState.wasMultiple = Boolean(props.multiple);
	
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      inst._wrapperState.pendingUpdate = false;
	      updateOptions(inst, Boolean(props.multiple), value);
	    } else if (wasMultiple !== Boolean(props.multiple)) {
	      // For simplicity, reapply `defaultValue` if `multiple` is toggled.
	      if (props.defaultValue != null) {
	        updateOptions(inst, Boolean(props.multiple), props.defaultValue);
	      } else {
	        // Revert the select back to its default unselected state.
	        updateOptions(inst, Boolean(props.multiple), props.multiple ? [] : '');
	      }
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	
	  this._wrapperState.pendingUpdate = true;
	  ReactUpdates.asap(updateOptionsIfPendingUpdateAndMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMSelect;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMTextarea
	 */
	
	'use strict';
	
	var LinkedValueUtils = __webpack_require__(106);
	var ReactDOMIDOperations = __webpack_require__(27);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function forceUpdateIfMounted() {
	  if (this._rootNodeID) {
	    // DOM component is still mounted; update
	    ReactDOMTextarea.updateWrapper(this);
	  }
	}
	
	/**
	 * Implements a <textarea> native component that allows setting `value`, and
	 * `defaultValue`. This differs from the traditional DOM API because value is
	 * usually set as PCDATA children.
	 *
	 * If `value` is not supplied (or null/undefined), user actions that affect the
	 * value will trigger updates to the element.
	 *
	 * If `value` is supplied (and not null/undefined), the rendered element will
	 * not trigger updates to the element. Instead, the `value` prop must change in
	 * order for the rendered element to be updated.
	 *
	 * The rendered element will be initialized with an empty value, the prop
	 * `defaultValue` if specified, or the children content (deprecated).
	 */
	var ReactDOMTextarea = {
	  getNativeProps: function getNativeProps(inst, props, context) {
	    !(props.dangerouslySetInnerHTML == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : invariant(false) : undefined;
	
	    // Always set children to the same thing. In IE9, the selection range will
	    // get reset if `textContent` is mutated.
	    var nativeProps = assign({}, props, {
	      defaultValue: undefined,
	      value: undefined,
	      children: inst._wrapperState.initialValue,
	      onChange: inst._wrapperState.onChange
	    });
	
	    return nativeProps;
	  },
	
	  mountWrapper: function mountWrapper(inst, props) {
	    if (process.env.NODE_ENV !== 'production') {
	      LinkedValueUtils.checkPropTypes('textarea', props, inst._currentElement._owner);
	    }
	
	    var defaultValue = props.defaultValue;
	    // TODO (yungsters): Remove support for children content in <textarea>.
	    var children = props.children;
	    if (children != null) {
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.') : undefined;
	      }
	      !(defaultValue == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : invariant(false) : undefined;
	      if (Array.isArray(children)) {
	        !(children.length <= 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, '<textarea> can only have at most one child.') : invariant(false) : undefined;
	        children = children[0];
	      }
	
	      defaultValue = '' + children;
	    }
	    if (defaultValue == null) {
	      defaultValue = '';
	    }
	    var value = LinkedValueUtils.getValue(props);
	
	    inst._wrapperState = {
	      // We save the initial value so that `ReactDOMComponent` doesn't update
	      // `textContent` (unnecessary since we update value).
	      // The initial value can be a boolean or object so that's why it's
	      // forced to be a string.
	      initialValue: '' + (value != null ? value : defaultValue),
	      onChange: _handleChange.bind(inst)
	    };
	  },
	
	  updateWrapper: function updateWrapper(inst) {
	    var props = inst._currentElement.props;
	    var value = LinkedValueUtils.getValue(props);
	    if (value != null) {
	      // Cast `value` to a string to ensure the value is set correctly. While
	      // browsers typically do this as necessary, jsdom doesn't.
	      ReactDOMIDOperations.updatePropertyByID(inst._rootNodeID, 'value', '' + value);
	    }
	  }
	};
	
	function _handleChange(event) {
	  var props = this._currentElement.props;
	  var returnValue = LinkedValueUtils.executeOnChange(props, event);
	  ReactUpdates.asap(forceUpdateIfMounted, this);
	  return returnValue;
	}
	
	module.exports = ReactDOMTextarea;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactMultiChild
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactMultiChildUpdateTypes = __webpack_require__(16);
	
	var ReactCurrentOwner = __webpack_require__(5);
	var ReactReconciler = __webpack_require__(50);
	var ReactChildReconciler = __webpack_require__(115);
	
	var flattenChildren = __webpack_require__(116);
	
	/**
	 * Updating children of a component may trigger recursive updates. The depth is
	 * used to batch recursive updates to render markup more efficiently.
	 *
	 * @type {number}
	 * @private
	 */
	var updateDepth = 0;
	
	/**
	 * Queue of update configuration objects.
	 *
	 * Each object has a `type` property that is in `ReactMultiChildUpdateTypes`.
	 *
	 * @type {array<object>}
	 * @private
	 */
	var updateQueue = [];
	
	/**
	 * Queue of markup to be rendered.
	 *
	 * @type {array<string>}
	 * @private
	 */
	var markupQueue = [];
	
	/**
	 * Enqueues markup to be rendered and inserted at a supplied index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @param {number} toIndex Destination index.
	 * @private
	 */
	function enqueueInsertMarkup(parentID, markup, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.INSERT_MARKUP,
	    markupIndex: markupQueue.push(markup) - 1,
	    content: null,
	    fromIndex: null,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues moving an existing element to another index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Source index of the existing element.
	 * @param {number} toIndex Destination index of the element.
	 * @private
	 */
	function enqueueMove(parentID, fromIndex, toIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.MOVE_EXISTING,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: toIndex
	  });
	}
	
	/**
	 * Enqueues removing an element at an index.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {number} fromIndex Index of the element to remove.
	 * @private
	 */
	function enqueueRemove(parentID, fromIndex) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.REMOVE_NODE,
	    markupIndex: null,
	    content: null,
	    fromIndex: fromIndex,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the markup of a node.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} markup Markup that renders into an element.
	 * @private
	 */
	function enqueueSetMarkup(parentID, markup) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.SET_MARKUP,
	    markupIndex: null,
	    content: markup,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Enqueues setting the text content.
	 *
	 * @param {string} parentID ID of the parent component.
	 * @param {string} textContent Text content to set.
	 * @private
	 */
	function enqueueTextContent(parentID, textContent) {
	  // NOTE: Null values reduce hidden classes.
	  updateQueue.push({
	    parentID: parentID,
	    parentNode: null,
	    type: ReactMultiChildUpdateTypes.TEXT_CONTENT,
	    markupIndex: null,
	    content: textContent,
	    fromIndex: null,
	    toIndex: null
	  });
	}
	
	/**
	 * Processes any enqueued updates.
	 *
	 * @private
	 */
	function processQueue() {
	  if (updateQueue.length) {
	    ReactComponentEnvironment.processChildrenUpdates(updateQueue, markupQueue);
	    clearQueue();
	  }
	}
	
	/**
	 * Clears any enqueued updates.
	 *
	 * @private
	 */
	function clearQueue() {
	  updateQueue.length = 0;
	  markupQueue.length = 0;
	}
	
	/**
	 * ReactMultiChild are capable of reconciling multiple children.
	 *
	 * @class ReactMultiChild
	 * @internal
	 */
	var ReactMultiChild = {
	
	  /**
	   * Provides common functionality for components that must reconcile multiple
	   * children. This is used by `ReactDOMComponent` to mount, update, and
	   * unmount child components.
	   *
	   * @lends {ReactMultiChild.prototype}
	   */
	  Mixin: {
	
	    _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	        }
	      }
	      return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
	    },
	
	    _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context) {
	      var nextChildren;
	      if (process.env.NODE_ENV !== 'production') {
	        if (this._currentElement) {
	          try {
	            ReactCurrentOwner.current = this._currentElement._owner;
	            nextChildren = flattenChildren(nextNestedChildrenElements);
	          } finally {
	            ReactCurrentOwner.current = null;
	          }
	          return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	        }
	      }
	      nextChildren = flattenChildren(nextNestedChildrenElements);
	      return ReactChildReconciler.updateChildren(prevChildren, nextChildren, transaction, context);
	    },
	
	    /**
	     * Generates a "mount image" for each of the supplied children. In the case
	     * of `ReactDOMComponent`, a mount image is a string of markup.
	     *
	     * @param {?object} nestedChildren Nested child maps.
	     * @return {array} An array of mounted representations.
	     * @internal
	     */
	    mountChildren: function mountChildren(nestedChildren, transaction, context) {
	      var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
	      this._renderedChildren = children;
	      var mountImages = [];
	      var index = 0;
	      for (var name in children) {
	        if (children.hasOwnProperty(name)) {
	          var child = children[name];
	          // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	          var rootID = this._rootNodeID + name;
	          var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	          child._mountIndex = index++;
	          mountImages.push(mountImage);
	        }
	      }
	      return mountImages;
	    },
	
	    /**
	     * Replaces any rendered children with a text content string.
	     *
	     * @param {string} nextContent String of content.
	     * @internal
	     */
	    updateTextContent: function updateTextContent(nextContent) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        // TODO: The setTextContent operation should be enough
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChild(prevChildren[name]);
	          }
	        }
	        // Set new text content.
	        this.setTextContent(nextContent);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Replaces any rendered children with a markup string.
	     *
	     * @param {string} nextMarkup String of markup.
	     * @internal
	     */
	    updateMarkup: function updateMarkup(nextMarkup) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        var prevChildren = this._renderedChildren;
	        // Remove any rendered children.
	        ReactChildReconciler.unmountChildren(prevChildren);
	        for (var name in prevChildren) {
	          if (prevChildren.hasOwnProperty(name)) {
	            this._unmountChildByName(prevChildren[name], name);
	          }
	        }
	        this.setMarkup(nextMarkup);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Updates the rendered children with new children.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @internal
	     */
	    updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
	      updateDepth++;
	      var errorThrown = true;
	      try {
	        this._updateChildren(nextNestedChildrenElements, transaction, context);
	        errorThrown = false;
	      } finally {
	        updateDepth--;
	        if (!updateDepth) {
	          if (errorThrown) {
	            clearQueue();
	          } else {
	            processQueue();
	          }
	        }
	      }
	    },
	
	    /**
	     * Improve performance by isolating this hot code path from the try/catch
	     * block in `updateChildren`.
	     *
	     * @param {?object} nextNestedChildrenElements Nested child element maps.
	     * @param {ReactReconcileTransaction} transaction
	     * @final
	     * @protected
	     */
	    _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
	      var prevChildren = this._renderedChildren;
	      var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, transaction, context);
	      this._renderedChildren = nextChildren;
	      if (!nextChildren && !prevChildren) {
	        return;
	      }
	      var name;
	      // `nextIndex` will increment for each child in `nextChildren`, but
	      // `lastIndex` will be the last index visited in `prevChildren`.
	      var lastIndex = 0;
	      var nextIndex = 0;
	      for (name in nextChildren) {
	        if (!nextChildren.hasOwnProperty(name)) {
	          continue;
	        }
	        var prevChild = prevChildren && prevChildren[name];
	        var nextChild = nextChildren[name];
	        if (prevChild === nextChild) {
	          this.moveChild(prevChild, nextIndex, lastIndex);
	          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	          prevChild._mountIndex = nextIndex;
	        } else {
	          if (prevChild) {
	            // Update `lastIndex` before `_mountIndex` gets unset by unmounting.
	            lastIndex = Math.max(prevChild._mountIndex, lastIndex);
	            this._unmountChild(prevChild);
	          }
	          // The child must be instantiated before it's mounted.
	          this._mountChildByNameAtIndex(nextChild, name, nextIndex, transaction, context);
	        }
	        nextIndex++;
	      }
	      // Remove children that are no longer present.
	      for (name in prevChildren) {
	        if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	          this._unmountChild(prevChildren[name]);
	        }
	      }
	    },
	
	    /**
	     * Unmounts all rendered children. This should be used to clean up children
	     * when this component is unmounted.
	     *
	     * @internal
	     */
	    unmountChildren: function unmountChildren() {
	      var renderedChildren = this._renderedChildren;
	      ReactChildReconciler.unmountChildren(renderedChildren);
	      this._renderedChildren = null;
	    },
	
	    /**
	     * Moves a child component to the supplied index.
	     *
	     * @param {ReactComponent} child Component to move.
	     * @param {number} toIndex Destination index of the element.
	     * @param {number} lastIndex Last index visited of the siblings of `child`.
	     * @protected
	     */
	    moveChild: function moveChild(child, toIndex, lastIndex) {
	      // If the index of `child` is less than `lastIndex`, then it needs to
	      // be moved. Otherwise, we do not need to move it because a child will be
	      // inserted or moved before `child`.
	      if (child._mountIndex < lastIndex) {
	        enqueueMove(this._rootNodeID, child._mountIndex, toIndex);
	      }
	    },
	
	    /**
	     * Creates a child component.
	     *
	     * @param {ReactComponent} child Component to create.
	     * @param {string} mountImage Markup to insert.
	     * @protected
	     */
	    createChild: function createChild(child, mountImage) {
	      enqueueInsertMarkup(this._rootNodeID, mountImage, child._mountIndex);
	    },
	
	    /**
	     * Removes a child component.
	     *
	     * @param {ReactComponent} child Child to remove.
	     * @protected
	     */
	    removeChild: function removeChild(child) {
	      enqueueRemove(this._rootNodeID, child._mountIndex);
	    },
	
	    /**
	     * Sets this text content string.
	     *
	     * @param {string} textContent Text content to set.
	     * @protected
	     */
	    setTextContent: function setTextContent(textContent) {
	      enqueueTextContent(this._rootNodeID, textContent);
	    },
	
	    /**
	     * Sets this markup string.
	     *
	     * @param {string} markup Markup to set.
	     * @protected
	     */
	    setMarkup: function setMarkup(markup) {
	      enqueueSetMarkup(this._rootNodeID, markup);
	    },
	
	    /**
	     * Mounts a child with the supplied name.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to mount.
	     * @param {string} name Name of the child.
	     * @param {number} index Index at which to insert the child.
	     * @param {ReactReconcileTransaction} transaction
	     * @private
	     */
	    _mountChildByNameAtIndex: function _mountChildByNameAtIndex(child, name, index, transaction, context) {
	      // Inlined for performance, see `ReactInstanceHandles.createReactID`.
	      var rootID = this._rootNodeID + name;
	      var mountImage = ReactReconciler.mountComponent(child, rootID, transaction, context);
	      child._mountIndex = index;
	      this.createChild(child, mountImage);
	    },
	
	    /**
	     * Unmounts a rendered child.
	     *
	     * NOTE: This is part of `updateChildren` and is here for readability.
	     *
	     * @param {ReactComponent} child Component to unmount.
	     * @private
	     */
	    _unmountChild: function _unmountChild(child) {
	      this.removeChild(child);
	      child._mountIndex = null;
	    }
	
	  }
	
	};
	
	module.exports = ReactMultiChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactChildReconciler
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactReconciler = __webpack_require__(50);
	
	var instantiateReactComponent = __webpack_require__(62);
	var shouldUpdateReactComponent = __webpack_require__(67);
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);
	
	function instantiateChild(childInstances, child, name) {
	  // We found a component instance.
	  var keyUnique = childInstances[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (child != null && keyUnique) {
	    childInstances[name] = instantiateReactComponent(child, null);
	  }
	}
	
	/**
	 * ReactChildReconciler provides helpers for initializing or updating a set of
	 * children. Its output is suitable for passing it onto ReactMultiChild which
	 * does diffed reordering and insertion.
	 */
	var ReactChildReconciler = {
	  /**
	   * Generates a "mount image" for each of the supplied children. In the case
	   * of `ReactDOMComponent`, a mount image is a string of markup.
	   *
	   * @param {?object} nestedChildNodes Nested child maps.
	   * @return {?object} A set of child instances.
	   * @internal
	   */
	  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context) {
	    if (nestedChildNodes == null) {
	      return null;
	    }
	    var childInstances = {};
	    traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
	    return childInstances;
	  },
	
	  /**
	   * Updates the rendered children and returns a new set of children.
	   *
	   * @param {?object} prevChildren Previously initialized set of children.
	   * @param {?object} nextChildren Flat child element maps.
	   * @param {ReactReconcileTransaction} transaction
	   * @param {object} context
	   * @return {?object} A new set of child instances.
	   * @internal
	   */
	  updateChildren: function updateChildren(prevChildren, nextChildren, transaction, context) {
	    // We currently don't have a way to track moves here but if we use iterators
	    // instead of for..in we can zip the iterators and check if an item has
	    // moved.
	    // TODO: If nothing has changed, return the prevChildren object so that we
	    // can quickly bailout if nothing has changed.
	    if (!nextChildren && !prevChildren) {
	      return null;
	    }
	    var name;
	    for (name in nextChildren) {
	      if (!nextChildren.hasOwnProperty(name)) {
	        continue;
	      }
	      var prevChild = prevChildren && prevChildren[name];
	      var prevElement = prevChild && prevChild._currentElement;
	      var nextElement = nextChildren[name];
	      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
	        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
	        nextChildren[name] = prevChild;
	      } else {
	        if (prevChild) {
	          ReactReconciler.unmountComponent(prevChild, name);
	        }
	        // The child must be instantiated before it's mounted.
	        var nextChildInstance = instantiateReactComponent(nextElement, null);
	        nextChildren[name] = nextChildInstance;
	      }
	    }
	    // Unmount children that are no longer present.
	    for (name in prevChildren) {
	      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
	        ReactReconciler.unmountComponent(prevChildren[name]);
	      }
	    }
	    return nextChildren;
	  },
	
	  /**
	   * Unmounts all rendered children. This should be used to clean up children
	   * when this component is unmounted.
	   *
	   * @param {?object} renderedChildren Previously initialized set of children.
	   * @internal
	   */
	  unmountChildren: function unmountChildren(renderedChildren) {
	    for (var name in renderedChildren) {
	      if (renderedChildren.hasOwnProperty(name)) {
	        var renderedChild = renderedChildren[name];
	        ReactReconciler.unmountComponent(renderedChild);
	      }
	    }
	  }
	
	};
	
	module.exports = ReactChildReconciler;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule flattenChildren
	 */
	
	'use strict';
	
	var traverseAllChildren = __webpack_require__(111);
	var warning = __webpack_require__(25);
	
	/**
	 * @param {function} traverseContext Context passed through traversal.
	 * @param {?ReactComponent} child React child component.
	 * @param {!string} name String name of key path to child.
	 */
	function flattenSingleChildIntoContext(traverseContext, child, name) {
	  // We found a component instance.
	  var result = traverseContext;
	  var keyUnique = result[name] === undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(keyUnique, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.', name) : undefined;
	  }
	  if (keyUnique && child != null) {
	    result[name] = child;
	  }
	}
	
	/**
	 * Flattens children that are typically specified as `props.children`. Any null
	 * children will not be included in the resulting object.
	 * @return {!object} flattened children keyed by name.
	 */
	function flattenChildren(children) {
	  if (children == null) {
	    return children;
	  }
	  var result = {};
	  traverseAllChildren(children, flattenSingleChildIntoContext, result);
	  return result;
	}
	
	module.exports = flattenChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 117 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule shallowEqual
	 * @typechecks
	 * 
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (objA === objB) {
	    return true;
	  }
	
	  if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  var bHasOwnProperty = hasOwnProperty.bind(objB);
	  for (var i = 0; i < keysA.length; i++) {
	    if (!bHasOwnProperty(keysA[i]) || objA[keysA[i]] !== objB[keysA[i]]) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactEventListener
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var EventListener = __webpack_require__(119);
	var ExecutionEnvironment = __webpack_require__(9);
	var PooledClass = __webpack_require__(56);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMount = __webpack_require__(28);
	var ReactUpdates = __webpack_require__(54);
	
	var assign = __webpack_require__(39);
	var getEventTarget = __webpack_require__(81);
	var getUnboundedScrollPosition = __webpack_require__(120);
	
	var DOCUMENT_FRAGMENT_NODE_TYPE = 11;
	
	/**
	 * Finds the parent React component of `node`.
	 *
	 * @param {*} node
	 * @return {?DOMEventTarget} Parent container, or `null` if the specified node
	 *                           is not nested.
	 */
	function findParent(node) {
	  // TODO: It may be a good idea to cache this to prevent unnecessary DOM
	  // traversal, but caching is difficult to do correctly without using a
	  // mutation observer to listen for all DOM changes.
	  var nodeID = ReactMount.getID(node);
	  var rootID = ReactInstanceHandles.getReactRootIDFromNodeID(nodeID);
	  var container = ReactMount.findReactContainerForID(rootID);
	  var parent = ReactMount.getFirstReactDOM(container);
	  return parent;
	}
	
	// Used to store ancestor hierarchy in top level callback
	function TopLevelCallbackBookKeeping(topLevelType, nativeEvent) {
	  this.topLevelType = topLevelType;
	  this.nativeEvent = nativeEvent;
	  this.ancestors = [];
	}
	assign(TopLevelCallbackBookKeeping.prototype, {
	  destructor: function destructor() {
	    this.topLevelType = null;
	    this.nativeEvent = null;
	    this.ancestors.length = 0;
	  }
	});
	PooledClass.addPoolingTo(TopLevelCallbackBookKeeping, PooledClass.twoArgumentPooler);
	
	function handleTopLevelImpl(bookKeeping) {
	  // TODO: Re-enable event.path handling
	  //
	  // if (bookKeeping.nativeEvent.path && bookKeeping.nativeEvent.path.length > 1) {
	  //   // New browsers have a path attribute on native events
	  //   handleTopLevelWithPath(bookKeeping);
	  // } else {
	  //   // Legacy browsers don't have a path attribute on native events
	  //   handleTopLevelWithoutPath(bookKeeping);
	  // }
	
	  void handleTopLevelWithPath; // temporarily unused
	  handleTopLevelWithoutPath(bookKeeping);
	}
	
	// Legacy browsers don't have a path attribute on native events
	function handleTopLevelWithoutPath(bookKeeping) {
	  var topLevelTarget = ReactMount.getFirstReactDOM(getEventTarget(bookKeeping.nativeEvent)) || window;
	
	  // Loop through the hierarchy, in case there's any nested components.
	  // It's important that we build the array of ancestors before calling any
	  // event handlers, because event handlers can modify the DOM, leading to
	  // inconsistencies with ReactMount's node cache. See #1105.
	  var ancestor = topLevelTarget;
	  while (ancestor) {
	    bookKeeping.ancestors.push(ancestor);
	    ancestor = findParent(ancestor);
	  }
	
	  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
	    topLevelTarget = bookKeeping.ancestors[i];
	    var topLevelTargetID = ReactMount.getID(topLevelTarget) || '';
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, topLevelTarget, topLevelTargetID, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	// New browsers have a path attribute on native events
	function handleTopLevelWithPath(bookKeeping) {
	  var path = bookKeeping.nativeEvent.path;
	  var currentNativeTarget = path[0];
	  var eventsFired = 0;
	  for (var i = 0; i < path.length; i++) {
	    var currentPathElement = path[i];
	    if (currentPathElement.nodeType === DOCUMENT_FRAGMENT_NODE_TYPE) {
	      currentNativeTarget = path[i + 1];
	    }
	    // TODO: slow
	    var reactParent = ReactMount.getFirstReactDOM(currentPathElement);
	    if (reactParent === currentPathElement) {
	      var currentPathElementID = ReactMount.getID(currentPathElement);
	      var newRootID = ReactInstanceHandles.getReactRootIDFromNodeID(currentPathElementID);
	      bookKeeping.ancestors.push(currentPathElement);
	
	      var topLevelTargetID = ReactMount.getID(currentPathElement) || '';
	      eventsFired++;
	      ReactEventListener._handleTopLevel(bookKeeping.topLevelType, currentPathElement, topLevelTargetID, bookKeeping.nativeEvent, currentNativeTarget);
	
	      // Jump to the root of this React render tree
	      while (currentPathElementID !== newRootID) {
	        i++;
	        currentPathElement = path[i];
	        currentPathElementID = ReactMount.getID(currentPathElement);
	      }
	    }
	  }
	  if (eventsFired === 0) {
	    ReactEventListener._handleTopLevel(bookKeeping.topLevelType, window, '', bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
	  }
	}
	
	function scrollValueMonitor(cb) {
	  var scrollPosition = getUnboundedScrollPosition(window);
	  cb(scrollPosition);
	}
	
	var ReactEventListener = {
	  _enabled: true,
	  _handleTopLevel: null,
	
	  WINDOW_HANDLE: ExecutionEnvironment.canUseDOM ? window : null,
	
	  setHandleTopLevel: function setHandleTopLevel(handleTopLevel) {
	    ReactEventListener._handleTopLevel = handleTopLevel;
	  },
	
	  setEnabled: function setEnabled(enabled) {
	    ReactEventListener._enabled = !!enabled;
	  },
	
	  isEnabled: function isEnabled() {
	    return ReactEventListener._enabled;
	  },
	
	  /**
	   * Traps top-level events by using event bubbling.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapBubbledEvent: function trapBubbledEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.listen(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  /**
	   * Traps a top-level event by using event capturing.
	   *
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {string} handlerBaseName Event name (e.g. "click").
	   * @param {object} handle Element on which to attach listener.
	   * @return {?object} An object with a remove function which will forcefully
	   *                  remove the listener.
	   * @internal
	   */
	  trapCapturedEvent: function trapCapturedEvent(topLevelType, handlerBaseName, handle) {
	    var element = handle;
	    if (!element) {
	      return null;
	    }
	    return EventListener.capture(element, handlerBaseName, ReactEventListener.dispatchEvent.bind(null, topLevelType));
	  },
	
	  monitorScrollValue: function monitorScrollValue(refresh) {
	    var callback = scrollValueMonitor.bind(null, refresh);
	    EventListener.listen(window, 'scroll', callback);
	  },
	
	  dispatchEvent: function dispatchEvent(topLevelType, nativeEvent) {
	    if (!ReactEventListener._enabled) {
	      return;
	    }
	
	    var bookKeeping = TopLevelCallbackBookKeeping.getPooled(topLevelType, nativeEvent);
	    try {
	      // Event queue being processed in the same cycle allows
	      // `preventDefault`.
	      ReactUpdates.batchedUpdates(handleTopLevelImpl, bookKeeping);
	    } finally {
	      TopLevelCallbackBookKeeping.release(bookKeeping);
	    }
	  }
	};
	
	module.exports = ReactEventListener;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 * @providesModule EventListener
	 * @typechecks
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Upstream version of event listener. Does not take into account specific
	 * nature of platform.
	 */
	var EventListener = {
	  /**
	   * Listen to DOM events during the bubble phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  listen: function listen(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, false);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, false);
	        }
	      };
	    } else if (target.attachEvent) {
	      target.attachEvent('on' + eventType, callback);
	      return {
	        remove: function remove() {
	          target.detachEvent('on' + eventType, callback);
	        }
	      };
	    }
	  },
	
	  /**
	   * Listen to DOM events during the capture phase.
	   *
	   * @param {DOMEventTarget} target DOM element to register listener on.
	   * @param {string} eventType Event type, e.g. 'click' or 'mouseover'.
	   * @param {function} callback Callback function.
	   * @return {object} Object with a `remove` method.
	   */
	  capture: function capture(target, eventType, callback) {
	    if (target.addEventListener) {
	      target.addEventListener(eventType, callback, true);
	      return {
	        remove: function remove() {
	          target.removeEventListener(eventType, callback, true);
	        }
	      };
	    } else {
	      if (process.env.NODE_ENV !== 'production') {
	        console.error('Attempted to listen to events during the capture phase on a ' + 'browser that does not support the capture phase. Your application ' + 'will not receive some events.');
	      }
	      return {
	        remove: emptyFunction
	      };
	    }
	  },
	
	  registerDefault: function registerDefault() {}
	};
	
	module.exports = EventListener;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 120 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getUnboundedScrollPosition
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Gets the scroll position of the supplied element or window.
	 *
	 * The return values are unbounded, unlike `getScrollPosition`. This means they
	 * may be negative or exceed the element boundaries (which is possible using
	 * inertial scrolling).
	 *
	 * @param {DOMWindow|DOMElement} scrollable
	 * @return {object} Map with `x` and `y` keys.
	 */
	
	function getUnboundedScrollPosition(scrollable) {
	  if (scrollable === window) {
	    return {
	      x: window.pageXOffset || document.documentElement.scrollLeft,
	      y: window.pageYOffset || document.documentElement.scrollTop
	    };
	  }
	  return {
	    x: scrollable.scrollLeft,
	    y: scrollable.scrollTop
	  };
	}
	
	module.exports = getUnboundedScrollPosition;

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInjection
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	var EventPluginHub = __webpack_require__(31);
	var ReactComponentEnvironment = __webpack_require__(64);
	var ReactClass = __webpack_require__(122);
	var ReactEmptyComponent = __webpack_require__(68);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactNativeComponent = __webpack_require__(69);
	var ReactPerf = __webpack_require__(18);
	var ReactRootIndex = __webpack_require__(46);
	var ReactUpdates = __webpack_require__(54);
	
	var ReactInjection = {
	  Component: ReactComponentEnvironment.injection,
	  Class: ReactClass.injection,
	  DOMProperty: DOMProperty.injection,
	  EmptyComponent: ReactEmptyComponent.injection,
	  EventPluginHub: EventPluginHub.injection,
	  EventEmitter: ReactBrowserEventEmitter.injection,
	  NativeComponent: ReactNativeComponent.injection,
	  Perf: ReactPerf.injection,
	  RootIndex: ReactRootIndex.injection,
	  Updates: ReactUpdates.injection
	};
	
	module.exports = ReactInjection;

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactClass
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactComponent = __webpack_require__(123);
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactNoopUpdateQueue = __webpack_require__(124);
	
	var assign = __webpack_require__(39);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var keyMirror = __webpack_require__(17);
	var keyOf = __webpack_require__(79);
	var warning = __webpack_require__(25);
	
	var MIXINS_KEY = keyOf({ mixins: null });
	
	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */
	var SpecPolicy = keyMirror({
	  /**
	   * These methods may be defined only once by the class specification or mixin.
	   */
	  DEFINE_ONCE: null,
	  /**
	   * These methods may be defined by both the class specification and mixins.
	   * Subsequent definitions will be chained. These methods must return void.
	   */
	  DEFINE_MANY: null,
	  /**
	   * These methods are overriding the base class.
	   */
	  OVERRIDE_BASE: null,
	  /**
	   * These methods are similar to DEFINE_MANY, except we assume they return
	   * objects. We try to merge the keys of the return values of all the mixed in
	   * functions. If there is a key conflict we throw.
	   */
	  DEFINE_MANY_MERGED: null
	});
	
	var injectedMixins = [];
	
	var warnedSetProps = false;
	function warnSetProps() {
	  if (!warnedSetProps) {
	    warnedSetProps = true;
	    process.env.NODE_ENV !== 'production' ? warning(false, 'setProps(...) and replaceProps(...) are deprecated. ' + 'Instead, call render again at the top level.') : undefined;
	  }
	}
	
	/**
	 * Composite components are higher-level components that compose other composite
	 * or native components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {
	
	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: SpecPolicy.DEFINE_MANY,
	
	  // ==== Definition methods ====
	
	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: SpecPolicy.DEFINE_MANY_MERGED,
	
	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @nosideeffects
	   * @required
	   */
	  render: SpecPolicy.DEFINE_ONCE,
	
	  // ==== Delegate methods ====
	
	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: SpecPolicy.DEFINE_ONCE,
	
	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: SpecPolicy.DEFINE_MANY,
	
	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: SpecPolicy.DEFINE_MANY,
	
	  // ==== Advanced methods ====
	
	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: SpecPolicy.OVERRIDE_BASE
	
	};
	
	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function displayName(Constructor, _displayName) {
	    Constructor.displayName = _displayName;
	  },
	  mixins: function mixins(Constructor, _mixins) {
	    if (_mixins) {
	      for (var i = 0; i < _mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, _mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _childContextTypes, ReactPropTypeLocations.childContext);
	    }
	    Constructor.childContextTypes = assign({}, Constructor.childContextTypes, _childContextTypes);
	  },
	  contextTypes: function contextTypes(Constructor, _contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _contextTypes, ReactPropTypeLocations.context);
	    }
	    Constructor.contextTypes = assign({}, Constructor.contextTypes, _contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = _getDefaultProps;
	    }
	  },
	  propTypes: function propTypes(Constructor, _propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, _propTypes, ReactPropTypeLocations.prop);
	    }
	    Constructor.propTypes = assign({}, Constructor.propTypes, _propTypes);
	  },
	  statics: function statics(Constructor, _statics) {
	    mixStaticSpecIntoComponent(Constructor, _statics);
	  },
	  autobind: function autobind() {} };
	
	// noop
	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but not in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : undefined;
	    }
	  }
	}
	
	function validateMethodOverride(proto, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;
	
	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.OVERRIDE_BASE) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override ' + '`%s` from your class specification. Ensure that your method names ' + 'do not overlap with React methods.', name) : invariant(false) : undefined;
	  }
	
	  // Disallow defining methods more than once unless explicitly allowed.
	  if (proto.hasOwnProperty(name)) {
	    !(specPolicy === SpecPolicy.DEFINE_MANY || specPolicy === SpecPolicy.DEFINE_MANY_MERGED) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define ' + '`%s` on your component more than once. This conflict may be due ' + 'to a mixin.', name) : invariant(false) : undefined;
	  }
	}
	
	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classses.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    return;
	  }
	
	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component class as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to ' + 'use a component as a mixin. Instead, just use a regular object.') : invariant(false) : undefined;
	
	  var proto = Constructor.prototype;
	
	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }
	
	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }
	
	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }
	
	    var property = spec[name];
	    validateMethodOverride(proto, name);
	
	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isAlreadyDefined = proto.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;
	
	      if (shouldAutoBind) {
	        if (!proto.__reactAutoBindMap) {
	          proto.__reactAutoBindMap = {};
	        }
	        proto.__reactAutoBindMap[name] = property;
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];
	
	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === SpecPolicy.DEFINE_MANY_MERGED || specPolicy === SpecPolicy.DEFINE_MANY)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s ' + 'when mixing in component specs.', specPolicy, name) : invariant(false) : undefined;
	
	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === SpecPolicy.DEFINE_MANY_MERGED) {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === SpecPolicy.DEFINE_MANY) {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}
	
	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }
	
	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved ' + 'property, `%s`, that shouldn\'t be on the "statics" key. Define it ' + 'as an instance property instead; it will still be accessible on the ' + 'constructor.', name) : invariant(false) : undefined;
	
	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define ' + '`%s` on your component more than once. This conflict may be ' + 'due to a mixin.', name) : invariant(false) : undefined;
	    Constructor[name] = property;
	  }
	}
	
	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && (typeof one === 'undefined' ? 'undefined' : _typeof(one)) === 'object' && (typeof two === 'undefined' ? 'undefined' : _typeof(two)) === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : invariant(false) : undefined;
	
	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): ' + 'Tried to merge two objects with the same key: `%s`. This conflict ' + 'may be due to a mixin; in particular, this may be caused by two ' + 'getInitialState() or getDefaultProps() methods returning objects ' + 'with clashing keys.', key) : invariant(false) : undefined;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}
	
	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}
	
	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}
	
	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    /* eslint-disable block-scoped-var, no-undef */
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : undefined;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : undefined;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	      /* eslint-enable */
	    };
	  }
	  return boundMethod;
	}
	
	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  for (var autoBindKey in component.__reactAutoBindMap) {
	    if (component.__reactAutoBindMap.hasOwnProperty(autoBindKey)) {
	      var method = component.__reactAutoBindMap[autoBindKey];
	      component[autoBindKey] = bindAutoBindMethod(component, method);
	    }
	  }
	}
	
	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {
	
	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function replaceState(newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted() {
	    return this.updater.isMounted(this);
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {object} partialProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  setProps: function setProps(partialProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueSetProps(this, partialProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  },
	
	  /**
	   * Replace all the props.
	   *
	   * @param {object} newProps Subset of the next props.
	   * @param {?function} callback Called after props are updated.
	   * @final
	   * @public
	   * @deprecated
	   */
	  replaceProps: function replaceProps(newProps, callback) {
	    if (process.env.NODE_ENV !== 'production') {
	      warnSetProps();
	    }
	    this.updater.enqueueReplaceProps(this, newProps);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback);
	    }
	  }
	};
	
	var ReactClassComponent = function ReactClassComponent() {};
	assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);
	
	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {
	
	  /**
	   * Creates a composite component class given a class specification.
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function createClass(spec) {
	    var Constructor = function Constructor(props, context, updater) {
	      // This constructor is overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.
	
	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : undefined;
	      }
	
	      // Wire up auto-binding
	      if (this.__reactAutoBindMap) {
	        bindAutoBindMethods(this);
	      }
	
	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;
	
	      this.state = null;
	
	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.
	
	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (typeof initialState === 'undefined' && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !((typeof initialState === 'undefined' ? 'undefined' : _typeof(initialState)) === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : invariant(false) : undefined;
	
	      this.state = initialState;
	    };
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	
	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));
	
	    mixSpecIntoComponent(Constructor, spec);
	
	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }
	
	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : invariant(false) : undefined;
	
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : undefined;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : undefined;
	    }
	
	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }
	
	    return Constructor;
	  },
	
	  injection: {
	    injectMixin: function injectMixin(mixin) {
	      injectedMixins.push(mixin);
	    }
	  }
	
	};
	
	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactComponent
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactNoopUpdateQueue = __webpack_require__(124);
	
	var canDefineProperty = __webpack_require__(43);
	var emptyObject = __webpack_require__(58);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}
	
	ReactComponent.prototype.isReactComponent = {};
	
	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.') : invariant(false) : undefined;
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().') : undefined;
	  }
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback);
	  }
	};
	
	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    getDOMNode: ['getDOMNode', 'Use ReactDOM.findDOMNode(component) instead.'],
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceProps: ['replaceProps', 'Instead, call render again at the top level.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).'],
	    setProps: ['setProps', 'Instead, call render again at the top level.']
	  };
	  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : undefined;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}
	
	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactNoopUpdateQueue
	 */
	
	'use strict';
	
	var warning = __webpack_require__(25);
	
	function warnTDZ(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, publicInstance.constructor && publicInstance.constructor.displayName || '') : undefined;
	  }
	}
	
	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {
	
	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function isMounted(publicInstance) {
	    return false;
	  },
	
	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function enqueueCallback(publicInstance, callback) {},
	
	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
	    warnTDZ(publicInstance, 'forceUpdate');
	  },
	
	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
	    warnTDZ(publicInstance, 'replaceState');
	  },
	
	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
	    warnTDZ(publicInstance, 'setState');
	  },
	
	  /**
	   * Sets a subset of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialProps Subset of the next props.
	   * @internal
	   */
	  enqueueSetProps: function enqueueSetProps(publicInstance, partialProps) {
	    warnTDZ(publicInstance, 'setProps');
	  },
	
	  /**
	   * Replaces all of the props.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} props New props.
	   * @internal
	   */
	  enqueueReplaceProps: function enqueueReplaceProps(publicInstance, props) {
	    warnTDZ(publicInstance, 'replaceProps');
	  }
	
	};
	
	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactReconcileTransaction
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var CallbackQueue = __webpack_require__(55);
	var PooledClass = __webpack_require__(56);
	var ReactBrowserEventEmitter = __webpack_require__(29);
	var ReactDOMFeatureFlags = __webpack_require__(41);
	var ReactInputSelection = __webpack_require__(126);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	
	/**
	 * Ensures that, when possible, the selection range (currently selected text
	 * input) is not disturbed by performing the transaction.
	 */
	var SELECTION_RESTORATION = {
	  /**
	   * @return {Selection} Selection information.
	   */
	  initialize: ReactInputSelection.getSelectionInformation,
	  /**
	   * @param {Selection} sel Selection information returned from `initialize`.
	   */
	  close: ReactInputSelection.restoreSelection
	};
	
	/**
	 * Suppresses events (blur/focus) that could be inadvertently dispatched due to
	 * high level DOM manipulations (like temporarily removing a text input from the
	 * DOM).
	 */
	var EVENT_SUPPRESSION = {
	  /**
	   * @return {boolean} The enabled status of `ReactBrowserEventEmitter` before
	   * the reconciliation.
	   */
	  initialize: function initialize() {
	    var currentlyEnabled = ReactBrowserEventEmitter.isEnabled();
	    ReactBrowserEventEmitter.setEnabled(false);
	    return currentlyEnabled;
	  },
	
	  /**
	   * @param {boolean} previouslyEnabled Enabled status of
	   *   `ReactBrowserEventEmitter` before the reconciliation occurred. `close`
	   *   restores the previous value.
	   */
	  close: function close(previouslyEnabled) {
	    ReactBrowserEventEmitter.setEnabled(previouslyEnabled);
	  }
	};
	
	/**
	 * Provides a queue for collecting `componentDidMount` and
	 * `componentDidUpdate` callbacks during the the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },
	
	  /**
	   * After DOM is flushed, invoke all registered `onDOMReady` callbacks.
	   */
	  close: function close() {
	    this.reactMountReady.notifyAll();
	  }
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [SELECTION_RESTORATION, EVENT_SUPPRESSION, ON_DOM_READY_QUEUEING];
	
	/**
	 * Currently:
	 * - The order that these are listed in the transaction is critical:
	 * - Suppresses events.
	 * - Restores selection range.
	 *
	 * Future:
	 * - Restore document/overflow scroll positions that were unintentionally
	 *   modified via DOM insertions above the top viewport boundary.
	 * - Implement/integrate with customized constraint based layout system and keep
	 *   track of which dimensions must be remeasured.
	 *
	 * @class ReactReconcileTransaction
	 */
	function ReactReconcileTransaction(forceHTML) {
	  this.reinitializeTransaction();
	  // Only server-side rendering really needs this option (see
	  // `ReactServerRendering`), but server-side uses
	  // `ReactServerRenderingTransaction` instead. This option is here so that it's
	  // accessible and defaults to false when `ReactDOMComponent` and
	  // `ReactTextComponent` checks it in `mountComponent`.`
	  this.renderToStaticMarkup = false;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = !forceHTML && ReactDOMFeatureFlags.useCreateElement;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array<object>} List of operation wrap procedures.
	   *   TODO: convert to array<TransactionWrapper>
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactReconcileTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactReconcileTransaction);
	
	module.exports = ReactReconcileTransaction;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactInputSelection
	 */
	
	'use strict';
	
	var ReactDOMSelection = __webpack_require__(127);
	
	var containsNode = __webpack_require__(59);
	var focusNode = __webpack_require__(95);
	var getActiveElement = __webpack_require__(129);
	
	function isInDocument(node) {
	  return containsNode(document.documentElement, node);
	}
	
	/**
	 * @ReactInputSelection: React input selection module. Based on Selection.js,
	 * but modified to be suitable for react and has a couple of bug fixes (doesn't
	 * assume buttons have range selections allowed).
	 * Input selection module for React.
	 */
	var ReactInputSelection = {
	
	  hasSelectionCapabilities: function hasSelectionCapabilities(elem) {
	    var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
	    return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');
	  },
	
	  getSelectionInformation: function getSelectionInformation() {
	    var focusedElem = getActiveElement();
	    return {
	      focusedElem: focusedElem,
	      selectionRange: ReactInputSelection.hasSelectionCapabilities(focusedElem) ? ReactInputSelection.getSelection(focusedElem) : null
	    };
	  },
	
	  /**
	   * @restoreSelection: If any selection information was potentially lost,
	   * restore it. This is useful when performing operations that could remove dom
	   * nodes and place them back in, resulting in focus being lost.
	   */
	  restoreSelection: function restoreSelection(priorSelectionInformation) {
	    var curFocusedElem = getActiveElement();
	    var priorFocusedElem = priorSelectionInformation.focusedElem;
	    var priorSelectionRange = priorSelectionInformation.selectionRange;
	    if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
	      if (ReactInputSelection.hasSelectionCapabilities(priorFocusedElem)) {
	        ReactInputSelection.setSelection(priorFocusedElem, priorSelectionRange);
	      }
	      focusNode(priorFocusedElem);
	    }
	  },
	
	  /**
	   * @getSelection: Gets the selection bounds of a focused textarea, input or
	   * contentEditable node.
	   * -@input: Look up selection bounds of this input
	   * -@return {start: selectionStart, end: selectionEnd}
	   */
	  getSelection: function getSelection(input) {
	    var selection;
	
	    if ('selectionStart' in input) {
	      // Modern browser with input or textarea.
	      selection = {
	        start: input.selectionStart,
	        end: input.selectionEnd
	      };
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      // IE8 input.
	      var range = document.selection.createRange();
	      // There can only be one selection per document in IE, so it must
	      // be in our element.
	      if (range.parentElement() === input) {
	        selection = {
	          start: -range.moveStart('character', -input.value.length),
	          end: -range.moveEnd('character', -input.value.length)
	        };
	      }
	    } else {
	      // Content editable or old IE textarea.
	      selection = ReactDOMSelection.getOffsets(input);
	    }
	
	    return selection || { start: 0, end: 0 };
	  },
	
	  /**
	   * @setSelection: Sets the selection bounds of a textarea or input and focuses
	   * the input.
	   * -@input     Set selection bounds of this input or textarea
	   * -@offsets   Object of same form that is returned from get*
	   */
	  setSelection: function setSelection(input, offsets) {
	    var start = offsets.start;
	    var end = offsets.end;
	    if (typeof end === 'undefined') {
	      end = start;
	    }
	
	    if ('selectionStart' in input) {
	      input.selectionStart = start;
	      input.selectionEnd = Math.min(end, input.value.length);
	    } else if (document.selection && input.nodeName && input.nodeName.toLowerCase() === 'input') {
	      var range = input.createTextRange();
	      range.collapse(true);
	      range.moveStart('character', start);
	      range.moveEnd('character', end - start);
	      range.select();
	    } else {
	      ReactDOMSelection.setOffsets(input, offsets);
	    }
	  }
	};
	
	module.exports = ReactInputSelection;

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMSelection
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var getNodeForCharacterOffset = __webpack_require__(128);
	var getTextContentAccessor = __webpack_require__(75);
	
	/**
	 * While `isCollapsed` is available on the Selection object and `collapsed`
	 * is available on the Range object, IE11 sometimes gets them wrong.
	 * If the anchor/focus nodes and offsets are the same, the range is collapsed.
	 */
	function isCollapsed(anchorNode, anchorOffset, focusNode, focusOffset) {
	  return anchorNode === focusNode && anchorOffset === focusOffset;
	}
	
	/**
	 * Get the appropriate anchor and focus node/offset pairs for IE.
	 *
	 * The catch here is that IE's selection API doesn't provide information
	 * about whether the selection is forward or backward, so we have to
	 * behave as though it's always forward.
	 *
	 * IE text differs from modern selection in that it behaves as though
	 * block elements end with a new line. This means character offsets will
	 * differ between the two APIs.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getIEOffsets(node) {
	  var selection = document.selection;
	  var selectedRange = selection.createRange();
	  var selectedLength = selectedRange.text.length;
	
	  // Duplicate selection so we can move range without breaking user selection.
	  var fromStart = selectedRange.duplicate();
	  fromStart.moveToElementText(node);
	  fromStart.setEndPoint('EndToStart', selectedRange);
	
	  var startOffset = fromStart.text.length;
	  var endOffset = startOffset + selectedLength;
	
	  return {
	    start: startOffset,
	    end: endOffset
	  };
	}
	
	/**
	 * @param {DOMElement} node
	 * @return {?object}
	 */
	function getModernOffsets(node) {
	  var selection = window.getSelection && window.getSelection();
	
	  if (!selection || selection.rangeCount === 0) {
	    return null;
	  }
	
	  var anchorNode = selection.anchorNode;
	  var anchorOffset = selection.anchorOffset;
	  var focusNode = selection.focusNode;
	  var focusOffset = selection.focusOffset;
	
	  var currentRange = selection.getRangeAt(0);
	
	  // In Firefox, range.startContainer and range.endContainer can be "anonymous
	  // divs", e.g. the up/down buttons on an <input type="number">. Anonymous
	  // divs do not seem to expose properties, triggering a "Permission denied
	  // error" if any of its properties are accessed. The only seemingly possible
	  // way to avoid erroring is to access a property that typically works for
	  // non-anonymous divs and catch any error that may otherwise arise. See
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427
	  try {
	    /* eslint-disable no-unused-expressions */
	    currentRange.startContainer.nodeType;
	    currentRange.endContainer.nodeType;
	    /* eslint-enable no-unused-expressions */
	  } catch (e) {
	    return null;
	  }
	
	  // If the node and offset values are the same, the selection is collapsed.
	  // `Selection.isCollapsed` is available natively, but IE sometimes gets
	  // this value wrong.
	  var isSelectionCollapsed = isCollapsed(selection.anchorNode, selection.anchorOffset, selection.focusNode, selection.focusOffset);
	
	  var rangeLength = isSelectionCollapsed ? 0 : currentRange.toString().length;
	
	  var tempRange = currentRange.cloneRange();
	  tempRange.selectNodeContents(node);
	  tempRange.setEnd(currentRange.startContainer, currentRange.startOffset);
	
	  var isTempRangeCollapsed = isCollapsed(tempRange.startContainer, tempRange.startOffset, tempRange.endContainer, tempRange.endOffset);
	
	  var start = isTempRangeCollapsed ? 0 : tempRange.toString().length;
	  var end = start + rangeLength;
	
	  // Detect whether the selection is backward.
	  var detectionRange = document.createRange();
	  detectionRange.setStart(anchorNode, anchorOffset);
	  detectionRange.setEnd(focusNode, focusOffset);
	  var isBackward = detectionRange.collapsed;
	
	  return {
	    start: isBackward ? end : start,
	    end: isBackward ? start : end
	  };
	}
	
	/**
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setIEOffsets(node, offsets) {
	  var range = document.selection.createRange().duplicate();
	  var start, end;
	
	  if (typeof offsets.end === 'undefined') {
	    start = offsets.start;
	    end = start;
	  } else if (offsets.start > offsets.end) {
	    start = offsets.end;
	    end = offsets.start;
	  } else {
	    start = offsets.start;
	    end = offsets.end;
	  }
	
	  range.moveToElementText(node);
	  range.moveStart('character', start);
	  range.setEndPoint('EndToStart', range);
	  range.moveEnd('character', end - start);
	  range.select();
	}
	
	/**
	 * In modern non-IE browsers, we can support both forward and backward
	 * selections.
	 *
	 * Note: IE10+ supports the Selection object, but it does not support
	 * the `extend` method, which means that even in modern IE, it's not possible
	 * to programatically create a backward selection. Thus, for all IE
	 * versions, we use the old IE API to create our selections.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @param {object} offsets
	 */
	function setModernOffsets(node, offsets) {
	  if (!window.getSelection) {
	    return;
	  }
	
	  var selection = window.getSelection();
	  var length = node[getTextContentAccessor()].length;
	  var start = Math.min(offsets.start, length);
	  var end = typeof offsets.end === 'undefined' ? start : Math.min(offsets.end, length);
	
	  // IE 11 uses modern selection, but doesn't support the extend method.
	  // Flip backward selections, so we can set with a single range.
	  if (!selection.extend && start > end) {
	    var temp = end;
	    end = start;
	    start = temp;
	  }
	
	  var startMarker = getNodeForCharacterOffset(node, start);
	  var endMarker = getNodeForCharacterOffset(node, end);
	
	  if (startMarker && endMarker) {
	    var range = document.createRange();
	    range.setStart(startMarker.node, startMarker.offset);
	    selection.removeAllRanges();
	
	    if (start > end) {
	      selection.addRange(range);
	      selection.extend(endMarker.node, endMarker.offset);
	    } else {
	      range.setEnd(endMarker.node, endMarker.offset);
	      selection.addRange(range);
	    }
	  }
	}
	
	var useIEOffsets = ExecutionEnvironment.canUseDOM && 'selection' in document && !('getSelection' in window);
	
	var ReactDOMSelection = {
	  /**
	   * @param {DOMElement} node
	   */
	  getOffsets: useIEOffsets ? getIEOffsets : getModernOffsets,
	
	  /**
	   * @param {DOMElement|DOMTextNode} node
	   * @param {object} offsets
	   */
	  setOffsets: useIEOffsets ? setIEOffsets : setModernOffsets
	};
	
	module.exports = ReactDOMSelection;

/***/ },
/* 128 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getNodeForCharacterOffset
	 */
	
	'use strict';
	
	/**
	 * Given any node return the first leaf node without children.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {DOMElement|DOMTextNode}
	 */
	
	function getLeafNode(node) {
	  while (node && node.firstChild) {
	    node = node.firstChild;
	  }
	  return node;
	}
	
	/**
	 * Get the next sibling within a container. This will walk up the
	 * DOM if a node's siblings have been exhausted.
	 *
	 * @param {DOMElement|DOMTextNode} node
	 * @return {?DOMElement|DOMTextNode}
	 */
	function getSiblingNode(node) {
	  while (node) {
	    if (node.nextSibling) {
	      return node.nextSibling;
	    }
	    node = node.parentNode;
	  }
	}
	
	/**
	 * Get object describing the nodes which contain characters at offset.
	 *
	 * @param {DOMElement|DOMTextNode} root
	 * @param {number} offset
	 * @return {?object}
	 */
	function getNodeForCharacterOffset(root, offset) {
	  var node = getLeafNode(root);
	  var nodeStart = 0;
	  var nodeEnd = 0;
	
	  while (node) {
	    if (node.nodeType === 3) {
	      nodeEnd = nodeStart + node.textContent.length;
	
	      if (nodeStart <= offset && nodeEnd >= offset) {
	        return {
	          node: node,
	          offset: offset - nodeStart
	        };
	      }
	
	      nodeStart = nodeEnd;
	    }
	
	    node = getLeafNode(getSiblingNode(node));
	  }
	}
	
	module.exports = getNodeForCharacterOffset;

/***/ },
/* 129 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getActiveElement
	 * @typechecks
	 */
	
	/* eslint-disable fb-www/typeof-undefined */
	
	/**
	 * Same as document.activeElement but wraps in a try-catch block. In IE it is
	 * not safe to call document.activeElement if there is nothing focused.
	 *
	 * The activeElement will be null only if the document or document body is not
	 * yet defined.
	 */
	'use strict';
	
	function getActiveElement() /*?DOMElement*/{
	  if (typeof document === 'undefined') {
	    return null;
	  }
	  try {
	    return document.activeElement || document.body;
	  } catch (e) {
	    return document.body;
	  }
	}
	
	module.exports = getActiveElement;

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SelectEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventPropagators = __webpack_require__(73);
	var ExecutionEnvironment = __webpack_require__(9);
	var ReactInputSelection = __webpack_require__(126);
	var SyntheticEvent = __webpack_require__(77);
	
	var getActiveElement = __webpack_require__(129);
	var isTextInputElement = __webpack_require__(82);
	var keyOf = __webpack_require__(79);
	var shallowEqual = __webpack_require__(117);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var skipSelectionChangeEvent = ExecutionEnvironment.canUseDOM && 'documentMode' in document && document.documentMode <= 11;
	
	var eventTypes = {
	  select: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSelect: null }),
	      captured: keyOf({ onSelectCapture: null })
	    },
	    dependencies: [topLevelTypes.topBlur, topLevelTypes.topContextMenu, topLevelTypes.topFocus, topLevelTypes.topKeyDown, topLevelTypes.topMouseDown, topLevelTypes.topMouseUp, topLevelTypes.topSelectionChange]
	  }
	};
	
	var activeElement = null;
	var activeElementID = null;
	var lastSelection = null;
	var mouseDown = false;
	
	// Track whether a listener exists for this plugin. If none exist, we do
	// not extract events.
	var hasListener = false;
	var ON_SELECT_KEY = keyOf({ onSelect: null });
	
	/**
	 * Get an object which is a unique representation of the current selection.
	 *
	 * The return value will not be consistent across nodes or browsers, but
	 * two identical selections on the same node will return identical objects.
	 *
	 * @param {DOMElement} node
	 * @return {object}
	 */
	function getSelection(node) {
	  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {
	    return {
	      start: node.selectionStart,
	      end: node.selectionEnd
	    };
	  } else if (window.getSelection) {
	    var selection = window.getSelection();
	    return {
	      anchorNode: selection.anchorNode,
	      anchorOffset: selection.anchorOffset,
	      focusNode: selection.focusNode,
	      focusOffset: selection.focusOffset
	    };
	  } else if (document.selection) {
	    var range = document.selection.createRange();
	    return {
	      parentElement: range.parentElement(),
	      text: range.text,
	      top: range.boundingTop,
	      left: range.boundingLeft
	    };
	  }
	}
	
	/**
	 * Poll selection to see whether it's changed.
	 *
	 * @param {object} nativeEvent
	 * @return {?SyntheticEvent}
	 */
	function constructSelectEvent(nativeEvent, nativeEventTarget) {
	  // Ensure we have the right element, and that the user is not dragging a
	  // selection (this matches native `select` event behavior). In HTML5, select
	  // fires only on input and textarea thus if there's no focused element we
	  // won't dispatch.
	  if (mouseDown || activeElement == null || activeElement !== getActiveElement()) {
	    return null;
	  }
	
	  // Only fire when selection has actually changed.
	  var currentSelection = getSelection(activeElement);
	  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
	    lastSelection = currentSelection;
	
	    var syntheticEvent = SyntheticEvent.getPooled(eventTypes.select, activeElementID, nativeEvent, nativeEventTarget);
	
	    syntheticEvent.type = 'select';
	    syntheticEvent.target = activeElement;
	
	    EventPropagators.accumulateTwoPhaseDispatches(syntheticEvent);
	
	    return syntheticEvent;
	  }
	
	  return null;
	}
	
	/**
	 * This plugin creates an `onSelect` event that normalizes select events
	 * across form elements.
	 *
	 * Supported elements are:
	 * - input (see `isTextInputElement`)
	 * - textarea
	 * - contentEditable
	 *
	 * This differs from native browser implementations in the following ways:
	 * - Fires on contentEditable fields as well as inputs.
	 * - Fires for collapsed selection.
	 * - Fires after user input.
	 */
	var SelectEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    if (!hasListener) {
	      return null;
	    }
	
	    switch (topLevelType) {
	      // Track the input node that has focus.
	      case topLevelTypes.topFocus:
	        if (isTextInputElement(topLevelTarget) || topLevelTarget.contentEditable === 'true') {
	          activeElement = topLevelTarget;
	          activeElementID = topLevelTargetID;
	          lastSelection = null;
	        }
	        break;
	      case topLevelTypes.topBlur:
	        activeElement = null;
	        activeElementID = null;
	        lastSelection = null;
	        break;
	
	      // Don't fire the event while the user is dragging. This matches the
	      // semantics of the native select event.
	      case topLevelTypes.topMouseDown:
	        mouseDown = true;
	        break;
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topMouseUp:
	        mouseDown = false;
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	
	      // Chrome and IE fire non-standard event when selection is changed (and
	      // sometimes when it hasn't). IE's event fires out of order with respect
	      // to key and input events on deletion, so we discard it.
	      //
	      // Firefox doesn't support selectionchange, so check selection status
	      // after each key entry. The selection changes after keydown and before
	      // keyup, but we check on keydown as well in the case of holding down a
	      // key, when multiple keydown events are fired but only one keyup is.
	      // This is also our approach for IE handling, for the reason above.
	      case topLevelTypes.topSelectionChange:
	        if (skipSelectionChangeEvent) {
	          break;
	        }
	      // falls through
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        return constructSelectEvent(nativeEvent, nativeEventTarget);
	    }
	
	    return null;
	  },
	
	  didPutListener: function didPutListener(id, registrationName, listener) {
	    if (registrationName === ON_SELECT_KEY) {
	      hasListener = true;
	    }
	  }
	};
	
	module.exports = SelectEventPlugin;

/***/ },
/* 131 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ServerReactRootIndex
	 * @typechecks
	 */
	
	'use strict';
	
	/**
	 * Size of the reactRoot ID space. We generate random numbers for React root
	 * IDs and if there's a collision the events and DOM update system will
	 * get confused. In the future we need a way to generate GUIDs but for
	 * now this will work on a smaller scale.
	 */
	
	var GLOBAL_MOUNT_POINT_MAX = Math.pow(2, 53);
	
	var ServerReactRootIndex = {
	  createReactRootIndex: function createReactRootIndex() {
	    return Math.ceil(Math.random() * GLOBAL_MOUNT_POINT_MAX);
	  }
	};
	
	module.exports = ServerReactRootIndex;

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SimpleEventPlugin
	 */
	
	'use strict';
	
	var EventConstants = __webpack_require__(30);
	var EventListener = __webpack_require__(119);
	var EventPropagators = __webpack_require__(73);
	var ReactMount = __webpack_require__(28);
	var SyntheticClipboardEvent = __webpack_require__(133);
	var SyntheticEvent = __webpack_require__(77);
	var SyntheticFocusEvent = __webpack_require__(134);
	var SyntheticKeyboardEvent = __webpack_require__(135);
	var SyntheticMouseEvent = __webpack_require__(86);
	var SyntheticDragEvent = __webpack_require__(138);
	var SyntheticTouchEvent = __webpack_require__(139);
	var SyntheticUIEvent = __webpack_require__(87);
	var SyntheticWheelEvent = __webpack_require__(140);
	
	var emptyFunction = __webpack_require__(15);
	var getEventCharCode = __webpack_require__(136);
	var invariant = __webpack_require__(13);
	var keyOf = __webpack_require__(79);
	
	var topLevelTypes = EventConstants.topLevelTypes;
	
	var eventTypes = {
	  abort: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onAbort: true }),
	      captured: keyOf({ onAbortCapture: true })
	    }
	  },
	  blur: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onBlur: true }),
	      captured: keyOf({ onBlurCapture: true })
	    }
	  },
	  canPlay: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlay: true }),
	      captured: keyOf({ onCanPlayCapture: true })
	    }
	  },
	  canPlayThrough: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCanPlayThrough: true }),
	      captured: keyOf({ onCanPlayThroughCapture: true })
	    }
	  },
	  click: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onClick: true }),
	      captured: keyOf({ onClickCapture: true })
	    }
	  },
	  contextMenu: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onContextMenu: true }),
	      captured: keyOf({ onContextMenuCapture: true })
	    }
	  },
	  copy: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCopy: true }),
	      captured: keyOf({ onCopyCapture: true })
	    }
	  },
	  cut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onCut: true }),
	      captured: keyOf({ onCutCapture: true })
	    }
	  },
	  doubleClick: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDoubleClick: true }),
	      captured: keyOf({ onDoubleClickCapture: true })
	    }
	  },
	  drag: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrag: true }),
	      captured: keyOf({ onDragCapture: true })
	    }
	  },
	  dragEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnd: true }),
	      captured: keyOf({ onDragEndCapture: true })
	    }
	  },
	  dragEnter: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragEnter: true }),
	      captured: keyOf({ onDragEnterCapture: true })
	    }
	  },
	  dragExit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragExit: true }),
	      captured: keyOf({ onDragExitCapture: true })
	    }
	  },
	  dragLeave: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragLeave: true }),
	      captured: keyOf({ onDragLeaveCapture: true })
	    }
	  },
	  dragOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragOver: true }),
	      captured: keyOf({ onDragOverCapture: true })
	    }
	  },
	  dragStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDragStart: true }),
	      captured: keyOf({ onDragStartCapture: true })
	    }
	  },
	  drop: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDrop: true }),
	      captured: keyOf({ onDropCapture: true })
	    }
	  },
	  durationChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onDurationChange: true }),
	      captured: keyOf({ onDurationChangeCapture: true })
	    }
	  },
	  emptied: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEmptied: true }),
	      captured: keyOf({ onEmptiedCapture: true })
	    }
	  },
	  encrypted: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEncrypted: true }),
	      captured: keyOf({ onEncryptedCapture: true })
	    }
	  },
	  ended: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onEnded: true }),
	      captured: keyOf({ onEndedCapture: true })
	    }
	  },
	  error: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onError: true }),
	      captured: keyOf({ onErrorCapture: true })
	    }
	  },
	  focus: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onFocus: true }),
	      captured: keyOf({ onFocusCapture: true })
	    }
	  },
	  input: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onInput: true }),
	      captured: keyOf({ onInputCapture: true })
	    }
	  },
	  keyDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyDown: true }),
	      captured: keyOf({ onKeyDownCapture: true })
	    }
	  },
	  keyPress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyPress: true }),
	      captured: keyOf({ onKeyPressCapture: true })
	    }
	  },
	  keyUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onKeyUp: true }),
	      captured: keyOf({ onKeyUpCapture: true })
	    }
	  },
	  load: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoad: true }),
	      captured: keyOf({ onLoadCapture: true })
	    }
	  },
	  loadedData: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedData: true }),
	      captured: keyOf({ onLoadedDataCapture: true })
	    }
	  },
	  loadedMetadata: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadedMetadata: true }),
	      captured: keyOf({ onLoadedMetadataCapture: true })
	    }
	  },
	  loadStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onLoadStart: true }),
	      captured: keyOf({ onLoadStartCapture: true })
	    }
	  },
	  // Note: We do not allow listening to mouseOver events. Instead, use the
	  // onMouseEnter/onMouseLeave created by `EnterLeaveEventPlugin`.
	  mouseDown: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseDown: true }),
	      captured: keyOf({ onMouseDownCapture: true })
	    }
	  },
	  mouseMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseMove: true }),
	      captured: keyOf({ onMouseMoveCapture: true })
	    }
	  },
	  mouseOut: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOut: true }),
	      captured: keyOf({ onMouseOutCapture: true })
	    }
	  },
	  mouseOver: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseOver: true }),
	      captured: keyOf({ onMouseOverCapture: true })
	    }
	  },
	  mouseUp: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onMouseUp: true }),
	      captured: keyOf({ onMouseUpCapture: true })
	    }
	  },
	  paste: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPaste: true }),
	      captured: keyOf({ onPasteCapture: true })
	    }
	  },
	  pause: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPause: true }),
	      captured: keyOf({ onPauseCapture: true })
	    }
	  },
	  play: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlay: true }),
	      captured: keyOf({ onPlayCapture: true })
	    }
	  },
	  playing: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onPlaying: true }),
	      captured: keyOf({ onPlayingCapture: true })
	    }
	  },
	  progress: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onProgress: true }),
	      captured: keyOf({ onProgressCapture: true })
	    }
	  },
	  rateChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onRateChange: true }),
	      captured: keyOf({ onRateChangeCapture: true })
	    }
	  },
	  reset: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onReset: true }),
	      captured: keyOf({ onResetCapture: true })
	    }
	  },
	  scroll: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onScroll: true }),
	      captured: keyOf({ onScrollCapture: true })
	    }
	  },
	  seeked: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeked: true }),
	      captured: keyOf({ onSeekedCapture: true })
	    }
	  },
	  seeking: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSeeking: true }),
	      captured: keyOf({ onSeekingCapture: true })
	    }
	  },
	  stalled: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onStalled: true }),
	      captured: keyOf({ onStalledCapture: true })
	    }
	  },
	  submit: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSubmit: true }),
	      captured: keyOf({ onSubmitCapture: true })
	    }
	  },
	  suspend: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onSuspend: true }),
	      captured: keyOf({ onSuspendCapture: true })
	    }
	  },
	  timeUpdate: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTimeUpdate: true }),
	      captured: keyOf({ onTimeUpdateCapture: true })
	    }
	  },
	  touchCancel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchCancel: true }),
	      captured: keyOf({ onTouchCancelCapture: true })
	    }
	  },
	  touchEnd: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchEnd: true }),
	      captured: keyOf({ onTouchEndCapture: true })
	    }
	  },
	  touchMove: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchMove: true }),
	      captured: keyOf({ onTouchMoveCapture: true })
	    }
	  },
	  touchStart: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onTouchStart: true }),
	      captured: keyOf({ onTouchStartCapture: true })
	    }
	  },
	  volumeChange: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onVolumeChange: true }),
	      captured: keyOf({ onVolumeChangeCapture: true })
	    }
	  },
	  waiting: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWaiting: true }),
	      captured: keyOf({ onWaitingCapture: true })
	    }
	  },
	  wheel: {
	    phasedRegistrationNames: {
	      bubbled: keyOf({ onWheel: true }),
	      captured: keyOf({ onWheelCapture: true })
	    }
	  }
	};
	
	var topLevelEventsToDispatchConfig = {
	  topAbort: eventTypes.abort,
	  topBlur: eventTypes.blur,
	  topCanPlay: eventTypes.canPlay,
	  topCanPlayThrough: eventTypes.canPlayThrough,
	  topClick: eventTypes.click,
	  topContextMenu: eventTypes.contextMenu,
	  topCopy: eventTypes.copy,
	  topCut: eventTypes.cut,
	  topDoubleClick: eventTypes.doubleClick,
	  topDrag: eventTypes.drag,
	  topDragEnd: eventTypes.dragEnd,
	  topDragEnter: eventTypes.dragEnter,
	  topDragExit: eventTypes.dragExit,
	  topDragLeave: eventTypes.dragLeave,
	  topDragOver: eventTypes.dragOver,
	  topDragStart: eventTypes.dragStart,
	  topDrop: eventTypes.drop,
	  topDurationChange: eventTypes.durationChange,
	  topEmptied: eventTypes.emptied,
	  topEncrypted: eventTypes.encrypted,
	  topEnded: eventTypes.ended,
	  topError: eventTypes.error,
	  topFocus: eventTypes.focus,
	  topInput: eventTypes.input,
	  topKeyDown: eventTypes.keyDown,
	  topKeyPress: eventTypes.keyPress,
	  topKeyUp: eventTypes.keyUp,
	  topLoad: eventTypes.load,
	  topLoadedData: eventTypes.loadedData,
	  topLoadedMetadata: eventTypes.loadedMetadata,
	  topLoadStart: eventTypes.loadStart,
	  topMouseDown: eventTypes.mouseDown,
	  topMouseMove: eventTypes.mouseMove,
	  topMouseOut: eventTypes.mouseOut,
	  topMouseOver: eventTypes.mouseOver,
	  topMouseUp: eventTypes.mouseUp,
	  topPaste: eventTypes.paste,
	  topPause: eventTypes.pause,
	  topPlay: eventTypes.play,
	  topPlaying: eventTypes.playing,
	  topProgress: eventTypes.progress,
	  topRateChange: eventTypes.rateChange,
	  topReset: eventTypes.reset,
	  topScroll: eventTypes.scroll,
	  topSeeked: eventTypes.seeked,
	  topSeeking: eventTypes.seeking,
	  topStalled: eventTypes.stalled,
	  topSubmit: eventTypes.submit,
	  topSuspend: eventTypes.suspend,
	  topTimeUpdate: eventTypes.timeUpdate,
	  topTouchCancel: eventTypes.touchCancel,
	  topTouchEnd: eventTypes.touchEnd,
	  topTouchMove: eventTypes.touchMove,
	  topTouchStart: eventTypes.touchStart,
	  topVolumeChange: eventTypes.volumeChange,
	  topWaiting: eventTypes.waiting,
	  topWheel: eventTypes.wheel
	};
	
	for (var type in topLevelEventsToDispatchConfig) {
	  topLevelEventsToDispatchConfig[type].dependencies = [type];
	}
	
	var ON_CLICK_KEY = keyOf({ onClick: null });
	var onClickListeners = {};
	
	var SimpleEventPlugin = {
	
	  eventTypes: eventTypes,
	
	  /**
	   * @param {string} topLevelType Record from `EventConstants`.
	   * @param {DOMEventTarget} topLevelTarget The listening component root node.
	   * @param {string} topLevelTargetID ID of `topLevelTarget`.
	   * @param {object} nativeEvent Native browser event.
	   * @return {*} An accumulation of synthetic events.
	   * @see {EventPluginHub.extractEvents}
	   */
	  extractEvents: function extractEvents(topLevelType, topLevelTarget, topLevelTargetID, nativeEvent, nativeEventTarget) {
	    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];
	    if (!dispatchConfig) {
	      return null;
	    }
	    var EventConstructor;
	    switch (topLevelType) {
	      case topLevelTypes.topAbort:
	      case topLevelTypes.topCanPlay:
	      case topLevelTypes.topCanPlayThrough:
	      case topLevelTypes.topDurationChange:
	      case topLevelTypes.topEmptied:
	      case topLevelTypes.topEncrypted:
	      case topLevelTypes.topEnded:
	      case topLevelTypes.topError:
	      case topLevelTypes.topInput:
	      case topLevelTypes.topLoad:
	      case topLevelTypes.topLoadedData:
	      case topLevelTypes.topLoadedMetadata:
	      case topLevelTypes.topLoadStart:
	      case topLevelTypes.topPause:
	      case topLevelTypes.topPlay:
	      case topLevelTypes.topPlaying:
	      case topLevelTypes.topProgress:
	      case topLevelTypes.topRateChange:
	      case topLevelTypes.topReset:
	      case topLevelTypes.topSeeked:
	      case topLevelTypes.topSeeking:
	      case topLevelTypes.topStalled:
	      case topLevelTypes.topSubmit:
	      case topLevelTypes.topSuspend:
	      case topLevelTypes.topTimeUpdate:
	      case topLevelTypes.topVolumeChange:
	      case topLevelTypes.topWaiting:
	        // HTML Events
	        // @see http://www.w3.org/TR/html5/index.html#events-0
	        EventConstructor = SyntheticEvent;
	        break;
	      case topLevelTypes.topKeyPress:
	        // FireFox creates a keypress event for function keys too. This removes
	        // the unwanted keypress events. Enter is however both printable and
	        // non-printable. One would expect Tab to be as well (but it isn't).
	        if (getEventCharCode(nativeEvent) === 0) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topKeyDown:
	      case topLevelTypes.topKeyUp:
	        EventConstructor = SyntheticKeyboardEvent;
	        break;
	      case topLevelTypes.topBlur:
	      case topLevelTypes.topFocus:
	        EventConstructor = SyntheticFocusEvent;
	        break;
	      case topLevelTypes.topClick:
	        // Firefox creates a click event on right mouse clicks. This removes the
	        // unwanted click events.
	        if (nativeEvent.button === 2) {
	          return null;
	        }
	      /* falls through */
	      case topLevelTypes.topContextMenu:
	      case topLevelTypes.topDoubleClick:
	      case topLevelTypes.topMouseDown:
	      case topLevelTypes.topMouseMove:
	      case topLevelTypes.topMouseOut:
	      case topLevelTypes.topMouseOver:
	      case topLevelTypes.topMouseUp:
	        EventConstructor = SyntheticMouseEvent;
	        break;
	      case topLevelTypes.topDrag:
	      case topLevelTypes.topDragEnd:
	      case topLevelTypes.topDragEnter:
	      case topLevelTypes.topDragExit:
	      case topLevelTypes.topDragLeave:
	      case topLevelTypes.topDragOver:
	      case topLevelTypes.topDragStart:
	      case topLevelTypes.topDrop:
	        EventConstructor = SyntheticDragEvent;
	        break;
	      case topLevelTypes.topTouchCancel:
	      case topLevelTypes.topTouchEnd:
	      case topLevelTypes.topTouchMove:
	      case topLevelTypes.topTouchStart:
	        EventConstructor = SyntheticTouchEvent;
	        break;
	      case topLevelTypes.topScroll:
	        EventConstructor = SyntheticUIEvent;
	        break;
	      case topLevelTypes.topWheel:
	        EventConstructor = SyntheticWheelEvent;
	        break;
	      case topLevelTypes.topCopy:
	      case topLevelTypes.topCut:
	      case topLevelTypes.topPaste:
	        EventConstructor = SyntheticClipboardEvent;
	        break;
	    }
	    !EventConstructor ? process.env.NODE_ENV !== 'production' ? invariant(false, 'SimpleEventPlugin: Unhandled event type, `%s`.', topLevelType) : invariant(false) : undefined;
	    var event = EventConstructor.getPooled(dispatchConfig, topLevelTargetID, nativeEvent, nativeEventTarget);
	    EventPropagators.accumulateTwoPhaseDispatches(event);
	    return event;
	  },
	
	  didPutListener: function didPutListener(id, registrationName, listener) {
	    // Mobile Safari does not fire properly bubble click events on
	    // non-interactive elements, which means delegated click listeners do not
	    // fire. The workaround for this bug involves attaching an empty click
	    // listener on the target node.
	    if (registrationName === ON_CLICK_KEY) {
	      var node = ReactMount.getNode(id);
	      if (!onClickListeners[id]) {
	        onClickListeners[id] = EventListener.listen(node, 'click', emptyFunction);
	      }
	    }
	  },
	
	  willDeleteListener: function willDeleteListener(id, registrationName) {
	    if (registrationName === ON_CLICK_KEY) {
	      onClickListeners[id].remove();
	      delete onClickListeners[id];
	    }
	  }
	
	};
	
	module.exports = SimpleEventPlugin;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticClipboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticEvent = __webpack_require__(77);
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/clipboard-apis/
	 */
	var ClipboardEventInterface = {
	  clipboardData: function clipboardData(event) {
	    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticClipboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticEvent.augmentClass(SyntheticClipboardEvent, ClipboardEventInterface);
	
	module.exports = SyntheticClipboardEvent;

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticFocusEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	/**
	 * @interface FocusEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var FocusEventInterface = {
	  relatedTarget: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticFocusEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticFocusEvent, FocusEventInterface);
	
	module.exports = SyntheticFocusEvent;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticKeyboardEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	var getEventCharCode = __webpack_require__(136);
	var getEventKey = __webpack_require__(137);
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface KeyboardEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var KeyboardEventInterface = {
	  key: getEventKey,
	  location: null,
	  ctrlKey: null,
	  shiftKey: null,
	  altKey: null,
	  metaKey: null,
	  repeat: null,
	  locale: null,
	  getModifierState: getEventModifierState,
	  // Legacy Interface
	  charCode: function charCode(event) {
	    // `charCode` is the result of a KeyPress event and represents the value of
	    // the actual printable character.
	
	    // KeyPress is deprecated, but its replacement is not yet final and not
	    // implemented in any major browser. Only KeyPress has charCode.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    return 0;
	  },
	  keyCode: function keyCode(event) {
	    // `keyCode` is the result of a KeyDown/Up event and represents the value of
	    // physical keyboard key.
	
	    // The actual meaning of the value depends on the users' keyboard layout
	    // which cannot be detected. Assuming that it is a US keyboard layout
	    // provides a surprisingly accurate mapping for US and European users.
	    // Due to this, it is left to the user to implement at this time.
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  },
	  which: function which(event) {
	    // `which` is an alias for either `keyCode` or `charCode` depending on the
	    // type of the event.
	    if (event.type === 'keypress') {
	      return getEventCharCode(event);
	    }
	    if (event.type === 'keydown' || event.type === 'keyup') {
	      return event.keyCode;
	    }
	    return 0;
	  }
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticKeyboardEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticKeyboardEvent, KeyboardEventInterface);
	
	module.exports = SyntheticKeyboardEvent;

/***/ },
/* 136 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventCharCode
	 * @typechecks static-only
	 */
	
	'use strict';
	
	/**
	 * `charCode` represents the actual "character code" and is safe to use with
	 * `String.fromCharCode`. As such, only keys that correspond to printable
	 * characters produce a valid `charCode`, the only exception to this is Enter.
	 * The Tab-key is considered non-printable and does not have a `charCode`,
	 * presumably because it does not produce a tab-character in browsers.
	 *
	 * @param {object} nativeEvent Native browser event.
	 * @return {number} Normalized `charCode` property.
	 */
	
	function getEventCharCode(nativeEvent) {
	  var charCode;
	  var keyCode = nativeEvent.keyCode;
	
	  if ('charCode' in nativeEvent) {
	    charCode = nativeEvent.charCode;
	
	    // FF does not set `charCode` for the Enter-key, check against `keyCode`.
	    if (charCode === 0 && keyCode === 13) {
	      charCode = 13;
	    }
	  } else {
	    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
	    charCode = keyCode;
	  }
	
	  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
	  // Must not discard the (non-)printable Enter-key.
	  if (charCode >= 32 || charCode === 13) {
	    return charCode;
	  }
	
	  return 0;
	}
	
	module.exports = getEventCharCode;

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule getEventKey
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var getEventCharCode = __webpack_require__(136);
	
	/**
	 * Normalization of deprecated HTML5 `key` values
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var normalizeKey = {
	  'Esc': 'Escape',
	  'Spacebar': ' ',
	  'Left': 'ArrowLeft',
	  'Up': 'ArrowUp',
	  'Right': 'ArrowRight',
	  'Down': 'ArrowDown',
	  'Del': 'Delete',
	  'Win': 'OS',
	  'Menu': 'ContextMenu',
	  'Apps': 'ContextMenu',
	  'Scroll': 'ScrollLock',
	  'MozPrintableKey': 'Unidentified'
	};
	
	/**
	 * Translation from legacy `keyCode` to HTML5 `key`
	 * Only special keys supported, all others depend on keyboard layout or browser
	 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
	 */
	var translateToKey = {
	  8: 'Backspace',
	  9: 'Tab',
	  12: 'Clear',
	  13: 'Enter',
	  16: 'Shift',
	  17: 'Control',
	  18: 'Alt',
	  19: 'Pause',
	  20: 'CapsLock',
	  27: 'Escape',
	  32: ' ',
	  33: 'PageUp',
	  34: 'PageDown',
	  35: 'End',
	  36: 'Home',
	  37: 'ArrowLeft',
	  38: 'ArrowUp',
	  39: 'ArrowRight',
	  40: 'ArrowDown',
	  45: 'Insert',
	  46: 'Delete',
	  112: 'F1', 113: 'F2', 114: 'F3', 115: 'F4', 116: 'F5', 117: 'F6',
	  118: 'F7', 119: 'F8', 120: 'F9', 121: 'F10', 122: 'F11', 123: 'F12',
	  144: 'NumLock',
	  145: 'ScrollLock',
	  224: 'Meta'
	};
	
	/**
	 * @param {object} nativeEvent Native browser event.
	 * @return {string} Normalized `key` property.
	 */
	function getEventKey(nativeEvent) {
	  if (nativeEvent.key) {
	    // Normalize inconsistent values reported by browsers due to
	    // implementations of a working draft specification.
	
	    // FireFox implements `key` but returns `MozPrintableKey` for all
	    // printable characters (normalized to `Unidentified`), ignore it.
	    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
	    if (key !== 'Unidentified') {
	      return key;
	    }
	  }
	
	  // Browser does not implement `key`, polyfill as much of it as we can.
	  if (nativeEvent.type === 'keypress') {
	    var charCode = getEventCharCode(nativeEvent);
	
	    // The enter-key is technically both printable and non-printable and can
	    // thus be captured by `keypress`, no other non-printable key should.
	    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
	  }
	  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
	    // While user keyboard layout determines the actual meaning of each
	    // `keyCode` value, almost all function keys have a universal value.
	    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
	  }
	  return '';
	}
	
	module.exports = getEventKey;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticDragEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(86);
	
	/**
	 * @interface DragEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var DragEventInterface = {
	  dataTransfer: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticDragEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticDragEvent, DragEventInterface);
	
	module.exports = SyntheticDragEvent;

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticTouchEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticUIEvent = __webpack_require__(87);
	
	var getEventModifierState = __webpack_require__(88);
	
	/**
	 * @interface TouchEvent
	 * @see http://www.w3.org/TR/touch-events/
	 */
	var TouchEventInterface = {
	  touches: null,
	  targetTouches: null,
	  changedTouches: null,
	  altKey: null,
	  metaKey: null,
	  ctrlKey: null,
	  shiftKey: null,
	  getModifierState: getEventModifierState
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticUIEvent}
	 */
	function SyntheticTouchEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticUIEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticUIEvent.augmentClass(SyntheticTouchEvent, TouchEventInterface);
	
	module.exports = SyntheticTouchEvent;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SyntheticWheelEvent
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var SyntheticMouseEvent = __webpack_require__(86);
	
	/**
	 * @interface WheelEvent
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var WheelEventInterface = {
	  deltaX: function deltaX(event) {
	    return 'deltaX' in event ? event.deltaX :
	    // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
	    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
	  },
	  deltaY: function deltaY(event) {
	    return 'deltaY' in event ? event.deltaY :
	    // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
	    'wheelDeltaY' in event ? -event.wheelDeltaY :
	    // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
	    'wheelDelta' in event ? -event.wheelDelta : 0;
	  },
	  deltaZ: null,
	
	  // Browsers without "deltaMode" is reporting in raw wheel delta where one
	  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
	  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
	  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
	  deltaMode: null
	};
	
	/**
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {string} dispatchMarker Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @extends {SyntheticMouseEvent}
	 */
	function SyntheticWheelEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
	  SyntheticMouseEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
	}
	
	SyntheticMouseEvent.augmentClass(SyntheticWheelEvent, WheelEventInterface);
	
	module.exports = SyntheticWheelEvent;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule SVGDOMPropertyConfig
	 */
	
	'use strict';
	
	var DOMProperty = __webpack_require__(23);
	
	var MUST_USE_ATTRIBUTE = DOMProperty.injection.MUST_USE_ATTRIBUTE;
	
	var NS = {
	  xlink: 'http://www.w3.org/1999/xlink',
	  xml: 'http://www.w3.org/XML/1998/namespace'
	};
	
	var SVGDOMPropertyConfig = {
	  Properties: {
	    clipPath: MUST_USE_ATTRIBUTE,
	    cx: MUST_USE_ATTRIBUTE,
	    cy: MUST_USE_ATTRIBUTE,
	    d: MUST_USE_ATTRIBUTE,
	    dx: MUST_USE_ATTRIBUTE,
	    dy: MUST_USE_ATTRIBUTE,
	    fill: MUST_USE_ATTRIBUTE,
	    fillOpacity: MUST_USE_ATTRIBUTE,
	    fontFamily: MUST_USE_ATTRIBUTE,
	    fontSize: MUST_USE_ATTRIBUTE,
	    fx: MUST_USE_ATTRIBUTE,
	    fy: MUST_USE_ATTRIBUTE,
	    gradientTransform: MUST_USE_ATTRIBUTE,
	    gradientUnits: MUST_USE_ATTRIBUTE,
	    markerEnd: MUST_USE_ATTRIBUTE,
	    markerMid: MUST_USE_ATTRIBUTE,
	    markerStart: MUST_USE_ATTRIBUTE,
	    offset: MUST_USE_ATTRIBUTE,
	    opacity: MUST_USE_ATTRIBUTE,
	    patternContentUnits: MUST_USE_ATTRIBUTE,
	    patternUnits: MUST_USE_ATTRIBUTE,
	    points: MUST_USE_ATTRIBUTE,
	    preserveAspectRatio: MUST_USE_ATTRIBUTE,
	    r: MUST_USE_ATTRIBUTE,
	    rx: MUST_USE_ATTRIBUTE,
	    ry: MUST_USE_ATTRIBUTE,
	    spreadMethod: MUST_USE_ATTRIBUTE,
	    stopColor: MUST_USE_ATTRIBUTE,
	    stopOpacity: MUST_USE_ATTRIBUTE,
	    stroke: MUST_USE_ATTRIBUTE,
	    strokeDasharray: MUST_USE_ATTRIBUTE,
	    strokeLinecap: MUST_USE_ATTRIBUTE,
	    strokeOpacity: MUST_USE_ATTRIBUTE,
	    strokeWidth: MUST_USE_ATTRIBUTE,
	    textAnchor: MUST_USE_ATTRIBUTE,
	    transform: MUST_USE_ATTRIBUTE,
	    version: MUST_USE_ATTRIBUTE,
	    viewBox: MUST_USE_ATTRIBUTE,
	    x1: MUST_USE_ATTRIBUTE,
	    x2: MUST_USE_ATTRIBUTE,
	    x: MUST_USE_ATTRIBUTE,
	    xlinkActuate: MUST_USE_ATTRIBUTE,
	    xlinkArcrole: MUST_USE_ATTRIBUTE,
	    xlinkHref: MUST_USE_ATTRIBUTE,
	    xlinkRole: MUST_USE_ATTRIBUTE,
	    xlinkShow: MUST_USE_ATTRIBUTE,
	    xlinkTitle: MUST_USE_ATTRIBUTE,
	    xlinkType: MUST_USE_ATTRIBUTE,
	    xmlBase: MUST_USE_ATTRIBUTE,
	    xmlLang: MUST_USE_ATTRIBUTE,
	    xmlSpace: MUST_USE_ATTRIBUTE,
	    y1: MUST_USE_ATTRIBUTE,
	    y2: MUST_USE_ATTRIBUTE,
	    y: MUST_USE_ATTRIBUTE
	  },
	  DOMAttributeNamespaces: {
	    xlinkActuate: NS.xlink,
	    xlinkArcrole: NS.xlink,
	    xlinkHref: NS.xlink,
	    xlinkRole: NS.xlink,
	    xlinkShow: NS.xlink,
	    xlinkTitle: NS.xlink,
	    xlinkType: NS.xlink,
	    xmlBase: NS.xml,
	    xmlLang: NS.xml,
	    xmlSpace: NS.xml
	  },
	  DOMAttributeNames: {
	    clipPath: 'clip-path',
	    fillOpacity: 'fill-opacity',
	    fontFamily: 'font-family',
	    fontSize: 'font-size',
	    gradientTransform: 'gradientTransform',
	    gradientUnits: 'gradientUnits',
	    markerEnd: 'marker-end',
	    markerMid: 'marker-mid',
	    markerStart: 'marker-start',
	    patternContentUnits: 'patternContentUnits',
	    patternUnits: 'patternUnits',
	    preserveAspectRatio: 'preserveAspectRatio',
	    spreadMethod: 'spreadMethod',
	    stopColor: 'stop-color',
	    stopOpacity: 'stop-opacity',
	    strokeDasharray: 'stroke-dasharray',
	    strokeLinecap: 'stroke-linecap',
	    strokeOpacity: 'stroke-opacity',
	    strokeWidth: 'stroke-width',
	    textAnchor: 'text-anchor',
	    viewBox: 'viewBox',
	    xlinkActuate: 'xlink:actuate',
	    xlinkArcrole: 'xlink:arcrole',
	    xlinkHref: 'xlink:href',
	    xlinkRole: 'xlink:role',
	    xlinkShow: 'xlink:show',
	    xlinkTitle: 'xlink:title',
	    xlinkType: 'xlink:type',
	    xmlBase: 'xml:base',
	    xmlLang: 'xml:lang',
	    xmlSpace: 'xml:space'
	  }
	};
	
	module.exports = SVGDOMPropertyConfig;

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerf
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var DOMProperty = __webpack_require__(23);
	var ReactDefaultPerfAnalysis = __webpack_require__(143);
	var ReactMount = __webpack_require__(28);
	var ReactPerf = __webpack_require__(18);
	
	var performanceNow = __webpack_require__(144);
	
	function roundFloat(val) {
	  return Math.floor(val * 100) / 100;
	}
	
	function addValue(obj, key, val) {
	  obj[key] = (obj[key] || 0) + val;
	}
	
	var ReactDefaultPerf = {
	  _allMeasurements: [], // last item in the list is the current one
	  _mountStack: [0],
	  _injected: false,
	
	  start: function start() {
	    if (!ReactDefaultPerf._injected) {
	      ReactPerf.injection.injectMeasure(ReactDefaultPerf.measure);
	    }
	
	    ReactDefaultPerf._allMeasurements.length = 0;
	    ReactPerf.enableMeasure = true;
	  },
	
	  stop: function stop() {
	    ReactPerf.enableMeasure = false;
	  },
	
	  getLastMeasurements: function getLastMeasurements() {
	    return ReactDefaultPerf._allMeasurements;
	  },
	
	  printExclusive: function printExclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getExclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Component class name': item.componentName,
	        'Total inclusive time (ms)': roundFloat(item.inclusive),
	        'Exclusive mount time (ms)': roundFloat(item.exclusive),
	        'Exclusive render time (ms)': roundFloat(item.render),
	        'Mount time per instance (ms)': roundFloat(item.exclusive / item.count),
	        'Render time per instance (ms)': roundFloat(item.render / item.count),
	        'Instances': item.count
	      };
	    }));
	    // TODO: ReactDefaultPerfAnalysis.getTotalTime() does not return the correct
	    // number.
	  },
	
	  printInclusive: function printInclusive(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements);
	    console.table(summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Inclusive time (ms)': roundFloat(item.time),
	        'Instances': item.count
	      };
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  getMeasurementsSummaryMap: function getMeasurementsSummaryMap(measurements) {
	    var summary = ReactDefaultPerfAnalysis.getInclusiveSummary(measurements, true);
	    return summary.map(function (item) {
	      return {
	        'Owner > component': item.componentName,
	        'Wasted time (ms)': item.time,
	        'Instances': item.count
	      };
	    });
	  },
	
	  printWasted: function printWasted(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    console.table(ReactDefaultPerf.getMeasurementsSummaryMap(measurements));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  printDOM: function printDOM(measurements) {
	    measurements = measurements || ReactDefaultPerf._allMeasurements;
	    var summary = ReactDefaultPerfAnalysis.getDOMSummary(measurements);
	    console.table(summary.map(function (item) {
	      var result = {};
	      result[DOMProperty.ID_ATTRIBUTE_NAME] = item.id;
	      result.type = item.type;
	      result.args = JSON.stringify(item.args);
	      return result;
	    }));
	    console.log('Total time:', ReactDefaultPerfAnalysis.getTotalTime(measurements).toFixed(2) + ' ms');
	  },
	
	  _recordWrite: function _recordWrite(id, fnName, totalTime, args) {
	    // TODO: totalTime isn't that useful since it doesn't count paints/reflows
	    var writes = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].writes;
	    writes[id] = writes[id] || [];
	    writes[id].push({
	      type: fnName,
	      time: totalTime,
	      args: args
	    });
	  },
	
	  measure: function measure(moduleName, fnName, func) {
	    return function () {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }
	
	      var totalTime;
	      var rv;
	      var start;
	
	      if (fnName === '_renderNewRootComponent' || fnName === 'flushBatchedUpdates') {
	        // A "measurement" is a set of metrics recorded for each flush. We want
	        // to group the metrics for a given flush together so we can look at the
	        // components that rendered and the DOM operations that actually
	        // happened to determine the amount of "wasted work" performed.
	        ReactDefaultPerf._allMeasurements.push({
	          exclusive: {},
	          inclusive: {},
	          render: {},
	          counts: {},
	          writes: {},
	          displayNames: {},
	          totalTime: 0,
	          created: {}
	        });
	        start = performanceNow();
	        rv = func.apply(this, args);
	        ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1].totalTime = performanceNow() - start;
	        return rv;
	      } else if (fnName === '_mountImageIntoNode' || moduleName === 'ReactBrowserEventEmitter' || moduleName === 'ReactDOMIDOperations' || moduleName === 'CSSPropertyOperations' || moduleName === 'DOMChildrenOperations' || moduleName === 'DOMPropertyOperations') {
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (fnName === '_mountImageIntoNode') {
	          var mountID = ReactMount.getID(args[1]);
	          ReactDefaultPerf._recordWrite(mountID, fnName, totalTime, args[0]);
	        } else if (fnName === 'dangerouslyProcessChildrenUpdates') {
	          // special format
	          args[0].forEach(function (update) {
	            var writeArgs = {};
	            if (update.fromIndex !== null) {
	              writeArgs.fromIndex = update.fromIndex;
	            }
	            if (update.toIndex !== null) {
	              writeArgs.toIndex = update.toIndex;
	            }
	            if (update.textContent !== null) {
	              writeArgs.textContent = update.textContent;
	            }
	            if (update.markupIndex !== null) {
	              writeArgs.markup = args[1][update.markupIndex];
	            }
	            ReactDefaultPerf._recordWrite(update.parentID, update.type, totalTime, writeArgs);
	          });
	        } else {
	          // basic format
	          var id = args[0];
	          if ((typeof id === 'undefined' ? 'undefined' : _typeof(id)) === 'object') {
	            id = ReactMount.getID(args[0]);
	          }
	          ReactDefaultPerf._recordWrite(id, fnName, totalTime, Array.prototype.slice.call(args, 1));
	        }
	        return rv;
	      } else if (moduleName === 'ReactCompositeComponent' && (fnName === 'mountComponent' || fnName === 'updateComponent' || // TODO: receiveComponent()?
	      fnName === '_renderValidatedComponent')) {
	
	        if (this._currentElement.type === ReactMount.TopLevelWrapper) {
	          return func.apply(this, args);
	        }
	
	        var rootNodeID = fnName === 'mountComponent' ? args[0] : this._rootNodeID;
	        var isRender = fnName === '_renderValidatedComponent';
	        var isMount = fnName === 'mountComponent';
	
	        var mountStack = ReactDefaultPerf._mountStack;
	        var entry = ReactDefaultPerf._allMeasurements[ReactDefaultPerf._allMeasurements.length - 1];
	
	        if (isRender) {
	          addValue(entry.counts, rootNodeID, 1);
	        } else if (isMount) {
	          entry.created[rootNodeID] = true;
	          mountStack.push(0);
	        }
	
	        start = performanceNow();
	        rv = func.apply(this, args);
	        totalTime = performanceNow() - start;
	
	        if (isRender) {
	          addValue(entry.render, rootNodeID, totalTime);
	        } else if (isMount) {
	          var subMountTime = mountStack.pop();
	          mountStack[mountStack.length - 1] += totalTime;
	          addValue(entry.exclusive, rootNodeID, totalTime - subMountTime);
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        } else {
	          addValue(entry.inclusive, rootNodeID, totalTime);
	        }
	
	        entry.displayNames[rootNodeID] = {
	          current: this.getName(),
	          owner: this._currentElement._owner ? this._currentElement._owner.getName() : '<root>'
	        };
	
	        return rv;
	      } else {
	        return func.apply(this, args);
	      }
	    };
	  }
	};
	
	module.exports = ReactDefaultPerf;

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDefaultPerfAnalysis
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	
	// Don't try to save users less than 1.2ms (a number I made up)
	var DONT_CARE_THRESHOLD = 1.2;
	var DOM_OPERATION_TYPES = {
	  '_mountImageIntoNode': 'set innerHTML',
	  INSERT_MARKUP: 'set innerHTML',
	  MOVE_EXISTING: 'move',
	  REMOVE_NODE: 'remove',
	  SET_MARKUP: 'set innerHTML',
	  TEXT_CONTENT: 'set textContent',
	  'setValueForProperty': 'update attribute',
	  'setValueForAttribute': 'update attribute',
	  'deleteValueForProperty': 'remove attribute',
	  'setValueForStyles': 'update styles',
	  'replaceNodeWithMarkup': 'replace',
	  'updateTextContent': 'set textContent'
	};
	
	function getTotalTime(measurements) {
	  // TODO: return number of DOM ops? could be misleading.
	  // TODO: measure dropped frames after reconcile?
	  // TODO: log total time of each reconcile and the top-level component
	  // class that triggered it.
	  var totalTime = 0;
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    totalTime += measurement.totalTime;
	  }
	  return totalTime;
	}
	
	function getDOMSummary(measurements) {
	  var items = [];
	  measurements.forEach(function (measurement) {
	    Object.keys(measurement.writes).forEach(function (id) {
	      measurement.writes[id].forEach(function (write) {
	        items.push({
	          id: id,
	          type: DOM_OPERATION_TYPES[write.type] || write.type,
	          args: write.args
	        });
	      });
	    });
	  });
	  return items;
	}
	
	function getExclusiveSummary(measurements) {
	  var candidates = {};
	  var displayName;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	    for (var id in allIDs) {
	      displayName = measurement.displayNames[id].current;
	
	      candidates[displayName] = candidates[displayName] || {
	        componentName: displayName,
	        inclusive: 0,
	        exclusive: 0,
	        render: 0,
	        count: 0
	      };
	      if (measurement.render[id]) {
	        candidates[displayName].render += measurement.render[id];
	      }
	      if (measurement.exclusive[id]) {
	        candidates[displayName].exclusive += measurement.exclusive[id];
	      }
	      if (measurement.inclusive[id]) {
	        candidates[displayName].inclusive += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[displayName].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (displayName in candidates) {
	    if (candidates[displayName].exclusive >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[displayName]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.exclusive - a.exclusive;
	  });
	
	  return arr;
	}
	
	function getInclusiveSummary(measurements, onlyClean) {
	  var candidates = {};
	  var inclusiveKey;
	
	  for (var i = 0; i < measurements.length; i++) {
	    var measurement = measurements[i];
	    var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	    var cleanComponents;
	
	    if (onlyClean) {
	      cleanComponents = getUnchangedComponents(measurement);
	    }
	
	    for (var id in allIDs) {
	      if (onlyClean && !cleanComponents[id]) {
	        continue;
	      }
	
	      var displayName = measurement.displayNames[id];
	
	      // Inclusive time is not useful for many components without knowing where
	      // they are instantiated. So we aggregate inclusive time with both the
	      // owner and current displayName as the key.
	      inclusiveKey = displayName.owner + ' > ' + displayName.current;
	
	      candidates[inclusiveKey] = candidates[inclusiveKey] || {
	        componentName: inclusiveKey,
	        time: 0,
	        count: 0
	      };
	
	      if (measurement.inclusive[id]) {
	        candidates[inclusiveKey].time += measurement.inclusive[id];
	      }
	      if (measurement.counts[id]) {
	        candidates[inclusiveKey].count += measurement.counts[id];
	      }
	    }
	  }
	
	  // Now make a sorted array with the results.
	  var arr = [];
	  for (inclusiveKey in candidates) {
	    if (candidates[inclusiveKey].time >= DONT_CARE_THRESHOLD) {
	      arr.push(candidates[inclusiveKey]);
	    }
	  }
	
	  arr.sort(function (a, b) {
	    return b.time - a.time;
	  });
	
	  return arr;
	}
	
	function getUnchangedComponents(measurement) {
	  // For a given reconcile, look at which components did not actually
	  // render anything to the DOM and return a mapping of their ID to
	  // the amount of time it took to render the entire subtree.
	  var cleanComponents = {};
	  var dirtyLeafIDs = Object.keys(measurement.writes);
	  var allIDs = assign({}, measurement.exclusive, measurement.inclusive);
	
	  for (var id in allIDs) {
	    var isDirty = false;
	    // For each component that rendered, see if a component that triggered
	    // a DOM op is in its subtree.
	    for (var i = 0; i < dirtyLeafIDs.length; i++) {
	      if (dirtyLeafIDs[i].indexOf(id) === 0) {
	        isDirty = true;
	        break;
	      }
	    }
	    // check if component newly created
	    if (measurement.created[id]) {
	      isDirty = true;
	    }
	    if (!isDirty && measurement.counts[id] > 0) {
	      cleanComponents[id] = true;
	    }
	  }
	  return cleanComponents;
	}
	
	var ReactDefaultPerfAnalysis = {
	  getExclusiveSummary: getExclusiveSummary,
	  getInclusiveSummary: getInclusiveSummary,
	  getDOMSummary: getDOMSummary,
	  getTotalTime: getTotalTime
	};
	
	module.exports = ReactDefaultPerfAnalysis;

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performanceNow
	 * @typechecks
	 */
	
	'use strict';
	
	var performance = __webpack_require__(145);
	
	var performanceNow;
	
	/**
	 * Detect if we can use `window.performance.now()` and gracefully fallback to
	 * `Date.now()` if it doesn't exist. We need to support Firefox < 15 for now
	 * because of Facebook's testing infrastructure.
	 */
	if (performance.now) {
	  performanceNow = function performanceNow() {
	    return performance.now();
	  };
	} else {
	  performanceNow = function performanceNow() {
	    return Date.now();
	  };
	}
	
	module.exports = performanceNow;

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule performance
	 * @typechecks
	 */
	
	'use strict';
	
	var ExecutionEnvironment = __webpack_require__(9);
	
	var performance;
	
	if (ExecutionEnvironment.canUseDOM) {
	  performance = window.performance || window.msPerformance || window.webkitPerformance;
	}
	
	module.exports = performance || {};

/***/ },
/* 146 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactVersion
	 */
	
	'use strict';
	
	module.exports = '0.14.7';

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	* @providesModule renderSubtreeIntoContainer
	*/
	
	'use strict';
	
	var ReactMount = __webpack_require__(28);
	
	module.exports = ReactMount.renderSubtreeIntoContainer;

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMServer
	 */
	
	'use strict';
	
	var ReactDefaultInjection = __webpack_require__(71);
	var ReactServerRendering = __webpack_require__(149);
	var ReactVersion = __webpack_require__(146);
	
	ReactDefaultInjection.inject();
	
	var ReactDOMServer = {
	  renderToString: ReactServerRendering.renderToString,
	  renderToStaticMarkup: ReactServerRendering.renderToStaticMarkup,
	  version: ReactVersion
	};
	
	module.exports = ReactDOMServer;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @typechecks static-only
	 * @providesModule ReactServerRendering
	 */
	'use strict';
	
	var ReactDefaultBatchingStrategy = __webpack_require__(92);
	var ReactElement = __webpack_require__(42);
	var ReactInstanceHandles = __webpack_require__(45);
	var ReactMarkupChecksum = __webpack_require__(48);
	var ReactServerBatchingStrategy = __webpack_require__(150);
	var ReactServerRenderingTransaction = __webpack_require__(151);
	var ReactUpdates = __webpack_require__(54);
	
	var emptyObject = __webpack_require__(58);
	var instantiateReactComponent = __webpack_require__(62);
	var invariant = __webpack_require__(13);
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup
	 */
	function renderToString(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToString(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(false);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      var markup = componentInstance.mountComponent(id, transaction, emptyObject);
	      return ReactMarkupChecksum.addChecksumToMarkup(markup);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	/**
	 * @param {ReactElement} element
	 * @return {string} the HTML markup, without the extra React ID and checksum
	 * (for generating static pages)
	 */
	function renderToStaticMarkup(element) {
	  !ReactElement.isValidElement(element) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'renderToStaticMarkup(): You must pass a valid ReactElement.') : invariant(false) : undefined;
	
	  var transaction;
	  try {
	    ReactUpdates.injection.injectBatchingStrategy(ReactServerBatchingStrategy);
	
	    var id = ReactInstanceHandles.createReactRootID();
	    transaction = ReactServerRenderingTransaction.getPooled(true);
	
	    return transaction.perform(function () {
	      var componentInstance = instantiateReactComponent(element, null);
	      return componentInstance.mountComponent(id, transaction, emptyObject);
	    }, null);
	  } finally {
	    ReactServerRenderingTransaction.release(transaction);
	    // Revert to the DOM batching strategy since these two renderers
	    // currently share these stateful modules.
	    ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);
	  }
	}
	
	module.exports = {
	  renderToString: renderToString,
	  renderToStaticMarkup: renderToStaticMarkup
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 150 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerBatchingStrategy
	 * @typechecks
	 */
	
	'use strict';
	
	var ReactServerBatchingStrategy = {
	  isBatchingUpdates: false,
	  batchedUpdates: function batchedUpdates(callback) {
	    // Don't do anything here. During the server rendering we don't want to
	    // schedule any updates. We will simply ignore them.
	  }
	};
	
	module.exports = ReactServerBatchingStrategy;

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactServerRenderingTransaction
	 * @typechecks
	 */
	
	'use strict';
	
	var PooledClass = __webpack_require__(56);
	var CallbackQueue = __webpack_require__(55);
	var Transaction = __webpack_require__(57);
	
	var assign = __webpack_require__(39);
	var emptyFunction = __webpack_require__(15);
	
	/**
	 * Provides a `CallbackQueue` queue for collecting `onDOMReady` callbacks
	 * during the performing of the transaction.
	 */
	var ON_DOM_READY_QUEUEING = {
	  /**
	   * Initializes the internal `onDOMReady` queue.
	   */
	  initialize: function initialize() {
	    this.reactMountReady.reset();
	  },
	
	  close: emptyFunction
	};
	
	/**
	 * Executed within the scope of the `Transaction` instance. Consider these as
	 * being member methods, but with an implied ordering while being isolated from
	 * each other.
	 */
	var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];
	
	/**
	 * @class ReactServerRenderingTransaction
	 * @param {boolean} renderToStaticMarkup
	 */
	function ReactServerRenderingTransaction(renderToStaticMarkup) {
	  this.reinitializeTransaction();
	  this.renderToStaticMarkup = renderToStaticMarkup;
	  this.reactMountReady = CallbackQueue.getPooled(null);
	  this.useCreateElement = false;
	}
	
	var Mixin = {
	  /**
	   * @see Transaction
	   * @abstract
	   * @final
	   * @return {array} Empty list of operation wrap procedures.
	   */
	  getTransactionWrappers: function getTransactionWrappers() {
	    return TRANSACTION_WRAPPERS;
	  },
	
	  /**
	   * @return {object} The queue to collect `onDOMReady` callbacks with.
	   */
	  getReactMountReady: function getReactMountReady() {
	    return this.reactMountReady;
	  },
	
	  /**
	   * `PooledClass` looks for this, and will invoke this before allowing this
	   * instance to be reused.
	   */
	  destructor: function destructor() {
	    CallbackQueue.release(this.reactMountReady);
	    this.reactMountReady = null;
	  }
	};
	
	assign(ReactServerRenderingTransaction.prototype, Transaction.Mixin, Mixin);
	
	PooledClass.addPoolingTo(ReactServerRenderingTransaction);
	
	module.exports = ReactServerRenderingTransaction;

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactIsomorphic
	 */
	
	'use strict';
	
	var ReactChildren = __webpack_require__(110);
	var ReactComponent = __webpack_require__(123);
	var ReactClass = __webpack_require__(122);
	var ReactDOMFactories = __webpack_require__(153);
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	var ReactPropTypes = __webpack_require__(107);
	var ReactVersion = __webpack_require__(146);
	
	var assign = __webpack_require__(39);
	var onlyChild = __webpack_require__(156);
	
	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;
	
	if (process.env.NODE_ENV !== 'production') {
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}
	
	var React = {
	
	  // Modern
	
	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },
	
	  Component: ReactComponent,
	
	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,
	
	  // Classic
	
	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function createMixin(mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },
	
	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,
	
	  version: ReactVersion,
	
	  // Hook for JSX spread, don't use this for anything else.
	  __spread: assign
	};
	
	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactDOMFactories
	 * @typechecks static-only
	 */
	
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	var ReactElementValidator = __webpack_require__(154);
	
	var mapObject = __webpack_require__(155);
	
	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @param {string} tag Tag name (e.g. `div`).
	 * @private
	 */
	function createDOMFactory(tag) {
	  if (process.env.NODE_ENV !== 'production') {
	    return ReactElementValidator.createFactory(tag);
	  }
	  return ReactElement.createFactory(tag);
	}
	
	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = mapObject({
	  a: 'a',
	  abbr: 'abbr',
	  address: 'address',
	  area: 'area',
	  article: 'article',
	  aside: 'aside',
	  audio: 'audio',
	  b: 'b',
	  base: 'base',
	  bdi: 'bdi',
	  bdo: 'bdo',
	  big: 'big',
	  blockquote: 'blockquote',
	  body: 'body',
	  br: 'br',
	  button: 'button',
	  canvas: 'canvas',
	  caption: 'caption',
	  cite: 'cite',
	  code: 'code',
	  col: 'col',
	  colgroup: 'colgroup',
	  data: 'data',
	  datalist: 'datalist',
	  dd: 'dd',
	  del: 'del',
	  details: 'details',
	  dfn: 'dfn',
	  dialog: 'dialog',
	  div: 'div',
	  dl: 'dl',
	  dt: 'dt',
	  em: 'em',
	  embed: 'embed',
	  fieldset: 'fieldset',
	  figcaption: 'figcaption',
	  figure: 'figure',
	  footer: 'footer',
	  form: 'form',
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  head: 'head',
	  header: 'header',
	  hgroup: 'hgroup',
	  hr: 'hr',
	  html: 'html',
	  i: 'i',
	  iframe: 'iframe',
	  img: 'img',
	  input: 'input',
	  ins: 'ins',
	  kbd: 'kbd',
	  keygen: 'keygen',
	  label: 'label',
	  legend: 'legend',
	  li: 'li',
	  link: 'link',
	  main: 'main',
	  map: 'map',
	  mark: 'mark',
	  menu: 'menu',
	  menuitem: 'menuitem',
	  meta: 'meta',
	  meter: 'meter',
	  nav: 'nav',
	  noscript: 'noscript',
	  object: 'object',
	  ol: 'ol',
	  optgroup: 'optgroup',
	  option: 'option',
	  output: 'output',
	  p: 'p',
	  param: 'param',
	  picture: 'picture',
	  pre: 'pre',
	  progress: 'progress',
	  q: 'q',
	  rp: 'rp',
	  rt: 'rt',
	  ruby: 'ruby',
	  s: 's',
	  samp: 'samp',
	  script: 'script',
	  section: 'section',
	  select: 'select',
	  small: 'small',
	  source: 'source',
	  span: 'span',
	  strong: 'strong',
	  style: 'style',
	  sub: 'sub',
	  summary: 'summary',
	  sup: 'sup',
	  table: 'table',
	  tbody: 'tbody',
	  td: 'td',
	  textarea: 'textarea',
	  tfoot: 'tfoot',
	  th: 'th',
	  thead: 'thead',
	  time: 'time',
	  title: 'title',
	  tr: 'tr',
	  track: 'track',
	  u: 'u',
	  ul: 'ul',
	  'var': 'var',
	  video: 'video',
	  wbr: 'wbr',
	
	  // SVG
	  circle: 'circle',
	  clipPath: 'clipPath',
	  defs: 'defs',
	  ellipse: 'ellipse',
	  g: 'g',
	  image: 'image',
	  line: 'line',
	  linearGradient: 'linearGradient',
	  mask: 'mask',
	  path: 'path',
	  pattern: 'pattern',
	  polygon: 'polygon',
	  polyline: 'polyline',
	  radialGradient: 'radialGradient',
	  rect: 'rect',
	  stop: 'stop',
	  svg: 'svg',
	  text: 'text',
	  tspan: 'tspan'
	
	}, createDOMFactory);
	
	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule ReactElementValidator
	 */
	
	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */
	
	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var ReactElement = __webpack_require__(42);
	var ReactPropTypeLocations = __webpack_require__(65);
	var ReactPropTypeLocationNames = __webpack_require__(66);
	var ReactCurrentOwner = __webpack_require__(5);
	
	var canDefineProperty = __webpack_require__(43);
	var getIteratorFn = __webpack_require__(108);
	var invariant = __webpack_require__(13);
	var warning = __webpack_require__(25);
	
	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}
	
	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};
	
	var loggedTypeFailures = {};
	
	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;
	
	  var addenda = getAddendaForKeyUse('uniqueKey', element, parentType);
	  if (addenda === null) {
	    // we already showed the warning
	    return;
	  }
	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s%s', addenda.parentOrOwner || '', addenda.childOwner || '', addenda.url || '') : undefined;
	}
	
	/**
	 * Shared warning and monitoring code for the key warnings.
	 *
	 * @internal
	 * @param {string} messageType A key used for de-duping warnings.
	 * @param {ReactElement} element Component that requires a key.
	 * @param {*} parentType element's parent's type.
	 * @returns {?object} A set of addenda to use in the warning message, or null
	 * if the warning has already been shown before (and shouldn't be shown again).
	 */
	function getAddendaForKeyUse(messageType, element, parentType) {
	  var addendum = getDeclarationErrorAddendum();
	  if (!addendum) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      addendum = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	
	  var memoizer = ownerHasKeyUseWarning[messageType] || (ownerHasKeyUseWarning[messageType] = {});
	  if (memoizer[addendum]) {
	    return null;
	  }
	  memoizer[addendum] = true;
	
	  var addenda = {
	    parentOrOwner: addendum,
	    url: ' See https://fb.me/react-warning-keys for more information.',
	    childOwner: null
	  };
	
	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    addenda.childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }
	
	  return addenda;
	}
	
	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}
	
	/**
	 * Assert that the props are valid
	 *
	 * @param {string} componentName Name of the component for error messages.
	 * @param {object} propTypes Map of prop name to a ReactPropType
	 * @param {object} props
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @private
	 */
	function checkPropTypes(componentName, propTypes, props, location) {
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof propTypes[propName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], propName) : invariant(false) : undefined;
	        error = propTypes[propName](props, propName, componentName, location);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], propName, typeof error === 'undefined' ? 'undefined' : _typeof(error)) : undefined;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;
	
	        var addendum = getDeclarationErrorAddendum();
	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed propType: %s%s', error.message, addendum) : undefined;
	      }
	    }
	  }
	}
	
	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkPropTypes(name, componentClass.propTypes, element.props, ReactPropTypeLocations.prop);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : undefined;
	  }
	}
	
	var ReactElementValidator = {
	
	  createElement: function createElement(type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    process.env.NODE_ENV !== 'production' ? warning(validType, 'React.createElement: type should not be null, undefined, boolean, or ' + 'number. It should be a string (for DOM elements) or a ReactClass ' + '(for composite components).%s', getDeclarationErrorAddendum()) : undefined;
	
	    var element = ReactElement.createElement.apply(this, arguments);
	
	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }
	
	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }
	
	    validatePropTypes(element);
	
	    return element;
	  },
	
	  createFactory: function createFactory(type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;
	
	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function get() {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : undefined;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }
	
	    return validatedFactory;
	  },
	
	  cloneElement: function cloneElement(element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }
	
	};
	
	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 155 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule mapObject
	 */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * Executes the provided `callback` once for each enumerable own property in the
	 * object and constructs a new object from the results. The `callback` is
	 * invoked with three arguments:
	 *
	 *  - the property value
	 *  - the property name
	 *  - the object being traversed
	 *
	 * Properties that are added after the call to `mapObject` will not be visited
	 * by `callback`. If the values of existing properties are changed, the value
	 * passed to `callback` will be the value at the time `mapObject` visits them.
	 * Properties that are deleted before being visited are not visited.
	 *
	 * @grep function objectMap()
	 * @grep function objMap()
	 *
	 * @param {?object} object
	 * @param {function} callback
	 * @param {*} context
	 * @return {?object}
	 */
	function mapObject(object, callback, context) {
	  if (!object) {
	    return null;
	  }
	  var result = {};
	  for (var name in object) {
	    if (hasOwnProperty.call(object, name)) {
	      result[name] = callback.call(context, object[name], name, object);
	    }
	  }
	  return result;
	}
	
	module.exports = mapObject;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule onlyChild
	 */
	'use strict';
	
	var ReactElement = __webpack_require__(42);
	
	var invariant = __webpack_require__(13);
	
	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection. The current implementation of this
	 * function assumes that a single child gets passed without a wrapper, but the
	 * purpose of this helper function is to abstract away the particular structure
	 * of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactComponent} The first and only `ReactComponent` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'onlyChild must be passed a children with exactly one child.') : invariant(false) : undefined;
	  return children;
	}
	
	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * @providesModule deprecated
	 */
	
	'use strict';
	
	var assign = __webpack_require__(39);
	var warning = __webpack_require__(25);
	
	/**
	 * This will log a single deprecation notice per function and forward the call
	 * on to the new API.
	 *
	 * @param {string} fnName The name of the function
	 * @param {string} newModule The module that fn will exist in
	 * @param {string} newPackage The module that fn will exist in
	 * @param {*} ctx The context this forwarded call should run in
	 * @param {function} fn The function to forward on to
	 * @return {function} The function that will warn once and then call fn
	 */
	function deprecated(fnName, newModule, newPackage, ctx, fn) {
	  var warned = false;
	  if (process.env.NODE_ENV !== 'production') {
	    var newFn = function newFn() {
	      process.env.NODE_ENV !== 'production' ? warning(warned,
	      // Require examples in this string must be split to prevent React's
	      // build tools from mistaking them for real requires.
	      // Otherwise the build tools will attempt to build a '%s' module.
	      'React.%s is deprecated. Please use %s.%s from require' + '(\'%s\') ' + 'instead.', fnName, newModule, fnName, newPackage) : undefined;
	      warned = true;
	      return fn.apply(ctx, arguments);
	    };
	    // We need to make sure all properties of the original fn are copied over.
	    // In particular, this is needed to support PropTypes
	    return assign(newFn, fn);
	  }
	
	  return fn;
	}
	
	module.exports = deprecated;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(3);

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* components */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _Router2 = __webpack_require__(160);
	
	var _Router3 = _interopRequireDefault(_Router2);
	
	exports.Router = _Router3['default'];
	
	var _Link2 = __webpack_require__(196);
	
	var _Link3 = _interopRequireDefault(_Link2);
	
	exports.Link = _Link3['default'];
	
	var _IndexLink2 = __webpack_require__(197);
	
	var _IndexLink3 = _interopRequireDefault(_IndexLink2);
	
	exports.IndexLink = _IndexLink3['default'];
	
	/* components (configuration) */
	
	var _IndexRedirect2 = __webpack_require__(198);
	
	var _IndexRedirect3 = _interopRequireDefault(_IndexRedirect2);
	
	exports.IndexRedirect = _IndexRedirect3['default'];
	
	var _IndexRoute2 = __webpack_require__(200);
	
	var _IndexRoute3 = _interopRequireDefault(_IndexRoute2);
	
	exports.IndexRoute = _IndexRoute3['default'];
	
	var _Redirect2 = __webpack_require__(199);
	
	var _Redirect3 = _interopRequireDefault(_Redirect2);
	
	exports.Redirect = _Redirect3['default'];
	
	var _Route2 = __webpack_require__(201);
	
	var _Route3 = _interopRequireDefault(_Route2);
	
	exports.Route = _Route3['default'];
	
	/* mixins */
	
	var _History2 = __webpack_require__(202);
	
	var _History3 = _interopRequireDefault(_History2);
	
	exports.History = _History3['default'];
	
	var _Lifecycle2 = __webpack_require__(203);
	
	var _Lifecycle3 = _interopRequireDefault(_Lifecycle2);
	
	exports.Lifecycle = _Lifecycle3['default'];
	
	var _RouteContext2 = __webpack_require__(204);
	
	var _RouteContext3 = _interopRequireDefault(_RouteContext2);
	
	exports.RouteContext = _RouteContext3['default'];
	
	/* utils */
	
	var _useRoutes2 = __webpack_require__(205);
	
	var _useRoutes3 = _interopRequireDefault(_useRoutes2);
	
	exports.useRoutes = _useRoutes3['default'];
	
	var _RouteUtils = __webpack_require__(190);
	
	exports.createRoutes = _RouteUtils.createRoutes;
	
	var _RouterContext2 = __webpack_require__(192);
	
	var _RouterContext3 = _interopRequireDefault(_RouterContext2);
	
	exports.RouterContext = _RouterContext3['default'];
	
	var _RoutingContext2 = __webpack_require__(206);
	
	var _RoutingContext3 = _interopRequireDefault(_RoutingContext2);
	
	exports.RoutingContext = _RoutingContext3['default'];
	
	var _PropTypes2 = __webpack_require__(191);
	
	var _PropTypes3 = _interopRequireDefault(_PropTypes2);
	
	exports.PropTypes = _PropTypes3['default'];
	
	var _match2 = __webpack_require__(207);
	
	var _match3 = _interopRequireDefault(_match2);
	
	exports.match = _match3['default'];
	
	var _useRouterHistory2 = __webpack_require__(211);
	
	var _useRouterHistory3 = _interopRequireDefault(_useRouterHistory2);
	
	exports.useRouterHistory = _useRouterHistory3['default'];
	
	var _PatternUtils = __webpack_require__(184);
	
	exports.formatPattern = _PatternUtils.formatPattern;
	
	/* histories */
	
	var _browserHistory2 = __webpack_require__(212);
	
	var _browserHistory3 = _interopRequireDefault(_browserHistory2);
	
	exports.browserHistory = _browserHistory3['default'];
	
	var _hashHistory2 = __webpack_require__(215);
	
	var _hashHistory3 = _interopRequireDefault(_hashHistory2);
	
	exports.hashHistory = _hashHistory3['default'];
	
	var _createMemoryHistory2 = __webpack_require__(208);
	
	var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);
	
	exports.createMemoryHistory = _createMemoryHistory3['default'];

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	var _historyLibCreateHashHistory = __webpack_require__(161);
	
	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);
	
	var _historyLibUseQueries = __webpack_require__(178);
	
	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _createTransitionManager = __webpack_require__(181);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _PropTypes = __webpack_require__(191);
	
	var _RouterContext = __webpack_require__(192);
	
	var _RouterContext2 = _interopRequireDefault(_RouterContext);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _RouterUtils = __webpack_require__(195);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	function isDeprecatedHistory(history) {
	  return !history || !history.__v2_compatible__;
	}
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;
	
	/**
	 * A <Router> is a high-level API for automatically setting up
	 * a router that renders a <RouterContext> with all the props
	 * it needs each time the URL changes.
	 */
	var Router = _react2['default'].createClass({
	  displayName: 'Router',
	
	  propTypes: {
	    history: object,
	    children: _PropTypes.routes,
	    routes: _PropTypes.routes, // alias for children
	    render: func,
	    createElement: func,
	    onError: func,
	    onUpdate: func,
	
	    // PRIVATE: For client-side rehydration of server match.
	    matchContext: object
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      render: function render(props) {
	        return _react2['default'].createElement(_RouterContext2['default'], props);
	      }
	    };
	  },
	
	  getInitialState: function getInitialState() {
	    return {
	      location: null,
	      routes: null,
	      params: null,
	      components: null
	    };
	  },
	
	  handleError: function handleError(error) {
	    if (this.props.onError) {
	      this.props.onError.call(this, error);
	    } else {
	      // Throw errors by default so we don't silently swallow them!
	      throw error; // This error probably occurred in getChildRoutes or getComponents.
	    }
	  },
	
	  componentWillMount: function componentWillMount() {
	    var _this = this;
	
	    var _props = this.props;
	    var parseQueryString = _props.parseQueryString;
	    var stringifyQuery = _props.stringifyQuery;
	
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(parseQueryString || stringifyQuery), '`parseQueryString` and `stringifyQuery` are deprecated. Please create a custom history. http://tiny.cc/router-customquerystring') : undefined;
	
	    var _createRouterObjects = this.createRouterObjects();
	
	    var history = _createRouterObjects.history;
	    var transitionManager = _createRouterObjects.transitionManager;
	    var router = _createRouterObjects.router;
	
	    this._unlisten = transitionManager.listen(function (error, state) {
	      if (error) {
	        _this.handleError(error);
	      } else {
	        _this.setState(state, _this.props.onUpdate);
	      }
	    });
	
	    this.history = history;
	    this.router = router;
	  },
	
	  createRouterObjects: function createRouterObjects() {
	    var matchContext = this.props.matchContext;
	
	    if (matchContext) {
	      return matchContext;
	    }
	
	    var history = this.props.history;
	    var _props2 = this.props;
	    var routes = _props2.routes;
	    var children = _props2.children;
	
	    if (isDeprecatedHistory(history)) {
	      history = this.wrapDeprecatedHistory(history);
	    }
	
	    var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes || children));
	    var router = _RouterUtils.createRouterObject(history, transitionManager);
	    var routingHistory = _RouterUtils.createRoutingHistory(history, transitionManager);
	
	    return { history: routingHistory, transitionManager: transitionManager, router: router };
	  },
	
	  wrapDeprecatedHistory: function wrapDeprecatedHistory(history) {
	    var _props3 = this.props;
	    var parseQueryString = _props3.parseQueryString;
	    var stringifyQuery = _props3.stringifyQuery;
	
	    var createHistory = undefined;
	    if (history) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'It appears you have provided a deprecated history object to `<Router/>`, please use a history provided by ' + 'React Router with `import { browserHistory } from \'react-router\'` or `import { hashHistory } from \'react-router\'`. ' + 'If you are using a custom history please create it with `useRouterHistory`, see http://tiny.cc/router-usinghistory for details.') : undefined;
	      createHistory = function createHistory() {
	        return history;
	      };
	    } else {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`Router` no longer defaults the history prop to hash history. Please use the `hashHistory` singleton instead. http://tiny.cc/router-defaulthistory') : undefined;
	      createHistory = _historyLibCreateHashHistory2['default'];
	    }
	
	    return _historyLibUseQueries2['default'](createHistory)({ parseQueryString: parseQueryString, stringifyQuery: stringifyQuery });
	  },
	
	  /* istanbul ignore next: sanity check */
	  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](nextProps.history === this.props.history, 'You cannot change <Router history>; it will be ignored') : undefined;
	
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default']((nextProps.routes || nextProps.children) === (this.props.routes || this.props.children), 'You cannot change <Router routes>; it will be ignored') : undefined;
	  },
	
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlisten) this._unlisten();
	  },
	
	  render: function render() {
	    var _state = this.state;
	    var location = _state.location;
	    var routes = _state.routes;
	    var params = _state.params;
	    var components = _state.components;
	    var _props4 = this.props;
	    var createElement = _props4.createElement;
	    var render = _props4.render;
	
	    var props = _objectWithoutProperties(_props4, ['createElement', 'render']);
	
	    if (location == null) return null; // Async match
	
	    // Only forward non-Router-specific props to routing context, as those are
	    // the only ones that might be custom routing context props.
	    Object.keys(Router.propTypes).forEach(function (propType) {
	      return delete props[propType];
	    });
	
	    return render(_extends({}, props, {
	      history: this.history,
	      router: this.router,
	      location: location,
	      routes: routes,
	      params: params,
	      components: components,
	      createElement: createElement
	    }));
	  }
	
	});
	
	exports['default'] = Router;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _Actions = __webpack_require__(164);
	
	var _PathUtils = __webpack_require__(165);
	
	var _ExecutionEnvironment = __webpack_require__(166);
	
	var _DOMUtils = __webpack_require__(167);
	
	var _DOMStateStorage = __webpack_require__(168);
	
	var _createDOMHistory = __webpack_require__(169);
	
	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);
	
	function isAbsolutePath(path) {
	  return typeof path === 'string' && path.charAt(0) === '/';
	}
	
	function ensureSlash() {
	  var path = _DOMUtils.getHashPath();
	
	  if (isAbsolutePath(path)) return true;
	
	  _DOMUtils.replaceHashPath('/' + path);
	
	  return false;
	}
	
	function addQueryStringValueToPath(path, key, value) {
	  return path + (path.indexOf('?') === -1 ? '?' : '&') + (key + '=' + value);
	}
	
	function stripQueryStringValueFromPath(path, key) {
	  return path.replace(new RegExp('[?&]?' + key + '=[a-zA-Z0-9]+'), '');
	}
	
	function getQueryStringValueFromPath(path, key) {
	  var match = path.match(new RegExp('\\?.*?\\b' + key + '=(.+?)\\b'));
	  return match && match[1];
	}
	
	var DefaultQueryKey = '_k';
	
	function createHashHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Hash history needs a DOM') : _invariant2['default'](false) : undefined;
	
	  var queryKey = options.queryKey;
	
	  if (queryKey === undefined || !!queryKey) queryKey = typeof queryKey === 'string' ? queryKey : DefaultQueryKey;
	
	  function getCurrentLocation() {
	    var path = _DOMUtils.getHashPath();
	
	    var key = undefined,
	        state = undefined;
	    if (queryKey) {
	      key = getQueryStringValueFromPath(path, queryKey);
	      path = stripQueryStringValueFromPath(path, queryKey);
	
	      if (key) {
	        state = _DOMStateStorage.readState(key);
	      } else {
	        state = null;
	        key = history.createKey();
	        _DOMUtils.replaceHashPath(addQueryStringValueToPath(path, queryKey, key));
	      }
	    } else {
	      key = state = null;
	    }
	
	    var location = _PathUtils.parsePath(path);
	
	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }
	
	  function startHashChangeListener(_ref) {
	    var transitionTo = _ref.transitionTo;
	
	    function hashChangeListener() {
	      if (!ensureSlash()) return; // Always make sure hashes are preceeded with a /.
	
	      transitionTo(getCurrentLocation());
	    }
	
	    ensureSlash();
	    _DOMUtils.addEventListener(window, 'hashchange', hashChangeListener);
	
	    return function () {
	      _DOMUtils.removeEventListener(window, 'hashchange', hashChangeListener);
	    };
	  }
	
	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;
	
	    if (action === _Actions.POP) return; // Nothing to do.
	
	    var path = (basename || '') + pathname + search;
	
	    if (queryKey) {
	      path = addQueryStringValueToPath(path, queryKey, key);
	      _DOMStateStorage.saveState(key, state);
	    } else {
	      // Drop key and state.
	      location.key = location.state = null;
	    }
	
	    var currentHash = _DOMUtils.getHashPath();
	
	    if (action === _Actions.PUSH) {
	      if (currentHash !== path) {
	        window.location.hash = path;
	      } else {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'You cannot PUSH the same path using hash history') : undefined;
	      }
	    } else if (currentHash !== path) {
	      // REPLACE
	      _DOMUtils.replaceHashPath(path);
	    }
	  }
	
	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));
	
	  var listenerCount = 0,
	      stopHashChangeListener = undefined;
	
	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    var unlisten = history.listenBefore(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }
	
	  function listen(listener) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    var unlisten = history.listen(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopHashChangeListener();
	    };
	  }
	
	  function push(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
	
	    history.push(location);
	  }
	
	  function replace(location) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || location.state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
	
	    history.replace(location);
	  }
	
	  var goIsSupportedWithoutReload = _DOMUtils.supportsGoWithoutReloadUsingHash();
	
	  function go(n) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](goIsSupportedWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;
	
	    history.go(n);
	  }
	
	  function createHref(path) {
	    return '#' + history.createHref(path);
	  }
	
	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopHashChangeListener = startHashChangeListener(history);
	
	    history.registerTransitionHook(hook);
	  }
	
	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);
	
	    if (--listenerCount === 0) stopHashChangeListener();
	  }
	
	  // deprecated
	  function pushState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
	
	    history.pushState(state, path);
	  }
	
	  // deprecated
	  function replaceState(state, path) {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](queryKey || state == null, 'You cannot use state without a queryKey it will be dropped') : undefined;
	
	    history.replaceState(state, path);
	  }
	
	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    push: push,
	    replace: replace,
	    go: go,
	    createHref: createHref,
	
	    registerTransitionHook: registerTransitionHook, // deprecated - warning is in createHistory
	    unregisterTransitionHook: unregisterTransitionHook, // deprecated - warning is in createHistory
	    pushState: pushState, // deprecated - warning is in createHistory
	    replaceState: replaceState // deprecated - warning is in createHistory
	  });
	}
	
	exports['default'] = createHashHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = function warning() {};
	
	if (process.env.NODE_ENV !== 'production') {
	  warning = function warning(condition, format, args) {
	    var len = arguments.length;
	    args = new Array(len > 2 ? len - 2 : 0);
	    for (var key = 2; key < len; key++) {
	      args[key - 2] = arguments[key];
	    }
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.length < 10 || /^[s\W]*$/.test(format)) {
	      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
	    }
	
	    if (!condition) {
	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    }
	  };
	}
	
	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var invariant = function invariant(condition, format, a, b, c, d, e, f) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};
	
	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 164 */
/***/ function(module, exports) {

	/**
	 * Indicates that navigation was caused by a call to history.push.
	 */
	'use strict';
	
	exports.__esModule = true;
	var PUSH = 'PUSH';
	
	exports.PUSH = PUSH;
	/**
	 * Indicates that navigation was caused by a call to history.replace.
	 */
	var REPLACE = 'REPLACE';
	
	exports.REPLACE = REPLACE;
	/**
	 * Indicates that navigation was caused by some other action such
	 * as using a browser's back/forward buttons and/or manually manipulating
	 * the URL in a browser's location bar. This is the default.
	 *
	 * See https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate
	 * for more information.
	 */
	var POP = 'POP';
	
	exports.POP = POP;
	exports['default'] = {
	  PUSH: PUSH,
	  REPLACE: REPLACE,
	  POP: POP
	};

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.extractPath = extractPath;
	exports.parsePath = parsePath;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function extractPath(string) {
	  var match = string.match(/^https?:\/\/[^\/]*/);
	
	  if (match == null) return string;
	
	  return string.substring(match[0].length);
	}
	
	function parsePath(path) {
	  var pathname = extractPath(path);
	  var search = '';
	  var hash = '';
	
	  process.env.NODE_ENV !== 'production' ? _warning2['default'](path === pathname, 'A path must be pathname + search + hash only, not a fully qualified URL like "%s"', path) : undefined;
	
	  var hashIndex = pathname.indexOf('#');
	  if (hashIndex !== -1) {
	    hash = pathname.substring(hashIndex);
	    pathname = pathname.substring(0, hashIndex);
	  }
	
	  var searchIndex = pathname.indexOf('?');
	  if (searchIndex !== -1) {
	    search = pathname.substring(searchIndex);
	    pathname = pathname.substring(0, searchIndex);
	  }
	
	  if (pathname === '') pathname = '/';
	
	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 166 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	exports.canUseDOM = canUseDOM;

/***/ },
/* 167 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.addEventListener = addEventListener;
	exports.removeEventListener = removeEventListener;
	exports.getHashPath = getHashPath;
	exports.replaceHashPath = replaceHashPath;
	exports.getWindowPath = getWindowPath;
	exports.go = go;
	exports.getUserConfirmation = getUserConfirmation;
	exports.supportsHistory = supportsHistory;
	exports.supportsGoWithoutReloadUsingHash = supportsGoWithoutReloadUsingHash;
	
	function addEventListener(node, event, listener) {
	  if (node.addEventListener) {
	    node.addEventListener(event, listener, false);
	  } else {
	    node.attachEvent('on' + event, listener);
	  }
	}
	
	function removeEventListener(node, event, listener) {
	  if (node.removeEventListener) {
	    node.removeEventListener(event, listener, false);
	  } else {
	    node.detachEvent('on' + event, listener);
	  }
	}
	
	function getHashPath() {
	  // We can't use window.location.hash here because it's not
	  // consistent across browsers - Firefox will pre-decode it!
	  return window.location.href.split('#')[1] || '';
	}
	
	function replaceHashPath(path) {
	  window.location.replace(window.location.pathname + window.location.search + '#' + path);
	}
	
	function getWindowPath() {
	  return window.location.pathname + window.location.search + window.location.hash;
	}
	
	function go(n) {
	  if (n) window.history.go(n);
	}
	
	function getUserConfirmation(message, callback) {
	  callback(window.confirm(message));
	}
	
	/**
	 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
	 *
	 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
	 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
	 * changed to avoid false negatives for Windows Phones: https://github.com/rackt/react-router/issues/586
	 */
	
	function supportsHistory() {
	  var ua = navigator.userAgent;
	  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
	    return false;
	  }
	  return window.history && 'pushState' in window.history;
	}
	
	/**
	 * Returns false if using go(n) with hash history causes a full page reload.
	 */
	
	function supportsGoWithoutReloadUsingHash() {
	  var ua = navigator.userAgent;
	  return ua.indexOf('Firefox') === -1;
	}

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint-disable no-empty */
	'use strict';
	
	exports.__esModule = true;
	exports.saveState = saveState;
	exports.readState = readState;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var KeyPrefix = '@@History/';
	var QuotaExceededErrors = ['QuotaExceededError', 'QUOTA_EXCEEDED_ERR'];
	
	var SecurityError = 'SecurityError';
	
	function createKey(key) {
	  return KeyPrefix + key;
	}
	
	function saveState(key, state) {
	  try {
	    if (state == null) {
	      window.sessionStorage.removeItem(createKey(key));
	    } else {
	      window.sessionStorage.setItem(createKey(key), JSON.stringify(state));
	    }
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available due to security settings') : undefined;
	
	      return;
	    }
	
	    if (QuotaExceededErrors.indexOf(error.name) >= 0 && window.sessionStorage.length === 0) {
	      // Safari "private mode" throws QuotaExceededError.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to save state; sessionStorage is not available in Safari private mode') : undefined;
	
	      return;
	    }
	
	    throw error;
	  }
	}
	
	function readState(key) {
	  var json = undefined;
	  try {
	    json = window.sessionStorage.getItem(createKey(key));
	  } catch (error) {
	    if (error.name === SecurityError) {
	      // Blocking cookies in Chrome/Firefox/Safari throws SecurityError on any
	      // attempt to access window.sessionStorage.
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] Unable to read state; sessionStorage is not available due to security settings') : undefined;
	
	      return null;
	    }
	  }
	
	  if (json) {
	    try {
	      return JSON.parse(json);
	    } catch (error) {
	      // Ignore invalid JSON.
	    }
	  }
	
	  return null;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _ExecutionEnvironment = __webpack_require__(166);
	
	var _DOMUtils = __webpack_require__(167);
	
	var _createHistory = __webpack_require__(170);
	
	var _createHistory2 = _interopRequireDefault(_createHistory);
	
	function createDOMHistory(options) {
	  var history = _createHistory2['default'](_extends({
	    getUserConfirmation: _DOMUtils.getUserConfirmation
	  }, options, {
	    go: _DOMUtils.go
	  }));
	
	  function listen(listener) {
	    !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'DOM history needs a DOM') : _invariant2['default'](false) : undefined;
	
	    return history.listen(listener);
	  }
	
	  return _extends({}, history, {
	    listen: listen
	  });
	}
	
	exports['default'] = createDOMHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _deepEqual = __webpack_require__(171);
	
	var _deepEqual2 = _interopRequireDefault(_deepEqual);
	
	var _PathUtils = __webpack_require__(165);
	
	var _AsyncUtils = __webpack_require__(174);
	
	var _Actions = __webpack_require__(164);
	
	var _createLocation2 = __webpack_require__(175);
	
	var _createLocation3 = _interopRequireDefault(_createLocation2);
	
	var _runTransitionHook = __webpack_require__(176);
	
	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
	
	var _deprecate = __webpack_require__(177);
	
	var _deprecate2 = _interopRequireDefault(_deprecate);
	
	function createRandomKey(length) {
	  return Math.random().toString(36).substr(2, length);
	}
	
	function locationsAreEqual(a, b) {
	  return a.pathname === b.pathname && a.search === b.search &&
	  //a.action === b.action && // Different action !== location change.
	  a.key === b.key && _deepEqual2['default'](a.state, b.state);
	}
	
	var DefaultKeyLength = 6;
	
	function createHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	  var getCurrentLocation = options.getCurrentLocation;
	  var finishTransition = options.finishTransition;
	  var saveState = options.saveState;
	  var go = options.go;
	  var getUserConfirmation = options.getUserConfirmation;
	  var keyLength = options.keyLength;
	
	  if (typeof keyLength !== 'number') keyLength = DefaultKeyLength;
	
	  var transitionHooks = [];
	
	  function listenBefore(hook) {
	    transitionHooks.push(hook);
	
	    return function () {
	      transitionHooks = transitionHooks.filter(function (item) {
	        return item !== hook;
	      });
	    };
	  }
	
	  var allKeys = [];
	  var changeListeners = [];
	  var location = undefined;
	
	  function getCurrent() {
	    if (pendingLocation && pendingLocation.action === _Actions.POP) {
	      return allKeys.indexOf(pendingLocation.key);
	    } else if (location) {
	      return allKeys.indexOf(location.key);
	    } else {
	      return -1;
	    }
	  }
	
	  function updateLocation(newLocation) {
	    var current = getCurrent();
	
	    location = newLocation;
	
	    if (location.action === _Actions.PUSH) {
	      allKeys = [].concat(allKeys.slice(0, current + 1), [location.key]);
	    } else if (location.action === _Actions.REPLACE) {
	      allKeys[current] = location.key;
	    }
	
	    changeListeners.forEach(function (listener) {
	      listener(location);
	    });
	  }
	
	  function listen(listener) {
	    changeListeners.push(listener);
	
	    if (location) {
	      listener(location);
	    } else {
	      var _location = getCurrentLocation();
	      allKeys = [_location.key];
	      updateLocation(_location);
	    }
	
	    return function () {
	      changeListeners = changeListeners.filter(function (item) {
	        return item !== listener;
	      });
	    };
	  }
	
	  function confirmTransitionTo(location, callback) {
	    _AsyncUtils.loopAsync(transitionHooks.length, function (index, next, done) {
	      _runTransitionHook2['default'](transitionHooks[index], location, function (result) {
	        if (result != null) {
	          done(result);
	        } else {
	          next();
	        }
	      });
	    }, function (message) {
	      if (getUserConfirmation && typeof message === 'string') {
	        getUserConfirmation(message, function (ok) {
	          callback(ok !== false);
	        });
	      } else {
	        callback(message !== false);
	      }
	    });
	  }
	
	  var pendingLocation = undefined;
	
	  function transitionTo(nextLocation) {
	    if (location && locationsAreEqual(location, nextLocation)) return; // Nothing to do.
	
	    pendingLocation = nextLocation;
	
	    confirmTransitionTo(nextLocation, function (ok) {
	      if (pendingLocation !== nextLocation) return; // Transition was interrupted.
	
	      if (ok) {
	        // treat PUSH to current path like REPLACE to be consistent with browsers
	        if (nextLocation.action === _Actions.PUSH) {
	          var prevPath = createPath(location);
	          var nextPath = createPath(nextLocation);
	
	          if (nextPath === prevPath && _deepEqual2['default'](location.state, nextLocation.state)) nextLocation.action = _Actions.REPLACE;
	        }
	
	        if (finishTransition(nextLocation) !== false) updateLocation(nextLocation);
	      } else if (location && nextLocation.action === _Actions.POP) {
	        var prevIndex = allKeys.indexOf(location.key);
	        var nextIndex = allKeys.indexOf(nextLocation.key);
	
	        if (prevIndex !== -1 && nextIndex !== -1) go(prevIndex - nextIndex); // Restore the URL.
	      }
	    });
	  }
	
	  function push(location) {
	    transitionTo(createLocation(location, _Actions.PUSH, createKey()));
	  }
	
	  function replace(location) {
	    transitionTo(createLocation(location, _Actions.REPLACE, createKey()));
	  }
	
	  function goBack() {
	    go(-1);
	  }
	
	  function goForward() {
	    go(1);
	  }
	
	  function createKey() {
	    return createRandomKey(keyLength);
	  }
	
	  function createPath(location) {
	    if (location == null || typeof location === 'string') return location;
	
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	
	    var result = pathname;
	
	    if (search) result += search;
	
	    if (hash) result += hash;
	
	    return result;
	  }
	
	  function createHref(location) {
	    return createPath(location);
	  }
	
	  function createLocation(location, action) {
	    var key = arguments.length <= 2 || arguments[2] === undefined ? createKey() : arguments[2];
	
	    if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object') {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to history.createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;
	
	      if (typeof location === 'string') location = _PathUtils.parsePath(location);
	
	      location = _extends({}, location, { state: action });
	
	      action = key;
	      key = arguments[3] || createKey();
	    }
	
	    return _createLocation3['default'](location, action, key);
	  }
	
	  // deprecated
	  function setState(state) {
	    if (location) {
	      updateLocationState(location, state);
	      updateLocation(location);
	    } else {
	      updateLocationState(getCurrentLocation(), state);
	    }
	  }
	
	  function updateLocationState(location, state) {
	    location.state = _extends({}, location.state, state);
	    saveState(location.key, location.state);
	  }
	
	  // deprecated
	  function registerTransitionHook(hook) {
	    if (transitionHooks.indexOf(hook) === -1) transitionHooks.push(hook);
	  }
	
	  // deprecated
	  function unregisterTransitionHook(hook) {
	    transitionHooks = transitionHooks.filter(function (item) {
	      return item !== hook;
	    });
	  }
	
	  // deprecated
	  function pushState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	    push(_extends({ state: state }, path));
	  }
	
	  // deprecated
	  function replaceState(state, path) {
	    if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	    replace(_extends({ state: state }, path));
	  }
	
	  return {
	    listenBefore: listenBefore,
	    listen: listen,
	    transitionTo: transitionTo,
	    push: push,
	    replace: replace,
	    go: go,
	    goBack: goBack,
	    goForward: goForward,
	    createKey: createKey,
	    createPath: createPath,
	    createHref: createHref,
	    createLocation: createLocation,
	
	    setState: _deprecate2['default'](setState, 'setState is deprecated; use location.key to save state instead'),
	    registerTransitionHook: _deprecate2['default'](registerTransitionHook, 'registerTransitionHook is deprecated; use listenBefore instead'),
	    unregisterTransitionHook: _deprecate2['default'](unregisterTransitionHook, 'unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead'),
	    pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	    replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	  };
	}
	
	exports['default'] = createHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var pSlice = Array.prototype.slice;
	var objectKeys = __webpack_require__(172);
	var isArguments = __webpack_require__(173);
	
	var deepEqual = module.exports = function (actual, expected, opts) {
	  if (!opts) opts = {};
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (actual instanceof Date && expected instanceof Date) {
	    return actual.getTime() === expected.getTime();
	
	    // 7.3. Other pairs that do not both pass typeof value == 'object',
	    // equivalence is determined by ==.
	  } else if (!actual || !expected || (typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) != 'object' && (typeof expected === 'undefined' ? 'undefined' : _typeof(expected)) != 'object') {
	      return opts.strict ? actual === expected : actual == expected;
	
	      // 7.4. For all other Object pairs, including Array objects, equivalence is
	      // determined by having the same number of owned properties (as verified
	      // with Object.prototype.hasOwnProperty.call), the same set of keys
	      // (although not necessarily the same order), equivalent values for every
	      // corresponding key, and an identical 'prototype' property. Note: this
	      // accounts for both named and indexed properties on Arrays.
	    } else {
	        return objEquiv(actual, expected, opts);
	      }
	};
	
	function isUndefinedOrNull(value) {
	  return value === null || value === undefined;
	}
	
	function isBuffer(x) {
	  if (!x || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) !== 'object' || typeof x.length !== 'number') return false;
	  if (typeof x.copy !== 'function' || typeof x.slice !== 'function') {
	    return false;
	  }
	  if (x.length > 0 && typeof x[0] !== 'number') return false;
	  return true;
	}
	
	function objEquiv(a, b, opts) {
	  var i, key;
	  if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  //~~~I've managed to break Object.keys through screwy arguments passing.
	  //   Converting to array solves the problem.
	  if (isArguments(a)) {
	    if (!isArguments(b)) {
	      return false;
	    }
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return deepEqual(a, b, opts);
	  }
	  if (isBuffer(a)) {
	    if (!isBuffer(b)) {
	      return false;
	    }
	    if (a.length !== b.length) return false;
	    for (i = 0; i < a.length; i++) {
	      if (a[i] !== b[i]) return false;
	    }
	    return true;
	  }
	  try {
	    var ka = objectKeys(a),
	        kb = objectKeys(b);
	  } catch (e) {
	    //happens when one is a string literal and the other isn't
	    return false;
	  }
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length) return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i]) return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], opts)) return false;
	  }
	  return (typeof a === 'undefined' ? 'undefined' : _typeof(a)) === (typeof b === 'undefined' ? 'undefined' : _typeof(b));
	}

/***/ },
/* 172 */
/***/ function(module, exports) {

	'use strict';
	
	exports = module.exports = typeof Object.keys === 'function' ? Object.keys : shim;
	
	exports.shim = shim;
	function shim(obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	}

/***/ },
/* 173 */
/***/ function(module, exports) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	var supportsArgumentsClass = function () {
	  return Object.prototype.toString.call(arguments);
	}() == '[object Arguments]';
	
	exports = module.exports = supportsArgumentsClass ? supported : unsupported;
	
	exports.supported = supported;
	function supported(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	};
	
	exports.unsupported = unsupported;
	function unsupported(object) {
	  return object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' && typeof object.length == 'number' && Object.prototype.hasOwnProperty.call(object, 'callee') && !Object.prototype.propertyIsEnumerable.call(object, 'callee') || false;
	};

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;
	
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;
	
	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }
	
	    callback.apply(this, arguments);
	  }
	
	  function next() {
	    if (isDone) {
	      return;
	    }
	
	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }
	
	    sync = true;
	
	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }
	
	    sync = false;
	
	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }
	
	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }
	
	  next();
	}

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _Actions = __webpack_require__(164);
	
	var _PathUtils = __webpack_require__(165);
	
	function createLocation() {
	  var location = arguments.length <= 0 || arguments[0] === undefined ? '/' : arguments[0];
	  var action = arguments.length <= 1 || arguments[1] === undefined ? _Actions.POP : arguments[1];
	  var key = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	  var _fourthArg = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];
	
	  if (typeof location === 'string') location = _PathUtils.parsePath(location);
	
	  if ((typeof action === 'undefined' ? 'undefined' : _typeof(action)) === 'object') {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'The state (2nd) argument to createLocation is deprecated; use a ' + 'location descriptor instead') : undefined;
	
	    location = _extends({}, location, { state: action });
	
	    action = key || _Actions.POP;
	    key = _fourthArg;
	  }
	
	  var pathname = location.pathname || '/';
	  var search = location.search || '';
	  var hash = location.hash || '';
	  var state = location.state || null;
	
	  return {
	    pathname: pathname,
	    search: search,
	    hash: hash,
	    state: state,
	    action: action,
	    key: key
	  };
	}
	
	exports['default'] = createLocation;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function runTransitionHook(hook, location, callback) {
	  var result = hook(location, callback);
	
	  if (hook.length < 2) {
	    // Assume the hook runs synchronously and automatically
	    // call the callback with the return value.
	    callback(result);
	  } else {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](result === undefined, 'You should not "return" in a transition hook with a callback argument; call the callback instead') : undefined;
	  }
	}
	
	exports['default'] = runTransitionHook;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function deprecate(fn, message) {
	  return function () {
	    process.env.NODE_ENV !== 'production' ? _warning2['default'](false, '[history] ' + message) : undefined;
	    return fn.apply(this, arguments);
	  };
	}
	
	exports['default'] = deprecate;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _queryString = __webpack_require__(179);
	
	var _runTransitionHook = __webpack_require__(176);
	
	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
	
	var _PathUtils = __webpack_require__(165);
	
	var _deprecate = __webpack_require__(177);
	
	var _deprecate2 = _interopRequireDefault(_deprecate);
	
	var SEARCH_BASE_KEY = '$searchBase';
	
	function defaultStringifyQuery(query) {
	  return _queryString.stringify(query).replace(/%20/g, '+');
	}
	
	var defaultParseQueryString = _queryString.parse;
	
	function isNestedObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p) && _typeof(object[p]) === 'object' && !Array.isArray(object[p]) && object[p] !== null) return true;
	  }return false;
	}
	
	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know how to handle URL queries.
	 */
	function useQueries(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var history = createHistory(options);
	
	    var stringifyQuery = options.stringifyQuery;
	    var parseQueryString = options.parseQueryString;
	
	    if (typeof stringifyQuery !== 'function') stringifyQuery = defaultStringifyQuery;
	
	    if (typeof parseQueryString !== 'function') parseQueryString = defaultParseQueryString;
	
	    function addQuery(location) {
	      if (location.query == null) {
	        var search = location.search;
	
	        location.query = parseQueryString(search.substring(1));
	        location[SEARCH_BASE_KEY] = { search: search, searchBase: '' };
	      }
	
	      // TODO: Instead of all the book-keeping here, this should just strip the
	      // stringified query from the search.
	
	      return location;
	    }
	
	    function appendQuery(location, query) {
	      var _extends2;
	
	      var searchBaseSpec = location[SEARCH_BASE_KEY];
	      var queryString = query ? stringifyQuery(query) : '';
	      if (!searchBaseSpec && !queryString) {
	        return location;
	      }
	
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](stringifyQuery !== defaultStringifyQuery || !isNestedObject(query), 'useQueries does not stringify nested query objects by default; ' + 'use a custom stringifyQuery function') : undefined;
	
	      if (typeof location === 'string') location = _PathUtils.parsePath(location);
	
	      var searchBase = undefined;
	      if (searchBaseSpec && location.search === searchBaseSpec.search) {
	        searchBase = searchBaseSpec.searchBase;
	      } else {
	        searchBase = location.search || '';
	      }
	
	      var search = searchBase;
	      if (queryString) {
	        search += (search ? '&' : '?') + queryString;
	      }
	
	      return _extends({}, location, (_extends2 = {
	        search: search
	      }, _extends2[SEARCH_BASE_KEY] = { search: search, searchBase: searchBase }, _extends2));
	    }
	
	    // Override all read methods with query-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addQuery(location), callback);
	      });
	    }
	
	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addQuery(location));
	      });
	    }
	
	    // Override all write methods with query-aware versions.
	    function push(location) {
	      history.push(appendQuery(location, location.query));
	    }
	
	    function replace(location) {
	      history.replace(appendQuery(location, location.query));
	    }
	
	    function createPath(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createPath is deprecated; use a location descriptor instead') : undefined;
	
	      return history.createPath(appendQuery(location, query || location.query));
	    }
	
	    function createHref(location, query) {
	      process.env.NODE_ENV !== 'production' ? _warning2['default'](!query, 'the query argument to createHref is deprecated; use a location descriptor instead') : undefined;
	
	      return history.createHref(appendQuery(location, query || location.query));
	    }
	
	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      var fullLocation = history.createLocation.apply(history, [appendQuery(location, location.query)].concat(args));
	      if (location.query) {
	        fullLocation.query = location.query;
	      }
	      return addQuery(fullLocation);
	    }
	
	    // deprecated
	    function pushState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	      push(_extends({ state: state }, path, { query: query }));
	    }
	
	    // deprecated
	    function replaceState(state, path, query) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	      replace(_extends({ state: state }, path, { query: query }));
	    }
	
	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,
	
	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}
	
	exports['default'] = useQueries;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var strictUriEncode = __webpack_require__(180);
	
	exports.extract = function (str) {
		return str.split('?')[1] || '';
	};
	
	exports.parse = function (str) {
		if (typeof str !== 'string') {
			return {};
		}
	
		str = str.trim().replace(/^(\?|#|&)/, '');
	
		if (!str) {
			return {};
		}
	
		return str.split('&').reduce(function (ret, param) {
			var parts = param.replace(/\+/g, ' ').split('=');
			// Firefox (pre 40) decodes `%3D` to `=`
			// https://github.com/sindresorhus/query-string/pull/37
			var key = parts.shift();
			var val = parts.length > 0 ? parts.join('=') : undefined;
	
			key = decodeURIComponent(key);
	
			// missing `=` should be `null`:
			// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
			val = val === undefined ? null : decodeURIComponent(val);
	
			if (!ret.hasOwnProperty(key)) {
				ret[key] = val;
			} else if (Array.isArray(ret[key])) {
				ret[key].push(val);
			} else {
				ret[key] = [ret[key], val];
			}
	
			return ret;
		}, {});
	};
	
	exports.stringify = function (obj) {
		return obj ? Object.keys(obj).sort().map(function (key) {
			var val = obj[key];
	
			if (val === undefined) {
				return '';
			}
	
			if (val === null) {
				return key;
			}
	
			if (Array.isArray(val)) {
				return val.slice().sort().map(function (val2) {
					return strictUriEncode(key) + '=' + strictUriEncode(val2);
				}).join('&');
			}
	
			return strictUriEncode(key) + '=' + strictUriEncode(val);
		}).filter(function (x) {
			return x.length > 0;
		}).join('&') : '';
	};

/***/ },
/* 180 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (str) {
		return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {
			return '%' + c.charCodeAt(0).toString(16).toUpperCase();
		});
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports['default'] = createTransitionManager;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _historyLibActions = __webpack_require__(164);
	
	var _computeChangedRoutes2 = __webpack_require__(183);
	
	var _computeChangedRoutes3 = _interopRequireDefault(_computeChangedRoutes2);
	
	var _TransitionUtils = __webpack_require__(185);
	
	var _isActive2 = __webpack_require__(187);
	
	var _isActive3 = _interopRequireDefault(_isActive2);
	
	var _getComponents = __webpack_require__(188);
	
	var _getComponents2 = _interopRequireDefault(_getComponents);
	
	var _matchRoutes = __webpack_require__(189);
	
	var _matchRoutes2 = _interopRequireDefault(_matchRoutes);
	
	function hasAnyProperties(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return true;
	  }return false;
	}
	
	function createTransitionManager(history, routes) {
	  var state = {};
	
	  // Signature should be (location, indexOnly), but needs to support (path,
	  // query, indexOnly)
	  function isActive(location) {
	    var indexOnlyOrDeprecatedQuery = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	    var deprecatedIndexOnly = arguments.length <= 2 || arguments[2] === undefined ? null : arguments[2];
	
	    var indexOnly = undefined;
	    if (indexOnlyOrDeprecatedQuery && indexOnlyOrDeprecatedQuery !== true || deprecatedIndexOnly !== null) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`isActive(pathname, query, indexOnly) is deprecated; use `isActive(location, indexOnly)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      location = { pathname: location, query: indexOnlyOrDeprecatedQuery };
	      indexOnly = deprecatedIndexOnly || false;
	    } else {
	      location = history.createLocation(location);
	      indexOnly = indexOnlyOrDeprecatedQuery;
	    }
	
	    return _isActive3['default'](location, indexOnly, state.location, state.routes, state.params);
	  }
	
	  function createLocationFromRedirectInfo(location) {
	    return history.createLocation(location, _historyLibActions.REPLACE);
	  }
	
	  var partialNextState = undefined;
	
	  function match(location, callback) {
	    if (partialNextState && partialNextState.location === location) {
	      // Continue from where we left off.
	      finishMatch(partialNextState, callback);
	    } else {
	      _matchRoutes2['default'](routes, location, function (error, nextState) {
	        if (error) {
	          callback(error);
	        } else if (nextState) {
	          finishMatch(_extends({}, nextState, { location: location }), callback);
	        } else {
	          callback();
	        }
	      });
	    }
	  }
	
	  function finishMatch(nextState, callback) {
	    var _computeChangedRoutes = _computeChangedRoutes3['default'](state, nextState);
	
	    var leaveRoutes = _computeChangedRoutes.leaveRoutes;
	    var enterRoutes = _computeChangedRoutes.enterRoutes;
	
	    _TransitionUtils.runLeaveHooks(leaveRoutes);
	
	    // Tear down confirmation hooks for left routes
	    leaveRoutes.filter(function (route) {
	      return enterRoutes.indexOf(route) === -1;
	    }).forEach(removeListenBeforeHooksForRoute);
	
	    _TransitionUtils.runEnterHooks(enterRoutes, nextState, function (error, redirectInfo) {
	      if (error) {
	        callback(error);
	      } else if (redirectInfo) {
	        callback(null, createLocationFromRedirectInfo(redirectInfo));
	      } else {
	        // TODO: Fetch components after state is updated.
	        _getComponents2['default'](nextState, function (error, components) {
	          if (error) {
	            callback(error);
	          } else {
	            // TODO: Make match a pure function and have some other API
	            // for "match and update state".
	            callback(null, null, state = _extends({}, nextState, { components: components }));
	          }
	        });
	      }
	    });
	  }
	
	  var RouteGuid = 1;
	
	  function getRouteID(route) {
	    var create = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];
	
	    return route.__id__ || create && (route.__id__ = RouteGuid++);
	  }
	
	  var RouteHooks = {};
	
	  function getRouteHooksForRoutes(routes) {
	    return routes.reduce(function (hooks, route) {
	      hooks.push.apply(hooks, RouteHooks[getRouteID(route)]);
	      return hooks;
	    }, []);
	  }
	
	  function transitionHook(location, callback) {
	    _matchRoutes2['default'](routes, location, function (error, nextState) {
	      if (nextState == null) {
	        // TODO: We didn't actually match anything, but hang
	        // onto error/nextState so we don't have to matchRoutes
	        // again in the listen callback.
	        callback();
	        return;
	      }
	
	      // Cache some state here so we don't have to
	      // matchRoutes() again in the listen callback.
	      partialNextState = _extends({}, nextState, { location: location });
	
	      var hooks = getRouteHooksForRoutes(_computeChangedRoutes3['default'](state, partialNextState).leaveRoutes);
	
	      var result = undefined;
	      for (var i = 0, len = hooks.length; result == null && i < len; ++i) {
	        // Passing the location arg here indicates to
	        // the user that this is a transition hook.
	        result = hooks[i](location);
	      }
	
	      callback(result);
	    });
	  }
	
	  /* istanbul ignore next: untestable with Karma */
	  function beforeUnloadHook() {
	    // Synchronously check to see if any route hooks want
	    // to prevent the current window/tab from closing.
	    if (state.routes) {
	      var hooks = getRouteHooksForRoutes(state.routes);
	
	      var message = undefined;
	      for (var i = 0, len = hooks.length; typeof message !== 'string' && i < len; ++i) {
	        // Passing no args indicates to the user that this is a
	        // beforeunload hook. We don't know the next location.
	        message = hooks[i]();
	      }
	
	      return message;
	    }
	  }
	
	  var unlistenBefore = undefined,
	      unlistenBeforeUnload = undefined;
	
	  function removeListenBeforeHooksForRoute(route) {
	    var routeID = getRouteID(route, false);
	    if (!routeID) {
	      return;
	    }
	
	    delete RouteHooks[routeID];
	
	    if (!hasAnyProperties(RouteHooks)) {
	      // teardown transition & beforeunload hooks
	      if (unlistenBefore) {
	        unlistenBefore();
	        unlistenBefore = null;
	      }
	
	      if (unlistenBeforeUnload) {
	        unlistenBeforeUnload();
	        unlistenBeforeUnload = null;
	      }
	    }
	  }
	
	  /**
	   * Registers the given hook function to run before leaving the given route.
	   *
	   * During a normal transition, the hook function receives the next location
	   * as its only argument and must return either a) a prompt message to show
	   * the user, to make sure they want to leave the page or b) false, to prevent
	   * the transition.
	   *
	   * During the beforeunload event (in browsers) the hook receives no arguments.
	   * In this case it must return a prompt message to prevent the transition.
	   *
	   * Returns a function that may be used to unbind the listener.
	   */
	  function listenBeforeLeavingRoute(route, hook) {
	    // TODO: Warn if they register for a route that isn't currently
	    // active. They're probably doing something wrong, like re-creating
	    // route objects on every location change.
	    var routeID = getRouteID(route);
	    var hooks = RouteHooks[routeID];
	
	    if (!hooks) {
	      var thereWereNoRouteHooks = !hasAnyProperties(RouteHooks);
	
	      RouteHooks[routeID] = [hook];
	
	      if (thereWereNoRouteHooks) {
	        // setup transition & beforeunload hooks
	        unlistenBefore = history.listenBefore(transitionHook);
	
	        if (history.listenBeforeUnload) unlistenBeforeUnload = history.listenBeforeUnload(beforeUnloadHook);
	      }
	    } else {
	      if (hooks.indexOf(hook) === -1) {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'adding multiple leave hooks for the same route is deprecated; manage multiple confirmations in your own code instead') : undefined;
	
	        hooks.push(hook);
	      }
	    }
	
	    return function () {
	      var hooks = RouteHooks[routeID];
	
	      if (hooks) {
	        var newHooks = hooks.filter(function (item) {
	          return item !== hook;
	        });
	
	        if (newHooks.length === 0) {
	          removeListenBeforeHooksForRoute(route);
	        } else {
	          RouteHooks[routeID] = newHooks;
	        }
	      }
	    };
	  }
	
	  /**
	   * This is the API for stateful environments. As the location
	   * changes, we update state and call the listener. We can also
	   * gracefully handle errors and redirects.
	   */
	  function listen(listener) {
	    // TODO: Only use a single history listener. Otherwise we'll
	    // end up with multiple concurrent calls to match.
	    return history.listen(function (location) {
	      if (state.location === location) {
	        listener(null, state);
	      } else {
	        match(location, function (error, redirectLocation, nextState) {
	          if (error) {
	            listener(error);
	          } else if (redirectLocation) {
	            history.transitionTo(redirectLocation);
	          } else if (nextState) {
	            listener(null, nextState);
	          } else {
	            process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'Location "%s" did not match any routes', location.pathname + location.search + location.hash) : undefined;
	          }
	        });
	      }
	    });
	  }
	
	  return {
	    isActive: isActive,
	    match: match,
	    listenBeforeLeavingRoute: listenBeforeLeavingRoute,
	    listen: listen
	  };
	}
	
	//export default useRoutes
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports['default'] = routerWarning;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	function routerWarning(falseToWarn, message) {
	  message = '[react-router] ' + message;
	
	  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }
	
	  process.env.NODE_ENV !== 'production' ? _warning2['default'].apply(undefined, [falseToWarn, message].concat(args)) : undefined;
	}
	
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _PatternUtils = __webpack_require__(184);
	
	function routeParamsChanged(route, prevState, nextState) {
	  if (!route.path) return false;
	
	  var paramNames = _PatternUtils.getParamNames(route.path);
	
	  return paramNames.some(function (paramName) {
	    return prevState.params[paramName] !== nextState.params[paramName];
	  });
	}
	
	/**
	 * Returns an object of { leaveRoutes, enterRoutes } determined by
	 * the change from prevState to nextState. We leave routes if either
	 * 1) they are not in the next state or 2) they are in the next state
	 * but their params have changed (i.e. /users/123 => /users/456).
	 *
	 * leaveRoutes are ordered starting at the leaf route of the tree
	 * we're leaving up to the common parent route. enterRoutes are ordered
	 * from the top of the tree we're entering down to the leaf route.
	 */
	function computeChangedRoutes(prevState, nextState) {
	  var prevRoutes = prevState && prevState.routes;
	  var nextRoutes = nextState.routes;
	
	  var leaveRoutes = undefined,
	      enterRoutes = undefined;
	  if (prevRoutes) {
	    (function () {
	      var parentIsLeaving = false;
	      leaveRoutes = prevRoutes.filter(function (route) {
	        if (parentIsLeaving) {
	          return true;
	        } else {
	          var isLeaving = nextRoutes.indexOf(route) === -1 || routeParamsChanged(route, prevState, nextState);
	          if (isLeaving) parentIsLeaving = true;
	          return isLeaving;
	        }
	      });
	
	      // onLeave hooks start at the leaf route.
	      leaveRoutes.reverse();
	
	      enterRoutes = nextRoutes.filter(function (route) {
	        return prevRoutes.indexOf(route) === -1 || leaveRoutes.indexOf(route) !== -1;
	      });
	    })();
	  } else {
	    leaveRoutes = [];
	    enterRoutes = nextRoutes;
	  }
	
	  return {
	    leaveRoutes: leaveRoutes,
	    enterRoutes: enterRoutes
	  };
	}
	
	exports['default'] = computeChangedRoutes;
	module.exports = exports['default'];

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.compilePattern = compilePattern;
	exports.matchPattern = matchPattern;
	exports.getParamNames = getParamNames;
	exports.getParams = getParams;
	exports.formatPattern = formatPattern;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
	}
	
	function escapeSource(string) {
	  return escapeRegExp(string).replace(/\/+/g, '/+');
	}
	
	function _compilePattern(pattern) {
	  var regexpSource = '';
	  var paramNames = [];
	  var tokens = [];
	
	  var match = undefined,
	      lastIndex = 0,
	      matcher = /:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;
	  while (match = matcher.exec(pattern)) {
	    if (match.index !== lastIndex) {
	      tokens.push(pattern.slice(lastIndex, match.index));
	      regexpSource += escapeSource(pattern.slice(lastIndex, match.index));
	    }
	
	    if (match[1]) {
	      regexpSource += '([^/?#]+)';
	      paramNames.push(match[1]);
	    } else if (match[0] === '**') {
	      regexpSource += '([\\s\\S]*)';
	      paramNames.push('splat');
	    } else if (match[0] === '*') {
	      regexpSource += '([\\s\\S]*?)';
	      paramNames.push('splat');
	    } else if (match[0] === '(') {
	      regexpSource += '(?:';
	    } else if (match[0] === ')') {
	      regexpSource += ')?';
	    }
	
	    tokens.push(match[0]);
	
	    lastIndex = matcher.lastIndex;
	  }
	
	  if (lastIndex !== pattern.length) {
	    tokens.push(pattern.slice(lastIndex, pattern.length));
	    regexpSource += escapeSource(pattern.slice(lastIndex, pattern.length));
	  }
	
	  return {
	    pattern: pattern,
	    regexpSource: regexpSource,
	    paramNames: paramNames,
	    tokens: tokens
	  };
	}
	
	var CompiledPatternsCache = {};
	
	function compilePattern(pattern) {
	  if (!(pattern in CompiledPatternsCache)) CompiledPatternsCache[pattern] = _compilePattern(pattern);
	
	  return CompiledPatternsCache[pattern];
	}
	
	/**
	 * Attempts to match a pattern on the given pathname. Patterns may use
	 * the following special characters:
	 *
	 * - :paramName     Matches a URL segment up to the next /, ?, or #. The
	 *                  captured string is considered a "param"
	 * - ()             Wraps a segment of the URL that is optional
	 * - *              Consumes (non-greedy) all characters up to the next
	 *                  character in the pattern, or to the end of the URL if
	 *                  there is none
	 * - **             Consumes (greedy) all characters up to the next character
	 *                  in the pattern, or to the end of the URL if there is none
	 *
	 * The return value is an object with the following properties:
	 *
	 * - remainingPathname
	 * - paramNames
	 * - paramValues
	 */
	
	function matchPattern(pattern, pathname) {
	  // Make leading slashes consistent between pattern and pathname.
	  if (pattern.charAt(0) !== '/') {
	    pattern = '/' + pattern;
	  }
	  if (pathname.charAt(0) !== '/') {
	    pathname = '/' + pathname;
	  }
	
	  var _compilePattern2 = compilePattern(pattern);
	
	  var regexpSource = _compilePattern2.regexpSource;
	  var paramNames = _compilePattern2.paramNames;
	  var tokens = _compilePattern2.tokens;
	
	  regexpSource += '/*'; // Capture path separators
	
	  // Special-case patterns like '*' for catch-all routes.
	  var captureRemaining = tokens[tokens.length - 1] !== '*';
	
	  if (captureRemaining) {
	    // This will match newlines in the remaining path.
	    regexpSource += '([\\s\\S]*?)';
	  }
	
	  var match = pathname.match(new RegExp('^' + regexpSource + '$', 'i'));
	
	  var remainingPathname = undefined,
	      paramValues = undefined;
	  if (match != null) {
	    if (captureRemaining) {
	      remainingPathname = match.pop();
	      var matchedPath = match[0].substr(0, match[0].length - remainingPathname.length);
	
	      // If we didn't match the entire pathname, then make sure that the match
	      // we did get ends at a path separator (potentially the one we added
	      // above at the beginning of the path, if the actual match was empty).
	      if (remainingPathname && matchedPath.charAt(matchedPath.length - 1) !== '/') {
	        return {
	          remainingPathname: null,
	          paramNames: paramNames,
	          paramValues: null
	        };
	      }
	    } else {
	      // If this matched at all, then the match was the entire pathname.
	      remainingPathname = '';
	    }
	
	    paramValues = match.slice(1).map(function (v) {
	      return v != null ? decodeURIComponent(v) : v;
	    });
	  } else {
	    remainingPathname = paramValues = null;
	  }
	
	  return {
	    remainingPathname: remainingPathname,
	    paramNames: paramNames,
	    paramValues: paramValues
	  };
	}
	
	function getParamNames(pattern) {
	  return compilePattern(pattern).paramNames;
	}
	
	function getParams(pattern, pathname) {
	  var _matchPattern = matchPattern(pattern, pathname);
	
	  var paramNames = _matchPattern.paramNames;
	  var paramValues = _matchPattern.paramValues;
	
	  if (paramValues != null) {
	    return paramNames.reduce(function (memo, paramName, index) {
	      memo[paramName] = paramValues[index];
	      return memo;
	    }, {});
	  }
	
	  return null;
	}
	
	/**
	 * Returns a version of the given pattern with params interpolated. Throws
	 * if there is a dynamic segment of the pattern for which there is no param.
	 */
	
	function formatPattern(pattern, params) {
	  params = params || {};
	
	  var _compilePattern3 = compilePattern(pattern);
	
	  var tokens = _compilePattern3.tokens;
	
	  var parenCount = 0,
	      pathname = '',
	      splatIndex = 0;
	
	  var token = undefined,
	      paramName = undefined,
	      paramValue = undefined;
	  for (var i = 0, len = tokens.length; i < len; ++i) {
	    token = tokens[i];
	
	    if (token === '*' || token === '**') {
	      paramValue = Array.isArray(params.splat) ? params.splat[splatIndex++] : params.splat;
	
	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing splat #%s for path "%s"', splatIndex, pattern) : _invariant2['default'](false) : undefined;
	
	      if (paramValue != null) pathname += encodeURI(paramValue);
	    } else if (token === '(') {
	      parenCount += 1;
	    } else if (token === ')') {
	      parenCount -= 1;
	    } else if (token.charAt(0) === ':') {
	      paramName = token.substring(1);
	      paramValue = params[paramName];
	
	      !(paramValue != null || parenCount > 0) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Missing "%s" parameter for path "%s"', paramName, pattern) : _invariant2['default'](false) : undefined;
	
	      if (paramValue != null) pathname += encodeURIComponent(paramValue);
	    } else {
	      pathname += token;
	    }
	  }
	
	  return pathname.replace(/\/+/g, '/');
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	exports.runEnterHooks = runEnterHooks;
	exports.runLeaveHooks = runLeaveHooks;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _AsyncUtils = __webpack_require__(186);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	function createEnterHook(hook, route) {
	  return function (a, b, callback) {
	    hook.apply(route, arguments);
	
	    if (hook.length < 3) {
	      // Assume hook executes synchronously and
	      // automatically call the callback.
	      callback();
	    }
	  };
	}
	
	function getEnterHooks(routes) {
	  return routes.reduce(function (hooks, route) {
	    if (route.onEnter) hooks.push(createEnterHook(route.onEnter, route));
	
	    return hooks;
	  }, []);
	}
	
	/**
	 * Runs all onEnter hooks in the given array of routes in order
	 * with onEnter(nextState, replace, callback) and calls
	 * callback(error, redirectInfo) when finished. The first hook
	 * to use replace short-circuits the loop.
	 *
	 * If a hook needs to run asynchronously, it may use the callback
	 * function. However, doing so will cause the transition to pause,
	 * which could lead to a non-responsive UI if the hook is slow.
	 */
	
	function runEnterHooks(routes, nextState, callback) {
	  var hooks = getEnterHooks(routes);
	
	  if (!hooks.length) {
	    callback();
	    return;
	  }
	
	  var redirectInfo = undefined;
	  function replace(location, deprecatedPathname, deprecatedQuery) {
	    if (deprecatedPathname) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`replaceState(state, pathname, query) is deprecated; use `replace(location)` with a location descriptor instead. http://tiny.cc/router-isActivedeprecated') : undefined;
	      redirectInfo = {
	        pathname: deprecatedPathname,
	        query: deprecatedQuery,
	        state: location
	      };
	
	      return;
	    }
	
	    redirectInfo = location;
	  }
	
	  _AsyncUtils.loopAsync(hooks.length, function (index, next, done) {
	    hooks[index](nextState, replace, function (error) {
	      if (error || redirectInfo) {
	        done(error, redirectInfo); // No need to continue.
	      } else {
	          next();
	        }
	    });
	  }, callback);
	}
	
	/**
	 * Runs all onLeave hooks in the given array of routes in order.
	 */
	
	function runLeaveHooks(routes) {
	  for (var i = 0, len = routes.length; i < len; ++i) {
	    if (routes[i].onLeave) routes[i].onLeave.call(routes[i]);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 186 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	var _slice = Array.prototype.slice;
	exports.loopAsync = loopAsync;
	exports.mapAsync = mapAsync;
	
	function loopAsync(turns, work, callback) {
	  var currentTurn = 0,
	      isDone = false;
	  var sync = false,
	      hasNext = false,
	      doneArgs = undefined;
	
	  function done() {
	    isDone = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      doneArgs = [].concat(_slice.call(arguments));
	      return;
	    }
	
	    callback.apply(this, arguments);
	  }
	
	  function next() {
	    if (isDone) {
	      return;
	    }
	
	    hasNext = true;
	    if (sync) {
	      // Iterate instead of recursing if possible.
	      return;
	    }
	
	    sync = true;
	
	    while (!isDone && currentTurn < turns && hasNext) {
	      hasNext = false;
	      work.call(this, currentTurn++, next, done);
	    }
	
	    sync = false;
	
	    if (isDone) {
	      // This means the loop finished synchronously.
	      callback.apply(this, doneArgs);
	      return;
	    }
	
	    if (currentTurn >= turns && hasNext) {
	      isDone = true;
	      callback();
	    }
	  }
	
	  next();
	}
	
	function mapAsync(array, work, callback) {
	  var length = array.length;
	  var values = [];
	
	  if (length === 0) return callback(null, values);
	
	  var isDone = false,
	      doneCount = 0;
	
	  function done(index, error, value) {
	    if (isDone) return;
	
	    if (error) {
	      isDone = true;
	      callback(error);
	    } else {
	      values[index] = value;
	
	      isDone = ++doneCount === length;
	
	      if (isDone) callback(null, values);
	    }
	  }
	
	  array.forEach(function (item, index) {
	    work(item, index, function (error, value) {
	      done(index, error, value);
	    });
	  });
	}

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	exports['default'] = isActive;
	
	var _PatternUtils = __webpack_require__(184);
	
	function deepEqual(a, b) {
	  if (a == b) return true;
	
	  if (a == null || b == null) return false;
	
	  if (Array.isArray(a)) {
	    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
	      return deepEqual(item, b[index]);
	    });
	  }
	
	  if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object') {
	    for (var p in a) {
	      if (!a.hasOwnProperty(p)) {
	        continue;
	      }
	
	      if (a[p] === undefined) {
	        if (b[p] !== undefined) {
	          return false;
	        }
	      } else if (!b.hasOwnProperty(p)) {
	        return false;
	      } else if (!deepEqual(a[p], b[p])) {
	        return false;
	      }
	    }
	
	    return true;
	  }
	
	  return String(a) === String(b);
	}
	
	function paramsAreActive(paramNames, paramValues, activeParams) {
	  // FIXME: This doesn't work on repeated params in activeParams.
	  return paramNames.every(function (paramName, index) {
	    return String(paramValues[index]) === String(activeParams[paramName]);
	  });
	}
	
	function getMatchingRouteIndex(pathname, activeRoutes, activeParams) {
	  var remainingPathname = pathname,
	      paramNames = [],
	      paramValues = [];
	
	  for (var i = 0, len = activeRoutes.length; i < len; ++i) {
	    var route = activeRoutes[i];
	    var pattern = route.path || '';
	
	    if (pattern.charAt(0) === '/') {
	      remainingPathname = pathname;
	      paramNames = [];
	      paramValues = [];
	    }
	
	    if (remainingPathname !== null) {
	      var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	      remainingPathname = matched.remainingPathname;
	      paramNames = [].concat(paramNames, matched.paramNames);
	      paramValues = [].concat(paramValues, matched.paramValues);
	    }
	
	    if (remainingPathname === '' && route.path && paramsAreActive(paramNames, paramValues, activeParams)) return i;
	  }
	
	  return null;
	}
	
	/**
	 * Returns true if the given pathname matches the active routes
	 * and params.
	 */
	function routeIsActive(pathname, routes, params, indexOnly) {
	  var i = getMatchingRouteIndex(pathname, routes, params);
	
	  if (i === null) {
	    // No match.
	    return false;
	  } else if (!indexOnly) {
	    // Any match is good enough.
	    return true;
	  }
	
	  // If any remaining routes past the match index have paths, then we can't
	  // be on the index route.
	  return routes.slice(i + 1).every(function (route) {
	    return !route.path;
	  });
	}
	
	/**
	 * Returns true if all key/value pairs in the given query are
	 * currently active.
	 */
	function queryIsActive(query, activeQuery) {
	  if (activeQuery == null) return query == null;
	
	  if (query == null) return true;
	
	  return deepEqual(query, activeQuery);
	}
	
	/**
	 * Returns true if a <Link> to the given pathname/query combination is
	 * currently active.
	 */
	
	function isActive(_ref, indexOnly, currentLocation, routes, params) {
	  var pathname = _ref.pathname;
	  var query = _ref.query;
	
	  if (currentLocation == null) return false;
	
	  if (!routeIsActive(pathname, routes, params, indexOnly)) return false;
	
	  return queryIsActive(query, currentLocation.query);
	}
	
	module.exports = exports['default'];

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _AsyncUtils = __webpack_require__(186);
	
	function getComponentsForRoute(location, route, callback) {
	  if (route.component || route.components) {
	    callback(null, route.component || route.components);
	  } else if (route.getComponent) {
	    route.getComponent(location, callback);
	  } else if (route.getComponents) {
	    route.getComponents(location, callback);
	  } else {
	    callback();
	  }
	}
	
	/**
	 * Asynchronously fetches all components needed for the given router
	 * state and calls callback(error, components) when finished.
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getComponents method.
	 */
	function getComponents(nextState, callback) {
	  _AsyncUtils.mapAsync(nextState.routes, function (route, index, callback) {
	    getComponentsForRoute(nextState.location, route, callback);
	  }, callback);
	}
	
	exports['default'] = getComponents;
	module.exports = exports['default'];

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _AsyncUtils = __webpack_require__(186);
	
	var _PatternUtils = __webpack_require__(184);
	
	var _RouteUtils = __webpack_require__(190);
	
	function getChildRoutes(route, location, callback) {
	  if (route.childRoutes) {
	    return [null, route.childRoutes];
	  }
	  if (!route.getChildRoutes) {
	    return [];
	  }
	
	  var sync = true,
	      result = undefined;
	
	  route.getChildRoutes(location, function (error, childRoutes) {
	    childRoutes = !error && _RouteUtils.createRoutes(childRoutes);
	    if (sync) {
	      result = [error, childRoutes];
	      return;
	    }
	
	    callback(error, childRoutes);
	  });
	
	  sync = false;
	  return result; // Might be undefined.
	}
	
	function getIndexRoute(route, location, callback) {
	  if (route.indexRoute) {
	    callback(null, route.indexRoute);
	  } else if (route.getIndexRoute) {
	    route.getIndexRoute(location, function (error, indexRoute) {
	      callback(error, !error && _RouteUtils.createRoutes(indexRoute)[0]);
	    });
	  } else if (route.childRoutes) {
	    (function () {
	      var pathless = route.childRoutes.filter(function (obj) {
	        return !obj.hasOwnProperty('path');
	      });
	
	      _AsyncUtils.loopAsync(pathless.length, function (index, next, done) {
	        getIndexRoute(pathless[index], location, function (error, indexRoute) {
	          if (error || indexRoute) {
	            var routes = [pathless[index]].concat(Array.isArray(indexRoute) ? indexRoute : [indexRoute]);
	            done(error, routes);
	          } else {
	            next();
	          }
	        });
	      }, function (err, routes) {
	        callback(null, routes);
	      });
	    })();
	  } else {
	    callback();
	  }
	}
	
	function assignParams(params, paramNames, paramValues) {
	  return paramNames.reduce(function (params, paramName, index) {
	    var paramValue = paramValues && paramValues[index];
	
	    if (Array.isArray(params[paramName])) {
	      params[paramName].push(paramValue);
	    } else if (paramName in params) {
	      params[paramName] = [params[paramName], paramValue];
	    } else {
	      params[paramName] = paramValue;
	    }
	
	    return params;
	  }, params);
	}
	
	function createParams(paramNames, paramValues) {
	  return assignParams({}, paramNames, paramValues);
	}
	
	function matchRouteDeep(route, location, remainingPathname, paramNames, paramValues, callback) {
	  var pattern = route.path || '';
	
	  if (pattern.charAt(0) === '/') {
	    remainingPathname = location.pathname;
	    paramNames = [];
	    paramValues = [];
	  }
	
	  if (remainingPathname !== null) {
	    var matched = _PatternUtils.matchPattern(pattern, remainingPathname);
	    remainingPathname = matched.remainingPathname;
	    paramNames = [].concat(paramNames, matched.paramNames);
	    paramValues = [].concat(paramValues, matched.paramValues);
	
	    if (remainingPathname === '' && route.path) {
	      var _ret2 = function () {
	        var match = {
	          routes: [route],
	          params: createParams(paramNames, paramValues)
	        };
	
	        getIndexRoute(route, location, function (error, indexRoute) {
	          if (error) {
	            callback(error);
	          } else {
	            if (Array.isArray(indexRoute)) {
	              var _match$routes;
	
	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](indexRoute.every(function (route) {
	                return !route.path;
	              }), 'Index routes should not have paths') : undefined;
	              (_match$routes = match.routes).push.apply(_match$routes, indexRoute);
	            } else if (indexRoute) {
	              process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!indexRoute.path, 'Index routes should not have paths') : undefined;
	              match.routes.push(indexRoute);
	            }
	
	            callback(null, match);
	          }
	        });
	        return {
	          v: undefined
	        };
	      }();
	
	      if ((typeof _ret2 === 'undefined' ? 'undefined' : _typeof(_ret2)) === 'object') return _ret2.v;
	    }
	  }
	
	  if (remainingPathname != null || route.childRoutes) {
	    // Either a) this route matched at least some of the path or b)
	    // we don't have to load this route's children asynchronously. In
	    // either case continue checking for matches in the subtree.
	    var onChildRoutes = function onChildRoutes(error, childRoutes) {
	      if (error) {
	        callback(error);
	      } else if (childRoutes) {
	        // Check the child routes to see if any of them match.
	        matchRoutes(childRoutes, location, function (error, match) {
	          if (error) {
	            callback(error);
	          } else if (match) {
	            // A child route matched! Augment the match and pass it up the stack.
	            match.routes.unshift(route);
	            callback(null, match);
	          } else {
	            callback();
	          }
	        }, remainingPathname, paramNames, paramValues);
	      } else {
	        callback();
	      }
	    };
	
	    var result = getChildRoutes(route, location, onChildRoutes);
	    if (result) {
	      onChildRoutes.apply(undefined, result);
	    }
	  } else {
	    callback();
	  }
	}
	
	/**
	 * Asynchronously matches the given location to a set of routes and calls
	 * callback(error, state) when finished. The state object will have the
	 * following properties:
	 *
	 * - routes       An array of routes that matched, in hierarchical order
	 * - params       An object of URL parameters
	 *
	 * Note: This operation may finish synchronously if no routes have an
	 * asynchronous getChildRoutes method.
	 */
	function matchRoutes(routes, location, callback) {
	  var remainingPathname = arguments.length <= 3 || arguments[3] === undefined ? location.pathname : arguments[3];
	  var paramNames = arguments.length <= 4 || arguments[4] === undefined ? [] : arguments[4];
	  var paramValues = arguments.length <= 5 || arguments[5] === undefined ? [] : arguments[5];
	  return function () {
	    _AsyncUtils.loopAsync(routes.length, function (index, next, done) {
	      matchRouteDeep(routes[index], location, remainingPathname, paramNames, paramValues, function (error, match) {
	        if (error || match) {
	          done(error, match);
	        } else {
	          next();
	        }
	      });
	    }, callback);
	  }();
	}
	
	exports['default'] = matchRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports.isReactChildren = isReactChildren;
	exports.createRouteFromReactElement = createRouteFromReactElement;
	exports.createRoutesFromReactChildren = createRoutesFromReactChildren;
	exports.createRoutes = createRoutes;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	function isValidChild(object) {
	  return object == null || _react2['default'].isValidElement(object);
	}
	
	function isReactChildren(object) {
	  return isValidChild(object) || Array.isArray(object) && object.every(isValidChild);
	}
	
	function checkPropTypes(componentName, propTypes, props) {
	  componentName = componentName || 'UnknownComponent';
	
	  for (var propName in propTypes) {
	    if (propTypes.hasOwnProperty(propName)) {
	      var error = propTypes[propName](props, propName, componentName);
	
	      /* istanbul ignore if: error logging */
	      if (error instanceof Error) process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, error.message) : undefined;
	    }
	  }
	}
	
	function createRoute(defaultProps, props) {
	  return _extends({}, defaultProps, props);
	}
	
	function createRouteFromReactElement(element) {
	  var type = element.type;
	  var route = createRoute(type.defaultProps, element.props);
	
	  if (type.propTypes) checkPropTypes(type.displayName || type.name, type.propTypes, route);
	
	  if (route.children) {
	    var childRoutes = createRoutesFromReactChildren(route.children, route);
	
	    if (childRoutes.length) route.childRoutes = childRoutes;
	
	    delete route.children;
	  }
	
	  return route;
	}
	
	/**
	 * Creates and returns a routes object from the given ReactChildren. JSX
	 * provides a convenient way to visualize how routes in the hierarchy are
	 * nested.
	 *
	 *   import { Route, createRoutesFromReactChildren } from 'react-router'
	 *   
	 *   const routes = createRoutesFromReactChildren(
	 *     <Route component={App}>
	 *       <Route path="home" component={Dashboard}/>
	 *       <Route path="news" component={NewsFeed}/>
	 *     </Route>
	 *   )
	 *
	 * Note: This method is automatically used when you provide <Route> children
	 * to a <Router> component.
	 */
	
	function createRoutesFromReactChildren(children, parentRoute) {
	  var routes = [];
	
	  _react2['default'].Children.forEach(children, function (element) {
	    if (_react2['default'].isValidElement(element)) {
	      // Component classes may have a static create* method.
	      if (element.type.createRouteFromReactElement) {
	        var route = element.type.createRouteFromReactElement(element, parentRoute);
	
	        if (route) routes.push(route);
	      } else {
	        routes.push(createRouteFromReactElement(element));
	      }
	    }
	  });
	
	  return routes;
	}
	
	/**
	 * Creates and returns an array of routes from the given object which
	 * may be a JSX route, a plain object route, or an array of either.
	 */
	
	function createRoutes(routes) {
	  if (isReactChildren(routes)) {
	    routes = createRoutesFromReactChildren(routes);
	  } else if (routes && !Array.isArray(routes)) {
	    routes = [routes];
	  }
	
	  return routes;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.falsy = falsy;
	
	var _react = __webpack_require__(1);
	
	var func = _react.PropTypes.func;
	var object = _react.PropTypes.object;
	var arrayOf = _react.PropTypes.arrayOf;
	var oneOfType = _react.PropTypes.oneOfType;
	var element = _react.PropTypes.element;
	var shape = _react.PropTypes.shape;
	var string = _react.PropTypes.string;
	
	function falsy(props, propName, componentName) {
	  if (props[propName]) return new Error('<' + componentName + '> should not have a "' + propName + '" prop');
	}
	
	var history = shape({
	  listen: func.isRequired,
	  pushState: func.isRequired,
	  replaceState: func.isRequired,
	  go: func.isRequired
	});
	
	exports.history = history;
	var location = shape({
	  pathname: string.isRequired,
	  search: string.isRequired,
	  state: object,
	  action: string.isRequired,
	  key: string
	});
	
	exports.location = location;
	var component = oneOfType([func, string]);
	exports.component = component;
	var components = oneOfType([component, object]);
	exports.components = components;
	var route = oneOfType([object, element]);
	exports.route = route;
	var routes = oneOfType([route, arrayOf(route)]);
	
	exports.routes = routes;
	exports['default'] = {
	  falsy: falsy,
	  history: history,
	  location: location,
	  component: component,
	  components: components,
	  route: route
	};

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _deprecateObjectProperties = __webpack_require__(193);
	
	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);
	
	var _getRouteParams = __webpack_require__(194);
	
	var _getRouteParams2 = _interopRequireDefault(_getRouteParams);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var array = _React$PropTypes.array;
	var func = _React$PropTypes.func;
	var object = _React$PropTypes.object;
	
	/**
	 * A <RouterContext> renders the component tree for a given router state
	 * and sets the history object and the current location in context.
	 */
	var RouterContext = _react2['default'].createClass({
	  displayName: 'RouterContext',
	
	  propTypes: {
	    history: object,
	    router: object.isRequired,
	    location: object.isRequired,
	    routes: array.isRequired,
	    params: object.isRequired,
	    components: array.isRequired,
	    createElement: func.isRequired
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      createElement: _react2['default'].createElement
	    };
	  },
	
	  childContextTypes: {
	    history: object,
	    location: object.isRequired,
	    router: object.isRequired
	  },
	
	  getChildContext: function getChildContext() {
	    var _props = this.props;
	    var router = _props.router;
	    var history = _props.history;
	    var location = _props.location;
	
	    if (!router) {
	      process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`<RouterContext>` expects a `router` rather than a `history`') : undefined;
	
	      router = _extends({}, history, {
	        setRouteLeaveHook: history.listenBeforeLeavingRoute
	      });
	      delete router.listenBeforeLeavingRoute;
	    }
	
	    if (process.env.NODE_ENV !== 'production') {
	      location = _deprecateObjectProperties2['default'](location, '`context.location` is deprecated, please use a route component\'s `props.location` instead. http://tiny.cc/router-accessinglocation');
	    }
	
	    return { history: history, location: location, router: router };
	  },
	
	  createElement: function createElement(component, props) {
	    return component == null ? null : this.props.createElement(component, props);
	  },
	
	  render: function render() {
	    var _this = this;
	
	    var _props2 = this.props;
	    var history = _props2.history;
	    var location = _props2.location;
	    var routes = _props2.routes;
	    var params = _props2.params;
	    var components = _props2.components;
	
	    var element = null;
	
	    if (components) {
	      element = components.reduceRight(function (element, components, index) {
	        if (components == null) return element; // Don't create new children; use the grandchildren.
	
	        var route = routes[index];
	        var routeParams = _getRouteParams2['default'](route, params);
	        var props = {
	          history: history,
	          location: location,
	          params: params,
	          route: route,
	          routeParams: routeParams,
	          routes: routes
	        };
	
	        if (_RouteUtils.isReactChildren(element)) {
	          props.children = element;
	        } else if (element) {
	          for (var prop in element) {
	            if (element.hasOwnProperty(prop)) props[prop] = element[prop];
	          }
	        }
	
	        if ((typeof components === 'undefined' ? 'undefined' : _typeof(components)) === 'object') {
	          var elements = {};
	
	          for (var key in components) {
	            if (components.hasOwnProperty(key)) {
	              // Pass through the key as a prop to createElement to allow
	              // custom createElement functions to know which named component
	              // they're rendering, for e.g. matching up to fetched data.
	              elements[key] = _this.createElement(components[key], _extends({
	                key: key }, props));
	            }
	          }
	
	          return elements;
	        }
	
	        return _this.createElement(components, props);
	      }, element);
	    }
	
	    !(element === null || element === false || _react2['default'].isValidElement(element)) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The root route must render a single element') : _invariant2['default'](false) : undefined;
	
	    return element;
	  }
	
	});
	
	exports['default'] = RouterContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/*eslint no-empty: 0*/
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = deprecateObjectProperties;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var useMembrane = false;
	
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    if (Object.defineProperty({}, 'x', { get: function get() {
	        return true;
	      } }).x) {
	      useMembrane = true;
	    }
	  } catch (e) {}
	}
	
	// wraps an object in a membrane to warn about deprecated property access
	
	function deprecateObjectProperties(object, message) {
	  if (!useMembrane) return object;
	
	  var membrane = {};
	
	  var _loop = function _loop(prop) {
	    if (typeof object[prop] === 'function') {
	      membrane[prop] = function () {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	        return object[prop].apply(object, arguments);
	      };
	    } else {
	      Object.defineProperty(membrane, prop, {
	        configurable: false,
	        enumerable: false,
	        get: function get() {
	          process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, message) : undefined;
	          return object[prop];
	        }
	      });
	    }
	  };
	
	  for (var prop in object) {
	    _loop(prop);
	  }
	
	  return membrane;
	}
	
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _PatternUtils = __webpack_require__(184);
	
	/**
	 * Extracts an object of params the given route cares about from
	 * the given params object.
	 */
	function getRouteParams(route, params) {
	  var routeParams = {};
	
	  if (!route.path) return routeParams;
	
	  var paramNames = _PatternUtils.getParamNames(route.path);
	
	  for (var p in params) {
	    if (params.hasOwnProperty(p) && paramNames.indexOf(p) !== -1) routeParams[p] = params[p];
	  }return routeParams;
	}
	
	exports['default'] = getRouteParams;
	module.exports = exports['default'];

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	exports.createRouterObject = createRouterObject;
	exports.createRoutingHistory = createRoutingHistory;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _deprecateObjectProperties = __webpack_require__(193);
	
	var _deprecateObjectProperties2 = _interopRequireDefault(_deprecateObjectProperties);
	
	function createRouterObject(history, transitionManager) {
	  return _extends({}, history, {
	    setRouteLeaveHook: transitionManager.listenBeforeLeavingRoute,
	    isActive: transitionManager.isActive
	  });
	}
	
	// deprecated
	
	function createRoutingHistory(history, transitionManager) {
	  history = _extends({}, history, transitionManager);
	
	  if (process.env.NODE_ENV !== 'production') {
	    history = _deprecateObjectProperties2['default'](history, '`props.history` and `context.history` are deprecated. Please use `context.router`. http://tiny.cc/router-contextchanges');
	  }
	
	  return history;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var bool = _React$PropTypes.bool;
	var object = _React$PropTypes.object;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	var oneOfType = _React$PropTypes.oneOfType;
	
	function isLeftClickEvent(event) {
	  return event.button === 0;
	}
	
	function isModifiedEvent(event) {
	  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
	}
	
	function isEmptyObject(object) {
	  for (var p in object) {
	    if (object.hasOwnProperty(p)) return false;
	  }return true;
	}
	
	function createLocationDescriptor(to, _ref) {
	  var query = _ref.query;
	  var hash = _ref.hash;
	  var state = _ref.state;
	
	  if (query || hash || state) {
	    return { pathname: to, query: query, hash: hash, state: state };
	  }
	
	  return to;
	}
	
	/**
	 * A <Link> is used to create an <a> element that links to a route.
	 * When that route is active, the link gets the value of its
	 * activeClassName prop.
	 *
	 * For example, assuming you have the following route:
	 *
	 *   <Route path="/posts/:postID" component={Post} />
	 *
	 * You could use the following component to link to that route:
	 *
	 *   <Link to={`/posts/${post.id}`} />
	 *
	 * Links may pass along location state and/or query string parameters
	 * in the state/query props, respectively.
	 *
	 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
	 */
	var Link = _react2['default'].createClass({
	  displayName: 'Link',
	
	  contextTypes: {
	    router: object
	  },
	
	  propTypes: {
	    to: oneOfType([string, object]).isRequired,
	    query: object,
	    hash: string,
	    state: object,
	    activeStyle: object,
	    activeClassName: string,
	    onlyActiveOnIndex: bool.isRequired,
	    onClick: func
	  },
	
	  getDefaultProps: function getDefaultProps() {
	    return {
	      onlyActiveOnIndex: false,
	      className: '',
	      style: {}
	    };
	  },
	
	  handleClick: function handleClick(event) {
	    var allowTransition = true;
	
	    if (this.props.onClick) this.props.onClick(event);
	
	    if (isModifiedEvent(event) || !isLeftClickEvent(event)) return;
	
	    if (event.defaultPrevented === true) allowTransition = false;
	
	    // If target prop is set (e.g. to "_blank") let browser handle link.
	    /* istanbul ignore if: untestable with Karma */
	    if (this.props.target) {
	      if (!allowTransition) event.preventDefault();
	
	      return;
	    }
	
	    event.preventDefault();
	
	    if (allowTransition) {
	      var _props = this.props;
	      var to = _props.to;
	      var query = _props.query;
	      var hash = _props.hash;
	      var state = _props.state;
	
	      var _location = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	
	      this.context.router.push(_location);
	    }
	  },
	
	  render: function render() {
	    var _props2 = this.props;
	    var to = _props2.to;
	    var query = _props2.query;
	    var hash = _props2.hash;
	    var state = _props2.state;
	    var activeClassName = _props2.activeClassName;
	    var activeStyle = _props2.activeStyle;
	    var onlyActiveOnIndex = _props2.onlyActiveOnIndex;
	
	    var props = _objectWithoutProperties(_props2, ['to', 'query', 'hash', 'state', 'activeClassName', 'activeStyle', 'onlyActiveOnIndex']);
	
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](!(query || hash || state), 'the `query`, `hash`, and `state` props on `<Link>` are deprecated, use `<Link to={{ pathname, query, hash, state }}/>. http://tiny.cc/router-isActivedeprecated') : undefined;
	
	    // Ignore if rendered outside the context of router, simplifies unit testing.
	    var router = this.context.router;
	
	    if (router) {
	      var _location2 = createLocationDescriptor(to, { query: query, hash: hash, state: state });
	      props.href = router.createHref(_location2);
	
	      if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
	        if (router.isActive(_location2, onlyActiveOnIndex)) {
	          if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;
	
	          if (activeStyle) props.style = _extends({}, props.style, activeStyle);
	        }
	      }
	    }
	
	    return _react2['default'].createElement('a', _extends({}, props, { onClick: this.handleClick }));
	  }
	
	});
	
	exports['default'] = Link;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _Link = __webpack_require__(196);
	
	var _Link2 = _interopRequireDefault(_Link);
	
	/**
	 * An <IndexLink> is used to link to an <IndexRoute>.
	 */
	var IndexLink = _react2['default'].createClass({
	  displayName: 'IndexLink',
	
	  render: function render() {
	    return _react2['default'].createElement(_Link2['default'], _extends({}, this.props, { onlyActiveOnIndex: true }));
	  }
	
	});
	
	exports['default'] = IndexLink;
	module.exports = exports['default'];

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _Redirect = __webpack_require__(199);
	
	var _Redirect2 = _interopRequireDefault(_Redirect);
	
	var _PropTypes = __webpack_require__(191);
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;
	
	/**
	 * An <IndexRedirect> is used to redirect from an indexRoute.
	 */
	var IndexRedirect = _react2['default'].createClass({
	  displayName: 'IndexRedirect',
	
	  statics: {
	
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _Redirect2['default'].createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRedirect> does not make sense at the root of your route config') : undefined;
	      }
	    }
	
	  },
	
	  propTypes: {
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },
	
	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRedirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }
	
	});
	
	exports['default'] = IndexRedirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _PatternUtils = __webpack_require__(184);
	
	var _PropTypes = __webpack_require__(191);
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var object = _React$PropTypes.object;
	
	/**
	 * A <Redirect> is used to declare another URL path a client should
	 * be sent to when they request a given URL.
	 *
	 * Redirects are placed alongside routes in the route configuration
	 * and are traversed in the same manner.
	 */
	var Redirect = _react2['default'].createClass({
	  displayName: 'Redirect',
	
	  statics: {
	
	    createRouteFromReactElement: function createRouteFromReactElement(element) {
	      var route = _RouteUtils.createRouteFromReactElement(element);
	
	      if (route.from) route.path = route.from;
	
	      route.onEnter = function (nextState, replace) {
	        var location = nextState.location;
	        var params = nextState.params;
	
	        var pathname = undefined;
	        if (route.to.charAt(0) === '/') {
	          pathname = _PatternUtils.formatPattern(route.to, params);
	        } else if (!route.to) {
	          pathname = location.pathname;
	        } else {
	          var routeIndex = nextState.routes.indexOf(route);
	          var parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1);
	          var pattern = parentPattern.replace(/\/*$/, '/') + route.to;
	          pathname = _PatternUtils.formatPattern(pattern, params);
	        }
	
	        replace({
	          pathname: pathname,
	          query: route.query || location.query,
	          state: route.state || location.state
	        });
	      };
	
	      return route;
	    },
	
	    getRoutePattern: function getRoutePattern(routes, routeIndex) {
	      var parentPattern = '';
	
	      for (var i = routeIndex; i >= 0; i--) {
	        var route = routes[i];
	        var pattern = route.path || '';
	
	        parentPattern = pattern.replace(/\/*$/, '/') + parentPattern;
	
	        if (pattern.indexOf('/') === 0) break;
	      }
	
	      return '/' + parentPattern;
	    }
	
	  },
	
	  propTypes: {
	    path: string,
	    from: string, // Alias for path
	    to: string.isRequired,
	    query: object,
	    state: object,
	    onEnter: _PropTypes.falsy,
	    children: _PropTypes.falsy
	  },
	
	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Redirect> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }
	
	});
	
	exports['default'] = Redirect;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _PropTypes = __webpack_require__(191);
	
	var func = _react2['default'].PropTypes.func;
	
	/**
	 * An <IndexRoute> is used to specify its parent's <Route indexRoute> in
	 * a JSX route config.
	 */
	var IndexRoute = _react2['default'].createClass({
	  displayName: 'IndexRoute',
	
	  statics: {
	
	    createRouteFromReactElement: function createRouteFromReactElement(element, parentRoute) {
	      /* istanbul ignore else: sanity check */
	      if (parentRoute) {
	        parentRoute.indexRoute = _RouteUtils.createRouteFromReactElement(element);
	      } else {
	        process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'An <IndexRoute> does not make sense at the root of your route config') : undefined;
	      }
	    }
	
	  },
	
	  propTypes: {
	    path: _PropTypes.falsy,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },
	
	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<IndexRoute> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }
	
	});
	
	exports['default'] = IndexRoute;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _PropTypes = __webpack_require__(191);
	
	var _React$PropTypes = _react2['default'].PropTypes;
	var string = _React$PropTypes.string;
	var func = _React$PropTypes.func;
	
	/**
	 * A <Route> is used to declare which components are rendered to the
	 * page when the URL matches a given pattern.
	 *
	 * Routes are arranged in a nested tree structure. When a new URL is
	 * requested, the tree is searched depth-first to find a route whose
	 * path matches the URL.  When one is found, all routes in the tree
	 * that lead to it are considered "active" and their components are
	 * rendered into the DOM, nested in the same order as in the tree.
	 */
	var Route = _react2['default'].createClass({
	  displayName: 'Route',
	
	  statics: {
	    createRouteFromReactElement: _RouteUtils.createRouteFromReactElement
	  },
	
	  propTypes: {
	    path: string,
	    component: _PropTypes.component,
	    components: _PropTypes.components,
	    getComponent: func,
	    getComponents: func
	  },
	
	  /* istanbul ignore next: sanity check */
	  render: function render() {
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, '<Route> elements are for router configuration only and should not be rendered') : _invariant2['default'](false) : undefined;
	  }
	
	});
	
	exports['default'] = Route;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _PropTypes = __webpack_require__(191);
	
	/**
	 * A mixin that adds the "history" instance variable to components.
	 */
	var History = {
	
	  contextTypes: {
	    history: _PropTypes.history
	  },
	
	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `History` mixin is deprecated, please access `context.router` with your own `contextTypes`. http://tiny.cc/router-historymixin') : undefined;
	    this.history = this.context.history;
	  }
	
	};
	
	exports['default'] = History;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var object = _react2['default'].PropTypes.object;
	
	/**
	 * The Lifecycle mixin adds the routerWillLeave lifecycle method to a
	 * component that may be used to cancel a transition or prompt the user
	 * for confirmation.
	 *
	 * On standard transitions, routerWillLeave receives a single argument: the
	 * location we're transitioning to. To cancel the transition, return false.
	 * To prompt the user for confirmation, return a prompt message (string).
	 *
	 * During the beforeunload event (assuming you're using the useBeforeUnload
	 * history enhancer), routerWillLeave does not receive a location object
	 * because it isn't possible for us to know the location we're transitioning
	 * to. In this case routerWillLeave must return a prompt message to prevent
	 * the user from closing the window/tab.
	 */
	var Lifecycle = {
	
	  contextTypes: {
	    history: object.isRequired,
	    // Nested children receive the route as context, either
	    // set by the route component using the RouteContext mixin
	    // or by some other ancestor.
	    route: object
	  },
	
	  propTypes: {
	    // Route components receive the route object as a prop.
	    route: object
	  },
	
	  componentDidMount: function componentDidMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'the `Lifecycle` mixin is deprecated, please use `context.router.setRouteLeaveHook(route, hook)`. http://tiny.cc/router-lifecyclemixin') : undefined;
	    !this.routerWillLeave ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin requires you to define a routerWillLeave method') : _invariant2['default'](false) : undefined;
	
	    var route = this.props.route || this.context.route;
	
	    !route ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'The Lifecycle mixin must be used on either a) a <Route component> or ' + 'b) a descendant of a <Route component> that uses the RouteContext mixin') : _invariant2['default'](false) : undefined;
	
	    this._unlistenBeforeLeavingRoute = this.context.history.listenBeforeLeavingRoute(route, this.routerWillLeave);
	  },
	
	  componentWillUnmount: function componentWillUnmount() {
	    if (this._unlistenBeforeLeavingRoute) this._unlistenBeforeLeavingRoute();
	  }
	
	};
	
	exports['default'] = Lifecycle;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var object = _react2['default'].PropTypes.object;
	
	/**
	 * The RouteContext mixin provides a convenient way for route
	 * components to set the route in context. This is needed for
	 * routes that render elements that want to use the Lifecycle
	 * mixin to prevent transitions.
	 */
	var RouteContext = {
	
	  propTypes: {
	    route: object.isRequired
	  },
	
	  childContextTypes: {
	    route: object.isRequired
	  },
	
	  getChildContext: function getChildContext() {
	    return {
	      route: this.props.route
	    };
	  },
	
	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, 'The `RouteContext` mixin is deprecated. You can provide `this.props.route` on context with your own `contextTypes`. http://tiny.cc/router-routecontextmixin') : undefined;
	  }
	
	};
	
	exports['default'] = RouteContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	var _historyLibUseQueries = __webpack_require__(178);
	
	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);
	
	var _createTransitionManager = __webpack_require__(181);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	/**
	 * Returns a new createHistory function that may be used to create
	 * history objects that know about routing.
	 *
	 * Enhances history objects with the following methods:
	 *
	 * - listen((error, nextState) => {})
	 * - listenBeforeLeavingRoute(route, (nextLocation) => {})
	 * - match(location, (error, redirectLocation, nextState) => {})
	 * - isActive(pathname, query, indexOnly=false)
	 */
	function useRoutes(createHistory) {
	  process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`useRoutes` is deprecated. Please use `createTransitionManager` instead.') : undefined;
	
	  return function () {
	    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var routes = _ref.routes;
	
	    var options = _objectWithoutProperties(_ref, ['routes']);
	
	    var history = _historyLibUseQueries2['default'](createHistory)(options);
	    var transitionManager = _createTransitionManager2['default'](history, routes);
	    return _extends({}, history, transitionManager);
	  };
	}
	
	exports['default'] = useRoutes;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _RouterContext = __webpack_require__(192);
	
	var _RouterContext2 = _interopRequireDefault(_RouterContext);
	
	var _routerWarning = __webpack_require__(182);
	
	var _routerWarning2 = _interopRequireDefault(_routerWarning);
	
	var RoutingContext = _react2['default'].createClass({
	  displayName: 'RoutingContext',
	
	  componentWillMount: function componentWillMount() {
	    process.env.NODE_ENV !== 'production' ? _routerWarning2['default'](false, '`RoutingContext` has been renamed to `RouterContext`. Please use `import { RouterContext } from \'react-router\'`. http://tiny.cc/router-routercontext') : undefined;
	  },
	
	  render: function render() {
	    return _react2['default'].createElement(_RouterContext2['default'], this.props);
	  }
	});
	
	exports['default'] = RoutingContext;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	function _objectWithoutProperties(obj, keys) {
	  var target = {};for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;target[i] = obj[i];
	  }return target;
	}
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _createMemoryHistory = __webpack_require__(208);
	
	var _createMemoryHistory2 = _interopRequireDefault(_createMemoryHistory);
	
	var _createTransitionManager = __webpack_require__(181);
	
	var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);
	
	var _RouteUtils = __webpack_require__(190);
	
	var _RouterUtils = __webpack_require__(195);
	
	/**
	 * A high-level API to be used for server-side rendering.
	 *
	 * This function matches a location to a set of routes and calls
	 * callback(error, redirectLocation, renderProps) when finished.
	 *
	 * Note: You probably don't want to use this in a browser unless you're using
	 * server-side rendering with async routes.
	 */
	function match(_ref, callback) {
	  var history = _ref.history;
	  var routes = _ref.routes;
	  var location = _ref.location;
	
	  var options = _objectWithoutProperties(_ref, ['history', 'routes', 'location']);
	
	  !(history || location) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'match needs a history or a location') : _invariant2['default'](false) : undefined;
	
	  history = history ? history : _createMemoryHistory2['default'](options);
	  var transitionManager = _createTransitionManager2['default'](history, _RouteUtils.createRoutes(routes));
	
	  var unlisten = undefined;
	
	  if (location) {
	    // Allow match({ location: '/the/path', ... })
	    location = history.createLocation(location);
	  } else {
	    // Pick up the location from the history via synchronous history.listen
	    // call if needed.
	    unlisten = history.listen(function (historyLocation) {
	      location = historyLocation;
	    });
	  }
	
	  var router = _RouterUtils.createRouterObject(history, transitionManager);
	  history = _RouterUtils.createRoutingHistory(history, transitionManager);
	
	  transitionManager.match(location, function (error, redirectLocation, nextState) {
	    callback(error, redirectLocation, nextState && _extends({}, nextState, {
	      history: history,
	      router: router,
	      matchContext: { history: history, transitionManager: transitionManager, router: router }
	    }));
	
	    // Defer removing the listener to here to prevent DOM histories from having
	    // to unwind DOM event listeners unnecessarily, in case callback renders a
	    // <Router> and attaches another history listener.
	    if (unlisten) {
	      unlisten();
	    }
	  });
	}
	
	exports['default'] = match;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = createMemoryHistory;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _historyLibUseQueries = __webpack_require__(178);
	
	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);
	
	var _historyLibUseBasename = __webpack_require__(209);
	
	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);
	
	var _historyLibCreateMemoryHistory = __webpack_require__(210);
	
	var _historyLibCreateMemoryHistory2 = _interopRequireDefault(_historyLibCreateMemoryHistory);
	
	function createMemoryHistory(options) {
	  // signatures and type checking differ between `useRoutes` and
	  // `createMemoryHistory`, have to create `memoryHistory` first because
	  // `useQueries` doesn't understand the signature
	  var memoryHistory = _historyLibCreateMemoryHistory2['default'](options);
	  var createHistory = function createHistory() {
	    return memoryHistory;
	  };
	  var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	  history.__v2_compatible__ = true;
	  return history;
	}
	
	module.exports = exports['default'];

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _ExecutionEnvironment = __webpack_require__(166);
	
	var _PathUtils = __webpack_require__(165);
	
	var _runTransitionHook = __webpack_require__(176);
	
	var _runTransitionHook2 = _interopRequireDefault(_runTransitionHook);
	
	var _deprecate = __webpack_require__(177);
	
	var _deprecate2 = _interopRequireDefault(_deprecate);
	
	function useBasename(createHistory) {
	  return function () {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var history = createHistory(options);
	
	    var basename = options.basename;
	
	    // Automatically use the value of <base href> in HTML
	    // documents as basename if it's not explicitly given.
	    if (basename == null && _ExecutionEnvironment.canUseDOM) {
	      var base = document.getElementsByTagName('base')[0];
	
	      if (base) basename = _PathUtils.extractPath(base.href);
	    }
	
	    function addBasename(location) {
	      if (basename && location.basename == null) {
	        if (location.pathname.indexOf(basename) === 0) {
	          location.pathname = location.pathname.substring(basename.length);
	          location.basename = basename;
	
	          if (location.pathname === '') location.pathname = '/';
	        } else {
	          location.basename = '';
	        }
	      }
	
	      return location;
	    }
	
	    function prependBasename(location) {
	      if (!basename) return location;
	
	      if (typeof location === 'string') location = _PathUtils.parsePath(location);
	
	      var pname = location.pathname;
	      var normalizedBasename = basename.slice(-1) === '/' ? basename : basename + '/';
	      var normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname;
	      var pathname = normalizedBasename + normalizedPathname;
	
	      return _extends({}, location, {
	        pathname: pathname
	      });
	    }
	
	    // Override all read methods with basename-aware versions.
	    function listenBefore(hook) {
	      return history.listenBefore(function (location, callback) {
	        _runTransitionHook2['default'](hook, addBasename(location), callback);
	      });
	    }
	
	    function listen(listener) {
	      return history.listen(function (location) {
	        listener(addBasename(location));
	      });
	    }
	
	    // Override all write methods with basename-aware versions.
	    function push(location) {
	      history.push(prependBasename(location));
	    }
	
	    function replace(location) {
	      history.replace(prependBasename(location));
	    }
	
	    function createPath(location) {
	      return history.createPath(prependBasename(location));
	    }
	
	    function createHref(location) {
	      return history.createHref(prependBasename(location));
	    }
	
	    function createLocation(location) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }
	
	      return addBasename(history.createLocation.apply(history, [prependBasename(location)].concat(args)));
	    }
	
	    // deprecated
	    function pushState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	      push(_extends({ state: state }, path));
	    }
	
	    // deprecated
	    function replaceState(state, path) {
	      if (typeof path === 'string') path = _PathUtils.parsePath(path);
	
	      replace(_extends({ state: state }, path));
	    }
	
	    return _extends({}, history, {
	      listenBefore: listenBefore,
	      listen: listen,
	      push: push,
	      replace: replace,
	      createPath: createPath,
	      createHref: createHref,
	      createLocation: createLocation,
	
	      pushState: _deprecate2['default'](pushState, 'pushState is deprecated; use push instead'),
	      replaceState: _deprecate2['default'](replaceState, 'replaceState is deprecated; use replace instead')
	    });
	  };
	}
	
	exports['default'] = useBasename;
	module.exports = exports['default'];

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _warning = __webpack_require__(162);
	
	var _warning2 = _interopRequireDefault(_warning);
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _PathUtils = __webpack_require__(165);
	
	var _Actions = __webpack_require__(164);
	
	var _createHistory = __webpack_require__(170);
	
	var _createHistory2 = _interopRequireDefault(_createHistory);
	
	function createStateStorage(entries) {
	  return entries.filter(function (entry) {
	    return entry.state;
	  }).reduce(function (memo, entry) {
	    memo[entry.key] = entry.state;
	    return memo;
	  }, {});
	}
	
	function createMemoryHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  if (Array.isArray(options)) {
	    options = { entries: options };
	  } else if (typeof options === 'string') {
	    options = { entries: [options] };
	  }
	
	  var history = _createHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: saveState,
	    go: go
	  }));
	
	  var _options = options;
	  var entries = _options.entries;
	  var current = _options.current;
	
	  if (typeof entries === 'string') {
	    entries = [entries];
	  } else if (!Array.isArray(entries)) {
	    entries = ['/'];
	  }
	
	  entries = entries.map(function (entry) {
	    var key = history.createKey();
	
	    if (typeof entry === 'string') return { pathname: entry, key: key };
	
	    if ((typeof entry === 'undefined' ? 'undefined' : _typeof(entry)) === 'object' && entry) return _extends({}, entry, { key: key });
	
	     true ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Unable to create history entry from %s', entry) : _invariant2['default'](false) : undefined;
	  });
	
	  if (current == null) {
	    current = entries.length - 1;
	  } else {
	    !(current >= 0 && current < entries.length) ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Current index must be >= 0 and < %s, was %s', entries.length, current) : _invariant2['default'](false) : undefined;
	  }
	
	  var storage = createStateStorage(entries);
	
	  function saveState(key, state) {
	    storage[key] = state;
	  }
	
	  function readState(key) {
	    return storage[key];
	  }
	
	  function getCurrentLocation() {
	    var entry = entries[current];
	    var basename = entry.basename;
	    var pathname = entry.pathname;
	    var search = entry.search;
	
	    var path = (basename || '') + pathname + (search || '');
	
	    var key = undefined,
	        state = undefined;
	    if (entry.key) {
	      key = entry.key;
	      state = readState(key);
	    } else {
	      key = history.createKey();
	      state = null;
	      entry.key = key;
	    }
	
	    var location = _PathUtils.parsePath(path);
	
	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }
	
	  function canGo(n) {
	    var index = current + n;
	    return index >= 0 && index < entries.length;
	  }
	
	  function go(n) {
	    if (n) {
	      if (!canGo(n)) {
	        process.env.NODE_ENV !== 'production' ? _warning2['default'](false, 'Cannot go(%s) there is not enough history', n) : undefined;
	        return;
	      }
	
	      current += n;
	
	      var currentLocation = getCurrentLocation();
	
	      // change action to POP
	      history.transitionTo(_extends({}, currentLocation, { action: _Actions.POP }));
	    }
	  }
	
	  function finishTransition(location) {
	    switch (location.action) {
	      case _Actions.PUSH:
	        current += 1;
	
	        // if we are not on the top of stack
	        // remove rest and push new
	        if (current < entries.length) entries.splice(current);
	
	        entries.push(location);
	        saveState(location.key, location.state);
	        break;
	      case _Actions.REPLACE:
	        entries[current] = location;
	        saveState(location.key, location.state);
	        break;
	    }
	  }
	
	  return history;
	}
	
	exports['default'] = createMemoryHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports['default'] = useRouterHistory;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _historyLibUseQueries = __webpack_require__(178);
	
	var _historyLibUseQueries2 = _interopRequireDefault(_historyLibUseQueries);
	
	var _historyLibUseBasename = __webpack_require__(209);
	
	var _historyLibUseBasename2 = _interopRequireDefault(_historyLibUseBasename);
	
	function useRouterHistory(createHistory) {
	  return function (options) {
	    var history = _historyLibUseQueries2['default'](_historyLibUseBasename2['default'](createHistory))(options);
	    history.__v2_compatible__ = true;
	    return history;
	  };
	}
	
	module.exports = exports['default'];

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _historyLibCreateBrowserHistory = __webpack_require__(213);
	
	var _historyLibCreateBrowserHistory2 = _interopRequireDefault(_historyLibCreateBrowserHistory);
	
	var _createRouterHistory = __webpack_require__(214);
	
	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);
	
	exports['default'] = _createRouterHistory2['default'](_historyLibCreateBrowserHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	exports.__esModule = true;
	
	var _extends = Object.assign || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }return target;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _invariant = __webpack_require__(163);
	
	var _invariant2 = _interopRequireDefault(_invariant);
	
	var _Actions = __webpack_require__(164);
	
	var _PathUtils = __webpack_require__(165);
	
	var _ExecutionEnvironment = __webpack_require__(166);
	
	var _DOMUtils = __webpack_require__(167);
	
	var _DOMStateStorage = __webpack_require__(168);
	
	var _createDOMHistory = __webpack_require__(169);
	
	var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);
	
	/**
	 * Creates and returns a history object that uses HTML5's history API
	 * (pushState, replaceState, and the popstate event) to manage history.
	 * This is the recommended method of managing history in browsers because
	 * it provides the cleanest URLs.
	 *
	 * Note: In browsers that do not support the HTML5 history API full
	 * page reloads will be used to preserve URLs.
	 */
	function createBrowserHistory() {
	  var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	  !_ExecutionEnvironment.canUseDOM ? process.env.NODE_ENV !== 'production' ? _invariant2['default'](false, 'Browser history needs a DOM') : _invariant2['default'](false) : undefined;
	
	  var forceRefresh = options.forceRefresh;
	
	  var isSupported = _DOMUtils.supportsHistory();
	  var useRefresh = !isSupported || forceRefresh;
	
	  function getCurrentLocation(historyState) {
	    historyState = historyState || window.history.state || {};
	
	    var path = _DOMUtils.getWindowPath();
	    var _historyState = historyState;
	    var key = _historyState.key;
	
	    var state = undefined;
	    if (key) {
	      state = _DOMStateStorage.readState(key);
	    } else {
	      state = null;
	      key = history.createKey();
	
	      if (isSupported) window.history.replaceState(_extends({}, historyState, { key: key }), null, path);
	    }
	
	    var location = _PathUtils.parsePath(path);
	
	    return history.createLocation(_extends({}, location, { state: state }), undefined, key);
	  }
	
	  function startPopStateListener(_ref) {
	    var transitionTo = _ref.transitionTo;
	
	    function popStateListener(event) {
	      if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.
	
	      transitionTo(getCurrentLocation(event.state));
	    }
	
	    _DOMUtils.addEventListener(window, 'popstate', popStateListener);
	
	    return function () {
	      _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
	    };
	  }
	
	  function finishTransition(location) {
	    var basename = location.basename;
	    var pathname = location.pathname;
	    var search = location.search;
	    var hash = location.hash;
	    var state = location.state;
	    var action = location.action;
	    var key = location.key;
	
	    if (action === _Actions.POP) return; // Nothing to do.
	
	    _DOMStateStorage.saveState(key, state);
	
	    var path = (basename || '') + pathname + search + hash;
	    var historyState = {
	      key: key
	    };
	
	    if (action === _Actions.PUSH) {
	      if (useRefresh) {
	        window.location.href = path;
	        return false; // Prevent location update.
	      } else {
	          window.history.pushState(historyState, null, path);
	        }
	    } else {
	      // REPLACE
	      if (useRefresh) {
	        window.location.replace(path);
	        return false; // Prevent location update.
	      } else {
	          window.history.replaceState(historyState, null, path);
	        }
	    }
	  }
	
	  var history = _createDOMHistory2['default'](_extends({}, options, {
	    getCurrentLocation: getCurrentLocation,
	    finishTransition: finishTransition,
	    saveState: _DOMStateStorage.saveState
	  }));
	
	  var listenerCount = 0,
	      stopPopStateListener = undefined;
	
	  function listenBefore(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
	
	    var unlisten = history.listenBefore(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }
	
	  function listen(listener) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
	
	    var unlisten = history.listen(listener);
	
	    return function () {
	      unlisten();
	
	      if (--listenerCount === 0) stopPopStateListener();
	    };
	  }
	
	  // deprecated
	  function registerTransitionHook(hook) {
	    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);
	
	    history.registerTransitionHook(hook);
	  }
	
	  // deprecated
	  function unregisterTransitionHook(hook) {
	    history.unregisterTransitionHook(hook);
	
	    if (--listenerCount === 0) stopPopStateListener();
	  }
	
	  return _extends({}, history, {
	    listenBefore: listenBefore,
	    listen: listen,
	    registerTransitionHook: registerTransitionHook,
	    unregisterTransitionHook: unregisterTransitionHook
	  });
	}
	
	exports['default'] = createBrowserHistory;
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _useRouterHistory = __webpack_require__(211);
	
	var _useRouterHistory2 = _interopRequireDefault(_useRouterHistory);
	
	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);
	
	exports['default'] = function (createHistory) {
	  var history = undefined;
	  if (canUseDOM) history = _useRouterHistory2['default'](createHistory)();
	  return history;
	};
	
	module.exports = exports['default'];

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { 'default': obj };
	}
	
	var _historyLibCreateHashHistory = __webpack_require__(161);
	
	var _historyLibCreateHashHistory2 = _interopRequireDefault(_historyLibCreateHashHistory);
	
	var _createRouterHistory = __webpack_require__(214);
	
	var _createRouterHistory2 = _interopRequireDefault(_createRouterHistory);
	
	exports['default'] = _createRouterHistory2['default'](_historyLibCreateHashHistory2['default']);
	module.exports = exports['default'];

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(159);
	
	var _GmonitorAdmin = __webpack_require__(217);
	
	var _GmonitorAdmin2 = _interopRequireDefault(_GmonitorAdmin);
	
	var _ClusterAdmin = __webpack_require__(569);
	
	var _ClusterAdmin2 = _interopRequireDefault(_ClusterAdmin);
	
	var _ClusterCrud = __webpack_require__(570);
	
	var _ClusterCrud2 = _interopRequireDefault(_ClusterCrud);
	
	var _ClusterMemberCrud = __webpack_require__(571);
	
	var _ClusterMemberCrud2 = _interopRequireDefault(_ClusterMemberCrud);
	
	var _ClusterMemberRelation = __webpack_require__(572);
	
	var _ClusterMemberRelation2 = _interopRequireDefault(_ClusterMemberRelation);
	
	var _DepartmentAdmin = __webpack_require__(573);
	
	var _DepartmentAdmin2 = _interopRequireDefault(_DepartmentAdmin);
	
	var _DepartmentCrud = __webpack_require__(574);
	
	var _DepartmentCrud2 = _interopRequireDefault(_DepartmentCrud);
	
	var _AccountMemberDeptRelation = __webpack_require__(575);
	
	var _AccountMemberDeptRelation2 = _interopRequireDefault(_AccountMemberDeptRelation);
	
	var _AccountMemberCrud = __webpack_require__(576);
	
	var _AccountMemberCrud2 = _interopRequireDefault(_AccountMemberCrud);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	
	module.exports = _react2.default.createElement(
	    _reactRouter.Route,
	    { path: '/', component: _GmonitorAdmin2.default },
	    _react2.default.createElement(_reactRouter.IndexRoute, { component: gmonitorui.DashBoardUI }),
	    _react2.default.createElement(_reactRouter.Route, { path: '/queryboard/', component: gmonitorui.QueryBoardUI }),
	    _react2.default.createElement(
	        _reactRouter.Route,
	        { path: '/admin/cluster/', component: _ClusterAdmin2.default },
	        _react2.default.createElement(_reactRouter.IndexRoute, { component: _ClusterCrud2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/admin/cluster-member/crud', component: _ClusterMemberCrud2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/admin/cluster-member/relation', component: _ClusterMemberRelation2.default })
	    ),
	    _react2.default.createElement(
	        _reactRouter.Route,
	        { path: '/admin/department/', component: _DepartmentAdmin2.default },
	        _react2.default.createElement(_reactRouter.IndexRoute, { component: _DepartmentCrud2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/admin/account-member/crud', component: _AccountMemberCrud2.default }),
	        _react2.default.createElement(_reactRouter.Route, { path: '/admin/account-member/dept-relation', component: _AccountMemberDeptRelation2.default })
	    )
	);

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(159);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	
	exports.default = _react2.default.createClass({
	  displayName: 'GmonitorAdmin',
	  render: function render() {
	    var currentUser = {
	      id: 'liuyong',
	      name: '刘勇',
	      role: 'ADMIN'
	    };
	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(gmonitorui.NavHeader, { currentUser: currentUser }),
	      this.props.children
	    );
	  }
	});

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _reactRouter = __webpack_require__(159);
	
	var _NavLink = __webpack_require__(219);
	
	var _NavLink2 = _interopRequireDefault(_NavLink);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var React = __webpack_require__(1);
	var react_echarts = __webpack_require__(220);
	
	
	var NavHeader = React.createClass({
	    displayName: 'NavHeader',
	
	
	    handleClickLogout: function handleClickLogout() {
	        this.refs.form.submit();
	    },
	
	    render: function render() {
	        return React.createElement(
	            'nav',
	            { className: 'navbar navbar-inverse navbar-fixed-top' },
	            React.createElement(
	                'div',
	                { className: 'container-fluid' },
	                React.createElement(
	                    'div',
	                    { className: 'navbar-header' },
	                    React.createElement(
	                        'button',
	                        { type: 'button', className: 'navbar-toggle collapsed', 'data-toggle': 'collapse', 'data-target': '#navbar', 'aria-expanded': 'false', 'aria-controls': 'navbar' },
	                        React.createElement(
	                            'span',
	                            { className: 'sr-only' },
	                            'Toggle navigation'
	                        ),
	                        React.createElement('span', { className: 'icon-bar' }),
	                        React.createElement('span', { className: 'icon-bar' }),
	                        React.createElement('span', { className: 'icon-bar' })
	                    ),
	                    React.createElement(
	                        'a',
	                        { className: 'navbar-brand', href: '#' },
	                        'Gmonitor'
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { id: 'navbar', className: 'collapse navbar-collapse' },
	                    React.createElement(
	                        'ul',
	                        { className: 'nav navbar-nav' },
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                _reactRouter.Link,
	                                { activeStyle: { color: 'white' }, to: '/', onlyActiveOnIndex: true },
	                                '统计仪表板'
	                            )
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                _reactRouter.Link,
	                                { activeStyle: { color: 'white' }, to: '/queryboard/' },
	                                '指标数据查询'
	                            )
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                _reactRouter.Link,
	                                { activeStyle: { color: 'white' }, to: '/admin/cluster/' },
	                                'Cluster管理'
	                            )
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                _reactRouter.Link,
	                                { activeStyle: { color: 'white' }, to: '/admin/department/' },
	                                '部门管理'
	                            )
	                        )
	                    ),
	                    React.createElement(
	                        'ul',
	                        { className: 'nav navbar-nav navbar-right' },
	                        React.createElement('li', null),
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                'a',
	                                null,
	                                '欢迎：',
	                                this.props.currentUser.name
	                            )
	                        ),
	                        React.createElement(
	                            'li',
	                            null,
	                            React.createElement(
	                                'a',
	                                { href: '#', onClick: this.handleClickLogout },
	                                '注销'
	                            )
	                        ),
	                        React.createElement('form', { style: { visibility: "hidden" },
	                            ref: 'form', method: 'post',
	                            action: '/logout' })
	                    )
	                )
	            )
	        );
	    }
	
	});
	
	exports.NavHeader = NavHeader;
	
	var BoardContent = React.createClass({
	    displayName: 'BoardContent',
	
	
	    render: function render() {
	
	        var content = null;
	        if (this.props.boardType == 'dashboard') {
	            content = React.createElement(DashBoard, { chartConfigs: this.props.chartConfigs });
	        } else {
	            content = React.createElement(QueryBoard, { chartConfig: this.props.chartConfig, tableHeads: this.props.tableHeads, rowDatas: this.props.rowDatas });
	        }
	        return React.createElement(
	            'div',
	            { className: 'container-fluid' },
	            React.createElement(
	                'div',
	                { className: 'row' },
	                React.createElement(SideBar, { menudatas: this.props.menudatas }),
	                content
	            )
	        );
	    }
	
	});
	
	var AccordionMenu = React.createClass({
	    displayName: 'AccordionMenu',
	
	
	    makeid: function makeid(length) {
	        var text = "";
	        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
	
	        for (var i = 0; i < length; i++) {
	            text += possible.charAt(Math.floor(Math.random() * possible.length));
	        }return text;
	    },
	
	    handleClick: function handleClick(e) {
	        this.props.handleClick(e);
	    },
	
	    render: function render() {
	
	        var submenus = [];
	
	        this.props.menudata.submenus.forEach(function (submenu) {
	            if (submenu.hasOwnProperty("submenus") && submenu.submenus.length > 0) {
	                submenus.push(React.createElement(AccordionMenu, { handleClick: this.props.handleClick, menudata: submenu }));
	            }
	        }.bind(this));
	
	        if (submenus.length == 0) {
	            var smenus = [];
	            this.props.menudata.submenus.forEach(function (submenu) {
	                smenus.push(React.createElement(
	                    'li',
	                    null,
	                    React.createElement(
	                        'a',
	                        { href: '#', onClick: this.props.handleClick },
	                        submenu.name
	                    )
	                ));
	            }.bind(this));
	
	            submenus = React.createElement(
	                'ul',
	                { className: 'nav nav-sidebar' },
	                smenus
	            );
	        }
	
	        var menuid = "menu-" + this.makeid(5);
	        var collapseid = "collapse-" + this.makeid(5);
	
	        return React.createElement(
	            'div',
	            { className: 'panel-group', id: menuid },
	            React.createElement(
	                'div',
	                { className: 'panel panel-default' },
	                React.createElement(
	                    'div',
	                    { className: 'panel-heading' },
	                    React.createElement(
	                        'h4',
	                        { className: 'panel-title' },
	                        React.createElement(
	                            'a',
	                            { className: 'accordion-toggle collapsed',
	                                'data-toggle': 'collapse',
	                                'data-parent': "#" + menuid,
	                                onClick: this.props.handleClick,
	                                href: "#" + collapseid },
	                            this.props.menudata.name
	                        )
	                    )
	                ),
	                React.createElement(
	                    'div',
	                    { className: 'panel-collapse collapse', id: collapseid },
	                    React.createElement(
	                        'div',
	                        { className: 'panel-body' },
	                        submenus
	                    )
	                )
	            )
	        );
	    }
	
	});
	
	var SideBar = React.createClass({
	    displayName: 'SideBar',
	
	
	    handleMenuItemClick: function handleMenuItemClick(e) {
	        e.preventDefault();
	        if (!$(e.target).hasClass("accordion-toggle")) {
	            //$(e.target).css({"background-color":"#8dd7f9"});
	        }
	    },
	
	    render: function render() {
	
	        var menus = [];
	        this.props.menudatas.forEach(function (menudata) {
	            menus.push(React.createElement(AccordionMenu, { handleClick: this.handleMenuItemClick, menudata: menudata }));
	        }.bind(this));
	
	        return React.createElement(
	            'div',
	            { className: 'col-sm-3 col-md-2 sidebar' },
	            React.createElement(
	                'ul',
	                { className: 'nav nav-sidebar' },
	                menus
	            )
	        );
	    }
	
	});
	
	var DashBoard = React.createClass({
	    displayName: 'DashBoard',
	
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	            React.createElement(QueryBar, null),
	            React.createElement(ChartsPanel, { chartConfigs: this.props.chartConfigs })
	        );
	    }
	
	});
	
	var QueryBoard = React.createClass({
	    displayName: 'QueryBoard',
	
	
	    render: function render() {
	
	        return React.createElement(
	            'div',
	            { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	            React.createElement(ChartPanel, { chartConfig: this.props.chartConfig }),
	            React.createElement(QueryBar, { selectMetric: true }),
	            React.createElement(SimpleResultTable, { theads: this.props.tableHeads,
	                rowDatas: this.props.rowDatas })
	        );
	    }
	
	});
	
	var ChartPanel = React.createClass({
	    displayName: 'ChartPanel',
	
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(
	                'div',
	                { className: 'row placeholders' },
	                React.createElement(
	                    'div',
	                    { className: 'col-xs-12 col-sm-6 placeholder' },
	                    React.createElement(react_echarts.ECharts, this.props.chartConfig)
	                )
	            )
	        );
	    }
	
	});
	
	var ChartsPanel = React.createClass({
	    displayName: 'ChartsPanel',
	
	
	    render: function render() {
	
	        var contents = [];
	        this.props.chartConfigs.forEach(function (chartConfig, index) {
	            contents.push(React.createElement(
	                'div',
	                { className: 'col-xs-12 col-sm-6 placeholder' },
	                React.createElement(react_echarts.ECharts, chartConfig)
	            ));
	        });
	
	        return React.createElement(
	            'div',
	            { className: 'row placeholders' },
	            contents
	        );
	    }
	
	});
	
	var MetricSelect = React.createClass({
	    displayName: 'MetricSelect',
	
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'form-group' },
	            React.createElement(
	                'label',
	                null,
	                '指标项：'
	            ),
	            React.createElement(
	                'select',
	                { className: 'form-control' },
	                React.createElement(
	                    'option',
	                    { value: '1' },
	                    'CPU'
	                ),
	                React.createElement(
	                    'option',
	                    { value: '2' },
	                    '内存'
	                ),
	                React.createElement(
	                    'option',
	                    { value: '3' },
	                    'GC'
	                )
	            )
	        );
	    }
	
	});
	
	var QueryBar = React.createClass({
	    displayName: 'QueryBar',
	
	
	    render: function render() {
	        var metricSelect = null;
	        if (this.props.selectMetric) {
	            metricSelect = React.createElement(MetricSelect, null);
	        }
	        return React.createElement(
	            'form',
	            { className: 'form-inline sub-header' },
	            metricSelect,
	            ' ',
	            React.createElement(
	                'div',
	                { className: 'form-group' },
	                React.createElement(
	                    'label',
	                    null,
	                    '开始时间：'
	                ),
	                React.createElement('input', { type: 'text', className: 'form-control', ref: 'startDate', placeholder: '开始时间' })
	            ),
	            ' ',
	            React.createElement(
	                'div',
	                { className: 'form-group' },
	                React.createElement(
	                    'label',
	                    null,
	                    '结束时间：'
	                ),
	                React.createElement('input', { type: 'email', className: 'form-control', ref: 'endDate', placeholder: '结束时间' })
	            ),
	            ' ',
	            React.createElement(
	                'button',
	                { type: 'button', className: 'btn btn-primary' },
	                '查询'
	            )
	        );
	    }
	});
	
	var SimpleResultTableHead = React.createClass({
	    displayName: 'SimpleResultTableHead',
	
	
	    render: function render() {
	
	        var theads = [];
	        this.props.theads.forEach(function (head, key) {
	            theads.push(React.createElement(
	                'th',
	                { key: key },
	                head
	            ));
	        });
	
	        return React.createElement(
	            'thead',
	            null,
	            React.createElement(
	                'tr',
	                null,
	                theads
	            )
	        );
	    }
	
	});
	
	var SimpleResultTableBody = React.createClass({
	    displayName: 'SimpleResultTableBody',
	
	
	    render: function render() {
	        var rows = [];
	
	        this.props.rowDatas.forEach(function (rowData, key) {
	
	            var cells = [];
	            rowData.forEach(function (cellData, key) {
	                cells.push(React.createElement(
	                    'td',
	                    { key: key },
	                    cellData
	                ));
	            });
	
	            rows.push(React.createElement(
	                'tr',
	                { key: key },
	                cells
	            ));
	        });
	
	        return React.createElement(
	            'tbody',
	            null,
	            rows
	        );
	    }
	
	});
	
	var SimpleResultTable = React.createClass({
	    displayName: 'SimpleResultTable',
	
	    render: function render() {
	        return React.createElement(
	            'div',
	            { className: 'table-responsive' },
	            React.createElement(
	                'table',
	                { className: 'table table-striped' },
	                React.createElement(SimpleResultTableHead, { theads: this.props.theads }),
	                React.createElement(SimpleResultTableBody, { rowDatas: this.props.rowDatas })
	            )
	        );
	    }
	
	});
	
	exports.SimpleResultTable = SimpleResultTable;
	
	exports.QueryBoardUI = React.createClass({
	    displayName: 'QueryBoardUI',
	
	
	    getInitialState: function getInitialState() {
	        return {
	            currentNode: {},
	            currentMetric: 'CPU',
	            startDateTime: '',
	            endDateTime: '',
	            chartConfig: [],
	            rowDatas: []
	
	        };
	    },
	
	    getChartConfig: function getChartConfig() {
	        function randomData() {
	            now = new Date(+now + oneDay);
	            value = value + Math.random() * 21 - 10;
	            return {
	                name: now.toString(),
	                value: [[now.getFullYear(), now.getMonth() + 1, now.getDate()].join('-'), Math.round(value)]
	            };
	        }
	
	        var data = [];
	        var now = +new Date(1997, 9, 3);
	        var oneDay = 24 * 3600 * 1000;
	        var value = Math.random() * 1000;
	        for (var i = 0; i < 1000; i++) {
	            data.push(randomData());
	        }
	
	        var option = {
	            chartStyle: { width: "900", height: "600px" },
	            title: {
	                text: 'CpuUsage'
	            },
	            tooltip: {
	                trigger: 'axis',
	                formatter: function formatter(params) {
	                    params = params[0];
	                    var date = new Date(params.name);
	                    return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];
	                },
	                axisPointer: {
	                    animation: false
	                }
	            },
	            xAxis: {
	                type: 'time',
	                splitLine: {
	                    show: false
	                }
	            },
	            yAxis: {
	                type: 'value',
	                boundaryGap: [0, '100%'],
	                splitLine: {
	                    show: false
	                }
	            },
	            series: [{
	                name: 'CpuUsage',
	                type: 'line',
	                showSymbol: false,
	                hoverAnimation: false,
	                data: data
	            }]
	        };
	
	        //option = {
	        //    chartStyle: {width:"900", height:"600px"},
	        //    //className:"img-responsive",//can delete if required
	        //    title: {
	        //        text: 'ECharts 入门示例'
	        //    },
	        //    tooltip: {},
	        //    legend: {
	        //        data:['销量']
	        //    },
	        //    xAxis: {
	        //        data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]
	        //    },
	        //    yAxis: {},
	        //    series: [{
	        //        name: '销量',
	        //        type: 'bar',
	        //        data: [5, 20, 36, 10, 10, 20]
	        //    }]
	        //};
	
	        return option;
	    },
	
	    render: function render() {
	        var menudatas = [{
	            name: '个人网银/集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1', submenus: [] }, { name: 'Locator2', submenus: [] }, { name: 'Locator3', submenus: [] }, { name: 'Locator4', submenus: [] }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }, {
	            name: '参数集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1' }, { name: 'Locator2' }, { name: 'Locator3' }, { name: 'Locator4' }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }, {
	            name: '企业集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1' }, { name: 'Locator2' }, { name: 'Locator3' }, { name: 'Locator4' }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }];
	        // 指定图表的配置项和数据
	        var chartConfig = this.getChartConfig();
	
	        var tableHeads = ['指标项', '指标值', '采集时间'];
	
	        var rowDatas = [['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00']];
	        var currentUser = {
	            id: 'liuyong',
	            name: '刘勇',
	            role: 'ADMIN'
	        };
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(BoardContent, { boardType: 'queryBoard',
	                menudatas: menudatas,
	                chartConfig: chartConfig,
	                tableHeads: tableHeads,
	                rowDatas: rowDatas })
	        );
	    }
	
	});
	
	exports.DashBoardUI = React.createClass({
	    displayName: 'DashBoardUI',
	
	
	    getChartConfigs: function getChartConfigs() {
	        var configs = [];
	        var charts = ['CpuUsage', 'CurrentHeapSize', 'ClientConnectionCount', 'GarbageCollectionCount', 'JVMPauses', 'TotalFileDescriptorOpen'];
	        for (var i = 0; i < charts.length; i++) {
	            configs.push(this.getChartConfig(charts[i]));
	        };
	        return configs;
	    },
	
	    getChartConfig: function getChartConfig(chartName) {
	        function randomData() {
	            now = new Date(+now + oneDay);
	            value = value + Math.random() * 21 - 10;
	            return {
	                name: now.toString(),
	                value: [[now.getFullYear(), now.getMonth() + 1, now.getDate()].join('-'), Math.round(value)]
	            };
	        }
	
	        var data = [];
	        var now = +new Date(1997, 9, 3);
	        var oneDay = 24 * 3600 * 1000;
	        var value = Math.random() * 1000;
	        for (var i = 0; i < 1000; i++) {
	            data.push(randomData());
	        }
	
	        var option = {
	            chartStyle: { width: "600px", height: "400px" },
	            title: {
	                text: chartName
	            },
	            tooltip: {
	                trigger: 'axis',
	                formatter: function formatter(params) {
	                    params = params[0];
	                    var date = new Date(params.name);
	                    return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear() + ' : ' + params.value[1];
	                },
	                axisPointer: {
	                    animation: false
	                }
	            },
	            xAxis: {
	                type: 'time',
	                splitLine: {
	                    show: false
	                }
	            },
	            yAxis: {
	                type: 'value',
	                boundaryGap: [0, '100%'],
	                splitLine: {
	                    show: false
	                }
	            },
	            series: [{
	                name: 'CpuUsage',
	                type: 'line',
	                showSymbol: false,
	                hoverAnimation: false,
	                data: data
	            }]
	        };
	
	        //option = {
	        //    chartStyle: {width:"900", height:"600px"},
	        //    //className:"img-responsive",//can delete if required
	        //    title: {
	        //        text: 'ECharts 入门示例'
	        //    },
	        //    tooltip: {},
	        //    legend: {
	        //        data:['销量']
	        //    },
	        //    xAxis: {
	        //        data: ["衬衫","羊毛衫","雪纺衫","裤子","高跟鞋","袜子"]
	        //    },
	        //    yAxis: {},
	        //    series: [{
	        //        name: '销量',
	        //        type: 'bar',
	        //        data: [5, 20, 36, 10, 10, 20]
	        //    }]
	        //};
	
	        return option;
	    },
	
	    getInitialState: function getInitialState() {
	        return {
	            currentNode: {},
	            chartConfigs: [],
	            startDateTime: '',
	            endDateTime: ''
	        };
	    },
	
	    render: function render() {
	
	        var menudatas = [{
	            name: '个人网银/集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1', submenus: [] }, { name: 'Locator2', submenus: [] }, { name: 'Locator3', submenus: [] }, { name: 'Locator4', submenus: [] }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }, {
	            name: '参数集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1' }, { name: 'Locator2' }, { name: 'Locator3' }, { name: 'Locator4' }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }, {
	            name: '企业集群',
	            submenus: [{
	                name: 'Locators',
	                submenus: [{ name: 'Locator1' }, { name: 'Locator2' }, { name: 'Locator3' }, { name: 'Locator4' }]
	            }, {
	                name: 'CacheServers',
	                submenus: [{ name: 'CacheServers1' }, { name: 'CacheServers2' }, { name: 'CacheServers3' }, { name: 'CacheServers4' }]
	            }]
	        }];
	
	        var chartConfigs = this.getChartConfigs();
	
	        var currentUser = {
	            id: 'liuyong',
	            name: '刘勇',
	            role: 'ADMIN'
	        };
	
	        return React.createElement(
	            'div',
	            null,
	            React.createElement(BoardContent, { menudatas: menudatas,
	                boardType: 'dashboard',
	                chartConfigs: chartConfigs })
	        );
	    }
	
	});

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // modules/NavLink.js
	
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(159);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _react2.default.createClass({
	  displayName: 'NavLink',
	  render: function render() {
	    return _react2.default.createElement(_reactRouter.Link, _extends({}, this.props, { activeClassName: 'active' }));
	  }
	});

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(1);
	var echarts = __webpack_require__(221);
	
	exports.ECharts = React.createClass({
	
	  displayName: "ECharts",
	
	  filterMap: function filterMap(filterArray, props) {
	    var options = {};
	    filterArray.map(function (key) {
	      var option = props[key];
	      if (option !== undefined) {
	        options[key] = option;
	      }
	    });
	    return options;
	  },
	
	  componentDidMount: function componentDidMount() {
	    var onReady = this.props.onReady;
	
	    this.initChart();
	    if (onReady) onReady(this.chart);
	  },
	
	  componentDidUpdate: function componentDidUpdate(prevProps) {
	    this.reRenderChart(this.props);
	  },
	
	  componentWillUnmount: function componentWillUnmount() {
	    this.chart.dispose();
	  },
	
	  reRenderChart: function reRenderChart(chart_options) {
	    this.chart.setOption(chart_options, chart_options.theme);
	  },
	
	  initChart: function initChart() {
	    // 指定图表的配置项和数据
	    var node = this.refs.chart;
	    var options = this.filterMap(['backgroundColor', 'animation', 'calculable', 'renderAsImage', 'timeline', 'title', 'toolbox', 'tooltip', 'legend', 'dataRange', 'dataZoom', 'roamController', 'grid', 'color', 'xAxis', 'yAxis', 'series'], this.props);
	    this.chart = echarts.init(node);
	    this.chart.setOption(options, this.props.theme);
	  },
	
	  render: function render() {
	    return React.createElement('div', { ref: 'chart', className: this.props.className, style: this.props.chartStyle });
	  }
	
	});

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Export echarts as CommonJS module
	 */
	module.exports = __webpack_require__(222);
	
	// Import all charts and components
	__webpack_require__(312);
	__webpack_require__(348);
	__webpack_require__(353);
	__webpack_require__(362);
	__webpack_require__(366);
	
	__webpack_require__(376);
	__webpack_require__(398);
	__webpack_require__(410);
	__webpack_require__(428);
	__webpack_require__(432);
	__webpack_require__(436);
	__webpack_require__(451);
	__webpack_require__(457);
	__webpack_require__(464);
	__webpack_require__(470);
	__webpack_require__(474);
	__webpack_require__(479);
	
	__webpack_require__(327);
	__webpack_require__(483);
	__webpack_require__(489);
	__webpack_require__(493);
	__webpack_require__(504);
	__webpack_require__(437);
	
	__webpack_require__(506);
	
	__webpack_require__(507);
	__webpack_require__(521);
	
	__webpack_require__(536);
	__webpack_require__(540);
	
	__webpack_require__(543);
	__webpack_require__(552);
	
	__webpack_require__(565);

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * ECharts, a javascript interactive chart library.
	 *
	 * Copyright (c) 2015, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/echarts/blob/master/LICENSE.txt
	 */
	
	/**
	 * @module echarts
	 */
	
	var GlobalModel = __webpack_require__(223);
	var ExtensionAPI = __webpack_require__(245);
	var CoordinateSystemManager = __webpack_require__(246);
	var OptionManager = __webpack_require__(247);
	
	var ComponentModel = __webpack_require__(240);
	var SeriesModel = __webpack_require__(248);
	
	var ComponentView = __webpack_require__(249);
	var ChartView = __webpack_require__(262);
	var graphic = __webpack_require__(263);
	
	var zrender = __webpack_require__(298);
	var zrUtil = __webpack_require__(224);
	var colorTool = __webpack_require__(259);
	var env = __webpack_require__(299);
	var Eventful = __webpack_require__(253);
	
	var each = zrUtil.each;
	
	var VISUAL_CODING_STAGES = ['echarts', 'chart', 'component'];
	
	// TODO Transform first or filter first
	var PROCESSOR_STAGES = ['transform', 'filter', 'statistic'];
	
	function createRegisterEventWithLowercaseName(method) {
	    return function (eventName, handler, context) {
	        // Event name is all lowercase
	        eventName = eventName && eventName.toLowerCase();
	        Eventful.prototype[method].call(this, eventName, handler, context);
	    };
	}
	/**
	 * @module echarts~MessageCenter
	 */
	function MessageCenter() {
	    Eventful.call(this);
	}
	MessageCenter.prototype.on = createRegisterEventWithLowercaseName('on');
	MessageCenter.prototype.off = createRegisterEventWithLowercaseName('off');
	MessageCenter.prototype.one = createRegisterEventWithLowercaseName('one');
	zrUtil.mixin(MessageCenter, Eventful);
	/**
	 * @module echarts~ECharts
	 */
	function ECharts(dom, theme, opts) {
	    opts = opts || {};
	
	    // Get theme by name
	    if (typeof theme === 'string') {
	        theme = themeStorage[theme];
	    }
	
	    if (theme) {
	        each(optionPreprocessorFuncs, function (preProcess) {
	            preProcess(theme);
	        });
	    }
	    /**
	     * @type {string}
	     */
	    this.id;
	    /**
	     * Group id
	     * @type {string}
	     */
	    this.group;
	    /**
	     * @type {HTMLDomElement}
	     * @private
	     */
	    this._dom = dom;
	    /**
	     * @type {module:zrender/ZRender}
	     * @private
	     */
	    this._zr = zrender.init(dom, {
	        renderer: opts.renderer || 'canvas',
	        devicePixelRatio: opts.devicePixelRatio
	    });
	
	    /**
	     * @type {Object}
	     * @private
	     */
	    this._theme = zrUtil.clone(theme);
	
	    /**
	     * @type {Array.<module:echarts/view/Chart>}
	     * @private
	     */
	    this._chartsViews = [];
	
	    /**
	     * @type {Object.<string, module:echarts/view/Chart>}
	     * @private
	     */
	    this._chartsMap = {};
	
	    /**
	     * @type {Array.<module:echarts/view/Component>}
	     * @private
	     */
	    this._componentsViews = [];
	
	    /**
	     * @type {Object.<string, module:echarts/view/Component>}
	     * @private
	     */
	    this._componentsMap = {};
	
	    /**
	     * @type {module:echarts/ExtensionAPI}
	     * @private
	     */
	    this._api = new ExtensionAPI(this);
	
	    /**
	     * @type {module:echarts/CoordinateSystem}
	     * @private
	     */
	    this._coordSysMgr = new CoordinateSystemManager();
	
	    Eventful.call(this);
	
	    /**
	     * @type {module:echarts~MessageCenter}
	     * @private
	     */
	    this._messageCenter = new MessageCenter();
	
	    // Init mouse events
	    this._initEvents();
	
	    // In case some people write `window.onresize = chart.resize`
	    this.resize = zrUtil.bind(this.resize, this);
	}
	
	var echartsProto = ECharts.prototype;
	
	/**
	 * @return {HTMLDomElement}
	 */
	echartsProto.getDom = function () {
	    return this._dom;
	};
	
	/**
	 * @return {module:zrender~ZRender}
	 */
	echartsProto.getZr = function () {
	    return this._zr;
	};
	
	/**
	 * @param {Object} option
	 * @param {boolean} notMerge
	 * @param {boolean} [notRefreshImmediately=false] Useful when setOption frequently.
	 */
	echartsProto.setOption = function (option, notMerge, notRefreshImmediately) {
	    if (!this._model || notMerge) {
	        this._model = new GlobalModel(null, null, this._theme, new OptionManager(this._api));
	    }
	
	    this._model.setOption(option, optionPreprocessorFuncs);
	
	    updateMethods.prepareAndUpdate.call(this);
	
	    !notRefreshImmediately && this._zr.refreshImmediately();
	};
	
	/**
	 * @DEPRECATED
	 */
	echartsProto.setTheme = function () {
	    console.log('ECharts#setTheme() is DEPRECATED in ECharts 3.0');
	};
	
	/**
	 * @return {module:echarts/model/Global}
	 */
	echartsProto.getModel = function () {
	    return this._model;
	};
	
	/**
	 * @return {Object}
	 */
	echartsProto.getOption = function () {
	    return this._model.getOption();
	};
	
	/**
	 * @return {number}
	 */
	echartsProto.getWidth = function () {
	    return this._zr.getWidth();
	};
	
	/**
	 * @return {number}
	 */
	echartsProto.getHeight = function () {
	    return this._zr.getHeight();
	};
	
	/**
	 * Get canvas which has all thing rendered
	 * @param {Object} opts
	 * @param {string} [opts.backgroundColor]
	 */
	echartsProto.getRenderedCanvas = function (opts) {
	    if (!env.canvasSupported) {
	        return;
	    }
	    opts = opts || {};
	    opts.pixelRatio = opts.pixelRatio || 1;
	    opts.backgroundColor = opts.backgroundColor || this._model.get('backgroundColor');
	    var zr = this._zr;
	    var list = zr.storage.getDisplayList();
	    // Stop animations
	    zrUtil.each(list, function (el) {
	        el.stopAnimation(true);
	    });
	    return zr.painter.getRenderedCanvas(opts);
	};
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */
	echartsProto.getDataURL = function (opts) {
	    opts = opts || {};
	    var excludeComponents = opts.excludeComponents;
	    var ecModel = this._model;
	    var excludesComponentViews = [];
	    var self = this;
	
	    each(excludeComponents, function (componentType) {
	        ecModel.eachComponent({
	            mainType: componentType
	        }, function (component) {
	            var view = self._componentsMap[component.__viewId];
	            if (!view.group.ignore) {
	                excludesComponentViews.push(view);
	                view.group.ignore = true;
	            }
	        });
	    });
	
	    var url = this.getRenderedCanvas(opts).toDataURL('image/' + (opts && opts.type || 'png'));
	
	    each(excludesComponentViews, function (view) {
	        view.group.ignore = false;
	    });
	    return url;
	};
	
	/**
	 * @return {string}
	 * @param {Object} opts
	 * @param {string} [opts.type='png']
	 * @param {string} [opts.pixelRatio=1]
	 * @param {string} [opts.backgroundColor]
	 */
	echartsProto.getConnectedDataURL = function (opts) {
	    if (!env.canvasSupported) {
	        return;
	    }
	    var groupId = this.group;
	    var mathMin = Math.min;
	    var mathMax = Math.max;
	    var MAX_NUMBER = Infinity;
	    if (connectedGroups[groupId]) {
	        var left = MAX_NUMBER;
	        var top = MAX_NUMBER;
	        var right = -MAX_NUMBER;
	        var bottom = -MAX_NUMBER;
	        var canvasList = [];
	        var dpr = opts && opts.pixelRatio || 1;
	        for (var id in instances) {
	            var chart = instances[id];
	            if (chart.group === groupId) {
	                var canvas = chart.getRenderedCanvas(zrUtil.clone(opts));
	                var boundingRect = chart.getDom().getBoundingClientRect();
	                left = mathMin(boundingRect.left, left);
	                top = mathMin(boundingRect.top, top);
	                right = mathMax(boundingRect.right, right);
	                bottom = mathMax(boundingRect.bottom, bottom);
	                canvasList.push({
	                    dom: canvas,
	                    left: boundingRect.left,
	                    top: boundingRect.top
	                });
	            }
	        }
	
	        left *= dpr;
	        top *= dpr;
	        right *= dpr;
	        bottom *= dpr;
	        var width = right - left;
	        var height = bottom - top;
	        var targetCanvas = zrUtil.createCanvas();
	        targetCanvas.width = width;
	        targetCanvas.height = height;
	        var zr = zrender.init(targetCanvas);
	
	        each(canvasList, function (item) {
	            var img = new graphic.Image({
	                style: {
	                    x: item.left * dpr - left,
	                    y: item.top * dpr - top,
	                    image: item.dom
	                }
	            });
	            zr.add(img);
	        });
	        zr.refreshImmediately();
	
	        return targetCanvas.toDataURL('image/' + (opts && opts.type || 'png'));
	    } else {
	        return this.getDataURL(opts);
	    }
	};
	
	var updateMethods = {
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    update: function update(payload) {
	        // console.time && console.time('update');
	
	        var ecModel = this._model;
	        var api = this._api;
	        var coordSysMgr = this._coordSysMgr;
	        // update before setOption
	        if (!ecModel) {
	            return;
	        }
	
	        ecModel.restoreData();
	
	        // TODO
	        // Save total ecModel here for undo/redo (after restoring data and before processing data).
	        // Undo (restoration of total ecModel) can be carried out in 'action' or outside API call.
	
	        // Create new coordinate system each update
	        // In LineView may save the old coordinate system and use it to get the orignal point
	        coordSysMgr.create(this._model, this._api);
	
	        processData.call(this, ecModel, api);
	
	        stackSeriesData.call(this, ecModel);
	
	        coordSysMgr.update(ecModel, api);
	
	        doLayout.call(this, ecModel, payload);
	
	        doVisualCoding.call(this, ecModel, payload);
	
	        doRender.call(this, ecModel, payload);
	
	        // Set background
	        var backgroundColor = ecModel.get('backgroundColor') || 'transparent';
	
	        var painter = this._zr.painter;
	        // TODO all use clearColor ?
	        if (painter.isSingleCanvas && painter.isSingleCanvas()) {
	            this._zr.configLayer(0, {
	                clearColor: backgroundColor
	            });
	        } else {
	            // In IE8
	            if (!env.canvasSupported) {
	                var colorArr = colorTool.parse(backgroundColor);
	                backgroundColor = colorTool.stringify(colorArr, 'rgb');
	                if (colorArr[3] === 0) {
	                    backgroundColor = 'transparent';
	                }
	            }
	            backgroundColor = backgroundColor;
	            this._dom.style.backgroundColor = backgroundColor;
	        }
	
	        // console.time && console.timeEnd('update');
	    },
	
	    // PENDING
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateView: function updateView(payload) {
	        var ecModel = this._model;
	
	        // update before setOption
	        if (!ecModel) {
	            return;
	        }
	
	        doLayout.call(this, ecModel, payload);
	
	        doVisualCoding.call(this, ecModel, payload);
	
	        invokeUpdateMethod.call(this, 'updateView', ecModel, payload);
	    },
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateVisual: function updateVisual(payload) {
	        var ecModel = this._model;
	
	        // update before setOption
	        if (!ecModel) {
	            return;
	        }
	
	        doVisualCoding.call(this, ecModel, payload);
	
	        invokeUpdateMethod.call(this, 'updateVisual', ecModel, payload);
	    },
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    updateLayout: function updateLayout(payload) {
	        var ecModel = this._model;
	
	        // update before setOption
	        if (!ecModel) {
	            return;
	        }
	
	        doLayout.call(this, ecModel, payload);
	
	        invokeUpdateMethod.call(this, 'updateLayout', ecModel, payload);
	    },
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    highlight: function highlight(payload) {
	        toggleHighlight.call(this, 'highlight', payload);
	    },
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    downplay: function downplay(payload) {
	        toggleHighlight.call(this, 'downplay', payload);
	    },
	
	    /**
	     * @param {Object} payload
	     * @private
	     */
	    prepareAndUpdate: function prepareAndUpdate(payload) {
	        var ecModel = this._model;
	
	        prepareView.call(this, 'component', ecModel);
	
	        prepareView.call(this, 'chart', ecModel);
	
	        updateMethods.update.call(this, payload);
	    }
	};
	
	/**
	 * @param {Object} payload
	 * @private
	 */
	function toggleHighlight(method, payload) {
	    var ecModel = this._model;
	
	    // dispatchAction before setOption
	    if (!ecModel) {
	        return;
	    }
	
	    ecModel.eachComponent({ mainType: 'series', query: payload }, function (seriesModel, index) {
	        var chartView = this._chartsMap[seriesModel.__viewId];
	        if (chartView && chartView.__alive) {
	            chartView[method](seriesModel, ecModel, this._api, payload);
	        }
	    }, this);
	}
	
	/**
	 * Resize the chart
	 */
	echartsProto.resize = function () {
	    this._zr.resize();
	
	    var optionChanged = this._model && this._model.resetOption('media');
	    updateMethods[optionChanged ? 'prepareAndUpdate' : 'update'].call(this);
	
	    // Resize loading effect
	    this._loadingFX && this._loadingFX.resize();
	};
	
	var defaultLoadingEffect = __webpack_require__(308);
	/**
	 * Show loading effect
	 * @param  {string} [name='default']
	 * @param  {Object} [cfg]
	 */
	echartsProto.showLoading = function (name, cfg) {
	    if (zrUtil.isObject(name)) {
	        cfg = name;
	        name = 'default';
	    }
	    var el = defaultLoadingEffect(this._api, cfg);
	    var zr = this._zr;
	    this._loadingFX = el;
	
	    zr.add(el);
	};
	
	/**
	 * Hide loading effect
	 */
	echartsProto.hideLoading = function () {
	    this._loadingFX && this._zr.remove(this._loadingFX);
	    this._loadingFX = null;
	};
	
	/**
	 * @param {Object} eventObj
	 * @return {Object}
	 */
	echartsProto.makeActionFromEvent = function (eventObj) {
	    var payload = zrUtil.extend({}, eventObj);
	    payload.type = eventActionMap[eventObj.type];
	    return payload;
	};
	
	/**
	 * @pubilc
	 * @param {Object} payload
	 * @param {string} [payload.type] Action type
	 * @param {boolean} [silent=false] Whether trigger event.
	 */
	echartsProto.dispatchAction = function (payload, silent) {
	    var actionWrap = actions[payload.type];
	    if (actionWrap) {
	        var actionInfo = actionWrap.actionInfo;
	        var updateMethod = actionInfo.update || 'update';
	
	        var payloads = [payload];
	        var batched = false;
	        // Batch action
	        if (payload.batch) {
	            batched = true;
	            payloads = zrUtil.map(payload.batch, function (item) {
	                item = zrUtil.defaults(zrUtil.extend({}, item), payload);
	                item.batch = null;
	                return item;
	            });
	        }
	
	        var eventObjBatch = [];
	        var eventObj;
	        var isHighlightOrDownplay = payload.type === 'highlight' || payload.type === 'downplay';
	        for (var i = 0; i < payloads.length; i++) {
	            var batchItem = payloads[i];
	            // Action can specify the event by return it.
	            eventObj = actionWrap.action(batchItem, this._model);
	            // Emit event outside
	            eventObj = eventObj || zrUtil.extend({}, batchItem);
	            // Convert type to eventType
	            eventObj.type = actionInfo.event || eventObj.type;
	            eventObjBatch.push(eventObj);
	
	            // Highlight and downplay are special.
	            isHighlightOrDownplay && updateMethods[updateMethod].call(this, batchItem);
	        }
	
	        updateMethod !== 'none' && !isHighlightOrDownplay && updateMethods[updateMethod].call(this, payload);
	        if (!silent) {
	            // Follow the rule of action batch
	            if (batched) {
	                eventObj = {
	                    type: eventObjBatch[0].type,
	                    batch: eventObjBatch
	                };
	            } else {
	                eventObj = eventObjBatch[0];
	            }
	            this._messageCenter.trigger(eventObj.type, eventObj);
	        }
	    }
	};
	
	/**
	 * Register event
	 * @method
	 */
	echartsProto.on = createRegisterEventWithLowercaseName('on');
	echartsProto.off = createRegisterEventWithLowercaseName('off');
	echartsProto.one = createRegisterEventWithLowercaseName('one');
	
	/**
	 * @param {string} methodName
	 * @private
	 */
	function invokeUpdateMethod(methodName, ecModel, payload) {
	    var api = this._api;
	
	    // Update all components
	    each(this._componentsViews, function (component) {
	        var componentModel = component.__model;
	        component[methodName](componentModel, ecModel, api, payload);
	
	        updateZ(componentModel, component);
	    }, this);
	
	    // Upate all charts
	    ecModel.eachSeries(function (seriesModel, idx) {
	        var chart = this._chartsMap[seriesModel.__viewId];
	        chart[methodName](seriesModel, ecModel, api, payload);
	
	        updateZ(seriesModel, chart);
	    }, this);
	}
	
	/**
	 * Prepare view instances of charts and components
	 * @param  {module:echarts/model/Global} ecModel
	 * @private
	 */
	function prepareView(type, ecModel) {
	    var isComponent = type === 'component';
	    var viewList = isComponent ? this._componentsViews : this._chartsViews;
	    var viewMap = isComponent ? this._componentsMap : this._chartsMap;
	    var zr = this._zr;
	
	    for (var i = 0; i < viewList.length; i++) {
	        viewList[i].__alive = false;
	    }
	
	    ecModel[isComponent ? 'eachComponent' : 'eachSeries'](function (componentType, model) {
	        if (isComponent) {
	            if (componentType === 'series') {
	                return;
	            }
	        } else {
	            model = componentType;
	        }
	
	        // Consider: id same and type changed.
	        var viewId = model.id + '_' + model.type;
	        var view = viewMap[viewId];
	        if (!view) {
	            var classType = ComponentModel.parseClassType(model.type);
	            var Clazz = isComponent ? ComponentView.getClass(classType.main, classType.sub) : ChartView.getClass(classType.sub);
	            if (Clazz) {
	                view = new Clazz();
	                view.init(ecModel, this._api);
	                viewMap[viewId] = view;
	                viewList.push(view);
	                zr.add(view.group);
	            } else {
	                // Error
	                return;
	            }
	        }
	
	        model.__viewId = viewId;
	        view.__alive = true;
	        view.__id = viewId;
	        view.__model = model;
	    }, this);
	
	    for (var i = 0; i < viewList.length;) {
	        var view = viewList[i];
	        if (!view.__alive) {
	            zr.remove(view.group);
	            view.dispose(ecModel, this._api);
	            viewList.splice(i, 1);
	            delete viewMap[view.__id];
	        } else {
	            i++;
	        }
	    }
	}
	
	/**
	 * Processor data in each series
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */
	function processData(ecModel, api) {
	    each(PROCESSOR_STAGES, function (stage) {
	        each(dataProcessorFuncs[stage] || [], function (process) {
	            process(ecModel, api);
	        });
	    });
	}
	
	/**
	 * @private
	 */
	function stackSeriesData(ecModel) {
	    var stackedDataMap = {};
	    ecModel.eachSeries(function (series) {
	        var stack = series.get('stack');
	        var data = series.getData();
	        if (stack && data.type === 'list') {
	            var previousStack = stackedDataMap[stack];
	            if (previousStack) {
	                data.stackedOn = previousStack;
	            }
	            stackedDataMap[stack] = data;
	        }
	    });
	}
	
	/**
	 * Layout before each chart render there series, after visual coding and data processing
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */
	function doLayout(ecModel, payload) {
	    var api = this._api;
	    each(layoutFuncs, function (layout) {
	        layout(ecModel, api, payload);
	    });
	}
	
	/**
	 * Code visual infomation from data after data processing
	 *
	 * @param {module:echarts/model/Global} ecModel
	 * @private
	 */
	function doVisualCoding(ecModel, payload) {
	    each(VISUAL_CODING_STAGES, function (stage) {
	        each(visualCodingFuncs[stage] || [], function (visualCoding) {
	            visualCoding(ecModel, payload);
	        });
	    });
	}
	
	/**
	 * Render each chart and component
	 * @private
	 */
	function doRender(ecModel, payload) {
	    var api = this._api;
	    // Render all components
	    each(this._componentsViews, function (componentView) {
	        var componentModel = componentView.__model;
	        componentView.render(componentModel, ecModel, api, payload);
	
	        updateZ(componentModel, componentView);
	    }, this);
	
	    each(this._chartsViews, function (chart) {
	        chart.__alive = false;
	    }, this);
	
	    // Render all charts
	    ecModel.eachSeries(function (seriesModel, idx) {
	        var chartView = this._chartsMap[seriesModel.__viewId];
	        chartView.__alive = true;
	        chartView.render(seriesModel, ecModel, api, payload);
	
	        updateZ(seriesModel, chartView);
	    }, this);
	
	    // Remove groups of unrendered charts
	    each(this._chartsViews, function (chart) {
	        if (!chart.__alive) {
	            chart.remove(ecModel, api);
	        }
	    }, this);
	}
	
	var MOUSE_EVENT_NAMES = ['click', 'dblclick', 'mouseover', 'mouseout', 'globalout'];
	/**
	 * @private
	 */
	echartsProto._initEvents = function () {
	    var zr = this._zr;
	    each(MOUSE_EVENT_NAMES, function (eveName) {
	        zr.on(eveName, function (e) {
	            var ecModel = this.getModel();
	            var el = e.target;
	            if (el && el.dataIndex != null) {
	                var hostModel = el.hostModel || ecModel.getSeriesByIndex(el.seriesIndex);
	                var params = hostModel && hostModel.getDataParams(el.dataIndex) || {};
	                params.event = e;
	                params.type = eveName;
	                this.trigger(eveName, params);
	            }
	        }, this);
	    }, this);
	
	    each(eventActionMap, function (actionType, eventType) {
	        this._messageCenter.on(eventType, function (event) {
	            this.trigger(eventType, event);
	        }, this);
	    }, this);
	};
	
	/**
	 * @return {boolean}
	 */
	echartsProto.isDisposed = function () {
	    return this._disposed;
	};
	
	/**
	 * Clear
	 */
	echartsProto.clear = function () {
	    this.setOption({}, true);
	};
	/**
	 * Dispose instance
	 */
	echartsProto.dispose = function () {
	    this._disposed = true;
	    var api = this._api;
	    var ecModel = this._model;
	
	    each(this._componentsViews, function (component) {
	        component.dispose(ecModel, api);
	    });
	    each(this._chartsViews, function (chart) {
	        chart.dispose(ecModel, api);
	    });
	
	    this._zr.dispose();
	
	    instances[this.id] = null;
	};
	
	zrUtil.mixin(ECharts, Eventful);
	
	/**
	 * @param {module:echarts/model/Series|module:echarts/model/Component} model
	 * @param {module:echarts/view/Component|module:echarts/view/Chart} view
	 * @return {string}
	 */
	function updateZ(model, view) {
	    var z = model.get('z');
	    var zlevel = model.get('zlevel');
	    // Set z and zlevel
	    view.group.traverse(function (el) {
	        z != null && (el.z = z);
	        zlevel != null && (el.zlevel = zlevel);
	    });
	}
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	var actions = [];
	
	/**
	 * Map eventType to actionType
	 * @type {Object}
	 */
	var eventActionMap = {};
	
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	var layoutFuncs = [];
	
	/**
	 * Data processor functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */
	var dataProcessorFuncs = {};
	
	/**
	 * @type {Array.<Function>}
	 * @inner
	 */
	var optionPreprocessorFuncs = [];
	
	/**
	 * Visual coding functions of each stage
	 * @type {Array.<Object.<string, Function>>}
	 * @inner
	 */
	var visualCodingFuncs = {};
	/**
	 * Theme storage
	 * @type {Object.<key, Object>}
	 */
	var themeStorage = {};
	
	var instances = {};
	var connectedGroups = {};
	
	var idBase = new Date() - 0;
	var groupIdBase = new Date() - 0;
	var DOM_ATTRIBUTE_KEY = '_echarts_instance_';
	/**
	 * @alias module:echarts
	 */
	var echarts = {
	    /**
	     * @type {number}
	     */
	    version: '3.1.3',
	    dependencies: {
	        zrender: '3.0.4'
	    }
	};
	
	function enableConnect(chart) {
	
	    var STATUS_PENDING = 0;
	    var STATUS_UPDATING = 1;
	    var STATUS_UPDATED = 2;
	    var STATUS_KEY = '__connectUpdateStatus';
	    function updateConnectedChartsStatus(charts, status) {
	        for (var i = 0; i < charts.length; i++) {
	            var otherChart = charts[i];
	            otherChart[STATUS_KEY] = status;
	        }
	    }
	    zrUtil.each(eventActionMap, function (actionType, eventType) {
	        chart._messageCenter.on(eventType, function (event) {
	            if (connectedGroups[chart.group] && chart[STATUS_KEY] !== STATUS_PENDING) {
	                var action = chart.makeActionFromEvent(event);
	                var otherCharts = [];
	                for (var id in instances) {
	                    var otherChart = instances[id];
	                    if (otherChart !== chart && otherChart.group === chart.group) {
	                        otherCharts.push(otherChart);
	                    }
	                }
	                updateConnectedChartsStatus(otherCharts, STATUS_PENDING);
	                each(otherCharts, function (otherChart) {
	                    if (otherChart[STATUS_KEY] !== STATUS_UPDATING) {
	                        otherChart.dispatchAction(action);
	                    }
	                });
	                updateConnectedChartsStatus(otherCharts, STATUS_UPDATED);
	            }
	        });
	    });
	}
	/**
	 * @param {HTMLDomElement} dom
	 * @param {Object} [theme]
	 * @param {Object} opts
	 */
	echarts.init = function (dom, theme, opts) {
	    // Check version
	    if (zrender.version.replace('.', '') - 0 < echarts.dependencies.zrender.replace('.', '') - 0) {
	        throw new Error('ZRender ' + zrender.version + ' is too old for ECharts ' + echarts.version + '. Current version need ZRender ' + echarts.dependencies.zrender + '+');
	    }
	    if (!dom) {
	        throw new Error('Initialize failed: invalid dom.');
	    }
	
	    var chart = new ECharts(dom, theme, opts);
	    chart.id = 'ec_' + idBase++;
	    instances[chart.id] = chart;
	
	    dom.setAttribute && dom.setAttribute(DOM_ATTRIBUTE_KEY, chart.id);
	
	    enableConnect(chart);
	
	    return chart;
	};
	
	/**
	 * @return {string|Array.<module:echarts~ECharts>} groupId
	 */
	echarts.connect = function (groupId) {
	    // Is array of charts
	    if (zrUtil.isArray(groupId)) {
	        var charts = groupId;
	        groupId = null;
	        // If any chart has group
	        zrUtil.each(charts, function (chart) {
	            if (chart.group != null) {
	                groupId = chart.group;
	            }
	        });
	        groupId = groupId || 'g_' + groupIdBase++;
	        zrUtil.each(charts, function (chart) {
	            chart.group = groupId;
	        });
	    }
	    connectedGroups[groupId] = true;
	    return groupId;
	};
	
	/**
	 * @return {string} groupId
	 */
	echarts.disConnect = function (groupId) {
	    connectedGroups[groupId] = false;
	};
	
	/**
	 * Dispose a chart instance
	 * @param  {module:echarts~ECharts|HTMLDomElement|string} chart
	 */
	echarts.dispose = function (chart) {
	    if (zrUtil.isDom(chart)) {
	        chart = echarts.getInstanceByDom(chart);
	    } else if (typeof chart === 'string') {
	        chart = instances[chart];
	    }
	    if (chart instanceof ECharts && !chart.isDisposed()) {
	        chart.dispose();
	    }
	};
	
	/**
	 * @param  {HTMLDomElement} dom
	 * @return {echarts~ECharts}
	 */
	echarts.getInstanceByDom = function (dom) {
	    var key = dom.getAttribute(DOM_ATTRIBUTE_KEY);
	    return instances[key];
	};
	/**
	 * @param {string} key
	 * @return {echarts~ECharts}
	 */
	echarts.getInstanceById = function (key) {
	    return instances[key];
	};
	
	/**
	 * Register theme
	 */
	echarts.registerTheme = function (name, theme) {
	    themeStorage[name] = theme;
	};
	
	/**
	 * Register option preprocessor
	 * @param {Function} preprocessorFunc
	 */
	echarts.registerPreprocessor = function (preprocessorFunc) {
	    optionPreprocessorFuncs.push(preprocessorFunc);
	};
	
	/**
	 * @param {string} stage
	 * @param {Function} processorFunc
	 */
	echarts.registerProcessor = function (stage, processorFunc) {
	    if (zrUtil.indexOf(PROCESSOR_STAGES, stage) < 0) {
	        throw new Error('stage should be one of ' + PROCESSOR_STAGES);
	    }
	    var funcs = dataProcessorFuncs[stage] || (dataProcessorFuncs[stage] = []);
	    funcs.push(processorFunc);
	};
	
	/**
	 * Usage:
	 * registerAction('someAction', 'someEvent', function () { ... });
	 * registerAction('someAction', function () { ... });
	 * registerAction(
	 *     {type: 'someAction', event: 'someEvent', update: 'updateView'},
	 *     function () { ... }
	 * );
	 *
	 * @param {(string|Object)} actionInfo
	 * @param {string} actionInfo.type
	 * @param {string} [actionInfo.event]
	 * @param {string} [actionInfo.update]
	 * @param {string} [eventName]
	 * @param {Function} action
	 */
	echarts.registerAction = function (actionInfo, eventName, action) {
	    if (typeof eventName === 'function') {
	        action = eventName;
	        eventName = '';
	    }
	    var actionType = zrUtil.isObject(actionInfo) ? actionInfo.type : [actionInfo, actionInfo = {
	        event: eventName
	    }][0];
	
	    // Event name is all lowercase
	    actionInfo.event = (actionInfo.event || actionType).toLowerCase();
	    eventName = actionInfo.event;
	
	    if (!actions[actionType]) {
	        actions[actionType] = { action: action, actionInfo: actionInfo };
	    }
	    eventActionMap[eventName] = actionType;
	};
	
	/**
	 * @param {string} type
	 * @param {*} CoordinateSystem
	 */
	echarts.registerCoordinateSystem = function (type, CoordinateSystem) {
	    CoordinateSystemManager.register(type, CoordinateSystem);
	};
	
	/**
	 * @param {*} layout
	 */
	echarts.registerLayout = function (layout) {
	    // PENDING All functions ?
	    if (zrUtil.indexOf(layoutFuncs, layout) < 0) {
	        layoutFuncs.push(layout);
	    }
	};
	
	/**
	 * @param {string} stage
	 * @param {Function} visualCodingFunc
	 */
	echarts.registerVisualCoding = function (stage, visualCodingFunc) {
	    if (zrUtil.indexOf(VISUAL_CODING_STAGES, stage) < 0) {
	        throw new Error('stage should be one of ' + VISUAL_CODING_STAGES);
	    }
	    var funcs = visualCodingFuncs[stage] || (visualCodingFuncs[stage] = []);
	    funcs.push(visualCodingFunc);
	};
	
	/**
	 * @param {Object} opts
	 */
	echarts.extendChartView = function (opts) {
	    return ChartView.extend(opts);
	};
	
	/**
	 * @param {Object} opts
	 */
	echarts.extendComponentModel = function (opts) {
	    return ComponentModel.extend(opts);
	};
	
	/**
	 * @param {Object} opts
	 */
	echarts.extendSeriesModel = function (opts) {
	    return SeriesModel.extend(opts);
	};
	
	/**
	 * @param {Object} opts
	 */
	echarts.extendComponentView = function (opts) {
	    return ComponentView.extend(opts);
	};
	
	/**
	 * ZRender need a canvas context to do measureText.
	 * But in node environment canvas may be created by node-canvas.
	 * So we need to specify how to create a canvas instead of using document.createElement('canvas')
	 *
	 * Be careful of using it in the browser.
	 *
	 * @param {Function} creator
	 * @example
	 *     var Canvas = require('canvas');
	 *     var echarts = require('echarts');
	 *     echarts.setCanvasCreator(function () {
	 *         // Small size is enough.
	 *         return new Canvas(32, 32);
	 *     });
	 */
	echarts.setCanvasCreator = function (creator) {
	    zrUtil.createCanvas = creator;
	};
	
	echarts.registerVisualCoding('echarts', zrUtil.curry(__webpack_require__(309), '', 'itemStyle'));
	echarts.registerPreprocessor(__webpack_require__(310));
	
	// Default action
	echarts.registerAction({
	    type: 'highlight',
	    event: 'highlight',
	    update: 'highlight'
	}, zrUtil.noop);
	echarts.registerAction({
	    type: 'downplay',
	    event: 'downplay',
	    update: 'downplay'
	}, zrUtil.noop);
	
	// --------
	// Exports
	// --------
	
	echarts.graphic = __webpack_require__(263);
	echarts.number = __webpack_require__(228);
	echarts.format = __webpack_require__(227);
	echarts.matrix = __webpack_require__(238);
	echarts.vector = __webpack_require__(237);
	
	echarts.util = {};
	each(['map', 'each', 'filter', 'indexOf', 'inherits', 'reduce', 'filter', 'bind', 'curry', 'isArray', 'isString', 'isObject', 'isFunction', 'extend'], function (name) {
	    echarts.util[name] = zrUtil[name];
	});
	
	module.exports = echarts;

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * ECharts global model
	 *
	 * @module {echarts/model/Global}
	 *
	 */
	
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var Model = __webpack_require__(229);
	var each = zrUtil.each;
	var filter = zrUtil.filter;
	var map = zrUtil.map;
	var isArray = zrUtil.isArray;
	var indexOf = zrUtil.indexOf;
	var isObject = zrUtil.isObject;
	
	var ComponentModel = __webpack_require__(240);
	
	var globalDefault = __webpack_require__(244);
	
	var OPTION_INNER_KEY = '\0_ec_inner';
	
	/**
	 * @alias module:echarts/model/Global
	 *
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {Object} theme
	 */
	var GlobalModel = Model.extend({
	
	    constructor: GlobalModel,
	
	    init: function init(option, parentModel, theme, optionManager) {
	        theme = theme || {};
	
	        this.option = null; // Mark as not initialized.
	
	        /**
	         * @type {module:echarts/model/Model}
	         * @private
	         */
	        this._theme = new Model(theme);
	
	        /**
	         * @type {module:echarts/model/OptionManager}
	         */
	        this._optionManager = optionManager;
	    },
	
	    setOption: function setOption(option, optionPreprocessorFuncs) {
	        zrUtil.assert(!(OPTION_INNER_KEY in option), 'please use chart.getOption()');
	
	        this._optionManager.setOption(option, optionPreprocessorFuncs);
	
	        this.resetOption();
	    },
	
	    /**
	     * @param {string} type null/undefined: reset all.
	     *                      'recreate': force recreate all.
	     *                      'timeline': only reset timeline option
	     *                      'media': only reset media query option
	     * @return {boolean} Whether option changed.
	     */
	    resetOption: function resetOption(type) {
	        var optionChanged = false;
	        var optionManager = this._optionManager;
	
	        if (!type || type === 'recreate') {
	            var baseOption = optionManager.mountOption(type === 'recreate');
	
	            if (!this.option || type === 'recreate') {
	                initBase.call(this, baseOption);
	            } else {
	                this.restoreData();
	                this.mergeOption(baseOption);
	            }
	            optionChanged = true;
	        }
	
	        if (type === 'timeline' || type === 'media') {
	            this.restoreData();
	        }
	
	        if (!type || type === 'recreate' || type === 'timeline') {
	            var timelineOption = optionManager.getTimelineOption(this);
	            timelineOption && (this.mergeOption(timelineOption), optionChanged = true);
	        }
	
	        if (!type || type === 'recreate' || type === 'media') {
	            var mediaOptions = optionManager.getMediaOption(this, this._api);
	            if (mediaOptions.length) {
	                each(mediaOptions, function (mediaOption) {
	                    this.mergeOption(mediaOption, optionChanged = true);
	                }, this);
	            }
	        }
	
	        return optionChanged;
	    },
	
	    /**
	     * @protected
	     */
	    mergeOption: function mergeOption(newOption) {
	        var option = this.option;
	        var componentsMap = this._componentsMap;
	        var newCptTypes = [];
	
	        // 如果不存在对应的 component model 则直接 merge
	        each(newOption, function (componentOption, mainType) {
	            if (componentOption == null) {
	                return;
	            }
	
	            if (!ComponentModel.hasClass(mainType)) {
	                option[mainType] = option[mainType] == null ? zrUtil.clone(componentOption) : zrUtil.merge(option[mainType], componentOption, true);
	            } else {
	                newCptTypes.push(mainType);
	            }
	        });
	
	        // FIXME OPTION 同步是否要改回原来的
	        ComponentModel.topologicalTravel(newCptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);
	
	        function visitComponent(mainType, dependencies) {
	            var newCptOptionList = modelUtil.normalizeToArray(newOption[mainType]);
	
	            var mapResult = modelUtil.mappingToExists(componentsMap[mainType], newCptOptionList);
	
	            makeKeyInfo(mainType, mapResult);
	
	            var dependentModels = getComponentsByTypes(componentsMap, dependencies);
	
	            option[mainType] = [];
	            componentsMap[mainType] = [];
	
	            each(mapResult, function (resultItem, index) {
	                var componentModel = resultItem.exist;
	                var newCptOption = resultItem.option;
	
	                zrUtil.assert(isObject(newCptOption) || componentModel, 'Empty component definition');
	
	                // Consider where is no new option and should be merged using {},
	                // see removeEdgeAndAdd in topologicalTravel and
	                // ComponentModel.getAllClassMainTypes.
	                if (!newCptOption) {
	                    componentModel.mergeOption({}, this);
	                    componentModel.optionUpdated(this);
	                } else {
	                    var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, true);
	
	                    if (componentModel && componentModel instanceof ComponentModelClass) {
	                        componentModel.mergeOption(newCptOption, this);
	                        componentModel.optionUpdated(this);
	                    } else {
	                        // PENDING Global as parent ?
	                        componentModel = new ComponentModelClass(newCptOption, this, this, zrUtil.extend({
	                            dependentModels: dependentModels,
	                            componentIndex: index
	                        }, resultItem.keyInfo));
	                        // Call optionUpdated after init
	                        componentModel.optionUpdated(this);
	                    }
	                }
	
	                componentsMap[mainType][index] = componentModel;
	                option[mainType][index] = componentModel.option;
	            }, this);
	
	            // Backup series for filtering.
	            if (mainType === 'series') {
	                this._seriesIndices = createSeriesIndices(componentsMap.series);
	            }
	        }
	    },
	
	    /**
	     * Get option for output (cloned option and inner info removed)
	     * @public
	     * @return {Object}
	     */
	    getOption: function getOption() {
	        var option = zrUtil.clone(this.option);
	
	        each(option, function (opts, mainType) {
	            if (ComponentModel.hasClass(mainType)) {
	                var opts = modelUtil.normalizeToArray(opts);
	                for (var i = opts.length - 1; i >= 0; i--) {
	                    // Remove options with inner id.
	                    if (modelUtil.isIdInner(opts[i])) {
	                        opts.splice(i, 1);
	                    }
	                }
	                option[mainType] = opts;
	            }
	        });
	
	        delete option[OPTION_INNER_KEY];
	
	        return option;
	    },
	
	    /**
	     * @return {module:echarts/model/Model}
	     */
	    getTheme: function getTheme() {
	        return this._theme;
	    },
	
	    /**
	     * @param {string} mainType
	     * @param {number} [idx=0]
	     * @return {module:echarts/model/Component}
	     */
	    getComponent: function getComponent(mainType, idx) {
	        var list = this._componentsMap[mainType];
	        if (list) {
	            return list[idx || 0];
	        }
	    },
	
	    /**
	     * @param {Object} condition
	     * @param {string} condition.mainType
	     * @param {string} [condition.subType] If ignore, only query by mainType
	     * @param {number} [condition.index] Either input index or id or name.
	     * @param {string} [condition.id] Either input index or id or name.
	     * @param {string} [condition.name] Either input index or id or name.
	     * @return {Array.<module:echarts/model/Component>}
	     */
	    queryComponents: function queryComponents(condition) {
	        var mainType = condition.mainType;
	        if (!mainType) {
	            return [];
	        }
	
	        var index = condition.index;
	        var id = condition.id;
	        var name = condition.name;
	
	        var cpts = this._componentsMap[mainType];
	
	        if (!cpts || !cpts.length) {
	            return [];
	        }
	
	        var result;
	
	        if (index != null) {
	            if (!isArray(index)) {
	                index = [index];
	            }
	            result = filter(map(index, function (idx) {
	                return cpts[idx];
	            }), function (val) {
	                return !!val;
	            });
	        } else if (id != null) {
	            var isIdArray = isArray(id);
	            result = filter(cpts, function (cpt) {
	                return isIdArray && indexOf(id, cpt.id) >= 0 || !isIdArray && cpt.id === id;
	            });
	        } else if (name != null) {
	            var isNameArray = isArray(name);
	            result = filter(cpts, function (cpt) {
	                return isNameArray && indexOf(name, cpt.name) >= 0 || !isNameArray && cpt.name === name;
	            });
	        }
	
	        return filterBySubType(result, condition);
	    },
	
	    /**
	     * The interface is different from queryComponents,
	     * which is convenient for inner usage.
	     *
	     * @usage
	     * findComponents(
	     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	     *     function (model, index) {...}
	     * );
	     *
	     * findComponents(
	     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	     *     function (model, index) {...}
	     * );
	     *
	     * var result = findComponents(
	     *     {mainType: 'series'},
	     *     function (model, index) {...}
	     * );
	     * // result like [component0, componnet1, ...]
	     *
	     * @param {Object} condition
	     * @param {string} condition.mainType Mandatory.
	     * @param {string} [condition.subType] Optional.
	     * @param {Object} [condition.query] like {xxxIndex, xxxId, xxxName},
	     *        where xxx is mainType.
	     *        If query attribute is null/undefined or has no index/id/name,
	     *        do not filtering by query conditions, which is convenient for
	     *        no-payload situations or when target of action is global.
	     * @param {Function} [condition.filter] parameter: component, return boolean.
	     * @return {Array.<module:echarts/model/Component>}
	     */
	    findComponents: function findComponents(condition) {
	        var query = condition.query;
	        var mainType = condition.mainType;
	
	        var queryCond = getQueryCond(query);
	        var result = queryCond ? this.queryComponents(queryCond) : this._componentsMap[mainType];
	
	        return doFilter(filterBySubType(result, condition));
	
	        function getQueryCond(q) {
	            var indexAttr = mainType + 'Index';
	            var idAttr = mainType + 'Id';
	            var nameAttr = mainType + 'Name';
	            return q && (q.hasOwnProperty(indexAttr) || q.hasOwnProperty(idAttr) || q.hasOwnProperty(nameAttr)) ? {
	                mainType: mainType,
	                // subType will be filtered finally.
	                index: q[indexAttr],
	                id: q[idAttr],
	                name: q[nameAttr]
	            } : null;
	        }
	
	        function doFilter(res) {
	            return condition.filter ? filter(res, condition.filter) : res;
	        }
	    },
	
	    /**
	     * @usage
	     * eachComponent('legend', function (legendModel, index) {
	     *     ...
	     * });
	     * eachComponent(function (componentType, model, index) {
	     *     // componentType does not include subType
	     *     // (componentType is 'xxx' but not 'xxx.aa')
	     * });
	     * eachComponent(
	     *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}},
	     *     function (model, index) {...}
	     * );
	     * eachComponent(
	     *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}},
	     *     function (model, index) {...}
	     * );
	     *
	     * @param {string|Object=} mainType When mainType is object, the definition
	     *                                  is the same as the method 'findComponents'.
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachComponent: function eachComponent(mainType, cb, context) {
	        var componentsMap = this._componentsMap;
	
	        if (typeof mainType === 'function') {
	            context = cb;
	            cb = mainType;
	            each(componentsMap, function (components, componentType) {
	                each(components, function (component, index) {
	                    cb.call(context, componentType, component, index);
	                });
	            });
	        } else if (zrUtil.isString(mainType)) {
	            each(componentsMap[mainType], cb, context);
	        } else if (isObject(mainType)) {
	            var queryResult = this.findComponents(mainType);
	            each(queryResult, cb, context);
	        }
	    },
	
	    /**
	     * @param {string} name
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeriesByName: function getSeriesByName(name) {
	        var series = this._componentsMap.series;
	        return filter(series, function (oneSeries) {
	            return oneSeries.name === name;
	        });
	    },
	
	    /**
	     * @param {number} seriesIndex
	     * @return {module:echarts/model/Series}
	     */
	    getSeriesByIndex: function getSeriesByIndex(seriesIndex) {
	        return this._componentsMap.series[seriesIndex];
	    },
	
	    /**
	     * @param {string} subType
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeriesByType: function getSeriesByType(subType) {
	        var series = this._componentsMap.series;
	        return filter(series, function (oneSeries) {
	            return oneSeries.subType === subType;
	        });
	    },
	
	    /**
	     * @return {Array.<module:echarts/model/Series>}
	     */
	    getSeries: function getSeries() {
	        return this._componentsMap.series.slice();
	    },
	
	    /**
	     * After filtering, series may be different
	     * frome raw series.
	     *
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachSeries: function eachSeries(cb, context) {
	        assertSeriesInitialized(this);
	        each(this._seriesIndices, function (rawSeriesIndex) {
	            var series = this._componentsMap.series[rawSeriesIndex];
	            cb.call(context, series, rawSeriesIndex);
	        }, this);
	    },
	
	    /**
	     * Iterate raw series before filtered.
	     *
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachRawSeries: function eachRawSeries(cb, context) {
	        each(this._componentsMap.series, cb, context);
	    },
	
	    /**
	     * After filtering, series may be different.
	     * frome raw series.
	     *
	     * @parma {string} subType
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachSeriesByType: function eachSeriesByType(subType, cb, context) {
	        assertSeriesInitialized(this);
	        each(this._seriesIndices, function (rawSeriesIndex) {
	            var series = this._componentsMap.series[rawSeriesIndex];
	            if (series.subType === subType) {
	                cb.call(context, series, rawSeriesIndex);
	            }
	        }, this);
	    },
	
	    /**
	     * Iterate raw series before filtered of given type.
	     *
	     * @parma {string} subType
	     * @param {Function} cb
	     * @param {*} context
	     */
	    eachRawSeriesByType: function eachRawSeriesByType(subType, cb, context) {
	        return each(this.getSeriesByType(subType), cb, context);
	    },
	
	    /**
	     * @param {module:echarts/model/Series} seriesModel
	     */
	    isSeriesFiltered: function isSeriesFiltered(seriesModel) {
	        assertSeriesInitialized(this);
	        return zrUtil.indexOf(this._seriesIndices, seriesModel.componentIndex) < 0;
	    },
	
	    /**
	     * @param {Function} cb
	     * @param {*} context
	     */
	    filterSeries: function filterSeries(cb, context) {
	        assertSeriesInitialized(this);
	        var filteredSeries = filter(this._componentsMap.series, cb, context);
	        this._seriesIndices = createSeriesIndices(filteredSeries);
	    },
	
	    restoreData: function restoreData() {
	        var componentsMap = this._componentsMap;
	
	        this._seriesIndices = createSeriesIndices(componentsMap.series);
	
	        var componentTypes = [];
	        each(componentsMap, function (components, componentType) {
	            componentTypes.push(componentType);
	        });
	
	        ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType, dependencies) {
	            each(componentsMap[componentType], function (component) {
	                component.restoreData();
	            });
	        });
	    }
	
	});
	
	/**
	 * @inner
	 */
	function mergeTheme(option, theme) {
	    for (var name in theme) {
	        // 如果有 component model 则把具体的 merge 逻辑交给该 model 处理
	        if (!ComponentModel.hasClass(name)) {
	            if (_typeof(theme[name]) === 'object') {
	                option[name] = !option[name] ? zrUtil.clone(theme[name]) : zrUtil.merge(option[name], theme[name], false);
	            } else {
	                option[name] = theme[name];
	            }
	        }
	    }
	}
	
	function initBase(baseOption) {
	    baseOption = baseOption;
	
	    // Using OPTION_INNER_KEY to mark that this option can not be used outside,
	    // i.e. `chart.setOption(chart.getModel().option);` is forbiden.
	    this.option = {};
	    this.option[OPTION_INNER_KEY] = 1;
	
	    /**
	     * @type {Object.<string, Array.<module:echarts/model/Model>>}
	     * @private
	     */
	    this._componentsMap = {};
	
	    /**
	     * Mapping between filtered series list and raw series list.
	     * key: filtered series indices, value: raw series indices.
	     * @type {Array.<nubmer>}
	     * @private
	     */
	    this._seriesIndices = null;
	
	    mergeTheme(baseOption, this._theme.option);
	
	    // TODO Needs clone when merging to the unexisted property
	    zrUtil.merge(baseOption, globalDefault, false);
	
	    this.mergeOption(baseOption);
	}
	
	/**
	 * @inner
	 * @param {Array.<string>|string} types model types
	 * @return {Object} key: {string} type, value: {Array.<Object>} models
	 */
	function getComponentsByTypes(componentsMap, types) {
	    if (!zrUtil.isArray(types)) {
	        types = types ? [types] : [];
	    }
	
	    var ret = {};
	    each(types, function (type) {
	        ret[type] = (componentsMap[type] || []).slice();
	    });
	
	    return ret;
	}
	
	/**
	 * @inner
	 */
	function makeKeyInfo(mainType, mapResult) {
	    // We use this id to hash component models and view instances
	    // in echarts. id can be specified by user, or auto generated.
	
	    // The id generation rule ensures new view instance are able
	    // to mapped to old instance when setOption are called in
	    // no-merge mode. So we generate model id by name and plus
	    // type in view id.
	
	    // name can be duplicated among components, which is convenient
	    // to specify multi components (like series) by one name.
	
	    // Ensure that each id is distinct.
	    var idMap = {};
	
	    each(mapResult, function (item, index) {
	        var existCpt = item.exist;
	        existCpt && (idMap[existCpt.id] = item);
	    });
	
	    each(mapResult, function (item, index) {
	        var opt = item.option;
	
	        zrUtil.assert(!opt || opt.id == null || !idMap[opt.id] || idMap[opt.id] === item, 'id duplicates: ' + (opt && opt.id));
	
	        opt && opt.id != null && (idMap[opt.id] = item);
	
	        // Complete subType
	        if (isObject(opt)) {
	            var subType = determineSubType(mainType, opt, item.exist);
	            item.keyInfo = { mainType: mainType, subType: subType };
	        }
	    });
	
	    // Make name and id.
	    each(mapResult, function (item, index) {
	        var existCpt = item.exist;
	        var opt = item.option;
	        var keyInfo = item.keyInfo;
	
	        if (!isObject(opt)) {
	            return;
	        }
	
	        // name can be overwitten. Consider case: axis.name = '20km'.
	        // But id generated by name will not be changed, which affect
	        // only in that case: setOption with 'not merge mode' and view
	        // instance will be recreated, which can be accepted.
	        keyInfo.name = opt.name != null ? opt.name + '' : existCpt ? existCpt.name : '\0-';
	
	        if (existCpt) {
	            keyInfo.id = existCpt.id;
	        } else if (opt.id != null) {
	            keyInfo.id = opt.id + '';
	        } else {
	            // Consider this situatoin:
	            //  optionA: [{name: 'a'}, {name: 'a'}, {..}]
	            //  optionB [{..}, {name: 'a'}, {name: 'a'}]
	            // Series with the same name between optionA and optionB
	            // should be mapped.
	            var idNum = 0;
	            do {
	                keyInfo.id = '\0' + keyInfo.name + '\0' + idNum++;
	            } while (idMap[keyInfo.id]);
	        }
	
	        idMap[keyInfo.id] = item;
	    });
	}
	
	/**
	 * @inner
	 */
	function determineSubType(mainType, newCptOption, existComponent) {
	    var subType = newCptOption.type ? newCptOption.type : existComponent ? existComponent.subType
	    // Use determineSubType only when there is no existComponent.
	    : ComponentModel.determineSubType(mainType, newCptOption);
	
	    // tooltip, markline, markpoint may always has no subType
	    return subType;
	}
	
	/**
	 * @inner
	 */
	function createSeriesIndices(seriesModels) {
	    return map(seriesModels, function (series) {
	        return series.componentIndex;
	    }) || [];
	}
	
	/**
	 * @inner
	 */
	function filterBySubType(components, condition) {
	    // Using hasOwnProperty for restrict. Consider
	    // subType is undefined in user payload.
	    return condition.hasOwnProperty('subType') ? filter(components, function (cpt) {
	        return cpt.subType === condition.subType;
	    }) : components;
	}
	
	/**
	 * @inner
	 */
	function assertSeriesInitialized(ecModel) {
	    // Components that use _seriesIndices should depends on series component,
	    // which make sure that their initialization is after series.
	    if (!ecModel._seriesIndices) {
	        // FIXME
	        // 验证和提示怎么写
	        throw new Error('Series has not been initialized yet.');
	    }
	}
	
	module.exports = GlobalModel;

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 */
	
	var Gradient = __webpack_require__(225);
	// 用于处理merge时无法遍历Date等对象的问题
	var BUILTIN_OBJECT = {
	    '[object Function]': 1,
	    '[object RegExp]': 1,
	    '[object Date]': 1,
	    '[object Error]': 1,
	    '[object CanvasGradient]': 1
	};
	
	var objToString = Object.prototype.toString;
	
	var arrayProto = Array.prototype;
	var nativeForEach = arrayProto.forEach;
	var nativeFilter = arrayProto.filter;
	var nativeSlice = arrayProto.slice;
	var nativeMap = arrayProto.map;
	var nativeReduce = arrayProto.reduce;
	
	/**
	 * @param {*} source
	 * @return {*} 拷贝后的新对象
	 */
	function clone(source) {
	    if ((typeof source === 'undefined' ? 'undefined' : _typeof(source)) == 'object' && source !== null) {
	        var result = source;
	        if (source instanceof Array) {
	            result = [];
	            for (var i = 0, len = source.length; i < len; i++) {
	                result[i] = clone(source[i]);
	            }
	        } else if (!isBuildInObject(source)
	        // 是否为 dom 对象
	         && !isDom(source)) {
	            result = {};
	            for (var key in source) {
	                if (source.hasOwnProperty(key)) {
	                    result[key] = clone(source[key]);
	                }
	            }
	        }
	
	        return result;
	    }
	
	    return source;
	}
	
	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolean} [overwrite=false]
	 */
	function merge(target, source, overwrite) {
	    // We should escapse that source is string
	    // and enter for ... in ...
	    if (!isObject(source) || !isObject(target)) {
	        return overwrite ? clone(source) : target;
	    }
	
	    for (var key in source) {
	        if (source.hasOwnProperty(key)) {
	            var targetProp = target[key];
	            var sourceProp = source[key];
	
	            if (isObject(sourceProp) && isObject(targetProp) && !isArray(sourceProp) && !isArray(targetProp) && !isDom(sourceProp) && !isDom(targetProp) && !isBuildInObject(sourceProp) && !isBuildInObject(targetProp)) {
	                // 如果需要递归覆盖，就递归调用merge
	                merge(targetProp, sourceProp, overwrite);
	            } else if (overwrite || !(key in target)) {
	                // 否则只处理overwrite为true，或者在目标对象中没有此属性的情况
	                // NOTE，在 target[key] 不存在的时候也是直接覆盖
	                target[key] = clone(source[key], true);
	            }
	        }
	    }
	
	    return target;
	}
	
	/**
	 * @param {Array} targetAndSources The first item is target, and the rests are source.
	 * @param {boolean} [overwrite=false]
	 * @return {*} target
	 */
	function mergeAll(targetAndSources, overwrite) {
	    var result = targetAndSources[0];
	    for (var i = 1, len = targetAndSources.length; i < len; i++) {
	        result = merge(result, targetAndSources[i], overwrite);
	    }
	    return result;
	}
	
	/**
	 * @param {*} target
	 * @param {*} source
	 */
	function extend(target, source) {
	    for (var key in source) {
	        if (source.hasOwnProperty(key)) {
	            target[key] = source[key];
	        }
	    }
	    return target;
	}
	
	/**
	 * @param {*} target
	 * @param {*} source
	 * @param {boolen} [overlay=false]
	 */
	function defaults(target, source, overlay) {
	    for (var key in source) {
	        if (source.hasOwnProperty(key) && (overlay ? source[key] != null : target[key] == null)) {
	            target[key] = source[key];
	        }
	    }
	    return target;
	}
	
	function createCanvas() {
	    return document.createElement('canvas');
	}
	// FIXME
	var _ctx;
	function getContext() {
	    if (!_ctx) {
	        // Use util.createCanvas instead of createCanvas
	        // because createCanvas may be overwritten in different environment
	        _ctx = util.createCanvas().getContext('2d');
	    }
	    return _ctx;
	}
	
	/**
	 * 查询数组中元素的index
	 */
	function indexOf(array, value) {
	    if (array) {
	        if (array.indexOf) {
	            return array.indexOf(value);
	        }
	        for (var i = 0, len = array.length; i < len; i++) {
	            if (array[i] === value) {
	                return i;
	            }
	        }
	    }
	    return -1;
	}
	
	/**
	 * 构造类继承关系
	 *
	 * @param {Function} clazz 源类
	 * @param {Function} baseClazz 基类
	 */
	function inherits(clazz, baseClazz) {
	    var clazzPrototype = clazz.prototype;
	    function F() {}
	    F.prototype = baseClazz.prototype;
	    clazz.prototype = new F();
	
	    for (var prop in clazzPrototype) {
	        clazz.prototype[prop] = clazzPrototype[prop];
	    }
	    clazz.prototype.constructor = clazz;
	    clazz.superClass = baseClazz;
	}
	
	/**
	 * @param {Object|Function} target
	 * @param {Object|Function} sorce
	 * @param {boolean} overlay
	 */
	function mixin(target, source, overlay) {
	    target = 'prototype' in target ? target.prototype : target;
	    source = 'prototype' in source ? source.prototype : source;
	
	    defaults(target, source, overlay);
	}
	
	/**
	 * @param {Array|TypedArray} data
	 */
	function isArrayLike(data) {
	    if (!data) {
	        return;
	    }
	    if (typeof data == 'string') {
	        return false;
	    }
	    return typeof data.length == 'number';
	}
	
	/**
	 * 数组或对象遍历
	 * @memberOf module:zrender/tool/util
	 * @param {Object|Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 */
	function each(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.forEach && obj.forEach === nativeForEach) {
	        obj.forEach(cb, context);
	    } else if (obj.length === +obj.length) {
	        for (var i = 0, len = obj.length; i < len; i++) {
	            cb.call(context, obj[i], i, obj);
	        }
	    } else {
	        for (var key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                cb.call(context, obj[key], key, obj);
	            }
	        }
	    }
	}
	
	/**
	 * 数组映射
	 * @memberOf module:zrender/tool/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function map(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.map && obj.map === nativeMap) {
	        return obj.map(cb, context);
	    } else {
	        var result = [];
	        for (var i = 0, len = obj.length; i < len; i++) {
	            result.push(cb.call(context, obj[i], i, obj));
	        }
	        return result;
	    }
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {Object} [memo]
	 * @param {*} [context]
	 * @return {Array}
	 */
	function reduce(obj, cb, memo, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.reduce && obj.reduce === nativeReduce) {
	        return obj.reduce(cb, memo, context);
	    } else {
	        for (var i = 0, len = obj.length; i < len; i++) {
	            memo = cb.call(context, memo, obj[i], i, obj);
	        }
	        return memo;
	    }
	}
	
	/**
	 * 数组过滤
	 * @memberOf module:zrender/tool/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function filter(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    if (obj.filter && obj.filter === nativeFilter) {
	        return obj.filter(cb, context);
	    } else {
	        var result = [];
	        for (var i = 0, len = obj.length; i < len; i++) {
	            if (cb.call(context, obj[i], i, obj)) {
	                result.push(obj[i]);
	            }
	        }
	        return result;
	    }
	}
	
	/**
	 * 数组项查找
	 * @memberOf module:zrender/tool/util
	 * @param {Array} obj
	 * @param {Function} cb
	 * @param {*} [context]
	 * @return {Array}
	 */
	function find(obj, cb, context) {
	    if (!(obj && cb)) {
	        return;
	    }
	    for (var i = 0, len = obj.length; i < len; i++) {
	        if (cb.call(context, obj[i], i, obj)) {
	            return obj[i];
	        }
	    }
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {Function} func
	 * @param {*} context
	 * @return {Function}
	 */
	function bind(func, context) {
	    var args = nativeSlice.call(arguments, 2);
	    return function () {
	        return func.apply(context, args.concat(nativeSlice.call(arguments)));
	    };
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {Function} func
	 * @param {...}
	 * @return {Function}
	 */
	function curry(func) {
	    var args = nativeSlice.call(arguments, 1);
	    return function () {
	        return func.apply(this, args.concat(nativeSlice.call(arguments)));
	    };
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isArray(value) {
	    return objToString.call(value) === '[object Array]';
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isFunction(value) {
	    return typeof value === 'function';
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isString(value) {
	    return objToString.call(value) === '[object String]';
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isObject(value) {
	    // Avoid a V8 JIT bug in Chrome 19-20.
	    // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	    var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	    return type === 'function' || !!value && type == 'object';
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isBuildInObject(value) {
	    return !!BUILTIN_OBJECT[objToString.call(value)] || value instanceof Gradient;
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {*} value
	 * @return {boolean}
	 */
	function isDom(value) {
	    return value && value.nodeType === 1 && typeof value.nodeName == 'string';
	}
	
	/**
	 * If value1 is not null, then return value1, otherwise judget rest of values.
	 * @param  {*...} values
	 * @return {*} Final value
	 */
	function retrieve(values) {
	    for (var i = 0, len = arguments.length; i < len; i++) {
	        if (arguments[i] != null) {
	            return arguments[i];
	        }
	    }
	}
	
	/**
	 * @memberOf module:zrender/tool/util
	 * @param {Array} arr
	 * @param {number} startIndex
	 * @param {number} endIndex
	 * @return {Array}
	 */
	function slice() {
	    return Function.call.apply(nativeSlice, arguments);
	}
	
	/**
	 * @param {boolean} condition
	 * @param {string} message
	 */
	function assert(condition, message) {
	    if (!condition) {
	        throw new Error(message);
	    }
	}
	
	var util = {
	    inherits: inherits,
	    mixin: mixin,
	    clone: clone,
	    merge: merge,
	    mergeAll: mergeAll,
	    extend: extend,
	    defaults: defaults,
	    getContext: getContext,
	    createCanvas: createCanvas,
	    indexOf: indexOf,
	    slice: slice,
	    find: find,
	    isArrayLike: isArrayLike,
	    each: each,
	    map: map,
	    reduce: reduce,
	    filter: filter,
	    bind: bind,
	    curry: curry,
	    isArray: isArray,
	    isString: isString,
	    isObject: isObject,
	    isFunction: isFunction,
	    isBuildInObject: isBuildInObject,
	    isDom: isDom,
	    retrieve: retrieve,
	    assert: assert,
	    noop: function noop() {}
	};
	module.exports = util;

/***/ },
/* 225 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * @param {Array.<Object>} colorStops
	 */
	var Gradient = function Gradient(colorStops) {
	
	    this.colorStops = colorStops || [];
	};
	
	Gradient.prototype = {
	
	    constructor: Gradient,
	
	    addColorStop: function addColorStop(offset, color) {
	        this.colorStops.push({
	
	            offset: offset,
	
	            color: color
	        });
	    }
	};
	
	module.exports = Gradient;

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var formatUtil = __webpack_require__(227);
	var nubmerUtil = __webpack_require__(228);
	var zrUtil = __webpack_require__(224);
	
	var Model = __webpack_require__(229);
	
	var AXIS_DIMS = ['x', 'y', 'z', 'radius', 'angle'];
	
	var modelUtil = {};
	
	/**
	 * Create "each" method to iterate names.
	 *
	 * @pubilc
	 * @param  {Array.<string>} names
	 * @param  {Array.<string>=} attrs
	 * @return {Function}
	 */
	modelUtil.createNameEach = function (names, attrs) {
	    names = names.slice();
	    var capitalNames = zrUtil.map(names, modelUtil.capitalFirst);
	    attrs = (attrs || []).slice();
	    var capitalAttrs = zrUtil.map(attrs, modelUtil.capitalFirst);
	
	    return function (callback, context) {
	        zrUtil.each(names, function (name, index) {
	            var nameObj = { name: name, capital: capitalNames[index] };
	
	            for (var j = 0; j < attrs.length; j++) {
	                nameObj[attrs[j]] = name + capitalAttrs[j];
	            }
	
	            callback.call(context, nameObj);
	        });
	    };
	};
	
	/**
	 * @public
	 */
	modelUtil.capitalFirst = function (str) {
	    return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;
	};
	
	/**
	 * Iterate each dimension name.
	 *
	 * @public
	 * @param {Function} callback The parameter is like:
	 *                            {
	 *                                name: 'angle',
	 *                                capital: 'Angle',
	 *                                axis: 'angleAxis',
	 *                                axisIndex: 'angleAixs',
	 *                                index: 'angleIndex'
	 *                            }
	 * @param {Object} context
	 */
	modelUtil.eachAxisDim = modelUtil.createNameEach(AXIS_DIMS, ['axisIndex', 'axis', 'index']);
	
	/**
	 * If value is not array, then translate it to array.
	 * @param  {*} value
	 * @return {Array} [value] or value
	 */
	modelUtil.normalizeToArray = function (value) {
	    return zrUtil.isArray(value) ? value : value == null ? [] : [value];
	};
	
	/**
	 * If tow dataZoomModels has the same axis controlled, we say that they are 'linked'.
	 * dataZoomModels and 'links' make up one or more graphics.
	 * This function finds the graphic where the source dataZoomModel is in.
	 *
	 * @public
	 * @param {Function} forEachNode Node iterator.
	 * @param {Function} forEachEdgeType edgeType iterator
	 * @param {Function} edgeIdGetter Giving node and edgeType, return an array of edge id.
	 * @return {Function} Input: sourceNode, Output: Like {nodes: [], dims: {}}
	 */
	modelUtil.createLinkedNodesFinder = function (forEachNode, forEachEdgeType, edgeIdGetter) {
	
	    return function (sourceNode) {
	        var result = {
	            nodes: [],
	            records: {} // key: edgeType.name, value: Object (key: edge id, value: boolean).
	        };
	
	        forEachEdgeType(function (edgeType) {
	            result.records[edgeType.name] = {};
	        });
	
	        if (!sourceNode) {
	            return result;
	        }
	
	        absorb(sourceNode, result);
	
	        var existsLink;
	        do {
	            existsLink = false;
	            forEachNode(processSingleNode);
	        } while (existsLink);
	
	        function processSingleNode(node) {
	            if (!isNodeAbsorded(node, result) && isLinked(node, result)) {
	                absorb(node, result);
	                existsLink = true;
	            }
	        }
	
	        return result;
	    };
	
	    function isNodeAbsorded(node, result) {
	        return zrUtil.indexOf(result.nodes, node) >= 0;
	    }
	
	    function isLinked(node, result) {
	        var hasLink = false;
	        forEachEdgeType(function (edgeType) {
	            zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                result.records[edgeType.name][edgeId] && (hasLink = true);
	            });
	        });
	        return hasLink;
	    }
	
	    function absorb(node, result) {
	        result.nodes.push(node);
	        forEachEdgeType(function (edgeType) {
	            zrUtil.each(edgeIdGetter(node, edgeType) || [], function (edgeId) {
	                result.records[edgeType.name][edgeId] = true;
	            });
	        });
	    }
	};
	
	/**
	 * Sync default option between normal and emphasis like `position` and `show`
	 * In case some one will write code like
	 *     label: {
	 *         normal: {
	 *             show: false,
	 *             position: 'outside',
	 *             textStyle: {
	 *                 fontSize: 18
	 *             }
	 *         },
	 *         emphasis: {
	 *             show: true
	 *         }
	 *     }
	 * @param {Object} opt
	 * @param {Array.<string>} subOpts
	 */
	modelUtil.defaultEmphasis = function (opt, subOpts) {
	    if (opt) {
	        var emphasisOpt = opt.emphasis = opt.emphasis || {};
	        var normalOpt = opt.normal = opt.normal || {};
	
	        // Default emphasis option from normal
	        zrUtil.each(subOpts, function (subOptName) {
	            var val = zrUtil.retrieve(emphasisOpt[subOptName], normalOpt[subOptName]);
	            if (val != null) {
	                emphasisOpt[subOptName] = val;
	            }
	        });
	    }
	};
	
	/**
	 * Create a model proxy to be used in tooltip for edge data, markLine data, markPoint data.
	 * @param {Object} opt
	 * @param {string} [opt.seriesIndex]
	 * @param {Object} [opt.name]
	 * @param {module:echarts/data/List} data
	 * @param {Array.<Object>} rawData
	 */
	modelUtil.createDataFormatModel = function (opt, data, rawData) {
	    var model = new Model();
	    zrUtil.mixin(model, modelUtil.dataFormatMixin);
	    model.seriesIndex = opt.seriesIndex;
	    model.name = opt.name || '';
	
	    model.getData = function () {
	        return data;
	    };
	    model.getRawDataArray = function () {
	        return rawData;
	    };
	    return model;
	};
	
	/**
	 * data could be [12, 2323, {value: 223}, [1221, 23], {value: [2, 23]}]
	 * This helper method retieves value from data.
	 * @param {string|number|Date|Array|Object} dataItem
	 * @return {number|string|Date|Array.<number|string|Date>}
	 */
	modelUtil.getDataItemValue = function (dataItem) {
	    // Performance sensitive.
	    return dataItem && (dataItem.value == null ? dataItem : dataItem.value);
	};
	
	/**
	 * This helper method convert value in data.
	 * @param {string|number|Date} value
	 * @param {Object|string} [dimInfo] If string (like 'x'), dimType defaults 'number'.
	 */
	modelUtil.converDataValue = function (value, dimInfo) {
	    // Performance sensitive.
	    var dimType = dimInfo && dimInfo.type;
	    if (dimType === 'ordinal') {
	        return value;
	    }
	
	    if (dimType === 'time' && !isFinite(value) && value != null && value !== '-') {
	        value = +nubmerUtil.parseDate(value);
	    }
	
	    // dimType defaults 'number'.
	    // If dimType is not ordinal and value is null or undefined or NaN or '-',
	    // parse to NaN.
	    return value == null || value === '' ? NaN : +value; // If string (like '-'), using '+' parse to NaN
	};
	
	modelUtil.dataFormatMixin = {
	    /**
	     * Get params for formatter
	     * @param {number} dataIndex
	     * @return {Object}
	     */
	    getDataParams: function getDataParams(dataIndex) {
	        var data = this.getData();
	
	        var seriesIndex = this.seriesIndex;
	        var seriesName = this.name;
	
	        var rawValue = this.getRawValue(dataIndex);
	        var rawDataIndex = data.getRawIndex(dataIndex);
	        var name = data.getName(dataIndex, true);
	
	        // Data may not exists in the option given by user
	        var rawDataArray = this.getRawDataArray();
	        var itemOpt = rawDataArray && rawDataArray[rawDataIndex];
	
	        return {
	            seriesIndex: seriesIndex,
	            seriesName: seriesName,
	            name: name,
	            dataIndex: rawDataIndex,
	            data: itemOpt,
	            value: rawValue,
	
	            // Param name list for mapping `a`, `b`, `c`, `d`, `e`
	            $vars: ['seriesName', 'name', 'value']
	        };
	    },
	
	    /**
	     * Format label
	     * @param {number} dataIndex
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @param {Function|string} [formatter] Default use the `itemStyle[status].label.formatter`
	     * @return {string}
	     */
	    getFormattedLabel: function getFormattedLabel(dataIndex, status, formatter) {
	        status = status || 'normal';
	        var data = this.getData();
	        var itemModel = data.getItemModel(dataIndex);
	
	        var params = this.getDataParams(dataIndex);
	        if (formatter == null) {
	            formatter = itemModel.get(['label', status, 'formatter']);
	        }
	
	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        } else if (typeof formatter === 'string') {
	            return formatUtil.formatTpl(formatter, params);
	        }
	    },
	
	    /**
	     * Get raw value in option
	     * @param {number} idx
	     * @return {Object}
	     */
	    getRawValue: function getRawValue(idx) {
	        var itemModel = this.getData().getItemModel(idx);
	        if (itemModel && itemModel.option != null) {
	            var dataItem = itemModel.option;
	            return zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem) ? dataItem.value : dataItem;
	        }
	    }
	};
	
	/**
	 * Mapping to exists for merge.
	 *
	 * @public
	 * @param {Array.<Object>|Array.<module:echarts/model/Component>} exists
	 * @param {Object|Array.<Object>} newCptOptions
	 * @return {Array.<Object>} Result, like [{exist: ..., option: ...}, {}],
	 *                          which order is the same as exists.
	 */
	modelUtil.mappingToExists = function (exists, newCptOptions) {
	    // Mapping by the order by original option (but not order of
	    // new option) in merge mode. Because we should ensure
	    // some specified index (like xAxisIndex) is consistent with
	    // original option, which is easy to understand, espatially in
	    // media query. And in most case, merge option is used to
	    // update partial option but not be expected to change order.
	    newCptOptions = (newCptOptions || []).slice();
	
	    var result = zrUtil.map(exists || [], function (obj, index) {
	        return { exist: obj };
	    });
	
	    // Mapping by id or name if specified.
	    zrUtil.each(newCptOptions, function (cptOption, index) {
	        if (!zrUtil.isObject(cptOption)) {
	            return;
	        }
	
	        for (var i = 0; i < result.length; i++) {
	            var exist = result[i].exist;
	            if (!result[i].option // Consider name: two map to one.
	             && (
	            // id has highest priority.
	            cptOption.id != null && exist.id === cptOption.id + '' || cptOption.name != null && !modelUtil.isIdInner(cptOption) && !modelUtil.isIdInner(exist) && exist.name === cptOption.name + '')) {
	                result[i].option = cptOption;
	                newCptOptions[index] = null;
	                break;
	            }
	        }
	    });
	
	    // Otherwise mapping by index.
	    zrUtil.each(newCptOptions, function (cptOption, index) {
	        if (!zrUtil.isObject(cptOption)) {
	            return;
	        }
	
	        var i = 0;
	        for (; i < result.length; i++) {
	            var exist = result[i].exist;
	            if (!result[i].option && !modelUtil.isIdInner(exist)
	            // Caution:
	            // Do not overwrite id. But name can be overwritten,
	            // because axis use name as 'show label text'.
	            // 'exist' always has id and name and we dont
	            // need to check it.
	             && cptOption.id == null) {
	                result[i].option = cptOption;
	                break;
	            }
	        }
	
	        if (i >= result.length) {
	            result.push({ option: cptOption });
	        }
	    });
	
	    return result;
	};
	
	/**
	 * @public
	 * @param {Object} cptOption
	 * @return {boolean}
	 */
	modelUtil.isIdInner = function (cptOption) {
	    return zrUtil.isObject(cptOption) && cptOption.id && (cptOption.id + '').indexOf('\0_ec_\0') === 0;
	};
	
	module.exports = modelUtil;

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	
	/**
	 * 每三位默认加,格式化
	 * @type {string|number} x
	 */
	function addCommas(x) {
	    if (isNaN(x)) {
	        return '-';
	    }
	    x = (x + '').split('.');
	    return x[0].replace(/(\d{1,3})(?=(?:\d{3})+(?!\d))/g, '$1,') + (x.length > 1 ? '.' + x[1] : '');
	}
	
	/**
	 * @param {string} str
	 * @return {string} str
	 */
	function toCamelCase(str) {
	    return str.toLowerCase().replace(/-(.)/g, function (match, group1) {
	        return group1.toUpperCase();
	    });
	}
	
	/**
	 * Normalize css liked array configuration
	 * e.g.
	 *  3 => [3, 3, 3, 3]
	 *  [4, 2] => [4, 2, 4, 2]
	 *  [4, 3, 2] => [4, 3, 2, 3]
	 * @param {number|Array.<number>} val
	 */
	function normalizeCssArray(val) {
	    var len = val.length;
	    if (typeof val === 'number') {
	        return [val, val, val, val];
	    } else if (len === 2) {
	        // vertical | horizontal
	        return [val[0], val[1], val[0], val[1]];
	    } else if (len === 3) {
	        // top | horizontal | bottom
	        return [val[0], val[1], val[2], val[1]];
	    }
	    return val;
	}
	
	function encodeHTML(source) {
	    return String(source).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
	}
	
	var TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
	
	function wrapVar(varName, seriesIdx) {
	    return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';
	}
	/**
	 * Template formatter
	 * @param  {string} tpl
	 * @param  {Array.<Object>|Object} paramsList
	 * @return {string}
	 */
	function formatTpl(tpl, paramsList) {
	    if (!zrUtil.isArray(paramsList)) {
	        paramsList = [paramsList];
	    }
	    var seriesLen = paramsList.length;
	    if (!seriesLen) {
	        return '';
	    }
	
	    var $vars = paramsList[0].$vars;
	    for (var i = 0; i < $vars.length; i++) {
	        var alias = TPL_VAR_ALIAS[i];
	        tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));
	    }
	    for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {
	        for (var k = 0; k < $vars.length; k++) {
	            tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), paramsList[seriesIdx][$vars[k]]);
	        }
	    }
	
	    return tpl;
	}
	
	/**
	 * ISO Date format
	 * @param {string} tpl
	 * @param {number} value
	 * @inner
	 */
	function formatTime(tpl, value) {
	    if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {
	        tpl = 'MM-dd\nyyyy';
	    }
	
	    var date = numberUtil.parseDate(value);
	    var y = date.getFullYear();
	    var M = date.getMonth() + 1;
	    var d = date.getDate();
	    var h = date.getHours();
	    var m = date.getMinutes();
	    var s = date.getSeconds();
	
	    tpl = tpl.replace('MM', s2d(M)).toLowerCase().replace('yyyy', y).replace('yy', y % 100).replace('dd', s2d(d)).replace('d', d).replace('hh', s2d(h)).replace('h', h).replace('mm', s2d(m)).replace('m', m).replace('ss', s2d(s)).replace('s', s);
	
	    return tpl;
	}
	
	/**
	 * @param {string} str
	 * @return {string}
	 * @inner
	 */
	function s2d(str) {
	    return str < 10 ? '0' + str : str;
	}
	
	module.exports = {
	
	    normalizeCssArray: normalizeCssArray,
	
	    addCommas: addCommas,
	
	    toCamelCase: toCamelCase,
	
	    encodeHTML: encodeHTML,
	
	    formatTpl: formatTpl,
	
	    formatTime: formatTime
	};

/***/ },
/* 228 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * 数值处理模块
	 * @module echarts/util/number
	 */
	
	var number = {};
	
	var RADIAN_EPSILON = 1e-4;
	
	function _trim(str) {
	    return str.replace(/^\s+/, '').replace(/\s+$/, '');
	}
	
	/**
	 * Linear mapping a value from domain to range
	 * @memberOf module:echarts/util/number
	 * @param  {(number|Array.<number>)} val
	 * @param  {Array.<number>} domain Domain extent domain[0] can be bigger than domain[1]
	 * @param  {Array.<number>} range  Range extent range[0] can be bigger than range[1]
	 * @param  {boolean} clamp
	 * @return {(number|Array.<number>}
	 */
	number.linearMap = function (val, domain, range, clamp) {
	
	    var sub = domain[1] - domain[0];
	
	    if (sub === 0) {
	        return (range[0] + range[1]) / 2;
	    }
	    var t = (val - domain[0]) / sub;
	
	    if (clamp) {
	        t = Math.min(Math.max(t, 0), 1);
	    }
	
	    return t * (range[1] - range[0]) + range[0];
	};
	
	/**
	 * Convert a percent string to absolute number.
	 * Returns NaN if percent is not a valid string or number
	 * @memberOf module:echarts/util/number
	 * @param {string|number} percent
	 * @param {number} all
	 * @return {number}
	 */
	number.parsePercent = function (percent, all) {
	    switch (percent) {
	        case 'center':
	        case 'middle':
	            percent = '50%';
	            break;
	        case 'left':
	        case 'top':
	            percent = '0%';
	            break;
	        case 'right':
	        case 'bottom':
	            percent = '100%';
	            break;
	    }
	    if (typeof percent === 'string') {
	        if (_trim(percent).match(/%$/)) {
	            return parseFloat(percent) / 100 * all;
	        }
	
	        return parseFloat(percent);
	    }
	
	    return percent == null ? NaN : +percent;
	};
	
	/**
	 * Fix rounding error of float numbers
	 * @param {number} x
	 * @return {number}
	 */
	number.round = function (x) {
	    // PENDING
	    return +(+x).toFixed(12);
	};
	
	number.asc = function (arr) {
	    arr.sort(function (a, b) {
	        return a - b;
	    });
	    return arr;
	};
	
	/**
	 * Get precision
	 * @param {number} val
	 */
	number.getPrecision = function (val) {
	    if (isNaN(val)) {
	        return 0;
	    }
	    // It is much faster than methods converting number to string as follows
	    //      var tmp = val.toString();
	    //      return tmp.length - 1 - tmp.indexOf('.');
	    // especially when precision is low
	    var e = 1;
	    var count = 0;
	    while (Math.round(val * e) / e !== val) {
	        e *= 10;
	        count++;
	    }
	    return count;
	};
	
	/**
	 * @param {Array.<number>} dataExtent
	 * @param {Array.<number>} pixelExtent
	 * @return {number}  precision
	 */
	number.getPixelPrecision = function (dataExtent, pixelExtent) {
	    var log = Math.log;
	    var LN10 = Math.LN10;
	    var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);
	    var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10);
	    return Math.max(-dataQuantity + sizeQuantity, 0);
	};
	
	// Number.MAX_SAFE_INTEGER, ie do not support.
	number.MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * To 0 - 2 * PI, considering negative radian.
	 * @param {number} radian
	 * @return {number}
	 */
	number.remRadian = function (radian) {
	    var pi2 = Math.PI * 2;
	    return (radian % pi2 + pi2) % pi2;
	};
	
	/**
	 * @param {type} radian
	 * @return {boolean}
	 */
	number.isRadianAroundZero = function (val) {
	    return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;
	};
	
	/**
	 * @param {string|Date|number} value
	 * @return {number} timestamp
	 */
	number.parseDate = function (value) {
	    return value instanceof Date ? value : new Date(typeof value === 'string' ? value.replace(/-/g, '/') : Math.round(value));
	};
	
	// "Nice Numbers for Graph Labels" of Graphic Gems
	/**
	 * find a “nice” number approximately equal to x. Round the number if round = true, take ceiling if round = false
	 * The primary observation is that the “nicest” numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.
	 * @param  {number} val
	 * @param  {boolean} round
	 * @return {number}
	 */
	number.nice = function (val, round) {
	    var exp = Math.floor(Math.log(val) / Math.LN10);
	    var exp10 = Math.pow(10, exp);
	    var f = val / exp10; // between 1 and 10
	    var nf;
	    if (round) {
	        if (f < 1.5) {
	            nf = 1;
	        } else if (f < 2.5) {
	            nf = 2;
	        } else if (f < 4) {
	            nf = 3;
	        } else if (f < 7) {
	            nf = 5;
	        } else {
	            nf = 10;
	        }
	    } else {
	        if (f < 1) {
	            nf = 1;
	        } else if (f < 2) {
	            nf = 2;
	        } else if (f < 3) {
	            nf = 3;
	        } else if (f < 5) {
	            nf = 5;
	        } else {
	            nf = 10;
	        }
	    }
	    return nf * exp10;
	};
	
	module.exports = number;

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * @module echarts/model/Model
	 */
	
	var zrUtil = __webpack_require__(224);
	var clazzUtil = __webpack_require__(230);
	
	/**
	 * @alias module:echarts/model/Model
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Global} ecModel
	 * @param {Object} extraOpt
	 */
	function Model(option, parentModel, ecModel, extraOpt) {
	    /**
	     * @type {module:echarts/model/Model}
	     * @readOnly
	     */
	    this.parentModel = parentModel;
	
	    /**
	     * @type {module:echarts/model/Global}
	     * @readOnly
	     */
	    this.ecModel = ecModel;
	
	    /**
	     * @type {Object}
	     * @protected
	     */
	    this.option = option;
	
	    // Simple optimization
	    if (this.init) {
	        if (arguments.length <= 4) {
	            this.init(option, parentModel, ecModel, extraOpt);
	        } else {
	            this.init.apply(this, arguments);
	        }
	    }
	}
	
	Model.prototype = {
	
	    constructor: Model,
	
	    /**
	     * Model 的初始化函数
	     * @param {Object} option
	     */
	    init: null,
	
	    /**
	     * 从新的 Option merge
	     */
	    mergeOption: function mergeOption(option) {
	        zrUtil.merge(this.option, option, true);
	    },
	
	    /**
	     * @param {string} path
	     * @param {boolean} [ignoreParent=false]
	     * @return {*}
	     */
	    get: function get(path, ignoreParent) {
	        if (!path) {
	            return this.option;
	        }
	
	        if (typeof path === 'string') {
	            path = path.split('.');
	        }
	
	        var obj = this.option;
	        var parentModel = this.parentModel;
	        for (var i = 0; i < path.length; i++) {
	            // obj could be number/string/... (like 0)
	            obj = obj && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object' ? obj[path[i]] : null;
	            if (obj == null) {
	                break;
	            }
	        }
	        if (obj == null && parentModel && !ignoreParent) {
	            obj = parentModel.get(path);
	        }
	        return obj;
	    },
	
	    /**
	     * @param {string} key
	     * @param {boolean} [ignoreParent=false]
	     * @return {*}
	     */
	    getShallow: function getShallow(key, ignoreParent) {
	        var option = this.option;
	        var val = option && option[key];
	        var parentModel = this.parentModel;
	        if (val == null && parentModel && !ignoreParent) {
	            val = parentModel.getShallow(key);
	        }
	        return val;
	    },
	
	    /**
	     * @param {string} path
	     * @param {module:echarts/model/Model} [parentModel]
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path, parentModel) {
	        var obj = this.get(path, true);
	        var thisParentModel = this.parentModel;
	        var model = new Model(obj, parentModel || thisParentModel && thisParentModel.getModel(path), this.ecModel);
	        return model;
	    },
	
	    /**
	     * If model has option
	     */
	    isEmpty: function isEmpty() {
	        return this.option == null;
	    },
	
	    restoreData: function restoreData() {},
	
	    // Pending
	    clone: function clone() {
	        var Ctor = this.constructor;
	        return new Ctor(zrUtil.clone(this.option));
	    },
	
	    setReadOnly: function setReadOnly(properties) {
	        clazzUtil.setReadOnly(this, properties);
	    }
	};
	
	// Enable Model.extend.
	clazzUtil.enableClassExtend(Model);
	
	var mixin = zrUtil.mixin;
	mixin(Model, __webpack_require__(231));
	mixin(Model, __webpack_require__(233));
	mixin(Model, __webpack_require__(234));
	mixin(Model, __webpack_require__(239));
	
	module.exports = Model;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var clazz = {};
	
	var TYPE_DELIMITER = '.';
	var IS_CONTAINER = '___EC__COMPONENT__CONTAINER___';
	/**
	 * @public
	 */
	var parseClassType = clazz.parseClassType = function (componentType) {
	    var ret = { main: '', sub: '' };
	    if (componentType) {
	        componentType = componentType.split(TYPE_DELIMITER);
	        ret.main = componentType[0] || '';
	        ret.sub = componentType[1] || '';
	    }
	    return ret;
	};
	/**
	 * @public
	 */
	clazz.enableClassExtend = function (RootClass, preConstruct) {
	    RootClass.extend = function (proto) {
	        var ExtendedClass = function ExtendedClass() {
	            preConstruct && preConstruct.apply(this, arguments);
	            RootClass.apply(this, arguments);
	        };
	
	        zrUtil.extend(ExtendedClass.prototype, proto);
	
	        ExtendedClass.extend = this.extend;
	        ExtendedClass.superCall = superCall;
	        ExtendedClass.superApply = superApply;
	        zrUtil.inherits(ExtendedClass, this);
	        ExtendedClass.superClass = this;
	
	        return ExtendedClass;
	    };
	};
	
	// superCall should have class info, which can not be fetch from 'this'.
	// Consider this case:
	// class A has method f,
	// class B inherits class A, overrides method f, f call superApply('f'),
	// class C inherits class B, do not overrides method f,
	// then when method of class C is called, dead loop occured.
	function superCall(context, methodName) {
	    var args = zrUtil.slice(arguments, 2);
	    return this.superClass.prototype[methodName].apply(context, args);
	}
	
	function superApply(context, methodName, args) {
	    return this.superClass.prototype[methodName].apply(context, args);
	}
	
	/**
	 * @param {Object} entity
	 * @param {Object} options
	 * @param {boolean} [options.registerWhenExtend]
	 * @public
	 */
	clazz.enableClassManagement = function (entity, options) {
	    options = options || {};
	
	    /**
	     * Component model classes
	     * key: componentType,
	     * value:
	     *     componentClass, when componentType is 'xxx'
	     *     or Object.<subKey, componentClass>, when componentType is 'xxx.yy'
	     * @type {Object}
	     */
	    var storage = {};
	
	    entity.registerClass = function (Clazz, componentType) {
	        if (componentType) {
	            componentType = parseClassType(componentType);
	
	            if (!componentType.sub) {
	                if (storage[componentType.main]) {
	                    throw new Error(componentType.main + 'exists');
	                }
	                storage[componentType.main] = Clazz;
	            } else if (componentType.sub !== IS_CONTAINER) {
	                var container = makeContainer(componentType);
	                container[componentType.sub] = Clazz;
	            }
	        }
	        return Clazz;
	    };
	
	    entity.getClass = function (componentTypeMain, subType, throwWhenNotFound) {
	        var Clazz = storage[componentTypeMain];
	
	        if (Clazz && Clazz[IS_CONTAINER]) {
	            Clazz = subType ? Clazz[subType] : null;
	        }
	
	        if (throwWhenNotFound && !Clazz) {
	            throw new Error('Component ' + componentTypeMain + '.' + (subType || '') + ' not exists');
	        }
	
	        return Clazz;
	    };
	
	    entity.getClassesByMainType = function (componentType) {
	        componentType = parseClassType(componentType);
	
	        var result = [];
	        var obj = storage[componentType.main];
	
	        if (obj && obj[IS_CONTAINER]) {
	            zrUtil.each(obj, function (o, type) {
	                type !== IS_CONTAINER && result.push(o);
	            });
	        } else {
	            result.push(obj);
	        }
	
	        return result;
	    };
	
	    entity.hasClass = function (componentType) {
	        // Just consider componentType.main.
	        componentType = parseClassType(componentType);
	        return !!storage[componentType.main];
	    };
	
	    /**
	     * @return {Array.<string>} Like ['aa', 'bb'], but can not be ['aa.xx']
	     */
	    entity.getAllClassMainTypes = function () {
	        var types = [];
	        zrUtil.each(storage, function (obj, type) {
	            types.push(type);
	        });
	        return types;
	    };
	
	    /**
	     * If a main type is container and has sub types
	     * @param  {string}  mainType
	     * @return {boolean}
	     */
	    entity.hasSubTypes = function (componentType) {
	        componentType = parseClassType(componentType);
	        var obj = storage[componentType.main];
	        return obj && obj[IS_CONTAINER];
	    };
	
	    entity.parseClassType = parseClassType;
	
	    function makeContainer(componentType) {
	        var container = storage[componentType.main];
	        if (!container || !container[IS_CONTAINER]) {
	            container = storage[componentType.main] = {};
	            container[IS_CONTAINER] = true;
	        }
	        return container;
	    }
	
	    if (options.registerWhenExtend) {
	        var originalExtend = entity.extend;
	        if (originalExtend) {
	            entity.extend = function (proto) {
	                var ExtendedClass = originalExtend.call(this, proto);
	                return entity.registerClass(ExtendedClass, proto.type);
	            };
	        }
	    }
	
	    return entity;
	};
	
	/**
	 * @param {string|Array.<string>} properties
	 */
	clazz.setReadOnly = function (obj, properties) {
	    // FIXME It seems broken in IE8 simulation of IE11
	    // if (!zrUtil.isArray(properties)) {
	    //     properties = properties != null ? [properties] : [];
	    // }
	    // zrUtil.each(properties, function (prop) {
	    //     var value = obj[prop];
	
	    //     Object.defineProperty
	    //         && Object.defineProperty(obj, prop, {
	    //             value: value, writable: false
	    //         });
	    //     zrUtil.isArray(obj[prop])
	    //         && Object.freeze
	    //         && Object.freeze(obj[prop]);
	    // });
	};
	
	module.exports = clazz;

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _getLineStyle = __webpack_require__(232)([['lineWidth', 'width'], ['stroke', 'color'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']]);
	module.exports = {
	    getLineStyle: function getLineStyle(excludes) {
	        var style = _getLineStyle.call(this, excludes);
	        var lineDash = this.getLineDash();
	        lineDash && (style.lineDash = lineDash);
	        return style;
	    },
	
	    getLineDash: function getLineDash() {
	        var lineType = this.get('type');
	        return lineType === 'solid' || lineType == null ? null : lineType === 'dashed' ? [5, 5] : [1, 1];
	    }
	};

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// TODO Parse shadow style
	// TODO Only shallow path support
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (properties) {
	    // Normalize
	    for (var i = 0; i < properties.length; i++) {
	        if (!properties[i][1]) {
	            properties[i][1] = properties[i][0];
	        }
	    }
	    return function (excludes) {
	        var style = {};
	        for (var i = 0; i < properties.length; i++) {
	            var propName = properties[i][1];
	            if (excludes && zrUtil.indexOf(excludes, propName) >= 0) {
	                continue;
	            }
	            var val = this.getShallow(propName);
	            if (val != null) {
	                style[properties[i][0]] = val;
	            }
	        }
	        return style;
	    };
	};

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    getAreaStyle: __webpack_require__(232)([['fill', 'color'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['opacity'], ['shadowColor']])
	};

/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var textContain = __webpack_require__(235);
	
	function getShallow(model, path) {
	    return model && model.getShallow(path);
	}
	
	module.exports = {
	    /**
	     * Get color property or get color from option.textStyle.color
	     * @return {string}
	     */
	    getTextColor: function getTextColor() {
	        var ecModel = this.ecModel;
	        return this.getShallow('color') || ecModel && ecModel.get('textStyle.color');
	    },
	
	    /**
	     * Create font string from fontStyle, fontWeight, fontSize, fontFamily
	     * @return {string}
	     */
	    getFont: function getFont() {
	        var ecModel = this.ecModel;
	        var gTextStyleModel = ecModel && ecModel.getModel('textStyle');
	        return [
	        // FIXME in node-canvas fontWeight is before fontStyle
	        this.getShallow('fontStyle') || getShallow(gTextStyleModel, 'fontStyle'), this.getShallow('fontWeight') || getShallow(gTextStyleModel, 'fontWeight'), (this.getShallow('fontSize') || getShallow(gTextStyleModel, 'fontSize') || 12) + 'px', this.getShallow('fontFamily') || getShallow(gTextStyleModel, 'fontFamily') || 'sans-serif'].join(' ');
	    },
	
	    getTextRect: function getTextRect(text) {
	        var textStyle = this.get('textStyle') || {};
	        return textContain.getBoundingRect(text, this.getFont(), textStyle.align, textStyle.baseline);
	    },
	
	    ellipsis: function ellipsis(text, containerWidth, options) {
	        return textContain.ellipsis(text, this.getFont(), containerWidth, options);
	    }
	};

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var textWidthCache = {};
	var textWidthCacheCounter = 0;
	var TEXT_CACHE_MAX = 5000;
	
	var util = __webpack_require__(224);
	var BoundingRect = __webpack_require__(236);
	
	function getTextWidth(text, textFont) {
	    var key = text + ':' + textFont;
	    if (textWidthCache[key]) {
	        return textWidthCache[key];
	    }
	
	    var textLines = (text + '').split('\n');
	    var width = 0;
	
	    for (var i = 0, l = textLines.length; i < l; i++) {
	        // measureText 可以被覆盖以兼容不支持 Canvas 的环境
	        width = Math.max(textContain.measureText(textLines[i], textFont).width, width);
	    }
	
	    if (textWidthCacheCounter > TEXT_CACHE_MAX) {
	        textWidthCacheCounter = 0;
	        textWidthCache = {};
	    }
	    textWidthCacheCounter++;
	    textWidthCache[key] = width;
	
	    return width;
	}
	
	function getTextRect(text, textFont, textAlign, textBaseline) {
	    var textLineLen = ((text || '') + '').split('\n').length;
	
	    var width = getTextWidth(text, textFont);
	    // FIXME 高度计算比较粗暴
	    var lineHeight = getTextWidth('国', textFont);
	    var height = textLineLen * lineHeight;
	
	    var rect = new BoundingRect(0, 0, width, height);
	    // Text has a special line height property
	    rect.lineHeight = lineHeight;
	
	    switch (textBaseline) {
	        case 'bottom':
	        case 'alphabetic':
	            rect.y -= lineHeight;
	            break;
	        case 'middle':
	            rect.y -= lineHeight / 2;
	            break;
	        // case 'hanging':
	        // case 'top':
	    }
	
	    // FIXME Right to left language
	    switch (textAlign) {
	        case 'end':
	        case 'right':
	            rect.x -= rect.width;
	            break;
	        case 'center':
	            rect.x -= rect.width / 2;
	            break;
	        // case 'start':
	        // case 'left':
	    }
	
	    return rect;
	}
	
	function adjustTextPositionOnRect(textPosition, rect, textRect, distance) {
	
	    var x = rect.x;
	    var y = rect.y;
	
	    var height = rect.height;
	    var width = rect.width;
	
	    var textHeight = textRect.height;
	
	    var halfHeight = height / 2 - textHeight / 2;
	
	    var textAlign = 'left';
	
	    switch (textPosition) {
	        case 'left':
	            x -= distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'right':
	            x += distance + width;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'top':
	            x += width / 2;
	            y -= distance + textHeight;
	            textAlign = 'center';
	            break;
	        case 'bottom':
	            x += width / 2;
	            y += height + distance;
	            textAlign = 'center';
	            break;
	        case 'inside':
	            x += width / 2;
	            y += halfHeight;
	            textAlign = 'center';
	            break;
	        case 'insideLeft':
	            x += distance;
	            y += halfHeight;
	            textAlign = 'left';
	            break;
	        case 'insideRight':
	            x += width - distance;
	            y += halfHeight;
	            textAlign = 'right';
	            break;
	        case 'insideTop':
	            x += width / 2;
	            y += distance;
	            textAlign = 'center';
	            break;
	        case 'insideBottom':
	            x += width / 2;
	            y += height - textHeight - distance;
	            textAlign = 'center';
	            break;
	        case 'insideTopLeft':
	            x += distance;
	            y += distance;
	            textAlign = 'left';
	            break;
	        case 'insideTopRight':
	            x += width - distance;
	            y += distance;
	            textAlign = 'right';
	            break;
	        case 'insideBottomLeft':
	            x += distance;
	            y += height - textHeight - distance;
	            break;
	        case 'insideBottomRight':
	            x += width - distance;
	            y += height - textHeight - distance;
	            textAlign = 'right';
	            break;
	    }
	
	    return {
	        x: x,
	        y: y,
	        textAlign: textAlign,
	        textBaseline: 'top'
	    };
	}
	
	/**
	 * Show ellipsis if overflow.
	 *
	 * @param  {string} text
	 * @param  {string} textFont
	 * @param  {string} containerWidth
	 * @param  {Object} [options]
	 * @param  {number} [options.ellipsis='...']
	 * @param  {number} [options.maxIterations=3]
	 * @param  {number} [options.minCharacters=3]
	 * @return {string}
	 */
	function textEllipsis(text, textFont, containerWidth, options) {
	    if (!containerWidth) {
	        return '';
	    }
	
	    options = util.defaults({
	        ellipsis: '...',
	        minCharacters: 3,
	        maxIterations: 3,
	        cnCharWidth: getTextWidth('国', textFont),
	        // FIXME
	        // 未考虑非等宽字体
	        ascCharWidth: getTextWidth('a', textFont)
	    }, options, true);
	
	    containerWidth -= getTextWidth(options.ellipsis);
	
	    var textLines = (text + '').split('\n');
	
	    for (var i = 0, len = textLines.length; i < len; i++) {
	        textLines[i] = textLineTruncate(textLines[i], textFont, containerWidth, options);
	    }
	
	    return textLines.join('\n');
	}
	
	function textLineTruncate(text, textFont, containerWidth, options) {
	    // FIXME
	    // 粗糙得写的，尚未考虑性能和各种语言、字体的效果。
	    for (var i = 0;; i++) {
	        var lineWidth = getTextWidth(text, textFont);
	
	        if (lineWidth < containerWidth || i >= options.maxIterations) {
	            text += options.ellipsis;
	            break;
	        }
	
	        var subLength = i === 0 ? estimateLength(text, containerWidth, options) : Math.floor(text.length * containerWidth / lineWidth);
	
	        if (subLength < options.minCharacters) {
	            text = '';
	            break;
	        }
	
	        text = text.substr(0, subLength);
	    }
	
	    return text;
	}
	
	function estimateLength(text, containerWidth, options) {
	    var width = 0;
	    var i = 0;
	    for (var len = text.length; i < len && width < containerWidth; i++) {
	        var charCode = text.charCodeAt(i);
	        width += 0 <= charCode && charCode <= 127 ? options.ascCharWidth : options.cnCharWidth;
	    }
	    return i;
	}
	
	var textContain = {
	
	    getWidth: getTextWidth,
	
	    getBoundingRect: getTextRect,
	
	    adjustTextPositionOnRect: adjustTextPositionOnRect,
	
	    ellipsis: textEllipsis,
	
	    measureText: function measureText(text, textFont) {
	        var ctx = util.getContext();
	        ctx.font = textFont;
	        return ctx.measureText(text);
	    }
	};
	
	module.exports = textContain;

/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/core/BoundingRect
	 */
	
	var vec2 = __webpack_require__(237);
	var matrix = __webpack_require__(238);
	
	var v2ApplyTransform = vec2.applyTransform;
	var mathMin = Math.min;
	var mathAbs = Math.abs;
	var mathMax = Math.max;
	/**
	 * @alias module:echarts/core/BoundingRect
	 */
	function BoundingRect(x, y, width, height) {
	    /**
	     * @type {number}
	     */
	    this.x = x;
	    /**
	     * @type {number}
	     */
	    this.y = y;
	    /**
	     * @type {number}
	     */
	    this.width = width;
	    /**
	     * @type {number}
	     */
	    this.height = height;
	}
	
	BoundingRect.prototype = {
	
	    constructor: BoundingRect,
	
	    /**
	     * @param {module:echarts/core/BoundingRect} other
	     */
	    union: function union(other) {
	        var x = mathMin(other.x, this.x);
	        var y = mathMin(other.y, this.y);
	
	        this.width = mathMax(other.x + other.width, this.x + this.width) - x;
	        this.height = mathMax(other.y + other.height, this.y + this.height) - y;
	        this.x = x;
	        this.y = y;
	    },
	
	    /**
	     * @param {Array.<number>} m
	     * @methods
	     */
	    applyTransform: function () {
	        var min = [];
	        var max = [];
	        return function (m) {
	            // In case usage like this
	            // el.getBoundingRect().applyTransform(el.transform)
	            // And element has no transform
	            if (!m) {
	                return;
	            }
	            min[0] = this.x;
	            min[1] = this.y;
	            max[0] = this.x + this.width;
	            max[1] = this.y + this.height;
	
	            v2ApplyTransform(min, min, m);
	            v2ApplyTransform(max, max, m);
	
	            this.x = mathMin(min[0], max[0]);
	            this.y = mathMin(min[1], max[1]);
	            this.width = mathAbs(max[0] - min[0]);
	            this.height = mathAbs(max[1] - min[1]);
	        };
	    }(),
	
	    /**
	     * Calculate matrix of transforming from self to target rect
	     * @param  {module:zrender/core/BoundingRect} b
	     * @return {Array.<number>}
	     */
	    calculateTransform: function calculateTransform(b) {
	        var a = this;
	        var sx = b.width / a.width;
	        var sy = b.height / a.height;
	
	        var m = matrix.create();
	
	        // 矩阵右乘
	        matrix.translate(m, m, [-a.x, -a.y]);
	        matrix.scale(m, m, [sx, sy]);
	        matrix.translate(m, m, [b.x, b.y]);
	
	        return m;
	    },
	
	    /**
	     * @param {(module:echarts/core/BoundingRect|Object)} b
	     * @return {boolean}
	     */
	    intersect: function intersect(b) {
	        var a = this;
	        var ax0 = a.x;
	        var ax1 = a.x + a.width;
	        var ay0 = a.y;
	        var ay1 = a.y + a.height;
	
	        var bx0 = b.x;
	        var bx1 = b.x + b.width;
	        var by0 = b.y;
	        var by1 = b.y + b.height;
	
	        return !(ax1 < bx0 || bx1 < ax0 || ay1 < by0 || by1 < ay0);
	    },
	
	    contain: function contain(x, y) {
	        var rect = this;
	        return x >= rect.x && x <= rect.x + rect.width && y >= rect.y && y <= rect.y + rect.height;
	    },
	
	    /**
	     * @return {module:echarts/core/BoundingRect}
	     */
	    clone: function clone() {
	        return new BoundingRect(this.x, this.y, this.width, this.height);
	    },
	
	    /**
	     * Copy from another rect
	     */
	    copy: function copy(other) {
	        this.x = other.x;
	        this.y = other.y;
	        this.width = other.width;
	        this.height = other.height;
	    }
	};
	
	module.exports = BoundingRect;

/***/ },
/* 237 */
/***/ function(module, exports) {

	'use strict';
	
	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	
	/**
	 * @typedef {Float32Array|Array.<number>} Vector2
	 */
	/**
	 * 二维向量类
	 * @exports zrender/tool/vector
	 */
	var vector = {
	    /**
	     * 创建一个向量
	     * @param {number} [x=0]
	     * @param {number} [y=0]
	     * @return {Vector2}
	     */
	    create: function create(x, y) {
	        var out = new ArrayCtor(2);
	        out[0] = x || 0;
	        out[1] = y || 0;
	        return out;
	    },
	
	    /**
	     * 复制向量数据
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @return {Vector2}
	     */
	    copy: function copy(out, v) {
	        out[0] = v[0];
	        out[1] = v[1];
	        return out;
	    },
	
	    /**
	     * 克隆一个向量
	     * @param {Vector2} v
	     * @return {Vector2}
	     */
	    clone: function clone(v) {
	        var out = new ArrayCtor(2);
	        out[0] = v[0];
	        out[1] = v[1];
	        return out;
	    },
	
	    /**
	     * 设置向量的两个项
	     * @param {Vector2} out
	     * @param {number} a
	     * @param {number} b
	     * @return {Vector2} 结果
	     */
	    set: function set(out, a, b) {
	        out[0] = a;
	        out[1] = b;
	        return out;
	    },
	
	    /**
	     * 向量相加
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    add: function add(out, v1, v2) {
	        out[0] = v1[0] + v2[0];
	        out[1] = v1[1] + v2[1];
	        return out;
	    },
	
	    /**
	     * 向量缩放后相加
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @param {number} a
	     */
	    scaleAndAdd: function scaleAndAdd(out, v1, v2, a) {
	        out[0] = v1[0] + v2[0] * a;
	        out[1] = v1[1] + v2[1] * a;
	        return out;
	    },
	
	    /**
	     * 向量相减
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    sub: function sub(out, v1, v2) {
	        out[0] = v1[0] - v2[0];
	        out[1] = v1[1] - v2[1];
	        return out;
	    },
	
	    /**
	     * 向量长度
	     * @param {Vector2} v
	     * @return {number}
	     */
	    len: function len(v) {
	        return Math.sqrt(this.lenSquare(v));
	    },
	
	    /**
	     * 向量长度平方
	     * @param {Vector2} v
	     * @return {number}
	     */
	    lenSquare: function lenSquare(v) {
	        return v[0] * v[0] + v[1] * v[1];
	    },
	
	    /**
	     * 向量乘法
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    mul: function mul(out, v1, v2) {
	        out[0] = v1[0] * v2[0];
	        out[1] = v1[1] * v2[1];
	        return out;
	    },
	
	    /**
	     * 向量除法
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     */
	    div: function div(out, v1, v2) {
	        out[0] = v1[0] / v2[0];
	        out[1] = v1[1] / v2[1];
	        return out;
	    },
	
	    /**
	     * 向量点乘
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    dot: function dot(v1, v2) {
	        return v1[0] * v2[0] + v1[1] * v2[1];
	    },
	
	    /**
	     * 向量缩放
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @param {number} s
	     */
	    scale: function scale(out, v, s) {
	        out[0] = v[0] * s;
	        out[1] = v[1] * s;
	        return out;
	    },
	
	    /**
	     * 向量归一化
	     * @param {Vector2} out
	     * @param {Vector2} v
	     */
	    normalize: function normalize(out, v) {
	        var d = vector.len(v);
	        if (d === 0) {
	            out[0] = 0;
	            out[1] = 0;
	        } else {
	            out[0] = v[0] / d;
	            out[1] = v[1] / d;
	        }
	        return out;
	    },
	
	    /**
	     * 计算向量间距离
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    distance: function distance(v1, v2) {
	        return Math.sqrt((v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]));
	    },
	
	    /**
	     * 向量距离平方
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @return {number}
	     */
	    distanceSquare: function distanceSquare(v1, v2) {
	        return (v1[0] - v2[0]) * (v1[0] - v2[0]) + (v1[1] - v2[1]) * (v1[1] - v2[1]);
	    },
	
	    /**
	     * 求负向量
	     * @param {Vector2} out
	     * @param {Vector2} v
	     */
	    negate: function negate(out, v) {
	        out[0] = -v[0];
	        out[1] = -v[1];
	        return out;
	    },
	
	    /**
	     * 插值两个点
	     * @param {Vector2} out
	     * @param {Vector2} v1
	     * @param {Vector2} v2
	     * @param {number} t
	     */
	    lerp: function lerp(out, v1, v2, t) {
	        out[0] = v1[0] + t * (v2[0] - v1[0]);
	        out[1] = v1[1] + t * (v2[1] - v1[1]);
	        return out;
	    },
	
	    /**
	     * 矩阵左乘向量
	     * @param {Vector2} out
	     * @param {Vector2} v
	     * @param {Vector2} m
	     */
	    applyTransform: function applyTransform(out, v, m) {
	        var x = v[0];
	        var y = v[1];
	        out[0] = m[0] * x + m[2] * y + m[4];
	        out[1] = m[1] * x + m[3] * y + m[5];
	        return out;
	    },
	    /**
	     * 求两个向量最小值
	     * @param  {Vector2} out
	     * @param  {Vector2} v1
	     * @param  {Vector2} v2
	     */
	    min: function min(out, v1, v2) {
	        out[0] = Math.min(v1[0], v2[0]);
	        out[1] = Math.min(v1[1], v2[1]);
	        return out;
	    },
	    /**
	     * 求两个向量最大值
	     * @param  {Vector2} out
	     * @param  {Vector2} v1
	     * @param  {Vector2} v2
	     */
	    max: function max(out, v1, v2) {
	        out[0] = Math.max(v1[0], v2[0]);
	        out[1] = Math.max(v1[1], v2[1]);
	        return out;
	    }
	};
	
	vector.length = vector.len;
	vector.lengthSquare = vector.lenSquare;
	vector.dist = vector.distance;
	vector.distSquare = vector.distanceSquare;
	
	module.exports = vector;

/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';
	
	var ArrayCtor = typeof Float32Array === 'undefined' ? Array : Float32Array;
	/**
	 * 3x2矩阵操作类
	 * @exports zrender/tool/matrix
	 */
	var matrix = {
	    /**
	     * 创建一个单位矩阵
	     * @return {Float32Array|Array.<number>}
	     */
	    create: function create() {
	        var out = new ArrayCtor(6);
	        matrix.identity(out);
	
	        return out;
	    },
	    /**
	     * 设置矩阵为单位矩阵
	     * @param {Float32Array|Array.<number>} out
	     */
	    identity: function identity(out) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 1;
	        out[4] = 0;
	        out[5] = 0;
	        return out;
	    },
	    /**
	     * 复制矩阵
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} m
	     */
	    copy: function copy(out, m) {
	        out[0] = m[0];
	        out[1] = m[1];
	        out[2] = m[2];
	        out[3] = m[3];
	        out[4] = m[4];
	        out[5] = m[5];
	        return out;
	    },
	    /**
	     * 矩阵相乘
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} m1
	     * @param {Float32Array|Array.<number>} m2
	     */
	    mul: function mul(out, m1, m2) {
	        // Consider matrix.mul(m, m2, m);
	        // where out is the same as m2.
	        // So use temp variable to escape error.
	        var out0 = m1[0] * m2[0] + m1[2] * m2[1];
	        var out1 = m1[1] * m2[0] + m1[3] * m2[1];
	        var out2 = m1[0] * m2[2] + m1[2] * m2[3];
	        var out3 = m1[1] * m2[2] + m1[3] * m2[3];
	        var out4 = m1[0] * m2[4] + m1[2] * m2[5] + m1[4];
	        var out5 = m1[1] * m2[4] + m1[3] * m2[5] + m1[5];
	        out[0] = out0;
	        out[1] = out1;
	        out[2] = out2;
	        out[3] = out3;
	        out[4] = out4;
	        out[5] = out5;
	        return out;
	    },
	    /**
	     * 平移变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {Float32Array|Array.<number>} v
	     */
	    translate: function translate(out, a, v) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4] + v[0];
	        out[5] = a[5] + v[1];
	        return out;
	    },
	    /**
	     * 旋转变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {number} rad
	     */
	    rotate: function rotate(out, a, rad) {
	        var aa = a[0];
	        var ac = a[2];
	        var atx = a[4];
	        var ab = a[1];
	        var ad = a[3];
	        var aty = a[5];
	        var st = Math.sin(rad);
	        var ct = Math.cos(rad);
	
	        out[0] = aa * ct + ab * st;
	        out[1] = -aa * st + ab * ct;
	        out[2] = ac * ct + ad * st;
	        out[3] = -ac * st + ct * ad;
	        out[4] = ct * atx + st * aty;
	        out[5] = ct * aty - st * atx;
	        return out;
	    },
	    /**
	     * 缩放变换
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     * @param {Float32Array|Array.<number>} v
	     */
	    scale: function scale(out, a, v) {
	        var vx = v[0];
	        var vy = v[1];
	        out[0] = a[0] * vx;
	        out[1] = a[1] * vy;
	        out[2] = a[2] * vx;
	        out[3] = a[3] * vy;
	        out[4] = a[4] * vx;
	        out[5] = a[5] * vy;
	        return out;
	    },
	    /**
	     * 求逆矩阵
	     * @param {Float32Array|Array.<number>} out
	     * @param {Float32Array|Array.<number>} a
	     */
	    invert: function invert(out, a) {
	
	        var aa = a[0];
	        var ac = a[2];
	        var atx = a[4];
	        var ab = a[1];
	        var ad = a[3];
	        var aty = a[5];
	
	        var det = aa * ad - ab * ac;
	        if (!det) {
	            return null;
	        }
	        det = 1.0 / det;
	
	        out[0] = ad * det;
	        out[1] = -ab * det;
	        out[2] = -ac * det;
	        out[3] = aa * det;
	        out[4] = (ac * aty - ad * atx) * det;
	        out[5] = (ab * atx - aa * aty) * det;
	        return out;
	    }
	};
	
	module.exports = matrix;

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    getItemStyle: __webpack_require__(232)([['fill', 'color'], ['stroke', 'borderColor'], ['lineWidth', 'borderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']])
	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Component model
	 *
	 * @module echarts/model/Component
	 */
	
	var Model = __webpack_require__(229);
	var zrUtil = __webpack_require__(224);
	var arrayPush = Array.prototype.push;
	var componentUtil = __webpack_require__(241);
	var clazzUtil = __webpack_require__(230);
	var layout = __webpack_require__(242);
	
	/**
	 * @alias module:echarts/model/Component
	 * @constructor
	 * @param {Object} option
	 * @param {module:echarts/model/Model} parentModel
	 * @param {module:echarts/model/Model} ecModel
	 */
	var ComponentModel = Model.extend({
	
	    type: 'component',
	
	    /**
	     * @readOnly
	     * @type {string}
	     */
	    id: '',
	
	    /**
	     * @readOnly
	     */
	    name: '',
	
	    /**
	     * @readOnly
	     * @type {string}
	     */
	    mainType: '',
	
	    /**
	     * @readOnly
	     * @type {string}
	     */
	    subType: '',
	
	    /**
	     * @readOnly
	     * @type {number}
	     */
	    componentIndex: 0,
	
	    /**
	     * @type {Object}
	     * @protected
	     */
	    defaultOption: null,
	
	    /**
	     * @type {module:echarts/model/Global}
	     * @readOnly
	     */
	    ecModel: null,
	
	    /**
	     * key: componentType
	     * value:  Component model list, can not be null.
	     * @type {Object.<string, Array.<module:echarts/model/Model>>}
	     * @readOnly
	     */
	    dependentModels: [],
	
	    /**
	     * @type {string}
	     * @readOnly
	     */
	    uid: null,
	
	    /**
	     * Support merge layout params.
	     * Only support 'box' now (left/right/top/bottom/width/height).
	     * @type {string|Object} Object can be {ignoreSize: true}
	     * @readOnly
	     */
	    layoutMode: null,
	
	    init: function init(option, parentModel, ecModel, extraOpt) {
	        this.mergeDefaultAndTheme(this.option, this.ecModel);
	    },
	
	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	        var layoutMode = this.layoutMode;
	        var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	
	        var themeModel = ecModel.getTheme();
	        zrUtil.merge(option, themeModel.get(this.mainType));
	        zrUtil.merge(option, this.getDefaultOption());
	
	        if (layoutMode) {
	            layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	        }
	    },
	
	    mergeOption: function mergeOption(option) {
	        zrUtil.merge(this.option, option, true);
	
	        var layoutMode = this.layoutMode;
	        if (layoutMode) {
	            layout.mergeLayoutParam(this.option, option, layoutMode);
	        }
	    },
	
	    // Hooker after init or mergeOption
	    optionUpdated: function optionUpdated(ecModel) {},
	
	    getDefaultOption: function getDefaultOption() {
	        if (!this.hasOwnProperty('__defaultOption')) {
	            var optList = [];
	            var Class = this.constructor;
	            while (Class) {
	                var opt = Class.prototype.defaultOption;
	                opt && optList.push(opt);
	                Class = Class.superClass;
	            }
	
	            var defaultOption = {};
	            for (var i = optList.length - 1; i >= 0; i--) {
	                defaultOption = zrUtil.merge(defaultOption, optList[i], true);
	            }
	            this.__defaultOption = defaultOption;
	        }
	        return this.__defaultOption;
	    }
	
	});
	
	// Reset ComponentModel.extend, add preConstruct.
	clazzUtil.enableClassExtend(ComponentModel, function (option, parentModel, ecModel, extraOpt) {
	    // Set dependentModels, componentIndex, name, id, mainType, subType.
	    zrUtil.extend(this, extraOpt);
	
	    this.uid = componentUtil.getUID('componentModel');
	
	    this.setReadOnly(['type', 'id', 'uid', 'name', 'mainType', 'subType', 'dependentModels', 'componentIndex']);
	});
	
	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(ComponentModel, { registerWhenExtend: true });
	componentUtil.enableSubTypeDefaulter(ComponentModel);
	
	// Add capability of ComponentModel.topologicalTravel.
	componentUtil.enableTopologicalTravel(ComponentModel, getDependencies);
	
	function getDependencies(componentType) {
	    var deps = [];
	    zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (Clazz) {
	        arrayPush.apply(deps, Clazz.prototype.dependencies || []);
	    });
	    // Ensure main type
	    return zrUtil.map(deps, function (type) {
	        return clazzUtil.parseClassType(type).main;
	    });
	}
	
	zrUtil.mixin(ComponentModel, __webpack_require__(243));
	
	module.exports = ComponentModel;

/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var clazz = __webpack_require__(230);
	
	var parseClassType = clazz.parseClassType;
	
	var base = 0;
	
	var componentUtil = {};
	
	var DELIMITER = '_';
	
	/**
	 * @public
	 * @param {string} type
	 * @return {string}
	 */
	componentUtil.getUID = function (type) {
	    // Considering the case of crossing js context,
	    // use Math.random to make id as unique as possible.
	    return [type || '', base++, Math.random()].join(DELIMITER);
	};
	
	/**
	 * @inner
	 */
	componentUtil.enableSubTypeDefaulter = function (entity) {
	
	    var subTypeDefaulters = {};
	
	    entity.registerSubTypeDefaulter = function (componentType, defaulter) {
	        componentType = parseClassType(componentType);
	        subTypeDefaulters[componentType.main] = defaulter;
	    };
	
	    entity.determineSubType = function (componentType, option) {
	        var type = option.type;
	        if (!type) {
	            var componentTypeMain = parseClassType(componentType).main;
	            if (entity.hasSubTypes(componentType) && subTypeDefaulters[componentTypeMain]) {
	                type = subTypeDefaulters[componentTypeMain](option);
	            }
	        }
	        return type;
	    };
	
	    return entity;
	};
	
	/**
	 * Topological travel on Activity Network (Activity On Vertices).
	 * Dependencies is defined in Model.prototype.dependencies, like ['xAxis', 'yAxis'].
	 *
	 * If 'xAxis' or 'yAxis' is absent in componentTypeList, just ignore it in topology.
	 *
	 * If there is circle dependencey, Error will be thrown.
	 *
	 */
	componentUtil.enableTopologicalTravel = function (entity, dependencyGetter) {
	
	    /**
	     * @public
	     * @param {Array.<string>} targetNameList Target Component type list.
	     *                                           Can be ['aa', 'bb', 'aa.xx']
	     * @param {Array.<string>} fullNameList By which we can build dependency graph.
	     * @param {Function} callback Params: componentType, dependencies.
	     * @param {Object} context Scope of callback.
	     */
	    entity.topologicalTravel = function (targetNameList, fullNameList, callback, context) {
	        if (!targetNameList.length) {
	            return;
	        }
	
	        var result = makeDepndencyGraph(fullNameList);
	        var graph = result.graph;
	        var stack = result.noEntryList;
	
	        var targetNameSet = {};
	        zrUtil.each(targetNameList, function (name) {
	            targetNameSet[name] = true;
	        });
	
	        while (stack.length) {
	            var currComponentType = stack.pop();
	            var currVertex = graph[currComponentType];
	            var isInTargetNameSet = !!targetNameSet[currComponentType];
	            if (isInTargetNameSet) {
	                callback.call(context, currComponentType, currVertex.originalDeps.slice());
	                delete targetNameSet[currComponentType];
	            }
	            zrUtil.each(currVertex.successor, isInTargetNameSet ? removeEdgeAndAdd : removeEdge);
	        }
	
	        zrUtil.each(targetNameSet, function () {
	            throw new Error('Circle dependency may exists');
	        });
	
	        function removeEdge(succComponentType) {
	            graph[succComponentType].entryCount--;
	            if (graph[succComponentType].entryCount === 0) {
	                stack.push(succComponentType);
	            }
	        }
	
	        // Consider this case: legend depends on series, and we call
	        // chart.setOption({series: [...]}), where only series is in option.
	        // If we do not have 'removeEdgeAndAdd', legendModel.mergeOption will
	        // not be called, but only sereis.mergeOption is called. Thus legend
	        // have no chance to update its local record about series (like which
	        // name of series is available in legend).
	        function removeEdgeAndAdd(succComponentType) {
	            targetNameSet[succComponentType] = true;
	            removeEdge(succComponentType);
	        }
	    };
	
	    /**
	     * DepndencyGraph: {Object}
	     * key: conponentType,
	     * value: {
	     *     successor: [conponentTypes...],
	     *     originalDeps: [conponentTypes...],
	     *     entryCount: {number}
	     * }
	     */
	    function makeDepndencyGraph(fullNameList) {
	        var graph = {};
	        var noEntryList = [];
	
	        zrUtil.each(fullNameList, function (name) {
	
	            var thisItem = createDependencyGraphItem(graph, name);
	            var originalDeps = thisItem.originalDeps = dependencyGetter(name);
	
	            var availableDeps = getAvailableDependencies(originalDeps, fullNameList);
	            thisItem.entryCount = availableDeps.length;
	            if (thisItem.entryCount === 0) {
	                noEntryList.push(name);
	            }
	
	            zrUtil.each(availableDeps, function (dependentName) {
	                if (zrUtil.indexOf(thisItem.predecessor, dependentName) < 0) {
	                    thisItem.predecessor.push(dependentName);
	                }
	                var thatItem = createDependencyGraphItem(graph, dependentName);
	                if (zrUtil.indexOf(thatItem.successor, dependentName) < 0) {
	                    thatItem.successor.push(name);
	                }
	            });
	        });
	
	        return { graph: graph, noEntryList: noEntryList };
	    }
	
	    function createDependencyGraphItem(graph, name) {
	        if (!graph[name]) {
	            graph[name] = { predecessor: [], successor: [] };
	        }
	        return graph[name];
	    }
	
	    function getAvailableDependencies(originalDeps, fullNameList) {
	        var availableDeps = [];
	        zrUtil.each(originalDeps, function (dep) {
	            zrUtil.indexOf(fullNameList, dep) >= 0 && availableDeps.push(dep);
	        });
	        return availableDeps;
	    }
	};
	
	module.exports = componentUtil;

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Layout helpers for each component positioning
	
	var zrUtil = __webpack_require__(224);
	var BoundingRect = __webpack_require__(236);
	var numberUtil = __webpack_require__(228);
	var formatUtil = __webpack_require__(227);
	var parsePercent = numberUtil.parsePercent;
	var each = zrUtil.each;
	
	var layout = {};
	
	var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];
	
	function boxLayout(orient, group, gap, maxWidth, maxHeight) {
	    var x = 0;
	    var y = 0;
	    if (maxWidth == null) {
	        maxWidth = Infinity;
	    }
	    if (maxHeight == null) {
	        maxHeight = Infinity;
	    }
	    var currentLineMaxSize = 0;
	    group.eachChild(function (child, idx) {
	        var position = child.position;
	        var rect = child.getBoundingRect();
	        var nextChild = group.childAt(idx + 1);
	        var nextChildRect = nextChild && nextChild.getBoundingRect();
	        var nextX;
	        var nextY;
	        if (orient === 'horizontal') {
	            var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);
	            nextX = x + moveX;
	            // Wrap when width exceeds maxWidth or meet a `newline` group
	            if (nextX > maxWidth || child.newline) {
	                x = 0;
	                nextX = moveX;
	                y += currentLineMaxSize + gap;
	                currentLineMaxSize = rect.height;
	            } else {
	                currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);
	            }
	        } else {
	            var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);
	            nextY = y + moveY;
	            // Wrap when width exceeds maxHeight or meet a `newline` group
	            if (nextY > maxHeight || child.newline) {
	                x += currentLineMaxSize + gap;
	                y = 0;
	                nextY = moveY;
	                currentLineMaxSize = rect.width;
	            } else {
	                currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);
	            }
	        }
	
	        if (child.newline) {
	            return;
	        }
	
	        position[0] = x;
	        position[1] = y;
	
	        orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;
	    });
	}
	
	/**
	 * VBox or HBox layouting
	 * @param {string} orient
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.box = boxLayout;
	
	/**
	 * VBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.vbox = zrUtil.curry(boxLayout, 'vertical');
	
	/**
	 * HBox layouting
	 * @param {module:zrender/container/Group} group
	 * @param {number} gap
	 * @param {number} [width=Infinity]
	 * @param {number} [height=Infinity]
	 */
	layout.hbox = zrUtil.curry(boxLayout, 'horizontal');
	
	/**
	 * If x or x2 is not specified or 'center' 'left' 'right',
	 * the width would be as long as possible.
	 * If y or y2 is not specified or 'middle' 'top' 'bottom',
	 * the height would be as long as possible.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.x]
	 * @param {number|string} [positionInfo.y]
	 * @param {number|string} [positionInfo.x2]
	 * @param {number|string} [positionInfo.y2]
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 * @return {Object} {width, height}
	 */
	layout.getAvailableSize = function (positionInfo, containerRect, margin) {
	    var containerWidth = containerRect.width;
	    var containerHeight = containerRect.height;
	
	    var x = parsePercent(positionInfo.x, containerWidth);
	    var y = parsePercent(positionInfo.y, containerHeight);
	    var x2 = parsePercent(positionInfo.x2, containerWidth);
	    var y2 = parsePercent(positionInfo.y2, containerHeight);
	
	    (isNaN(x) || isNaN(parseFloat(positionInfo.x))) && (x = 0);
	    (isNaN(x2) || isNaN(parseFloat(positionInfo.x2))) && (x2 = containerWidth);
	    (isNaN(y) || isNaN(parseFloat(positionInfo.y))) && (y = 0);
	    (isNaN(y2) || isNaN(parseFloat(positionInfo.y2))) && (y2 = containerHeight);
	
	    margin = formatUtil.normalizeCssArray(margin || 0);
	
	    return {
	        width: Math.max(x2 - x - margin[1] - margin[3], 0),
	        height: Math.max(y2 - y - margin[0] - margin[2], 0)
	    };
	};
	
	/**
	 * Parse position info.
	 *
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {number|string} [positionInfo.width]
	 * @param {number|string} [positionInfo.height]
	 * @param {number|string} [positionInfo.aspect] Aspect is width / height
	 * @param {Object} containerRect
	 * @param {string|number} [margin]
	 *
	 * @return {module:zrender/core/BoundingRect}
	 */
	layout.getLayoutRect = function (positionInfo, containerRect, margin) {
	    margin = formatUtil.normalizeCssArray(margin || 0);
	
	    var containerWidth = containerRect.width;
	    var containerHeight = containerRect.height;
	
	    var left = parsePercent(positionInfo.left, containerWidth);
	    var top = parsePercent(positionInfo.top, containerHeight);
	    var right = parsePercent(positionInfo.right, containerWidth);
	    var bottom = parsePercent(positionInfo.bottom, containerHeight);
	    var width = parsePercent(positionInfo.width, containerWidth);
	    var height = parsePercent(positionInfo.height, containerHeight);
	
	    var verticalMargin = margin[2] + margin[0];
	    var horizontalMargin = margin[1] + margin[3];
	    var aspect = positionInfo.aspect;
	
	    // If width is not specified, calculate width from left and right
	    if (isNaN(width)) {
	        width = containerWidth - right - horizontalMargin - left;
	    }
	    if (isNaN(height)) {
	        height = containerHeight - bottom - verticalMargin - top;
	    }
	
	    // If width and height are not given
	    // 1. Graph should not exceeds the container
	    // 2. Aspect must be keeped
	    // 3. Graph should take the space as more as possible
	    if (isNaN(width) && isNaN(height)) {
	        if (aspect > containerWidth / containerHeight) {
	            width = containerWidth * 0.8;
	        } else {
	            height = containerHeight * 0.8;
	        }
	    }
	
	    if (aspect != null) {
	        // Calculate width or height with given aspect
	        if (isNaN(width)) {
	            width = aspect * height;
	        }
	        if (isNaN(height)) {
	            height = width / aspect;
	        }
	    }
	
	    // If left is not specified, calculate left from right and width
	    if (isNaN(left)) {
	        left = containerWidth - right - width - horizontalMargin;
	    }
	    if (isNaN(top)) {
	        top = containerHeight - bottom - height - verticalMargin;
	    }
	
	    // Align left and top
	    switch (positionInfo.left || positionInfo.right) {
	        case 'center':
	            left = containerWidth / 2 - width / 2 - margin[3];
	            break;
	        case 'right':
	            left = containerWidth - width - horizontalMargin;
	            break;
	    }
	    switch (positionInfo.top || positionInfo.bottom) {
	        case 'middle':
	        case 'center':
	            top = containerHeight / 2 - height / 2 - margin[0];
	            break;
	        case 'bottom':
	            top = containerHeight - height - verticalMargin;
	            break;
	    }
	    // If something is wrong and left, top, width, height are calculated as NaN
	    left = left || 0;
	    top = top || 0;
	    if (isNaN(width)) {
	        // Width may be NaN if only one value is given except width
	        width = containerWidth - left - (right || 0);
	    }
	    if (isNaN(height)) {
	        // Height may be NaN if only one value is given except height
	        height = containerHeight - top - (bottom || 0);
	    }
	
	    var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);
	    rect.margin = margin;
	    return rect;
	};
	
	/**
	 * Position group of component in viewport
	 *  Group position is specified by either
	 *  {left, top}, {right, bottom}
	 *  If all properties exists, right and bottom will be igonred.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} positionInfo
	 * @param {number|string} [positionInfo.left]
	 * @param {number|string} [positionInfo.top]
	 * @param {number|string} [positionInfo.right]
	 * @param {number|string} [positionInfo.bottom]
	 * @param {Object} containerRect
	 * @param {string|number} margin
	 */
	layout.positionGroup = function (group, positionInfo, containerRect, margin) {
	    var groupRect = group.getBoundingRect();
	
	    positionInfo = zrUtil.extend(zrUtil.clone(positionInfo), {
	        width: groupRect.width,
	        height: groupRect.height
	    });
	
	    positionInfo = layout.getLayoutRect(positionInfo, containerRect, margin);
	
	    group.position = [positionInfo.x - groupRect.x, positionInfo.y - groupRect.y];
	};
	
	/**
	 * Consider Case:
	 * When defulat option has {left: 0, width: 100}, and we set {right: 0}
	 * through setOption or media query, using normal zrUtil.merge will cause
	 * {right: 0} does not take effect.
	 *
	 * @example
	 * ComponentModel.extend({
	 *     init: function () {
	 *         ...
	 *         var inputPositionParams = layout.getLayoutParams(option);
	 *         this.mergeOption(inputPositionParams);
	 *     },
	 *     mergeOption: function (newOption) {
	 *         newOption && zrUtil.merge(thisOption, newOption, true);
	 *         layout.mergeLayoutParam(thisOption, newOption);
	 *     }
	 * });
	 *
	 * @param {Object} targetOption
	 * @param {Object} newOption
	 * @param {Object|string} [opt]
	 * @param {boolean} [opt.ignoreSize=false] Some component must has width and height.
	 */
	layout.mergeLayoutParam = function (targetOption, newOption, opt) {
	    !zrUtil.isObject(opt) && (opt = {});
	    var hNames = ['width', 'left', 'right']; // Order by priority.
	    var vNames = ['height', 'top', 'bottom']; // Order by priority.
	    var hResult = merge(hNames);
	    var vResult = merge(vNames);
	
	    copy(hNames, targetOption, hResult);
	    copy(vNames, targetOption, vResult);
	
	    function merge(names) {
	        var newParams = {};
	        var newValueCount = 0;
	        var merged = {};
	        var mergedValueCount = 0;
	        var enoughParamNumber = opt.ignoreSize ? 1 : 2;
	
	        each(names, function (name) {
	            merged[name] = targetOption[name];
	        });
	        each(names, function (name) {
	            // Consider case: newOption.width is null, which is
	            // set by user for removing width setting.
	            hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);
	            hasValue(newParams, name) && newValueCount++;
	            hasValue(merged, name) && mergedValueCount++;
	        });
	
	        // Case: newOption: {width: ..., right: ...},
	        // or targetOption: {right: ...} and newOption: {width: ...},
	        // There is no conflict when merged only has params count
	        // little than enoughParamNumber.
	        if (mergedValueCount === enoughParamNumber || !newValueCount) {
	            return merged;
	        }
	        // Case: newOption: {width: ..., right: ...},
	        // Than we can make sure user only want those two, and ignore
	        // all origin params in targetOption.
	        else if (newValueCount >= enoughParamNumber) {
	                return newParams;
	            } else {
	                // Chose another param from targetOption by priority.
	                // When 'ignoreSize', enoughParamNumber is 1 and those will not happen.
	                for (var i = 0; i < names.length; i++) {
	                    var name = names[i];
	                    if (!hasProp(newParams, name) && hasProp(targetOption, name)) {
	                        newParams[name] = targetOption[name];
	                        break;
	                    }
	                }
	                return newParams;
	            }
	    }
	
	    function hasProp(obj, name) {
	        return obj.hasOwnProperty(name);
	    }
	
	    function hasValue(obj, name) {
	        return obj[name] != null && obj[name] !== 'auto';
	    }
	
	    function copy(names, target, source) {
	        each(names, function (name) {
	            target[name] = source[name];
	        });
	    }
	};
	
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	layout.getLayoutParams = function (source) {
	    return layout.copyLayoutParams({}, source);
	};
	
	/**
	 * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.
	 * @param {Object} source
	 * @return {Object} Result contains those props.
	 */
	layout.copyLayoutParams = function (target, source) {
	    source && target && each(LOCATION_PARAMS, function (name) {
	        source.hasOwnProperty(name) && (target[name] = source[name]);
	    });
	    return target;
	};
	
	module.exports = layout;

/***/ },
/* 243 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    getBoxLayoutParams: function getBoxLayoutParams() {
	        return {
	            left: this.get('left'),
	            top: this.get('top'),
	            right: this.get('right'),
	            bottom: this.get('bottom'),
	            width: this.get('width'),
	            height: this.get('height')
	        };
	    }
	};

/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';
	
	var platform = '';
	// Navigator not exists in node
	if (typeof navigator !== 'undefined') {
	    platform = navigator.platform || '';
	}
	module.exports = {
	    // 全图默认背景
	    // backgroundColor: 'rgba(0,0,0,0)',
	
	    // https://dribbble.com/shots/1065960-Infographic-Pie-chart-visualization
	    // color: ['#5793f3', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#d4df5a', '#cd4870'],
	    // 浅色
	    // color: ['#bcd3bb', '#e88f70', '#edc1a5', '#9dc5c8', '#e1e8c8', '#7b7c68', '#e5b5b5', '#f0b489', '#928ea8', '#bda29a'],
	    // color: ['#cc5664', '#9bd6ec', '#ea946e', '#8acaaa', '#f1ec64', '#ee8686', '#a48dc1', '#5da6bc', '#b9dcae'],
	    // 深色
	    color: ['#c23531', '#2f4554', '#61a0a8', '#d48265', '#91c7ae', '#749f83', '#ca8622', '#bda29a', '#6e7074', '#546570', '#c4ccd3'],
	
	    // 默认需要 Grid 配置项
	    grid: {},
	    // 主题，主题
	    textStyle: {
	        // color: '#000',
	        // decoration: 'none',
	        // PENDING
	        fontFamily: platform.match(/^Win/) ? 'Microsoft YaHei' : 'sans-serif',
	        // fontFamily: 'Arial, Verdana, sans-serif',
	        fontSize: 12,
	        fontStyle: 'normal',
	        fontWeight: 'normal'
	    },
	    // 主题，默认标志图形类型列表
	    // symbolList: [
	    //     'circle', 'rectangle', 'triangle', 'diamond',
	    //     'emptyCircle', 'emptyRectangle', 'emptyTriangle', 'emptyDiamond'
	    // ],
	    animation: true, // 过渡动画是否开启
	    animationThreshold: 2000, // 动画元素阀值，产生的图形原素超过2000不出动画
	    animationDuration: 1000, // 过渡动画参数：进入
	    animationDurationUpdate: 300, // 过渡动画参数：更新
	    animationEasing: 'exponentialOut', //BounceOut
	    animationEasingUpdate: 'cubicOut'
	};

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var echartsAPIList = ['getDom', 'getZr', 'getWidth', 'getHeight', 'dispatchAction', 'on', 'off', 'getDataURL', 'getConnectedDataURL', 'getModel', 'getOption'];
	
	function ExtensionAPI(chartInstance) {
	    zrUtil.each(echartsAPIList, function (name) {
	        this[name] = zrUtil.bind(chartInstance[name], chartInstance);
	    }, this);
	}
	
	module.exports = ExtensionAPI;

/***/ },
/* 246 */
/***/ function(module, exports) {

	'use strict';
	
	// var zrUtil = require('zrender/lib/core/util');
	
	var coordinateSystemCreators = {};
	
	function CoordinateSystemManager() {
	
	    this._coordinateSystems = [];
	}
	
	CoordinateSystemManager.prototype = {
	
	    constructor: CoordinateSystemManager,
	
	    create: function create(ecModel, api) {
	        var coordinateSystems = [];
	        for (var type in coordinateSystemCreators) {
	            var list = coordinateSystemCreators[type].create(ecModel, api);
	            list && (coordinateSystems = coordinateSystems.concat(list));
	        }
	
	        this._coordinateSystems = coordinateSystems;
	    },
	
	    update: function update(ecModel, api) {
	        var coordinateSystems = this._coordinateSystems;
	        for (var i = 0; i < coordinateSystems.length; i++) {
	            // FIXME MUST have
	            coordinateSystems[i].update && coordinateSystems[i].update(ecModel, api);
	        }
	    }
	};
	
	CoordinateSystemManager.register = function (type, coordinateSystemCreator) {
	    coordinateSystemCreators[type] = coordinateSystemCreator;
	};
	
	CoordinateSystemManager.get = function (type) {
	    return coordinateSystemCreators[type];
	};
	
	module.exports = CoordinateSystemManager;

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * ECharts option manager
	 *
	 * @module {echarts/model/OptionManager}
	 */
	
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var ComponentModel = __webpack_require__(240);
	var each = zrUtil.each;
	var clone = zrUtil.clone;
	var map = zrUtil.map;
	var merge = zrUtil.merge;
	
	var QUERY_REG = /^(min|max)?(.+)$/;
	
	/**
	 * TERM EXPLANATIONS:
	 *
	 * [option]:
	 *
	 *     An object that contains definitions of components. For example:
	 *     var option = {
	 *         title: {...},
	 *         legend: {...},
	 *         visualMap: {...},
	 *         series: [
	 *             {data: [...]},
	 *             {data: [...]},
	 *             ...
	 *         ]
	 *     };
	 *
	 * [rawOption]:
	 *
	 *     An object input to echarts.setOption. 'rawOption' may be an
	 *     'option', or may be an object contains multi-options. For example:
	 *     var option = {
	 *         baseOption: {
	 *             title: {...},
	 *             legend: {...},
	 *             series: [
	 *                 {data: [...]},
	 *                 {data: [...]},
	 *                 ...
	 *             ]
	 *         },
	 *         timeline: {...},
	 *         options: [
	 *             {title: {...}, series: {data: [...]}},
	 *             {title: {...}, series: {data: [...]}},
	 *             ...
	 *         ],
	 *         media: [
	 *             {
	 *                 query: {maxWidth: 320},
	 *                 option: {series: {x: 20}, visualMap: {show: false}}
	 *             },
	 *             {
	 *                 query: {minWidth: 320, maxWidth: 720},
	 *                 option: {series: {x: 500}, visualMap: {show: true}}
	 *             },
	 *             {
	 *                 option: {series: {x: 1200}, visualMap: {show: true}}
	 *             }
	 *         ]
	 *     };
	 *
	 * @alias module:echarts/model/OptionManager
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function OptionManager(api) {
	
	    /**
	     * @private
	     * @type {module:echarts/ExtensionAPI}
	     */
	    this._api = api;
	
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._timelineOptions = [];
	
	    /**
	     * @private
	     * @type {Array.<Object>}
	     */
	    this._mediaList = [];
	
	    /**
	     * @private
	     * @type {Object}
	     */
	    this._mediaDefault;
	
	    /**
	     * -1, means default.
	     * empty means no media.
	     * @private
	     * @type {Array.<number>}
	     */
	    this._currentMediaIndices = [];
	
	    /**
	     * @private
	     * @type {Object}
	     */
	    this._optionBackup;
	
	    /**
	     * @private
	     * @type {Object}
	     */
	    this._newOptionBackup;
	}
	
	// timeline.notMerge is not supported in ec3. Firstly there is rearly
	// case that notMerge is needed. Secondly supporting 'notMerge' requires
	// rawOption cloned and backuped when timeline changed, which does no
	// good to performance. What's more, that both timeline and setOption
	// method supply 'notMerge' brings complex and some problems.
	// Consider this case:
	// (step1) chart.setOption({timeline: {notMerge: false}, ...}, false);
	// (step2) chart.setOption({timeline: {notMerge: true}, ...}, false);
	
	OptionManager.prototype = {
	
	    constructor: OptionManager,
	
	    /**
	     * @public
	     * @param {Object} rawOption Raw option.
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Array.<Function>} optionPreprocessorFuncs
	     * @return {Object} Init option
	     */
	    setOption: function setOption(rawOption, optionPreprocessorFuncs) {
	        rawOption = clone(rawOption, true);
	
	        // FIXME
	        // 如果 timeline options 或者 media 中设置了某个属性，而baseOption中没有设置，则进行警告。
	
	        var oldOptionBackup = this._optionBackup;
	        var newOptionBackup = this._newOptionBackup = parseRawOption.call(this, rawOption, optionPreprocessorFuncs);
	
	        // For setOption at second time (using merge mode);
	        if (oldOptionBackup) {
	            // Only baseOption can be merged.
	            mergeOption(oldOptionBackup.baseOption, newOptionBackup.baseOption);
	
	            if (newOptionBackup.timelineOptions.length) {
	                oldOptionBackup.timelineOptions = newOptionBackup.timelineOptions;
	            }
	            if (newOptionBackup.mediaList.length) {
	                oldOptionBackup.mediaList = newOptionBackup.mediaList;
	            }
	            if (newOptionBackup.mediaDefault) {
	                oldOptionBackup.mediaDefault = newOptionBackup.mediaDefault;
	            }
	        } else {
	            this._optionBackup = newOptionBackup;
	        }
	    },
	
	    /**
	     * @param {boolean} isRecreate
	     * @return {Object}
	     */
	    mountOption: function mountOption(isRecreate) {
	        var optionBackup = isRecreate
	        // this._optionBackup can be only used when recreate.
	        // In other cases we use model.mergeOption to handle merge.
	        ? this._optionBackup : this._newOptionBackup;
	
	        // FIXME
	        // 如果没有reset功能则不clone。
	
	        this._timelineOptions = map(optionBackup.timelineOptions, clone);
	        this._mediaList = map(optionBackup.mediaList, clone);
	        this._mediaDefault = clone(optionBackup.mediaDefault);
	        this._currentMediaIndices = [];
	
	        return clone(optionBackup.baseOption);
	    },
	
	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object}
	     */
	    getTimelineOption: function getTimelineOption(ecModel) {
	        var option;
	        var timelineOptions = this._timelineOptions;
	
	        if (timelineOptions.length) {
	            // getTimelineOption can only be called after ecModel inited,
	            // so we can get currentIndex from timelineModel.
	            var timelineModel = ecModel.getComponent('timeline');
	            if (timelineModel) {
	                option = clone(timelineOptions[timelineModel.getCurrentIndex()], true);
	            }
	        }
	
	        return option;
	    },
	
	    /**
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Array.<Object>}
	     */
	    getMediaOption: function getMediaOption(ecModel) {
	        var ecWidth = this._api.getWidth();
	        var ecHeight = this._api.getHeight();
	        var mediaList = this._mediaList;
	        var mediaDefault = this._mediaDefault;
	        var indices = [];
	        var result = [];
	
	        // No media defined.
	        if (!mediaList.length && !mediaDefault) {
	            return result;
	        }
	
	        // Multi media may be applied, the latter defined media has higher priority.
	        for (var i = 0, len = mediaList.length; i < len; i++) {
	            if (applyMediaQuery(mediaList[i].query, ecWidth, ecHeight)) {
	                indices.push(i);
	            }
	        }
	
	        // FIXME
	        // 是否mediaDefault应该强制用户设置，否则可能修改不能回归。
	        if (!indices.length && mediaDefault) {
	            indices = [-1];
	        }
	
	        if (indices.length && !indicesEquals(indices, this._currentMediaIndices)) {
	            result = map(indices, function (index) {
	                return clone(index === -1 ? mediaDefault.option : mediaList[index].option);
	            });
	        }
	        // Otherwise return nothing.
	
	        this._currentMediaIndices = indices;
	
	        return result;
	    }
	};
	
	function parseRawOption(rawOption, optionPreprocessorFuncs) {
	    var timelineOptions = [];
	    var mediaList = [];
	    var mediaDefault;
	    var baseOption;
	
	    // Compatible with ec2.
	    var timelineOpt = rawOption.timeline;
	
	    if (rawOption.baseOption) {
	        baseOption = rawOption.baseOption;
	    }
	
	    // For timeline
	    if (timelineOpt || rawOption.options) {
	        baseOption = baseOption || {};
	        timelineOptions = (rawOption.options || []).slice();
	    }
	    // For media query
	    if (rawOption.media) {
	        baseOption = baseOption || {};
	        var media = rawOption.media;
	        each(media, function (singleMedia) {
	            if (singleMedia && singleMedia.option) {
	                if (singleMedia.query) {
	                    mediaList.push(singleMedia);
	                } else if (!mediaDefault) {
	                    // Use the first media default.
	                    mediaDefault = singleMedia;
	                }
	            }
	        });
	    }
	
	    // For normal option
	    if (!baseOption) {
	        baseOption = rawOption;
	    }
	
	    // Set timelineOpt to baseOption in ec3,
	    // which is convenient for merge option.
	    if (!baseOption.timeline) {
	        baseOption.timeline = timelineOpt;
	    }
	
	    // Preprocess.
	    each([baseOption].concat(timelineOptions).concat(zrUtil.map(mediaList, function (media) {
	        return media.option;
	    })), function (option) {
	        each(optionPreprocessorFuncs, function (preProcess) {
	            preProcess(option);
	        });
	    });
	
	    return {
	        baseOption: baseOption,
	        timelineOptions: timelineOptions,
	        mediaDefault: mediaDefault,
	        mediaList: mediaList
	    };
	}
	
	/**
	 * @see <http://www.w3.org/TR/css3-mediaqueries/#media1>
	 * Support: width, height, aspectRatio
	 * Can use max or min as prefix.
	 */
	function applyMediaQuery(query, ecWidth, ecHeight) {
	    var realMap = {
	        width: ecWidth,
	        height: ecHeight,
	        aspectratio: ecWidth / ecHeight // lowser case for convenientce.
	    };
	
	    var applicatable = true;
	
	    zrUtil.each(query, function (value, attr) {
	        var matched = attr.match(QUERY_REG);
	
	        if (!matched || !matched[1] || !matched[2]) {
	            return;
	        }
	
	        var operator = matched[1];
	        var realAttr = matched[2].toLowerCase();
	
	        if (!compare(realMap[realAttr], value, operator)) {
	            applicatable = false;
	        }
	    });
	
	    return applicatable;
	}
	
	function compare(real, expect, operator) {
	    if (operator === 'min') {
	        return real >= expect;
	    } else if (operator === 'max') {
	        return real <= expect;
	    } else {
	        // Equals
	        return real === expect;
	    }
	}
	
	function indicesEquals(indices1, indices2) {
	    // indices is always order by asc and has only finite number.
	    return indices1.join(',') === indices2.join(',');
	}
	
	/**
	 * Consider case:
	 * `chart.setOption(opt1);`
	 * Then user do some interaction like dataZoom, dataView changing.
	 * `chart.setOption(opt2);`
	 * Then user press 'reset button' in toolbox.
	 *
	 * After doing that all of the interaction effects should be reset, the
	 * chart should be the same as the result of invoke
	 * `chart.setOption(opt1); chart.setOption(opt2);`.
	 *
	 * Although it is not able ensure that
	 * `chart.setOption(opt1); chart.setOption(opt2);` is equivalents to
	 * `chart.setOption(merge(opt1, opt2));` exactly,
	 * this might be the only simple way to implement that feature.
	 *
	 * MEMO: We've considered some other approaches:
	 * 1. Each model handle its self restoration but not uniform treatment.
	 *     (Too complex in logic and error-prone)
	 * 2. Use a shadow ecModel. (Performace expensive)
	 */
	function mergeOption(oldOption, newOption) {
	    newOption = newOption || {};
	
	    each(newOption, function (newCptOpt, mainType) {
	        if (newCptOpt == null) {
	            return;
	        }
	
	        var oldCptOpt = oldOption[mainType];
	
	        if (!ComponentModel.hasClass(mainType)) {
	            oldOption[mainType] = merge(oldCptOpt, newCptOpt, true);
	        } else {
	            newCptOpt = modelUtil.normalizeToArray(newCptOpt);
	            oldCptOpt = modelUtil.normalizeToArray(oldCptOpt);
	
	            var mapResult = modelUtil.mappingToExists(oldCptOpt, newCptOpt);
	
	            oldOption[mainType] = map(mapResult, function (item) {
	                return item.option && item.exist ? merge(item.exist, item.option, true) : item.exist || item.option;
	            });
	        }
	    });
	}
	
	module.exports = OptionManager;

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var formatUtil = __webpack_require__(227);
	var modelUtil = __webpack_require__(226);
	var ComponentModel = __webpack_require__(240);
	
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;
	
	var SeriesModel = ComponentModel.extend({
	
	    type: 'series',
	
	    /**
	     * @readOnly
	     */
	    seriesIndex: 0,
	
	    // coodinateSystem will be injected in the echarts/CoordinateSystem
	    coordinateSystem: null,
	
	    /**
	     * @type {Object}
	     * @protected
	     */
	    defaultOption: null,
	
	    /**
	     * Data provided for legend
	     * @type {Function}
	     */
	    // PENDING
	    legendDataProvider: null,
	
	    init: function init(option, parentModel, ecModel, extraOpt) {
	
	        /**
	         * @type {number}
	         * @readOnly
	         */
	        this.seriesIndex = this.componentIndex;
	
	        this.mergeDefaultAndTheme(option, ecModel);
	
	        /**
	         * @type {module:echarts/data/List|module:echarts/data/Tree|module:echarts/data/Graph}
	         * @private
	         */
	        this._dataBeforeProcessed = this.getInitialData(option, ecModel);
	
	        // When using module:echarts/data/Tree or module:echarts/data/Graph,
	        // cloneShallow will cause this._data.graph.data pointing to new data list.
	        // Wo we make this._dataBeforeProcessed first, and then make this._data.
	        this._data = this._dataBeforeProcessed.cloneShallow();
	    },
	
	    /**
	     * Util for merge default and theme to option
	     * @param  {Object} option
	     * @param  {module:echarts/model/Global} ecModel
	     */
	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	        zrUtil.merge(option, ecModel.getTheme().get(this.subType));
	        zrUtil.merge(option, this.getDefaultOption());
	
	        // Default label emphasis `position` and `show`
	        modelUtil.defaultEmphasis(option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	
	        // Default data label emphasis `position` and `show`
	        // FIXME Tree structure data ?
	        var data = option.data || [];
	        for (var i = 0; i < data.length; i++) {
	            if (data[i] && data[i].label) {
	                modelUtil.defaultEmphasis(data[i].label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	            }
	        }
	    },
	
	    mergeOption: function mergeOption(newSeriesOption, ecModel) {
	        newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);
	
	        var data = this.getInitialData(newSeriesOption, ecModel);
	        // TODO Merge data?
	        if (data) {
	            this._data = data;
	            this._dataBeforeProcessed = data.cloneShallow();
	        }
	    },
	
	    /**
	     * Init a data structure from data related option in series
	     * Must be overwritten
	     */
	    getInitialData: function getInitialData() {},
	
	    /**
	     * @return {module:echarts/data/List}
	     */
	    getData: function getData() {
	        return this._data;
	    },
	
	    /**
	     * @param {module:echarts/data/List} data
	     */
	    setData: function setData(data) {
	        this._data = data;
	    },
	
	    /**
	     * Get data before processed
	     * @return {module:echarts/data/List}
	     */
	    getRawData: function getRawData() {
	        return this._dataBeforeProcessed;
	    },
	
	    /**
	     * Get raw data array given by user
	     * @return {Array.<Object>}
	     */
	    getRawDataArray: function getRawDataArray() {
	        return this.option.data;
	    },
	
	    /**
	     * Coord dimension to data dimension.
	     *
	     * By default the result is the same as dimensions of series data.
	     * But some series dimensions are different from coord dimensions (i.e.
	     * candlestick and boxplot). Override this method to handle those cases.
	     *
	     * Coord dimension to data dimension can be one-to-many
	     *
	     * @param {string} coordDim
	     * @return {Array.<string>} dimensions on the axis.
	     */
	    coordDimToDataDim: function coordDimToDataDim(coordDim) {
	        return [coordDim];
	    },
	
	    /**
	     * Convert data dimension to coord dimension.
	     *
	     * @param {string|number} dataDim
	     * @return {string}
	     */
	    dataDimToCoordDim: function dataDimToCoordDim(dataDim) {
	        return dataDim;
	    },
	
	    /**
	     * Get base axis if has coordinate system and has axis.
	     * By default use coordSys.getBaseAxis();
	     * Can be overrided for some chart.
	     * @return {type} description
	     */
	    getBaseAxis: function getBaseAxis() {
	        var coordSys = this.coordinateSystem;
	        return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();
	    },
	
	    // FIXME
	    /**
	     * Default tooltip formatter
	     *
	     * @param {number} dataIndex
	     * @param {boolean} [multipleSeries=false]
	     */
	    formatTooltip: function formatTooltip(dataIndex, multipleSeries) {
	        var data = this._data;
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	        var name = data.getName(dataIndex);
	
	        return !multipleSeries ? encodeHTML(this.name) + '<br />' + (name ? encodeHTML(name) + ' : ' + formattedValue : formattedValue) : encodeHTML(this.name) + ' : ' + formattedValue;
	    },
	
	    restoreData: function restoreData() {
	        this._data = this._dataBeforeProcessed.cloneShallow();
	    }
	});
	
	zrUtil.mixin(SeriesModel, modelUtil.dataFormatMixin);
	
	module.exports = SeriesModel;

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Group = __webpack_require__(250);
	var componentUtil = __webpack_require__(241);
	var clazzUtil = __webpack_require__(230);
	
	var Component = function Component() {
	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new Group();
	
	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.uid = componentUtil.getUID('viewComponent');
	};
	
	Component.prototype = {
	
	    constructor: Component,
	
	    init: function init(ecModel, api) {},
	
	    render: function render(componentModel, ecModel, api, payload) {},
	
	    dispose: function dispose() {}
	};
	
	var componentProto = Component.prototype;
	componentProto.updateView = componentProto.updateLayout = componentProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	    // Do nothing;
	};
	// Enable Component.extend.
	clazzUtil.enableClassExtend(Component);
	
	// Enable capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(Component, { registerWhenExtend: true });
	
	module.exports = Component;

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Group是一个容器，可以插入子节点，Group的变换也会被应用到子节点上
	 * @module zrender/graphic/Group
	 * @example
	 *     var Group = require('zrender/lib/container/Group');
	 *     var Circle = require('zrender/lib/graphic/shape/Circle');
	 *     var g = new Group();
	 *     g.position[0] = 100;
	 *     g.position[1] = 100;
	 *     g.add(new Circle({
	 *         style: {
	 *             x: 100,
	 *             y: 100,
	 *             r: 20,
	 *         }
	 *     }));
	 *     zr.add(g);
	 */
	
	var zrUtil = __webpack_require__(224);
	var Element = __webpack_require__(251);
	var BoundingRect = __webpack_require__(236);
	
	/**
	 * @alias module:zrender/graphic/Group
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @extends module:zrender/mixin/Eventful
	 */
	var Group = function Group(opts) {
	
	    opts = opts || {};
	
	    Element.call(this, opts);
	
	    for (var key in opts) {
	        this[key] = opts[key];
	    }
	
	    this._children = [];
	
	    this.__storage = null;
	
	    this.__dirty = true;
	};
	
	Group.prototype = {
	
	    constructor: Group,
	
	    /**
	     * @type {string}
	     */
	    type: 'group',
	
	    /**
	     * @return {Array.<module:zrender/Element>}
	     */
	    children: function children() {
	        return this._children.slice();
	    },
	
	    /**
	     * 获取指定 index 的儿子节点
	     * @param  {number} idx
	     * @return {module:zrender/Element}
	     */
	    childAt: function childAt(idx) {
	        return this._children[idx];
	    },
	
	    /**
	     * 获取指定名字的儿子节点
	     * @param  {string} name
	     * @return {module:zrender/Element}
	     */
	    childOfName: function childOfName(name) {
	        var children = this._children;
	        for (var i = 0; i < children.length; i++) {
	            if (children[i].name === name) {
	                return children[i];
	            }
	        }
	    },
	
	    /**
	     * @return {number}
	     */
	    childCount: function childCount() {
	        return this._children.length;
	    },
	
	    /**
	     * 添加子节点到最后
	     * @param {module:zrender/Element} child
	     */
	    add: function add(child) {
	        if (child && child !== this && child.parent !== this) {
	
	            this._children.push(child);
	
	            this._doAdd(child);
	        }
	
	        return this;
	    },
	
	    /**
	     * 添加子节点在 nextSibling 之前
	     * @param {module:zrender/Element} child
	     * @param {module:zrender/Element} nextSibling
	     */
	    addBefore: function addBefore(child, nextSibling) {
	        if (child && child !== this && child.parent !== this && nextSibling && nextSibling.parent === this) {
	
	            var children = this._children;
	            var idx = children.indexOf(nextSibling);
	
	            if (idx >= 0) {
	                children.splice(idx, 0, child);
	                this._doAdd(child);
	            }
	        }
	
	        return this;
	    },
	
	    _doAdd: function _doAdd(child) {
	        if (child.parent) {
	            child.parent.remove(child);
	        }
	
	        child.parent = this;
	
	        var storage = this.__storage;
	        var zr = this.__zr;
	        if (storage && storage !== child.__storage) {
	
	            storage.addToMap(child);
	
	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }
	
	        zr && zr.refresh();
	    },
	
	    /**
	     * 移除子节点
	     * @param {module:zrender/Element} child
	     */
	    remove: function remove(child) {
	        var zr = this.__zr;
	        var storage = this.__storage;
	        var children = this._children;
	
	        var idx = zrUtil.indexOf(children, child);
	        if (idx < 0) {
	            return this;
	        }
	        children.splice(idx, 1);
	
	        child.parent = null;
	
	        if (storage) {
	
	            storage.delFromMap(child.id);
	
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }
	
	        zr && zr.refresh();
	
	        return this;
	    },
	
	    /**
	     * 移除所有子节点
	     */
	    removeAll: function removeAll() {
	        var children = this._children;
	        var storage = this.__storage;
	        var child;
	        var i;
	        for (i = 0; i < children.length; i++) {
	            child = children[i];
	            if (storage) {
	                storage.delFromMap(child.id);
	                if (child instanceof Group) {
	                    child.delChildrenFromStorage(storage);
	                }
	            }
	            child.parent = null;
	        }
	        children.length = 0;
	
	        return this;
	    },
	
	    /**
	     * 遍历所有子节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    eachChild: function eachChild(cb, context) {
	        var children = this._children;
	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            cb.call(context, child, i);
	        }
	        return this;
	    },
	
	    /**
	     * 深度优先遍历所有子孙节点
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    traverse: function traverse(cb, context) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            cb.call(context, child);
	
	            if (child.type === 'group') {
	                child.traverse(cb, context);
	            }
	        }
	        return this;
	    },
	
	    addChildrenToStorage: function addChildrenToStorage(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.addToMap(child);
	            if (child instanceof Group) {
	                child.addChildrenToStorage(storage);
	            }
	        }
	    },
	
	    delChildrenFromStorage: function delChildrenFromStorage(storage) {
	        for (var i = 0; i < this._children.length; i++) {
	            var child = this._children[i];
	            storage.delFromMap(child.id);
	            if (child instanceof Group) {
	                child.delChildrenFromStorage(storage);
	            }
	        }
	    },
	
	    dirty: function dirty() {
	        this.__dirty = true;
	        this.__zr && this.__zr.refresh();
	        return this;
	    },
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect(includeChildren) {
	        // TODO Caching
	        // TODO Transform
	        var rect = null;
	        var tmpRect = new BoundingRect(0, 0, 0, 0);
	        var children = includeChildren || this._children;
	        var tmpMat = [];
	
	        for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            if (child.ignore || child.invisible) {
	                continue;
	            }
	
	            var childRect = child.getBoundingRect();
	            var transform = child.getLocalTransform(tmpMat);
	            if (transform) {
	                tmpRect.copy(childRect);
	                tmpRect.applyTransform(transform);
	                rect = rect || tmpRect.clone();
	                rect.union(tmpRect);
	            } else {
	                rect = rect || childRect.clone();
	                rect.union(childRect);
	            }
	        }
	        return rect || tmpRect;
	    }
	};
	
	zrUtil.inherits(Group, Element);
	
	module.exports = Group;

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/Element
	 */
	
	var guid = __webpack_require__(252);
	var Eventful = __webpack_require__(253);
	var Transformable = __webpack_require__(254);
	var Animatable = __webpack_require__(255);
	var zrUtil = __webpack_require__(224);
	
	/**
	 * @alias module:zrender/Element
	 * @constructor
	 * @extends {module:zrender/mixin/Animatable}
	 * @extends {module:zrender/mixin/Transformable}
	 * @extends {module:zrender/mixin/Eventful}
	 */
	var Element = function Element(opts) {
	
	    Transformable.call(this, opts);
	    Eventful.call(this, opts);
	    Animatable.call(this, opts);
	
	    /**
	     * 画布元素ID
	     * @type {string}
	     */
	    this.id = opts.id || guid();
	};
	
	Element.prototype = {
	
	    /**
	     * 元素类型
	     * Element type
	     * @type {string}
	     */
	    type: 'element',
	
	    /**
	     * 元素名字
	     * Element name
	     * @type {string}
	     */
	    name: '',
	
	    /**
	     * ZRender 实例对象，会在 element 添加到 zrender 实例中后自动赋值
	     * ZRender instance will be assigned when element is associated with zrender
	     * @name module:/zrender/Element#__zr
	     * @type {module:zrender/ZRender}
	     */
	    __zr: null,
	
	    /**
	     * 图形是否忽略，为true时忽略图形的绘制以及事件触发
	     * If ignore drawing and events of the element object
	     * @name module:/zrender/Element#ignore
	     * @type {boolean}
	     * @default false
	     */
	    ignore: false,
	
	    /**
	     * 用于裁剪的路径(shape)，所有 Group 内的路径在绘制时都会被这个路径裁剪
	     * 该路径会继承被裁减对象的变换
	     * @type {module:zrender/graphic/Path}
	     * @see http://www.w3.org/TR/2dcontext/#clipping-region
	     * @readOnly
	     */
	    clipPath: null,
	
	    /**
	     * Drift element
	     * @param  {number} dx dx on the global space
	     * @param  {number} dy dy on the global space
	     */
	    drift: function drift(dx, dy) {
	        switch (this.draggable) {
	            case 'horizontal':
	                dy = 0;
	                break;
	            case 'vertical':
	                dx = 0;
	                break;
	        }
	
	        var m = this.transform;
	        if (!m) {
	            m = this.transform = [1, 0, 0, 1, 0, 0];
	        }
	        m[4] += dx;
	        m[5] += dy;
	
	        this.decomposeTransform();
	        this.dirty();
	    },
	
	    /**
	     * Hook before update
	     */
	    beforeUpdate: function beforeUpdate() {},
	    /**
	     * Hook after update
	     */
	    afterUpdate: function afterUpdate() {},
	    /**
	     * Update each frame
	     */
	    update: function update() {
	        this.updateTransform();
	    },
	
	    /**
	     * @param  {Function} cb
	     * @param  {}   context
	     */
	    traverse: function traverse(cb, context) {},
	
	    /**
	     * @protected
	     */
	    attrKV: function attrKV(key, value) {
	        if (key === 'position' || key === 'scale' || key === 'origin') {
	            // Copy the array
	            if (value) {
	                var target = this[key];
	                if (!target) {
	                    target = this[key] = [];
	                }
	                target[0] = value[0];
	                target[1] = value[1];
	            }
	        } else {
	            this[key] = value;
	        }
	    },
	
	    /**
	     * Hide the element
	     */
	    hide: function hide() {
	        this.ignore = true;
	        this.__zr && this.__zr.refresh();
	    },
	
	    /**
	     * Show the element
	     */
	    show: function show() {
	        this.ignore = false;
	        this.__zr && this.__zr.refresh();
	    },
	
	    /**
	     * @param {string|Object} key
	     * @param {*} value
	     */
	    attr: function attr(key, value) {
	        if (typeof key === 'string') {
	            this.attrKV(key, value);
	        } else if (zrUtil.isObject(key)) {
	            for (var name in key) {
	                if (key.hasOwnProperty(name)) {
	                    this.attrKV(name, key[name]);
	                }
	            }
	        }
	        this.dirty();
	
	        return this;
	    },
	
	    /**
	     * @param {module:zrender/graphic/Path} clipPath
	     */
	    setClipPath: function setClipPath(clipPath) {
	        var zr = this.__zr;
	        if (zr) {
	            clipPath.addSelfToZr(zr);
	        }
	
	        // Remove previous clip path
	        if (this.clipPath && this.clipPath !== clipPath) {
	            this.removeClipPath();
	        }
	
	        this.clipPath = clipPath;
	        clipPath.__zr = zr;
	        clipPath.__clipTarget = this;
	
	        this.dirty();
	    },
	
	    /**
	     */
	    removeClipPath: function removeClipPath() {
	        var clipPath = this.clipPath;
	        if (clipPath) {
	            if (clipPath.__zr) {
	                clipPath.removeSelfFromZr(clipPath.__zr);
	            }
	
	            clipPath.__zr = null;
	            clipPath.__clipTarget = null;
	            this.clipPath = null;
	
	            this.dirty();
	        }
	    },
	
	    /**
	     * Add self from zrender instance.
	     * Not recursively because it will be invoked when element added to storage.
	     * @param {module:zrender/ZRender} zr
	     */
	    addSelfToZr: function addSelfToZr(zr) {
	        this.__zr = zr;
	        // 添加动画
	        var animators = this.animators;
	        if (animators) {
	            for (var i = 0; i < animators.length; i++) {
	                zr.animation.addAnimator(animators[i]);
	            }
	        }
	
	        if (this.clipPath) {
	            this.clipPath.addSelfToZr(zr);
	        }
	    },
	
	    /**
	     * Remove self from zrender instance.
	     * Not recursively because it will be invoked when element added to storage.
	     * @param {module:zrender/ZRender} zr
	     */
	    removeSelfFromZr: function removeSelfFromZr(zr) {
	        this.__zr = null;
	        // 移除动画
	        var animators = this.animators;
	        if (animators) {
	            for (var i = 0; i < animators.length; i++) {
	                zr.animation.removeAnimator(animators[i]);
	            }
	        }
	
	        if (this.clipPath) {
	            this.clipPath.removeSelfFromZr(zr);
	        }
	    }
	};
	
	zrUtil.mixin(Element, Animatable);
	zrUtil.mixin(Element, Transformable);
	zrUtil.mixin(Element, Eventful);
	
	module.exports = Element;

/***/ },
/* 252 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * zrender: 生成唯一id
	 *
	 * @author errorrik (errorrik@gmail.com)
	 */
	
	var idStart = 0x0907;
	
	module.exports = function () {
	    return 'zr_' + idStart++;
	};

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 事件扩展
	 * @module zrender/mixin/Eventful
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	
	var arrySlice = Array.prototype.slice;
	var zrUtil = __webpack_require__(224);
	var indexOf = zrUtil.indexOf;
	
	/**
	 * 事件分发器
	 * @alias module:zrender/mixin/Eventful
	 * @constructor
	 */
	var Eventful = function Eventful() {
	    this._$handlers = {};
	};
	
	Eventful.prototype = {
	
	    constructor: Eventful,
	
	    /**
	     * 单次触发绑定，trigger后销毁
	     *
	     * @param {string} event 事件名
	     * @param {Function} handler 响应函数
	     * @param {Object} context
	     */
	    one: function one(event, handler, context) {
	        var _h = this._$handlers;
	
	        if (!handler || !event) {
	            return this;
	        }
	
	        if (!_h[event]) {
	            _h[event] = [];
	        }
	
	        if (indexOf(_h[event], event) >= 0) {
	            return this;
	        }
	
	        _h[event].push({
	            h: handler,
	            one: true,
	            ctx: context || this
	        });
	
	        return this;
	    },
	
	    /**
	     * 绑定事件
	     * @param {string} event 事件名
	     * @param {Function} handler 事件处理函数
	     * @param {Object} [context]
	     */
	    on: function on(event, handler, context) {
	        var _h = this._$handlers;
	
	        if (!handler || !event) {
	            return this;
	        }
	
	        if (!_h[event]) {
	            _h[event] = [];
	        }
	
	        _h[event].push({
	            h: handler,
	            one: false,
	            ctx: context || this
	        });
	
	        return this;
	    },
	
	    /**
	     * 是否绑定了事件
	     * @param  {string}  event
	     * @return {boolean}
	     */
	    isSilent: function isSilent(event) {
	        var _h = this._$handlers;
	        return _h[event] && _h[event].length;
	    },
	
	    /**
	     * 解绑事件
	     * @param {string} event 事件名
	     * @param {Function} [handler] 事件处理函数
	     */
	    off: function off(event, handler) {
	        var _h = this._$handlers;
	
	        if (!event) {
	            this._$handlers = {};
	            return this;
	        }
	
	        if (handler) {
	            if (_h[event]) {
	                var newList = [];
	                for (var i = 0, l = _h[event].length; i < l; i++) {
	                    if (_h[event][i]['h'] != handler) {
	                        newList.push(_h[event][i]);
	                    }
	                }
	                _h[event] = newList;
	            }
	
	            if (_h[event] && _h[event].length === 0) {
	                delete _h[event];
	            }
	        } else {
	            delete _h[event];
	        }
	
	        return this;
	    },
	
	    /**
	     * 事件分发
	     *
	     * @param {string} type 事件类型
	     */
	    trigger: function trigger(type) {
	        if (this._$handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;
	
	            if (argLen > 3) {
	                args = arrySlice.call(args, 1);
	            }
	
	            var _h = this._$handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(_h[i]['ctx']);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(_h[i]['ctx'], args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(_h[i]['ctx'], args);
	                        break;
	                }
	
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                } else {
	                    i++;
	                }
	            }
	        }
	
	        return this;
	    },
	
	    /**
	     * 带有context的事件分发, 最后一个参数是事件回调的context
	     * @param {string} type 事件类型
	     */
	    triggerWithContext: function triggerWithContext(type) {
	        if (this._$handlers[type]) {
	            var args = arguments;
	            var argLen = args.length;
	
	            if (argLen > 4) {
	                args = arrySlice.call(args, 1, args.length - 1);
	            }
	            var ctx = args[args.length - 1];
	
	            var _h = this._$handlers[type];
	            var len = _h.length;
	            for (var i = 0; i < len;) {
	                // Optimize advise from backbone
	                switch (argLen) {
	                    case 1:
	                        _h[i]['h'].call(ctx);
	                        break;
	                    case 2:
	                        _h[i]['h'].call(ctx, args[1]);
	                        break;
	                    case 3:
	                        _h[i]['h'].call(ctx, args[1], args[2]);
	                        break;
	                    default:
	                        // have more than 2 given arguments
	                        _h[i]['h'].apply(ctx, args);
	                        break;
	                }
	
	                if (_h[i]['one']) {
	                    _h.splice(i, 1);
	                    len--;
	                } else {
	                    i++;
	                }
	            }
	        }
	
	        return this;
	    }
	};
	
	// 对象可以通过 onxxxx 绑定事件
	/**
	 * @event module:zrender/mixin/Eventful#onclick
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseover
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseout
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousemove
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousewheel
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmousedown
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#onmouseup
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragstart
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragend
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragenter
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragleave
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondragover
	 * @type {Function}
	 * @default null
	 */
	/**
	 * @event module:zrender/mixin/Eventful#ondrop
	 * @type {Function}
	 * @default null
	 */
	
	module.exports = Eventful;

/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 提供变换扩展
	 * @module zrender/mixin/Transformable
	 * @author pissang (https://www.github.com/pissang)
	 */
	
	var matrix = __webpack_require__(238);
	var vector = __webpack_require__(237);
	var mIdentity = matrix.identity;
	
	var EPSILON = 5e-5;
	
	function isNotAroundZero(val) {
	    return val > EPSILON || val < -EPSILON;
	}
	
	/**
	 * @alias module:zrender/mixin/Transformable
	 * @constructor
	 */
	var Transformable = function Transformable(opts) {
	    opts = opts || {};
	    // If there are no given position, rotation, scale
	    if (!opts.position) {
	        /**
	         * 平移
	         * @type {Array.<number>}
	         * @default [0, 0]
	         */
	        this.position = [0, 0];
	    }
	    if (opts.rotation == null) {
	        /**
	         * 旋转
	         * @type {Array.<number>}
	         * @default 0
	         */
	        this.rotation = 0;
	    }
	    if (!opts.scale) {
	        /**
	         * 缩放
	         * @type {Array.<number>}
	         * @default [1, 1]
	         */
	        this.scale = [1, 1];
	    }
	    /**
	     * 旋转和缩放的原点
	     * @type {Array.<number>}
	     * @default null
	     */
	    this.origin = this.origin || null;
	};
	
	var transformableProto = Transformable.prototype;
	transformableProto.transform = null;
	
	/**
	 * 判断是否需要有坐标变换
	 * 如果有坐标变换, 则从position, rotation, scale以及父节点的transform计算出自身的transform矩阵
	 */
	transformableProto.needLocalTransform = function () {
	    return isNotAroundZero(this.rotation) || isNotAroundZero(this.position[0]) || isNotAroundZero(this.position[1]) || isNotAroundZero(this.scale[0] - 1) || isNotAroundZero(this.scale[1] - 1);
	};
	
	transformableProto.updateTransform = function () {
	    var parent = this.parent;
	    var parentHasTransform = parent && parent.transform;
	    var needLocalTransform = this.needLocalTransform();
	
	    var m = this.transform;
	    if (!(needLocalTransform || parentHasTransform)) {
	        m && mIdentity(m);
	        return;
	    }
	
	    m = m || matrix.create();
	
	    if (needLocalTransform) {
	        this.getLocalTransform(m);
	    } else {
	        mIdentity(m);
	    }
	
	    // 应用父节点变换
	    if (parentHasTransform) {
	        if (needLocalTransform) {
	            matrix.mul(m, parent.transform, m);
	        } else {
	            matrix.copy(m, parent.transform);
	        }
	    }
	    // 保存这个变换矩阵
	    this.transform = m;
	
	    this.invTransform = this.invTransform || matrix.create();
	    matrix.invert(this.invTransform, m);
	};
	
	transformableProto.getLocalTransform = function (m) {
	    m = m || [];
	    mIdentity(m);
	
	    var origin = this.origin;
	
	    var scale = this.scale;
	    var rotation = this.rotation;
	    var position = this.position;
	    if (origin) {
	        // Translate to origin
	        m[4] -= origin[0];
	        m[5] -= origin[1];
	    }
	    matrix.scale(m, m, scale);
	    if (rotation) {
	        matrix.rotate(m, m, rotation);
	    }
	    if (origin) {
	        // Translate back from origin
	        m[4] += origin[0];
	        m[5] += origin[1];
	    }
	
	    m[4] += position[0];
	    m[5] += position[1];
	
	    return m;
	};
	/**
	 * 将自己的transform应用到context上
	 * @param {Context2D} ctx
	 */
	transformableProto.setTransform = function (ctx) {
	    var m = this.transform;
	    if (m) {
	        ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	    }
	};
	
	var tmpTransform = [];
	
	/**
	 * 分解`transform`矩阵到`position`, `rotation`, `scale`
	 */
	transformableProto.decomposeTransform = function () {
	    if (!this.transform) {
	        return;
	    }
	    var parent = this.parent;
	    var m = this.transform;
	    if (parent && parent.transform) {
	        // Get local transform and decompose them to position, scale, rotation
	        matrix.mul(tmpTransform, parent.invTransform, m);
	        m = tmpTransform;
	    }
	    var sx = m[0] * m[0] + m[1] * m[1];
	    var sy = m[2] * m[2] + m[3] * m[3];
	    var position = this.position;
	    var scale = this.scale;
	    if (isNotAroundZero(sx - 1)) {
	        sx = Math.sqrt(sx);
	    }
	    if (isNotAroundZero(sy - 1)) {
	        sy = Math.sqrt(sy);
	    }
	    if (m[0] < 0) {
	        sx = -sx;
	    }
	    if (m[3] < 0) {
	        sy = -sy;
	    }
	    position[0] = m[4];
	    position[1] = m[5];
	    scale[0] = sx;
	    scale[1] = sy;
	    this.rotation = Math.atan2(-m[1] / sy, m[0] / sx);
	};
	
	/**
	 * 变换坐标位置到 shape 的局部坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	transformableProto.transformCoordToLocal = function (x, y) {
	    var v2 = [x, y];
	    var invTransform = this.invTransform;
	    if (invTransform) {
	        vector.applyTransform(v2, v2, invTransform);
	    }
	    return v2;
	};
	
	/**
	 * 变换局部坐标位置到全局坐标空间
	 * @method
	 * @param {number} x
	 * @param {number} y
	 * @return {Array.<number>}
	 */
	transformableProto.transformCoordToGlobal = function (x, y) {
	    var v2 = [x, y];
	    var transform = this.transform;
	    if (transform) {
	        vector.applyTransform(v2, v2, transform);
	    }
	    return v2;
	};
	
	module.exports = Transformable;

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module zrender/mixin/Animatable
	 */
	
	var Animator = __webpack_require__(256);
	var util = __webpack_require__(224);
	var isString = util.isString;
	var isFunction = util.isFunction;
	var isObject = util.isObject;
	var log = __webpack_require__(260);
	
	/**
	 * @alias modue:zrender/mixin/Animatable
	 * @constructor
	 */
	var Animatable = function Animatable() {
	
	    /**
	     * @type {Array.<module:zrender/animation/Animator>}
	     * @readOnly
	     */
	    this.animators = [];
	};
	
	Animatable.prototype = {
	
	    constructor: Animatable,
	
	    /**
	     * 动画
	     *
	     * @param {string} path 需要添加动画的属性获取路径，可以通过a.b.c来获取深层的属性
	     * @param {boolean} [loop] 动画是否循环
	     * @return {module:zrender/animation/Animator}
	     * @example:
	     *     el.animate('style', false)
	     *         .when(1000, {x: 10} )
	     *         .done(function(){ // Animation done })
	     *         .start()
	     */
	    animate: function animate(path, loop) {
	        var target;
	        var animatingShape = false;
	        var el = this;
	        var zr = this.__zr;
	        if (path) {
	            var pathSplitted = path.split('.');
	            var prop = el;
	            // If animating shape
	            animatingShape = pathSplitted[0] === 'shape';
	            for (var i = 0, l = pathSplitted.length; i < l; i++) {
	                if (!prop) {
	                    continue;
	                }
	                prop = prop[pathSplitted[i]];
	            }
	            if (prop) {
	                target = prop;
	            }
	        } else {
	            target = el;
	        }
	
	        if (!target) {
	            log('Property "' + path + '" is not existed in element ' + el.id);
	            return;
	        }
	
	        var animators = el.animators;
	
	        var animator = new Animator(target, loop);
	
	        animator.during(function (target) {
	            el.dirty(animatingShape);
	        }).done(function () {
	            // FIXME Animator will not be removed if use `Animator#stop` to stop animation
	            animators.splice(util.indexOf(animators, animator), 1);
	        });
	
	        animators.push(animator);
	
	        // If animate after added to the zrender
	        if (zr) {
	            zr.animation.addAnimator(animator);
	        }
	
	        return animator;
	    },
	
	    /**
	     * 停止动画
	     * @param {boolean} forwardToLast If move to last frame before stop
	     */
	    stopAnimation: function stopAnimation(forwardToLast) {
	        var animators = this.animators;
	        var len = animators.length;
	        for (var i = 0; i < len; i++) {
	            animators[i].stop(forwardToLast);
	        }
	        animators.length = 0;
	
	        return this;
	    },
	
	    /**
	     * @param {Object} target
	     * @param {number} [time=500] Time in ms
	     * @param {string} [easing='linear']
	     * @param {number} [delay=0]
	     * @param {Function} [callback]
	     *
	     * @example
	     *  // Animate position
	     *  el.animateTo({
	     *      position: [10, 10]
	     *  }, function () { // done })
	     *
	     *  // Animate shape, style and position in 100ms, delayed 100ms, with cubicOut easing
	     *  el.animateTo({
	     *      shape: {
	     *          width: 500
	     *      },
	     *      style: {
	     *          fill: 'red'
	     *      }
	     *      position: [10, 10]
	     *  }, 100, 100, 'cubicOut', function () { // done })
	     */
	    // TODO Return animation key
	    animateTo: function animateTo(target, time, delay, easing, callback) {
	        // animateTo(target, time, easing, callback);
	        if (isString(delay)) {
	            callback = easing;
	            easing = delay;
	            delay = 0;
	        }
	        // animateTo(target, time, delay, callback);
	        else if (isFunction(easing)) {
	                callback = easing;
	                easing = 'linear';
	                delay = 0;
	            }
	            // animateTo(target, time, callback);
	            else if (isFunction(delay)) {
	                    callback = delay;
	                    delay = 0;
	                }
	                // animateTo(target, callback)
	                else if (isFunction(time)) {
	                        callback = time;
	                        time = 500;
	                    }
	                    // animateTo(target)
	                    else if (!time) {
	                            time = 500;
	                        }
	        // Stop all previous animations
	        this.stopAnimation();
	        this._animateToShallow('', this, target, time, delay, easing, callback);
	
	        // Animators may be removed immediately after start
	        // if there is nothing to animate
	        var animators = this.animators.slice();
	        var count = animators.length;
	        function done() {
	            count--;
	            if (!count) {
	                callback && callback();
	            }
	        }
	
	        // No animators. This should be checked before animators[i].start(),
	        // because 'done' may be executed immediately if no need to animate.
	        if (!count) {
	            callback && callback();
	        }
	        // Start after all animators created
	        // Incase any animator is done immediately when all animation properties are not changed
	        for (var i = 0; i < animators.length; i++) {
	            animators[i].done(done).start(easing);
	        }
	    },
	
	    /**
	     * @private
	     * @param {string} path=''
	     * @param {Object} source=this
	     * @param {Object} target
	     * @param {number} [time=500]
	     * @param {number} [delay=0]
	     *
	     * @example
	     *  // Animate position
	     *  el._animateToShallow({
	     *      position: [10, 10]
	     *  })
	     *
	     *  // Animate shape, style and position in 100ms, delayed 100ms
	     *  el._animateToShallow({
	     *      shape: {
	     *          width: 500
	     *      },
	     *      style: {
	     *          fill: 'red'
	     *      }
	     *      position: [10, 10]
	     *  }, 100, 100)
	     */
	    _animateToShallow: function _animateToShallow(path, source, target, time, delay) {
	        var objShallow = {};
	        var propertyCount = 0;
	        for (var name in target) {
	            if (source[name] != null) {
	                if (isObject(target[name]) && !util.isArrayLike(target[name])) {
	                    this._animateToShallow(path ? path + '.' + name : name, source[name], target[name], time, delay);
	                } else {
	                    objShallow[name] = target[name];
	                    propertyCount++;
	                }
	            } else if (target[name] != null) {
	                // Attr directly if not has property
	                // FIXME, if some property not needed for element ?
	                if (!path) {
	                    this.attr(name, target[name]);
	                } else {
	                    // Shape or style
	                    var props = {};
	                    props[path] = {};
	                    props[path][name] = target[name];
	                    this.attr(props);
	                }
	            }
	        }
	
	        if (propertyCount > 0) {
	            this.animate(path, false).when(time == null ? 500 : time, objShallow).delay(delay || 0);
	        }
	
	        return this;
	    }
	};
	
	module.exports = Animatable;

/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/animation/Animator
	 */
	
	var Clip = __webpack_require__(257);
	var color = __webpack_require__(259);
	var util = __webpack_require__(224);
	var isArrayLike = util.isArrayLike;
	
	var arraySlice = Array.prototype.slice;
	
	function defaultGetter(target, key) {
	    return target[key];
	}
	
	function defaultSetter(target, key, value) {
	    target[key] = value;
	}
	
	/**
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} percent
	 * @return {number}
	 */
	function interpolateNumber(p0, p1, percent) {
	    return (p1 - p0) * percent + p0;
	}
	
	/**
	 * @param  {string} p0
	 * @param  {string} p1
	 * @param  {number} percent
	 * @return {string}
	 */
	function interpolateString(p0, p1, percent) {
	    return percent > 0.5 ? p1 : p0;
	}
	
	/**
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {number} percent
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	function interpolateArray(p0, p1, percent, out, arrDim) {
	    var len = p0.length;
	    if (arrDim == 1) {
	        for (var i = 0; i < len; i++) {
	            out[i] = interpolateNumber(p0[i], p1[i], percent);
	        }
	    } else {
	        var len2 = p0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);
	            }
	        }
	    }
	}
	
	function fillArr(arr0, arr1, arrDim) {
	    var arr0Len = arr0.length;
	    var arr1Len = arr1.length;
	    if (arr0Len === arr1Len) {
	        return;
	    }
	    // FIXME Not work for TypedArray
	    var isPreviousLarger = arr0Len > arr1Len;
	    if (isPreviousLarger) {
	        // Cut the previous
	        arr0.length = arr1Len;
	    } else {
	        // Fill the previous
	        for (var i = arr0Len; i < arr1Len; i++) {
	            arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));
	        }
	    }
	}
	
	/**
	 * @param  {Array} arr0
	 * @param  {Array} arr1
	 * @param  {number} arrDim
	 * @return {boolean}
	 */
	function isArraySame(arr0, arr1, arrDim) {
	    if (arr0 === arr1) {
	        return true;
	    }
	    var len = arr0.length;
	    if (len !== arr1.length) {
	        return false;
	    }
	    if (arrDim === 1) {
	        for (var i = 0; i < len; i++) {
	            if (arr0[i] !== arr1[i]) {
	                return false;
	            }
	        }
	    } else {
	        var len2 = arr0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                if (arr0[i][j] !== arr1[i][j]) {
	                    return false;
	                }
	            }
	        }
	    }
	    return true;
	}
	
	/**
	 * Catmull Rom interpolate array
	 * @param  {Array} p0
	 * @param  {Array} p1
	 * @param  {Array} p2
	 * @param  {Array} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @param  {Array} out
	 * @param  {number} arrDim
	 */
	function catmullRomInterpolateArray(p0, p1, p2, p3, t, t2, t3, out, arrDim) {
	    var len = p0.length;
	    if (arrDim == 1) {
	        for (var i = 0; i < len; i++) {
	            out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);
	        }
	    } else {
	        var len2 = p0[0].length;
	        for (var i = 0; i < len; i++) {
	            for (var j = 0; j < len2; j++) {
	                out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);
	            }
	        }
	    }
	}
	
	/**
	 * Catmull Rom interpolate number
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {number} t2
	 * @param  {number} t3
	 * @return {number}
	 */
	function catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {
	    var v0 = (p2 - p0) * 0.5;
	    var v1 = (p3 - p1) * 0.5;
	    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	
	function cloneValue(value) {
	    if (isArrayLike(value)) {
	        var len = value.length;
	        if (isArrayLike(value[0])) {
	            var ret = [];
	            for (var i = 0; i < len; i++) {
	                ret.push(arraySlice.call(value[i]));
	            }
	            return ret;
	        }
	
	        return arraySlice.call(value);
	    }
	
	    return value;
	}
	
	function rgba2String(rgba) {
	    rgba[0] = Math.floor(rgba[0]);
	    rgba[1] = Math.floor(rgba[1]);
	    rgba[2] = Math.floor(rgba[2]);
	
	    return 'rgba(' + rgba.join(',') + ')';
	}
	
	function createTrackClip(animator, easing, oneTrackDone, keyframes, propName) {
	    var getter = animator._getter;
	    var setter = animator._setter;
	    var useSpline = easing === 'spline';
	
	    var trackLen = keyframes.length;
	    if (!trackLen) {
	        return;
	    }
	    // Guess data type
	    var firstVal = keyframes[0].value;
	    var isValueArray = isArrayLike(firstVal);
	    var isValueColor = false;
	    var isValueString = false;
	
	    // For vertices morphing
	    var arrDim = isValueArray && isArrayLike(firstVal[0]) ? 2 : 1;
	    var trackMaxTime;
	    // Sort keyframe as ascending
	    keyframes.sort(function (a, b) {
	        return a.time - b.time;
	    });
	
	    trackMaxTime = keyframes[trackLen - 1].time;
	    // Percents of each keyframe
	    var kfPercents = [];
	    // Value of each keyframe
	    var kfValues = [];
	    var prevValue = keyframes[0].value;
	    var isAllValueEqual = true;
	    for (var i = 0; i < trackLen; i++) {
	        kfPercents.push(keyframes[i].time / trackMaxTime);
	        // Assume value is a color when it is a string
	        var value = keyframes[i].value;
	
	        // Check if value is equal, deep check if value is array
	        if (!(isValueArray && isArraySame(value, prevValue, arrDim) || !isValueArray && value === prevValue)) {
	            isAllValueEqual = false;
	        }
	        prevValue = value;
	
	        // Try converting a string to a color array
	        if (typeof value == 'string') {
	            var colorArray = color.parse(value);
	            if (colorArray) {
	                value = colorArray;
	                isValueColor = true;
	            } else {
	                isValueString = true;
	            }
	        }
	        kfValues.push(value);
	    }
	    if (isAllValueEqual) {
	        return;
	    }
	
	    if (isValueArray) {
	        var lastValue = kfValues[trackLen - 1];
	        // Polyfill array
	        for (var i = 0; i < trackLen - 1; i++) {
	            fillArr(kfValues[i], lastValue, arrDim);
	        }
	        fillArr(getter(animator._target, propName), lastValue, arrDim);
	    }
	
	    // Cache the key of last frame to speed up when
	    // animation playback is sequency
	    var lastFrame = 0;
	    var lastFramePercent = 0;
	    var start;
	    var w;
	    var p0;
	    var p1;
	    var p2;
	    var p3;
	
	    if (isValueColor) {
	        var rgba = [0, 0, 0, 0];
	    }
	
	    var onframe = function onframe(target, percent) {
	        // Find the range keyframes
	        // kf1-----kf2---------current--------kf3
	        // find kf2 and kf3 and do interpolation
	        var frame;
	        if (percent < lastFramePercent) {
	            // Start from next key
	            start = Math.min(lastFrame + 1, trackLen - 1);
	            for (frame = start; frame >= 0; frame--) {
	                if (kfPercents[frame] <= percent) {
	                    break;
	                }
	            }
	            frame = Math.min(frame, trackLen - 2);
	        } else {
	            for (frame = lastFrame; frame < trackLen; frame++) {
	                if (kfPercents[frame] > percent) {
	                    break;
	                }
	            }
	            frame = Math.min(frame - 1, trackLen - 2);
	        }
	        lastFrame = frame;
	        lastFramePercent = percent;
	
	        var range = kfPercents[frame + 1] - kfPercents[frame];
	        if (range === 0) {
	            return;
	        } else {
	            w = (percent - kfPercents[frame]) / range;
	        }
	        if (useSpline) {
	            p1 = kfValues[frame];
	            p0 = kfValues[frame === 0 ? frame : frame - 1];
	            p2 = kfValues[frame > trackLen - 2 ? trackLen - 1 : frame + 1];
	            p3 = kfValues[frame > trackLen - 3 ? trackLen - 1 : frame + 2];
	            if (isValueArray) {
	                catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, getter(target, propName), arrDim);
	            } else {
	                var value;
	                if (isValueColor) {
	                    value = catmullRomInterpolateArray(p0, p1, p2, p3, w, w * w, w * w * w, rgba, 1);
	                    value = rgba2String(rgba);
	                } else if (isValueString) {
	                    // String is step(0.5)
	                    return interpolateString(p1, p2, w);
	                } else {
	                    value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);
	                }
	                setter(target, propName, value);
	            }
	        } else {
	            if (isValueArray) {
	                interpolateArray(kfValues[frame], kfValues[frame + 1], w, getter(target, propName), arrDim);
	            } else {
	                var value;
	                if (isValueColor) {
	                    interpolateArray(kfValues[frame], kfValues[frame + 1], w, rgba, 1);
	                    value = rgba2String(rgba);
	                } else if (isValueString) {
	                    // String is step(0.5)
	                    return interpolateString(kfValues[frame], kfValues[frame + 1], w);
	                } else {
	                    value = interpolateNumber(kfValues[frame], kfValues[frame + 1], w);
	                }
	                setter(target, propName, value);
	            }
	        }
	    };
	
	    var clip = new Clip({
	        target: animator._target,
	        life: trackMaxTime,
	        loop: animator._loop,
	        delay: animator._delay,
	        onframe: onframe,
	        ondestroy: oneTrackDone
	    });
	
	    if (easing && easing !== 'spline') {
	        clip.easing = easing;
	    }
	
	    return clip;
	}
	
	/**
	 * @alias module:zrender/animation/Animator
	 * @constructor
	 * @param {Object} target
	 * @param {boolean} loop
	 * @param {Function} getter
	 * @param {Function} setter
	 */
	var Animator = function Animator(target, loop, getter, setter) {
	    this._tracks = {};
	    this._target = target;
	
	    this._loop = loop || false;
	
	    this._getter = getter || defaultGetter;
	    this._setter = setter || defaultSetter;
	
	    this._clipCount = 0;
	
	    this._delay = 0;
	
	    this._doneList = [];
	
	    this._onframeList = [];
	
	    this._clipList = [];
	};
	
	Animator.prototype = {
	    /**
	     * 设置动画关键帧
	     * @param  {number} time 关键帧时间，单位是ms
	     * @param  {Object} props 关键帧的属性值，key-value表示
	     * @return {module:zrender/animation/Animator}
	     */
	    when: function when(time /* ms */, props) {
	        var tracks = this._tracks;
	        for (var propName in props) {
	            if (!tracks[propName]) {
	                tracks[propName] = [];
	                // Invalid value
	                var value = this._getter(this._target, propName);
	                if (value == null) {
	                    // zrLog('Invalid property ' + propName);
	                    continue;
	                }
	                // If time is 0
	                //  Then props is given initialize value
	                // Else
	                //  Initialize value from current prop value
	                if (time !== 0) {
	                    tracks[propName].push({
	                        time: 0,
	                        value: cloneValue(value)
	                    });
	                }
	            }
	            tracks[propName].push({
	                time: time,
	                value: props[propName]
	            });
	        }
	        return this;
	    },
	    /**
	     * 添加动画每一帧的回调函数
	     * @param  {Function} callback
	     * @return {module:zrender/animation/Animator}
	     */
	    during: function during(callback) {
	        this._onframeList.push(callback);
	        return this;
	    },
	
	    _doneCallback: function _doneCallback() {
	        // Clear all tracks
	        this._tracks = {};
	        // Clear all clips
	        this._clipList.length = 0;
	
	        var doneList = this._doneList;
	        var len = doneList.length;
	        for (var i = 0; i < len; i++) {
	            doneList[i].call(this);
	        }
	    },
	    /**
	     * 开始执行动画
	     * @param  {string|Function} easing
	     *         动画缓动函数，详见{@link module:zrender/animation/easing}
	     * @return {module:zrender/animation/Animator}
	     */
	    start: function start(easing) {
	
	        var self = this;
	        var clipCount = 0;
	
	        var oneTrackDone = function oneTrackDone() {
	            clipCount--;
	            if (!clipCount) {
	                self._doneCallback();
	            }
	        };
	
	        var lastClip;
	        for (var propName in this._tracks) {
	            var clip = createTrackClip(this, easing, oneTrackDone, this._tracks[propName], propName);
	            if (clip) {
	                this._clipList.push(clip);
	                clipCount++;
	
	                // If start after added to animation
	                if (this.animation) {
	                    this.animation.addClip(clip);
	                }
	
	                lastClip = clip;
	            }
	        }
	
	        // Add during callback on the last clip
	        if (lastClip) {
	            var oldOnFrame = lastClip.onframe;
	            lastClip.onframe = function (target, percent) {
	                oldOnFrame(target, percent);
	
	                for (var i = 0; i < self._onframeList.length; i++) {
	                    self._onframeList[i](target, percent);
	                }
	            };
	        }
	
	        if (!clipCount) {
	            this._doneCallback();
	        }
	        return this;
	    },
	    /**
	     * 停止动画
	     * @param {boolean} forwardToLast If move to last frame before stop
	     */
	    stop: function stop(forwardToLast) {
	        var clipList = this._clipList;
	        var animation = this.animation;
	        for (var i = 0; i < clipList.length; i++) {
	            var clip = clipList[i];
	            if (forwardToLast) {
	                // Move to last frame before stop
	                clip.onframe(this._target, 1);
	            }
	            animation && animation.removeClip(clip);
	        }
	        clipList.length = 0;
	    },
	    /**
	     * 设置动画延迟开始的时间
	     * @param  {number} time 单位ms
	     * @return {module:zrender/animation/Animator}
	     */
	    delay: function delay(time) {
	        this._delay = time;
	        return this;
	    },
	    /**
	     * 添加动画结束的回调
	     * @param  {Function} cb
	     * @return {module:zrender/animation/Animator}
	     */
	    done: function done(cb) {
	        if (cb) {
	            this._doneList.push(cb);
	        }
	        return this;
	    },
	
	    /**
	     * @return {Array.<module:zrender/animation/Clip>}
	     */
	    getClips: function getClips() {
	        return this._clipList;
	    }
	};
	
	module.exports = Animator;

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 动画主控制器
	 * @config target 动画对象，可以是数组，如果是数组的话会批量分发onframe等事件
	 * @config life(1000) 动画时长
	 * @config delay(0) 动画延迟时间
	 * @config loop(true)
	 * @config gap(0) 循环的间隔时间
	 * @config onframe
	 * @config easing(optional)
	 * @config ondestroy(optional)
	 * @config onrestart(optional)
	 *
	 * TODO pause
	 */
	
	var easingFuncs = __webpack_require__(258);
	
	function Clip(options) {
	
	    this._target = options.target;
	
	    // 生命周期
	    this._life = options.life || 1000;
	    // 延时
	    this._delay = options.delay || 0;
	    // 开始时间
	    // this._startTime = new Date().getTime() + this._delay;// 单位毫秒
	    this._initialized = false;
	
	    // 是否循环
	    this.loop = options.loop == null ? false : options.loop;
	
	    this.gap = options.gap || 0;
	
	    this.easing = options.easing || 'Linear';
	
	    this.onframe = options.onframe;
	    this.ondestroy = options.ondestroy;
	    this.onrestart = options.onrestart;
	}
	
	Clip.prototype = {
	
	    constructor: Clip,
	
	    step: function step(time) {
	        // Set startTime on first step, or _startTime may has milleseconds different between clips
	        // PENDING
	        if (!this._initialized) {
	            this._startTime = new Date().getTime() + this._delay;
	            this._initialized = true;
	        }
	
	        var percent = (time - this._startTime) / this._life;
	
	        // 还没开始
	        if (percent < 0) {
	            return;
	        }
	
	        percent = Math.min(percent, 1);
	
	        var easing = this.easing;
	        var easingFunc = typeof easing == 'string' ? easingFuncs[easing] : easing;
	        var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;
	
	        this.fire('frame', schedule);
	
	        // 结束
	        if (percent == 1) {
	            if (this.loop) {
	                this.restart();
	                // 重新开始周期
	                // 抛出而不是直接调用事件直到 stage.update 后再统一调用这些事件
	                return 'restart';
	            }
	
	            // 动画完成将这个控制器标识为待删除
	            // 在Animation.update中进行批量删除
	            this._needsRemove = true;
	            return 'destroy';
	        }
	
	        return null;
	    },
	
	    restart: function restart() {
	        var time = new Date().getTime();
	        var remainder = (time - this._startTime) % this._life;
	        this._startTime = new Date().getTime() - remainder + this.gap;
	
	        this._needsRemove = false;
	    },
	
	    fire: function fire(eventType, arg) {
	        eventType = 'on' + eventType;
	        if (this[eventType]) {
	            this[eventType](this._target, arg);
	        }
	    }
	};
	
	module.exports = Clip;

/***/ },
/* 258 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * 缓动代码来自 https://github.com/sole/tween.js/blob/master/src/Tween.js
	 * @see http://sole.github.io/tween.js/examples/03_graphs.html
	 * @exports zrender/animation/easing
	 */
	
	var easing = {
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    linear: function linear(k) {
	        return k;
	    },
	
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticIn: function quadraticIn(k) {
	        return k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticOut: function quadraticOut(k) {
	        return k * (2 - k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quadraticInOut: function quadraticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k;
	        }
	        return -0.5 * (--k * (k - 2) - 1);
	    },
	
	    // 三次方的缓动（t^3）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicIn: function cubicIn(k) {
	        return k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicOut: function cubicOut(k) {
	        return --k * k * k + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    cubicInOut: function cubicInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k;
	        }
	        return 0.5 * ((k -= 2) * k * k + 2);
	    },
	
	    // 四次方的缓动（t^4）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticIn: function quarticIn(k) {
	        return k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticOut: function quarticOut(k) {
	        return 1 - --k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quarticInOut: function quarticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k * k;
	        }
	        return -0.5 * ((k -= 2) * k * k * k - 2);
	    },
	
	    // 五次方的缓动（t^5）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticIn: function quinticIn(k) {
	        return k * k * k * k * k;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticOut: function quinticOut(k) {
	        return --k * k * k * k * k + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    quinticInOut: function quinticInOut(k) {
	        if ((k *= 2) < 1) {
	            return 0.5 * k * k * k * k * k;
	        }
	        return 0.5 * ((k -= 2) * k * k * k * k + 2);
	    },
	
	    // 正弦曲线的缓动（sin(t)）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalIn: function sinusoidalIn(k) {
	        return 1 - Math.cos(k * Math.PI / 2);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalOut: function sinusoidalOut(k) {
	        return Math.sin(k * Math.PI / 2);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    sinusoidalInOut: function sinusoidalInOut(k) {
	        return 0.5 * (1 - Math.cos(Math.PI * k));
	    },
	
	    // 指数曲线的缓动（2^t）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialIn: function exponentialIn(k) {
	        return k === 0 ? 0 : Math.pow(1024, k - 1);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialOut: function exponentialOut(k) {
	        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    exponentialInOut: function exponentialInOut(k) {
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if ((k *= 2) < 1) {
	            return 0.5 * Math.pow(1024, k - 1);
	        }
	        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
	    },
	
	    // 圆形曲线的缓动（sqrt(1-t^2)）
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularIn: function circularIn(k) {
	        return 1 - Math.sqrt(1 - k * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularOut: function circularOut(k) {
	        return Math.sqrt(1 - --k * k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    circularInOut: function circularInOut(k) {
	        if ((k *= 2) < 1) {
	            return -0.5 * (Math.sqrt(1 - k * k) - 1);
	        }
	        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
	    },
	
	    // 创建类似于弹簧在停止前来回振荡的动画
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticIn: function elasticIn(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticOut: function elasticOut(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    elasticInOut: function elasticInOut(k) {
	        var s;
	        var a = 0.1;
	        var p = 0.4;
	        if (k === 0) {
	            return 0;
	        }
	        if (k === 1) {
	            return 1;
	        }
	        if (!a || a < 1) {
	            a = 1;s = p / 4;
	        } else {
	            s = p * Math.asin(1 / a) / (2 * Math.PI);
	        }
	        if ((k *= 2) < 1) {
	            return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
	        }
	        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
	    },
	
	    // 在某一动画开始沿指示的路径进行动画处理前稍稍收回该动画的移动
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backIn: function backIn(k) {
	        var s = 1.70158;
	        return k * k * ((s + 1) * k - s);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backOut: function backOut(k) {
	        var s = 1.70158;
	        return --k * k * ((s + 1) * k + s) + 1;
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    backInOut: function backInOut(k) {
	        var s = 1.70158 * 1.525;
	        if ((k *= 2) < 1) {
	            return 0.5 * (k * k * ((s + 1) * k - s));
	        }
	        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
	    },
	
	    // 创建弹跳效果
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceIn: function bounceIn(k) {
	        return 1 - easing.bounceOut(1 - k);
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceOut: function bounceOut(k) {
	        if (k < 1 / 2.75) {
	            return 7.5625 * k * k;
	        } else if (k < 2 / 2.75) {
	            return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
	        } else if (k < 2.5 / 2.75) {
	            return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
	        } else {
	            return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
	        }
	    },
	    /**
	    * @param {number} k
	    * @return {number}
	    */
	    bounceInOut: function bounceInOut(k) {
	        if (k < 0.5) {
	            return easing.bounceIn(k * 2) * 0.5;
	        }
	        return easing.bounceOut(k * 2 - 1) * 0.5 + 0.5;
	    }
	};
	
	module.exports = easing;

/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @module zrender/tool/color
	 */
	
	var kCSSColorTable = {
	    'transparent': [0, 0, 0, 0], 'aliceblue': [240, 248, 255, 1],
	    'antiquewhite': [250, 235, 215, 1], 'aqua': [0, 255, 255, 1],
	    'aquamarine': [127, 255, 212, 1], 'azure': [240, 255, 255, 1],
	    'beige': [245, 245, 220, 1], 'bisque': [255, 228, 196, 1],
	    'black': [0, 0, 0, 1], 'blanchedalmond': [255, 235, 205, 1],
	    'blue': [0, 0, 255, 1], 'blueviolet': [138, 43, 226, 1],
	    'brown': [165, 42, 42, 1], 'burlywood': [222, 184, 135, 1],
	    'cadetblue': [95, 158, 160, 1], 'chartreuse': [127, 255, 0, 1],
	    'chocolate': [210, 105, 30, 1], 'coral': [255, 127, 80, 1],
	    'cornflowerblue': [100, 149, 237, 1], 'cornsilk': [255, 248, 220, 1],
	    'crimson': [220, 20, 60, 1], 'cyan': [0, 255, 255, 1],
	    'darkblue': [0, 0, 139, 1], 'darkcyan': [0, 139, 139, 1],
	    'darkgoldenrod': [184, 134, 11, 1], 'darkgray': [169, 169, 169, 1],
	    'darkgreen': [0, 100, 0, 1], 'darkgrey': [169, 169, 169, 1],
	    'darkkhaki': [189, 183, 107, 1], 'darkmagenta': [139, 0, 139, 1],
	    'darkolivegreen': [85, 107, 47, 1], 'darkorange': [255, 140, 0, 1],
	    'darkorchid': [153, 50, 204, 1], 'darkred': [139, 0, 0, 1],
	    'darksalmon': [233, 150, 122, 1], 'darkseagreen': [143, 188, 143, 1],
	    'darkslateblue': [72, 61, 139, 1], 'darkslategray': [47, 79, 79, 1],
	    'darkslategrey': [47, 79, 79, 1], 'darkturquoise': [0, 206, 209, 1],
	    'darkviolet': [148, 0, 211, 1], 'deeppink': [255, 20, 147, 1],
	    'deepskyblue': [0, 191, 255, 1], 'dimgray': [105, 105, 105, 1],
	    'dimgrey': [105, 105, 105, 1], 'dodgerblue': [30, 144, 255, 1],
	    'firebrick': [178, 34, 34, 1], 'floralwhite': [255, 250, 240, 1],
	    'forestgreen': [34, 139, 34, 1], 'fuchsia': [255, 0, 255, 1],
	    'gainsboro': [220, 220, 220, 1], 'ghostwhite': [248, 248, 255, 1],
	    'gold': [255, 215, 0, 1], 'goldenrod': [218, 165, 32, 1],
	    'gray': [128, 128, 128, 1], 'green': [0, 128, 0, 1],
	    'greenyellow': [173, 255, 47, 1], 'grey': [128, 128, 128, 1],
	    'honeydew': [240, 255, 240, 1], 'hotpink': [255, 105, 180, 1],
	    'indianred': [205, 92, 92, 1], 'indigo': [75, 0, 130, 1],
	    'ivory': [255, 255, 240, 1], 'khaki': [240, 230, 140, 1],
	    'lavender': [230, 230, 250, 1], 'lavenderblush': [255, 240, 245, 1],
	    'lawngreen': [124, 252, 0, 1], 'lemonchiffon': [255, 250, 205, 1],
	    'lightblue': [173, 216, 230, 1], 'lightcoral': [240, 128, 128, 1],
	    'lightcyan': [224, 255, 255, 1], 'lightgoldenrodyellow': [250, 250, 210, 1],
	    'lightgray': [211, 211, 211, 1], 'lightgreen': [144, 238, 144, 1],
	    'lightgrey': [211, 211, 211, 1], 'lightpink': [255, 182, 193, 1],
	    'lightsalmon': [255, 160, 122, 1], 'lightseagreen': [32, 178, 170, 1],
	    'lightskyblue': [135, 206, 250, 1], 'lightslategray': [119, 136, 153, 1],
	    'lightslategrey': [119, 136, 153, 1], 'lightsteelblue': [176, 196, 222, 1],
	    'lightyellow': [255, 255, 224, 1], 'lime': [0, 255, 0, 1],
	    'limegreen': [50, 205, 50, 1], 'linen': [250, 240, 230, 1],
	    'magenta': [255, 0, 255, 1], 'maroon': [128, 0, 0, 1],
	    'mediumaquamarine': [102, 205, 170, 1], 'mediumblue': [0, 0, 205, 1],
	    'mediumorchid': [186, 85, 211, 1], 'mediumpurple': [147, 112, 219, 1],
	    'mediumseagreen': [60, 179, 113, 1], 'mediumslateblue': [123, 104, 238, 1],
	    'mediumspringgreen': [0, 250, 154, 1], 'mediumturquoise': [72, 209, 204, 1],
	    'mediumvioletred': [199, 21, 133, 1], 'midnightblue': [25, 25, 112, 1],
	    'mintcream': [245, 255, 250, 1], 'mistyrose': [255, 228, 225, 1],
	    'moccasin': [255, 228, 181, 1], 'navajowhite': [255, 222, 173, 1],
	    'navy': [0, 0, 128, 1], 'oldlace': [253, 245, 230, 1],
	    'olive': [128, 128, 0, 1], 'olivedrab': [107, 142, 35, 1],
	    'orange': [255, 165, 0, 1], 'orangered': [255, 69, 0, 1],
	    'orchid': [218, 112, 214, 1], 'palegoldenrod': [238, 232, 170, 1],
	    'palegreen': [152, 251, 152, 1], 'paleturquoise': [175, 238, 238, 1],
	    'palevioletred': [219, 112, 147, 1], 'papayawhip': [255, 239, 213, 1],
	    'peachpuff': [255, 218, 185, 1], 'peru': [205, 133, 63, 1],
	    'pink': [255, 192, 203, 1], 'plum': [221, 160, 221, 1],
	    'powderblue': [176, 224, 230, 1], 'purple': [128, 0, 128, 1],
	    'red': [255, 0, 0, 1], 'rosybrown': [188, 143, 143, 1],
	    'royalblue': [65, 105, 225, 1], 'saddlebrown': [139, 69, 19, 1],
	    'salmon': [250, 128, 114, 1], 'sandybrown': [244, 164, 96, 1],
	    'seagreen': [46, 139, 87, 1], 'seashell': [255, 245, 238, 1],
	    'sienna': [160, 82, 45, 1], 'silver': [192, 192, 192, 1],
	    'skyblue': [135, 206, 235, 1], 'slateblue': [106, 90, 205, 1],
	    'slategray': [112, 128, 144, 1], 'slategrey': [112, 128, 144, 1],
	    'snow': [255, 250, 250, 1], 'springgreen': [0, 255, 127, 1],
	    'steelblue': [70, 130, 180, 1], 'tan': [210, 180, 140, 1],
	    'teal': [0, 128, 128, 1], 'thistle': [216, 191, 216, 1],
	    'tomato': [255, 99, 71, 1], 'turquoise': [64, 224, 208, 1],
	    'violet': [238, 130, 238, 1], 'wheat': [245, 222, 179, 1],
	    'white': [255, 255, 255, 1], 'whitesmoke': [245, 245, 245, 1],
	    'yellow': [255, 255, 0, 1], 'yellowgreen': [154, 205, 50, 1]
	};
	
	function clampCssByte(i) {
	    // Clamp to integer 0 .. 255.
	    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	    return i < 0 ? 0 : i > 255 ? 255 : i;
	}
	
	function clampCssAngle(i) {
	    // Clamp to integer 0 .. 360.
	    i = Math.round(i); // Seems to be what Chrome does (vs truncation).
	    return i < 0 ? 0 : i > 360 ? 360 : i;
	}
	
	function clampCssFloat(f) {
	    // Clamp to float 0.0 .. 1.0.
	    return f < 0 ? 0 : f > 1 ? 1 : f;
	}
	
	function parseCssInt(str) {
	    // int or percentage.
	    if (str.length && str.charAt(str.length - 1) === '%') {
	        return clampCssByte(parseFloat(str) / 100 * 255);
	    }
	    return clampCssByte(parseInt(str, 10));
	}
	
	function parseCssFloat(str) {
	    // float or percentage.
	    if (str.length && str.charAt(str.length - 1) === '%') {
	        return clampCssFloat(parseFloat(str) / 100);
	    }
	    return clampCssFloat(parseFloat(str));
	}
	
	function cssHueToRgb(m1, m2, h) {
	    if (h < 0) {
	        h += 1;
	    } else if (h > 1) {
	        h -= 1;
	    }
	
	    if (h * 6 < 1) {
	        return m1 + (m2 - m1) * h * 6;
	    }
	    if (h * 2 < 1) {
	        return m2;
	    }
	    if (h * 3 < 2) {
	        return m1 + (m2 - m1) * (2 / 3 - h) * 6;
	    }
	    return m1;
	}
	
	function lerp(a, b, p) {
	    return a + (b - a) * p;
	}
	
	/**
	 * @param {string} colorStr
	 * @return {Array.<number>}
	 * @memberOf module:zrender/util/color
	 */
	function parse(colorStr) {
	    if (!colorStr) {
	        return;
	    }
	    // colorStr may be not string
	    colorStr = colorStr + '';
	    // Remove all whitespace, not compliant, but should just be more accepting.
	    var str = colorStr.replace(/ /g, '').toLowerCase();
	
	    // Color keywords (and transparent) lookup.
	    if (str in kCSSColorTable) {
	        return kCSSColorTable[str].slice(); // dup.
	    }
	
	    // #abc and #abc123 syntax.
	    if (str.charAt(0) === '#') {
	        if (str.length === 4) {
	            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	            if (!(iv >= 0 && iv <= 0xfff)) {
	                return; // Covers NaN.
	            }
	            return [(iv & 0xf00) >> 4 | (iv & 0xf00) >> 8, iv & 0xf0 | (iv & 0xf0) >> 4, iv & 0xf | (iv & 0xf) << 4, 1];
	        } else if (str.length === 7) {
	            var iv = parseInt(str.substr(1), 16); // TODO(deanm): Stricter parsing.
	            if (!(iv >= 0 && iv <= 0xffffff)) {
	                return; // Covers NaN.
	            }
	            return [(iv & 0xff0000) >> 16, (iv & 0xff00) >> 8, iv & 0xff, 1];
	        }
	
	        return;
	    }
	    var op = str.indexOf('('),
	        ep = str.indexOf(')');
	    if (op !== -1 && ep + 1 === str.length) {
	        var fname = str.substr(0, op);
	        var params = str.substr(op + 1, ep - (op + 1)).split(',');
	        var alpha = 1; // To allow case fallthrough.
	        switch (fname) {
	            case 'rgba':
	                if (params.length !== 4) {
	                    return;
	                }
	                alpha = parseCssFloat(params.pop()); // jshint ignore:line
	            // Fall through.
	            case 'rgb':
	                if (params.length !== 3) {
	                    return;
	                }
	                return [parseCssInt(params[0]), parseCssInt(params[1]), parseCssInt(params[2]), alpha];
	            case 'hsla':
	                if (params.length !== 4) {
	                    return;
	                }
	                params[3] = parseCssFloat(params[3]);
	                return hsla2rgba(params);
	            case 'hsl':
	                if (params.length !== 3) {
	                    return;
	                }
	                return hsla2rgba(params);
	            default:
	                return;
	        }
	    }
	
	    return;
	}
	
	/**
	 * @param {Array.<number>} hsla
	 * @return {Array.<number>} rgba
	 */
	function hsla2rgba(hsla) {
	    var h = (parseFloat(hsla[0]) % 360 + 360) % 360 / 360; // 0 .. 1
	    // NOTE(deanm): According to the CSS spec s/l should only be
	    // percentages, but we don't bother and let float or percentage.
	    var s = parseCssFloat(hsla[1]);
	    var l = parseCssFloat(hsla[2]);
	    var m2 = l <= 0.5 ? l * (s + 1) : l + s - l * s;
	    var m1 = l * 2 - m2;
	
	    var rgba = [clampCssByte(cssHueToRgb(m1, m2, h + 1 / 3) * 255), clampCssByte(cssHueToRgb(m1, m2, h) * 255), clampCssByte(cssHueToRgb(m1, m2, h - 1 / 3) * 255)];
	
	    if (hsla.length === 4) {
	        rgba[3] = hsla[3];
	    }
	
	    return rgba;
	}
	
	/**
	 * @param {Array.<number>} rgba
	 * @return {Array.<number>} hsla
	 */
	function rgba2hsla(rgba) {
	    if (!rgba) {
	        return;
	    }
	
	    // RGB from 0 to 255
	    var R = rgba[0] / 255;
	    var G = rgba[1] / 255;
	    var B = rgba[2] / 255;
	
	    var vMin = Math.min(R, G, B); // Min. value of RGB
	    var vMax = Math.max(R, G, B); // Max. value of RGB
	    var delta = vMax - vMin; // Delta RGB value
	
	    var L = (vMax + vMin) / 2;
	    var H;
	    var S;
	    // HSL results from 0 to 1
	    if (delta === 0) {
	        H = 0;
	        S = 0;
	    } else {
	        if (L < 0.5) {
	            S = delta / (vMax + vMin);
	        } else {
	            S = delta / (2 - vMax - vMin);
	        }
	
	        var deltaR = ((vMax - R) / 6 + delta / 2) / delta;
	        var deltaG = ((vMax - G) / 6 + delta / 2) / delta;
	        var deltaB = ((vMax - B) / 6 + delta / 2) / delta;
	
	        if (R === vMax) {
	            H = deltaB - deltaG;
	        } else if (G === vMax) {
	            H = 1 / 3 + deltaR - deltaB;
	        } else if (B === vMax) {
	            H = 2 / 3 + deltaG - deltaR;
	        }
	
	        if (H < 0) {
	            H += 1;
	        }
	
	        if (H > 1) {
	            H -= 1;
	        }
	    }
	
	    var hsla = [H * 360, S, L];
	
	    if (rgba[3] != null) {
	        hsla.push(rgba[3]);
	    }
	
	    return hsla;
	}
	
	/**
	 * @param {string} color
	 * @param {number} level
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	function lift(color, level) {
	    var colorArr = parse(color);
	    if (colorArr) {
	        for (var i = 0; i < 3; i++) {
	            if (level < 0) {
	                colorArr[i] = colorArr[i] * (1 - level) | 0;
	            } else {
	                colorArr[i] = (255 - colorArr[i]) * level + colorArr[i] | 0;
	            }
	        }
	        return stringify(colorArr, colorArr.length === 4 ? 'rgba' : 'rgb');
	    }
	}
	
	/**
	 * @param {string} color
	 * @return {string}
	 * @memberOf module:zrender/util/color
	 */
	function toHex(color, level) {
	    var colorArr = parse(color);
	    if (colorArr) {
	        return ((1 << 24) + (colorArr[0] << 16) + (colorArr[1] << 8) + +colorArr[2]).toString(16).slice(1);
	    }
	}
	
	/**
	 * Map value to color. Faster than mapToColor methods because color is represented by rgba array
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<Array.<number>>} colors List of rgba color array
	 * @param {Array.<number>} [out] Mapped gba color array
	 * @return {Array.<number>}
	 */
	function fastMapToColor(normalizedValue, colors, out) {
	    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	        return;
	    }
	    out = out || [0, 0, 0, 0];
	    var value = normalizedValue * (colors.length - 1);
	    var leftIndex = Math.floor(value);
	    var rightIndex = Math.ceil(value);
	    var leftColor = colors[leftIndex];
	    var rightColor = colors[rightIndex];
	    var dv = value - leftIndex;
	    out[0] = clampCssByte(lerp(leftColor[0], rightColor[0], dv));
	    out[1] = clampCssByte(lerp(leftColor[1], rightColor[1], dv));
	    out[2] = clampCssByte(lerp(leftColor[2], rightColor[2], dv));
	    out[3] = clampCssByte(lerp(leftColor[3], rightColor[3], dv));
	    return out;
	}
	/**
	 * @param {number} normalizedValue A float between 0 and 1.
	 * @param {Array.<string>} colors Color list.
	 * @param {boolean=} fullOutput Default false.
	 * @return {(string|Object)} Result color. If fullOutput,
	 *                           return {color: ..., leftIndex: ..., rightIndex: ..., value: ...},
	 * @memberOf module:zrender/util/color
	 */
	function mapToColor(normalizedValue, colors, fullOutput) {
	    if (!(colors && colors.length) || !(normalizedValue >= 0 && normalizedValue <= 1)) {
	        return;
	    }
	
	    var value = normalizedValue * (colors.length - 1);
	    var leftIndex = Math.floor(value);
	    var rightIndex = Math.ceil(value);
	    var leftColor = parse(colors[leftIndex]);
	    var rightColor = parse(colors[rightIndex]);
	    var dv = value - leftIndex;
	
	    var color = stringify([clampCssByte(lerp(leftColor[0], rightColor[0], dv)), clampCssByte(lerp(leftColor[1], rightColor[1], dv)), clampCssByte(lerp(leftColor[2], rightColor[2], dv)), clampCssFloat(lerp(leftColor[3], rightColor[3], dv))], 'rgba');
	
	    return fullOutput ? {
	        color: color,
	        leftIndex: leftIndex,
	        rightIndex: rightIndex,
	        value: value
	    } : color;
	}
	
	/**
	 * @param {Array<number>} interval  Array length === 2,
	 *                                  each item is normalized value ([0, 1]).
	 * @param {Array.<string>} colors Color list.
	 * @return {Array.<Object>} colors corresponding to the interval,
	 *                          each item is {color: 'xxx', offset: ...}
	 *                          where offset is between 0 and 1.
	 * @memberOf module:zrender/util/color
	 */
	function mapIntervalToColor(interval, colors) {
	    if (interval.length !== 2 || interval[1] < interval[0]) {
	        return;
	    }
	
	    var info0 = mapToColor(interval[0], colors, true);
	    var info1 = mapToColor(interval[1], colors, true);
	
	    var result = [{ color: info0.color, offset: 0 }];
	
	    var during = info1.value - info0.value;
	    var start = Math.max(info0.value, info0.rightIndex);
	    var end = Math.min(info1.value, info1.leftIndex);
	
	    for (var i = start; during > 0 && i <= end; i++) {
	        result.push({
	            color: colors[i],
	            offset: (i - info0.value) / during
	        });
	    }
	    result.push({ color: info1.color, offset: 1 });
	
	    return result;
	}
	
	/**
	 * @param {string} color
	 * @param {number=} h 0 ~ 360, ignore when null.
	 * @param {number=} s 0 ~ 1, ignore when null.
	 * @param {number=} l 0 ~ 1, ignore when null.
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	function modifyHSL(color, h, s, l) {
	    color = parse(color);
	
	    if (color) {
	        color = rgba2hsla(color);
	        h != null && (color[0] = clampCssAngle(h));
	        s != null && (color[1] = parseCssFloat(s));
	        l != null && (color[2] = parseCssFloat(l));
	
	        return stringify(hsla2rgba(color), 'rgba');
	    }
	}
	
	/**
	 * @param {string} color
	 * @param {number=} alpha 0 ~ 1
	 * @return {string} Color string in rgba format.
	 * @memberOf module:zrender/util/color
	 */
	function modifyAlpha(color, alpha) {
	    color = parse(color);
	
	    if (color && alpha != null) {
	        color[3] = clampCssFloat(alpha);
	        return stringify(color, 'rgba');
	    }
	}
	
	/**
	 * @param {Array.<string>} colors Color list.
	 * @param {string} type 'rgba', 'hsva', ...
	 * @return {string} Result color.
	 */
	function stringify(arrColor, type) {
	    if (type === 'rgb' || type === 'hsv' || type === 'hsl') {
	        arrColor = arrColor.slice(0, 3);
	    }
	    return type + '(' + arrColor.join(',') + ')';
	}
	
	module.exports = {
	    parse: parse,
	    lift: lift,
	    toHex: toHex,
	    fastMapToColor: fastMapToColor,
	    mapToColor: mapToColor,
	    mapIntervalToColor: mapIntervalToColor,
	    modifyHSL: modifyHSL,
	    modifyAlpha: modifyAlpha,
	    stringify: stringify
	};

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var config = __webpack_require__(261);
	
	/**
	 * @exports zrender/tool/log
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	module.exports = function () {
	    if (config.debugMode === 0) {
	        return;
	    } else if (config.debugMode == 1) {
	        for (var k in arguments) {
	            throw new Error(arguments[k]);
	        }
	    } else if (config.debugMode > 1) {
	        for (var k in arguments) {
	            console.log(arguments[k]);
	        }
	    }
	};
	
	/* for debug
	return function(mes) {
	    document.getElementById('wrong-message').innerHTML =
	        mes + ' ' + (new Date() - 0)
	        + '<br/>' 
	        + document.getElementById('wrong-message').innerHTML;
	};
	*/

/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';
	
	var dpr = 1;
	// If in browser environment
	if (typeof window !== 'undefined') {
	    dpr = Math.max(window.devicePixelRatio || 1, 1);
	}
	/**
	 * config默认配置项
	 * @exports zrender/config
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	var config = {
	    /**
	     * debug日志选项：catchBrushException为true下有效
	     * 0 : 不生成debug数据，发布用
	     * 1 : 异常抛出，调试用
	     * 2 : 控制台输出，调试用
	     */
	    debugMode: 0,
	
	    // retina 屏幕优化
	    devicePixelRatio: dpr
	};
	module.exports = config;

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Group = __webpack_require__(250);
	var componentUtil = __webpack_require__(241);
	var clazzUtil = __webpack_require__(230);
	
	function Chart() {
	
	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new Group();
	
	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.uid = componentUtil.getUID('viewChart');
	}
	
	Chart.prototype = {
	
	    type: 'chart',
	
	    /**
	     * Init the chart
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    init: function init(ecModel, api) {},
	
	    /**
	     * Render the chart
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    render: function render(seriesModel, ecModel, api, payload) {},
	
	    /**
	     * Highlight series or specified data item
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    highlight: function highlight(seriesModel, ecModel, api, payload) {
	        toggleHighlight(seriesModel.getData(), payload, 'emphasis');
	    },
	
	    /**
	     * Downplay series or specified data item
	     * @param  {module:echarts/model/Series} seriesModel
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     * @param  {Object} payload
	     */
	    downplay: function downplay(seriesModel, ecModel, api, payload) {
	        toggleHighlight(seriesModel.getData(), payload, 'normal');
	    },
	
	    /**
	     * Remove self
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    remove: function remove(ecModel, api) {
	        this.group.removeAll();
	    },
	
	    /**
	     * Dispose self
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    dispose: function dispose() {}
	};
	
	var chartProto = Chart.prototype;
	chartProto.updateView = chartProto.updateLayout = chartProto.updateVisual = function (seriesModel, ecModel, api, payload) {
	    this.render(seriesModel, ecModel, api, payload);
	};
	
	/**
	 * Set state of single element
	 * @param  {module:zrender/Element} el
	 * @param  {string} state
	 */
	function elSetState(el, state) {
	    if (el) {
	        el.trigger(state);
	        if (el.type === 'group') {
	            for (var i = 0; i < el.childCount(); i++) {
	                elSetState(el.childAt(i), state);
	            }
	        }
	    }
	}
	/**
	 * @param  {module:echarts/data/List} data
	 * @param  {Object} payload
	 * @param  {string} state 'normal'|'emphasis'
	 * @inner
	 */
	function toggleHighlight(data, payload, state) {
	    if (payload.dataIndex != null) {
	        var el = data.getItemGraphicEl(payload.dataIndex);
	        elSetState(el, state);
	    } else if (payload.name) {
	        var dataIndex = data.indexOfName(payload.name);
	        var el = data.getItemGraphicEl(dataIndex);
	        elSetState(el, state);
	    } else {
	        data.eachItemGraphicEl(function (el) {
	            elSetState(el, state);
	        });
	    }
	}
	
	// Enable Chart.extend.
	clazzUtil.enableClassExtend(Chart);
	
	// Add capability of registerClass, getClass, hasClass, registerSubTypeDefaulter and so on.
	clazzUtil.enableClassManagement(Chart, { registerWhenExtend: true });
	
	module.exports = Chart;

/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var pathTool = __webpack_require__(264);
	var round = Math.round;
	var Path = __webpack_require__(265);
	var colorTool = __webpack_require__(259);
	var matrix = __webpack_require__(238);
	var vector = __webpack_require__(237);
	var Gradient = __webpack_require__(225);
	
	var graphic = {};
	
	graphic.Group = __webpack_require__(250);
	
	graphic.Image = __webpack_require__(280);
	
	graphic.Text = __webpack_require__(283);
	
	graphic.Circle = __webpack_require__(284);
	
	graphic.Sector = __webpack_require__(285);
	
	graphic.Ring = __webpack_require__(286);
	
	graphic.Polygon = __webpack_require__(287);
	
	graphic.Polyline = __webpack_require__(291);
	
	graphic.Rect = __webpack_require__(292);
	
	graphic.Line = __webpack_require__(293);
	
	graphic.BezierCurve = __webpack_require__(294);
	
	graphic.Arc = __webpack_require__(295);
	
	graphic.LinearGradient = __webpack_require__(296);
	
	graphic.RadialGradient = __webpack_require__(297);
	
	graphic.BoundingRect = __webpack_require__(236);
	
	/**
	 * Extend shape with parameters
	 */
	graphic.extendShape = function (opts) {
	    return Path.extend(opts);
	};
	
	/**
	 * Extend path
	 */
	graphic.extendPath = function (pathData, opts) {
	    return pathTool.extendFromString(pathData, opts);
	};
	
	/**
	 * Create a path element from path data string
	 * @param {string} pathData
	 * @param {Object} opts
	 * @param {module:zrender/core/BoundingRect} rect
	 * @param {string} [layout=cover] 'center' or 'cover'
	 */
	graphic.makePath = function (pathData, opts, rect, layout) {
	    var path = pathTool.createFromString(pathData, opts);
	    var boundingRect = path.getBoundingRect();
	    if (rect) {
	        var aspect = boundingRect.width / boundingRect.height;
	
	        if (layout === 'center') {
	            // Set rect to center, keep width / height ratio.
	            var width = rect.height * aspect;
	            var height;
	            if (width <= rect.width) {
	                height = rect.height;
	            } else {
	                width = rect.width;
	                height = width / aspect;
	            }
	            var cx = rect.x + rect.width / 2;
	            var cy = rect.y + rect.height / 2;
	
	            rect.x = cx - width / 2;
	            rect.y = cy - height / 2;
	            rect.width = width;
	            rect.height = height;
	        }
	
	        this.resizePath(path, rect);
	    }
	    return path;
	};
	
	graphic.mergePath = pathTool.mergePath,
	
	/**
	 * Resize a path to fit the rect
	 * @param {module:zrender/graphic/Path} path
	 * @param {Object} rect
	 */
	graphic.resizePath = function (path, rect) {
	    if (!path.applyTransform) {
	        return;
	    }
	
	    var pathRect = path.getBoundingRect();
	
	    var m = pathRect.calculateTransform(rect);
	
	    path.applyTransform(m);
	};
	
	/**
	 * Sub pixel optimize line for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x1]
	 * @param {number} [param.shape.y1]
	 * @param {number} [param.shape.x2]
	 * @param {number} [param.shape.y2]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	graphic.subPixelOptimizeLine = function (param) {
	    var subPixelOptimize = graphic.subPixelOptimize;
	    var shape = param.shape;
	    var lineWidth = param.style.lineWidth;
	
	    if (round(shape.x1 * 2) === round(shape.x2 * 2)) {
	        shape.x1 = shape.x2 = subPixelOptimize(shape.x1, lineWidth, true);
	    }
	    if (round(shape.y1 * 2) === round(shape.y2 * 2)) {
	        shape.y1 = shape.y2 = subPixelOptimize(shape.y1, lineWidth, true);
	    }
	    return param;
	};
	
	/**
	 * Sub pixel optimize rect for canvas
	 *
	 * @param {Object} param
	 * @param {Object} [param.shape]
	 * @param {number} [param.shape.x]
	 * @param {number} [param.shape.y]
	 * @param {number} [param.shape.width]
	 * @param {number} [param.shape.height]
	 * @param {Object} [param.style]
	 * @param {number} [param.style.lineWidth]
	 * @return {Object} Modified param
	 */
	graphic.subPixelOptimizeRect = function (param) {
	    var subPixelOptimize = graphic.subPixelOptimize;
	    var shape = param.shape;
	    var lineWidth = param.style.lineWidth;
	    var originX = shape.x;
	    var originY = shape.y;
	    var originWidth = shape.width;
	    var originHeight = shape.height;
	    shape.x = subPixelOptimize(shape.x, lineWidth, true);
	    shape.y = subPixelOptimize(shape.y, lineWidth, true);
	    shape.width = Math.max(subPixelOptimize(originX + originWidth, lineWidth, false) - shape.x, originWidth === 0 ? 0 : 1);
	    shape.height = Math.max(subPixelOptimize(originY + originHeight, lineWidth, false) - shape.y, originHeight === 0 ? 0 : 1);
	    return param;
	};
	
	/**
	 * Sub pixel optimize for canvas
	 *
	 * @param {number} position Coordinate, such as x, y
	 * @param {number} lineWidth Should be nonnegative integer.
	 * @param {boolean=} positiveOrNegative Default false (negative).
	 * @return {number} Optimized position.
	 */
	graphic.subPixelOptimize = function (position, lineWidth, positiveOrNegative) {
	    // Assure that (position + lineWidth / 2) is near integer edge,
	    // otherwise line will be fuzzy in canvas.
	    var doubledPosition = round(position * 2);
	    return (doubledPosition + round(lineWidth)) % 2 === 0 ? doubledPosition / 2 : (doubledPosition + (positiveOrNegative ? 1 : -1)) / 2;
	};
	
	/**
	 * @private
	 */
	function doSingleEnterHover(el) {
	    if (el.__isHover) {
	        return;
	    }
	    if (el.__hoverStlDirty) {
	        var stroke = el.style.stroke;
	        var fill = el.style.fill;
	
	        // Create hoverStyle on mouseover
	        var hoverStyle = el.__hoverStl;
	        hoverStyle.fill = hoverStyle.fill || (fill instanceof Gradient ? fill : colorTool.lift(fill, -0.1));
	        hoverStyle.stroke = hoverStyle.stroke || (stroke instanceof Gradient ? stroke : colorTool.lift(stroke, -0.1));
	
	        var normalStyle = {};
	        for (var name in hoverStyle) {
	            if (hoverStyle.hasOwnProperty(name)) {
	                normalStyle[name] = el.style[name];
	            }
	        }
	
	        el.__normalStl = normalStyle;
	
	        el.__hoverStlDirty = false;
	    }
	    el.setStyle(el.__hoverStl);
	    el.z2 += 1;
	
	    el.__isHover = true;
	}
	
	/**
	 * @inner
	 */
	function doSingleLeaveHover(el) {
	    if (!el.__isHover) {
	        return;
	    }
	
	    var normalStl = el.__normalStl;
	    normalStl && el.setStyle(normalStl);
	    el.z2 -= 1;
	
	    el.__isHover = false;
	}
	
	/**
	 * @inner
	 */
	function doEnterHover(el) {
	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            doSingleEnterHover(child);
	        }
	    }) : doSingleEnterHover(el);
	}
	
	function doLeaveHover(el) {
	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            doSingleLeaveHover(child);
	        }
	    }) : doSingleLeaveHover(el);
	}
	
	/**
	 * @inner
	 */
	function setElementHoverStl(el, hoverStl) {
	    // If element has sepcified hoverStyle, then use it instead of given hoverStyle
	    // Often used when item group has a label element and it's hoverStyle is different
	    el.__hoverStl = el.hoverStyle || hoverStl;
	    el.__hoverStlDirty = true;
	}
	
	/**
	 * @inner
	 */
	function onElementMouseOver() {
	    // Only if element is not in emphasis status
	    !this.__isEmphasis && doEnterHover(this);
	}
	
	/**
	 * @inner
	 */
	function onElementMouseOut() {
	    // Only if element is not in emphasis status
	    !this.__isEmphasis && doLeaveHover(this);
	}
	
	/**
	 * @inner
	 */
	function enterEmphasis() {
	    this.__isEmphasis = true;
	    doEnterHover(this);
	}
	
	/**
	 * @inner
	 */
	function leaveEmphasis() {
	    this.__isEmphasis = false;
	    doLeaveHover(this);
	}
	
	/**
	 * Set hover style of element
	 * @param {module:zrender/Element} el
	 * @param {Object} [hoverStyle]
	 */
	graphic.setHoverStyle = function (el, hoverStyle) {
	    hoverStyle = hoverStyle || {};
	    el.type === 'group' ? el.traverse(function (child) {
	        if (child.type !== 'group') {
	            setElementHoverStl(child, hoverStyle);
	        }
	    }) : setElementHoverStl(el, hoverStyle);
	    // Remove previous bound handlers
	    el.on('mouseover', onElementMouseOver).on('mouseout', onElementMouseOut);
	
	    // Emphasis, normal can be triggered manually
	    el.on('emphasis', enterEmphasis).on('normal', leaveEmphasis);
	};
	
	/**
	 * Set text option in the style
	 * @param {Object} textStyle
	 * @param {module:echarts/model/Model} labelModel
	 * @param {string} color
	 */
	graphic.setText = function (textStyle, labelModel, color) {
	    var labelPosition = labelModel.getShallow('position') || 'inside';
	    var labelColor = labelPosition.indexOf('inside') >= 0 ? 'white' : color;
	    var textStyleModel = labelModel.getModel('textStyle');
	    zrUtil.extend(textStyle, {
	        textDistance: labelModel.getShallow('distance') || 5,
	        textFont: textStyleModel.getFont(),
	        textPosition: labelPosition,
	        textFill: textStyleModel.getTextColor() || labelColor
	    });
	};
	
	function animateOrSetProps(isUpdate, el, props, animatableModel, cb) {
	    var postfix = isUpdate ? 'Update' : '';
	    var duration = animatableModel && animatableModel.getShallow('animationDuration' + postfix);
	    var animationEasing = animatableModel && animatableModel.getShallow('animationEasing' + postfix);
	
	    animatableModel && animatableModel.getShallow('animation') ? el.animateTo(props, duration, animationEasing, cb) : (el.attr(props), cb && cb());
	}
	/**
	 * Update graphic element properties with or without animation according to the configuration in series
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {Function} cb
	 */
	graphic.updateProps = zrUtil.curry(animateOrSetProps, true);
	
	/**
	 * Init graphic element properties with or without animation according to the configuration in series
	 * @param {module:zrender/Element} el
	 * @param {Object} props
	 * @param {module:echarts/model/Model} [animatableModel]
	 * @param {Function} cb
	 */
	graphic.initProps = zrUtil.curry(animateOrSetProps, false);
	
	/**
	 * Get transform matrix of target (param target),
	 * in coordinate of its ancestor (param ancestor)
	 *
	 * @param {module:zrender/mixin/Transformable} target
	 * @param {module:zrender/mixin/Transformable} ancestor
	 */
	graphic.getTransform = function (target, ancestor) {
	    var mat = matrix.identity([]);
	
	    while (target && target !== ancestor) {
	        matrix.mul(mat, target.getLocalTransform(), mat);
	        target = target.parent;
	    }
	
	    return mat;
	};
	
	/**
	 * Apply transform to an vertex.
	 * @param {Array.<number>} vertex [x, y]
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {Array.<number>} [x, y]
	 */
	graphic.applyTransform = function (vertex, transform, invert) {
	    if (invert) {
	        transform = matrix.invert([], transform);
	    }
	    return vector.applyTransform([], vertex, transform);
	};
	
	/**
	 * @param {string} direction 'left' 'right' 'top' 'bottom'
	 * @param {Array.<number>} transform Transform matrix: like [1, 0, 0, 1, 0, 0]
	 * @param {boolean=} invert Whether use invert matrix.
	 * @return {string} Transformed direction. 'left' 'right' 'top' 'bottom'
	 */
	graphic.transformDirection = function (direction, transform, invert) {
	
	    // Pick a base, ensure that transform result will not be (0, 0).
	    var hBase = transform[4] === 0 || transform[5] === 0 || transform[0] === 0 ? 1 : Math.abs(2 * transform[4] / transform[0]);
	    var vBase = transform[4] === 0 || transform[5] === 0 || transform[2] === 0 ? 1 : Math.abs(2 * transform[4] / transform[2]);
	
	    var vertex = [direction === 'left' ? -hBase : direction === 'right' ? hBase : 0, direction === 'top' ? -vBase : direction === 'bottom' ? vBase : 0];
	
	    vertex = graphic.applyTransform(vertex, transform, invert);
	
	    return Math.abs(vertex[0]) > Math.abs(vertex[1]) ? vertex[0] > 0 ? 'right' : 'left' : vertex[1] > 0 ? 'bottom' : 'top';
	};
	
	module.exports = graphic;

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Path = __webpack_require__(265);
	var PathProxy = __webpack_require__(269);
	var transformPath = __webpack_require__(279);
	var matrix = __webpack_require__(238);
	
	// command chars
	var cc = ['m', 'M', 'l', 'L', 'v', 'V', 'h', 'H', 'z', 'Z', 'c', 'C', 'q', 'Q', 't', 'T', 's', 'S', 'a', 'A'];
	
	var mathSqrt = Math.sqrt;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	var PI = Math.PI;
	
	var vMag = function vMag(v) {
	    return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	};
	var vRatio = function vRatio(u, v) {
	    return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	};
	var vAngle = function vAngle(u, v) {
	    return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	};
	
	function processArc(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg, cmd, path) {
	    var psi = psiDeg * (PI / 180.0);
	    var xp = mathCos(psi) * (x1 - x2) / 2.0 + mathSin(psi) * (y1 - y2) / 2.0;
	    var yp = -1 * mathSin(psi) * (x1 - x2) / 2.0 + mathCos(psi) * (y1 - y2) / 2.0;
	
	    var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);
	
	    if (lambda > 1) {
	        rx *= mathSqrt(lambda);
	        ry *= mathSqrt(lambda);
	    }
	
	    var f = (fa === fs ? -1 : 1) * mathSqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp))) || 0;
	
	    var cxp = f * rx * yp / ry;
	    var cyp = f * -ry * xp / rx;
	
	    var cx = (x1 + x2) / 2.0 + mathCos(psi) * cxp - mathSin(psi) * cyp;
	    var cy = (y1 + y2) / 2.0 + mathSin(psi) * cxp + mathCos(psi) * cyp;
	
	    var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	    var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	    var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	    var dTheta = vAngle(u, v);
	
	    if (vRatio(u, v) <= -1) {
	        dTheta = PI;
	    }
	    if (vRatio(u, v) >= 1) {
	        dTheta = 0;
	    }
	    if (fs === 0 && dTheta > 0) {
	        dTheta = dTheta - 2 * PI;
	    }
	    if (fs === 1 && dTheta < 0) {
	        dTheta = dTheta + 2 * PI;
	    }
	
	    path.addData(cmd, cx, cy, rx, ry, theta, dTheta, psi, fs);
	}
	
	function createPathProxyFromString(data) {
	    if (!data) {
	        return [];
	    }
	
	    // command string
	    var cs = data.replace(/-/g, ' -').replace(/  /g, ' ').replace(/ /g, ',').replace(/,,/g, ',');
	
	    var n;
	    // create pipes so that we can split the data
	    for (n = 0; n < cc.length; n++) {
	        cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	    }
	
	    // create array
	    var arr = cs.split('|');
	    // init context point
	    var cpx = 0;
	    var cpy = 0;
	
	    var path = new PathProxy();
	    var CMD = PathProxy.CMD;
	
	    var prevCmd;
	    for (n = 1; n < arr.length; n++) {
	        var str = arr[n];
	        var c = str.charAt(0);
	        var off = 0;
	        var p = str.slice(1).replace(/e,-/g, 'e-').split(',');
	        var cmd;
	
	        if (p.length > 0 && p[0] === '') {
	            p.shift();
	        }
	
	        for (var i = 0; i < p.length; i++) {
	            p[i] = parseFloat(p[i]);
	        }
	        while (off < p.length && !isNaN(p[off])) {
	            if (isNaN(p[0])) {
	                break;
	            }
	            var ctlPtx;
	            var ctlPty;
	
	            var rx;
	            var ry;
	            var psi;
	            var fa;
	            var fs;
	
	            var x1 = cpx;
	            var y1 = cpy;
	
	            // convert l, H, h, V, and v to L
	            switch (c) {
	                case 'l':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'L':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'm':
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'l';
	                    break;
	                case 'M':
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.M;
	                    path.addData(cmd, cpx, cpy);
	                    c = 'L';
	                    break;
	                case 'h':
	                    cpx += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'H':
	                    cpx = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'v':
	                    cpy += p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'V':
	                    cpy = p[off++];
	                    cmd = CMD.L;
	                    path.addData(cmd, cpx, cpy);
	                    break;
	                case 'C':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++], p[off++], p[off++], p[off++], p[off++], p[off++]);
	                    cpx = p[off - 2];
	                    cpy = p[off - 1];
	                    break;
	                case 'c':
	                    cmd = CMD.C;
	                    path.addData(cmd, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy, p[off++] + cpx, p[off++] + cpy);
	                    cpx += p[off - 2];
	                    cpy += p[off - 1];
	                    break;
	                case 'S':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 's':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.C) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cmd = CMD.C;
	                    x1 = cpx + p[off++];
	                    y1 = cpy + p[off++];
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    path.addData(cmd, ctlPtx, ctlPty, x1, y1, cpx, cpy);
	                    break;
	                case 'Q':
	                    x1 = p[off++];
	                    y1 = p[off++];
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'q':
	                    x1 = p[off++] + cpx;
	                    y1 = p[off++] + cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, x1, y1, cpx, cpy);
	                    break;
	                case 'T':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 't':
	                    ctlPtx = cpx;
	                    ctlPty = cpy;
	                    var len = path.len();
	                    var pathData = path.data;
	                    if (prevCmd === CMD.Q) {
	                        ctlPtx += cpx - pathData[len - 4];
	                        ctlPty += cpy - pathData[len - 3];
	                    }
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.Q;
	                    path.addData(cmd, ctlPtx, ctlPty, cpx, cpy);
	                    break;
	                case 'A':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];
	
	                    x1 = cpx, y1 = cpy;
	                    cpx = p[off++];
	                    cpy = p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	                case 'a':
	                    rx = p[off++];
	                    ry = p[off++];
	                    psi = p[off++];
	                    fa = p[off++];
	                    fs = p[off++];
	
	                    x1 = cpx, y1 = cpy;
	                    cpx += p[off++];
	                    cpy += p[off++];
	                    cmd = CMD.A;
	                    processArc(x1, y1, cpx, cpy, fa, fs, rx, ry, psi, cmd, path);
	                    break;
	            }
	        }
	
	        if (c === 'z' || c === 'Z') {
	            cmd = CMD.Z;
	            path.addData(cmd);
	        }
	
	        prevCmd = cmd;
	    }
	
	    path.toStatic();
	
	    return path;
	}
	
	// TODO Optimize double memory cost problem
	function createPathOptions(str, opts) {
	    var pathProxy = createPathProxyFromString(str);
	    var transform;
	    opts = opts || {};
	    opts.buildPath = function (path) {
	        path.setData(pathProxy.data);
	        transform && transformPath(path, transform);
	        // Svg and vml renderer don't have context
	        var ctx = path.getContext();
	        if (ctx) {
	            path.rebuildPath(ctx);
	        }
	    };
	
	    opts.applyTransform = function (m) {
	        if (!transform) {
	            transform = matrix.create();
	        }
	        matrix.mul(transform, m, transform);
	    };
	
	    return opts;
	}
	
	module.exports = {
	    /**
	     * Create a Path object from path string data
	     * http://www.w3.org/TR/SVG/paths.html#PathData
	     * @param  {Object} opts Other options
	     */
	    createFromString: function createFromString(str, opts) {
	        return new Path(createPathOptions(str, opts));
	    },
	
	    /**
	     * Create a Path class from path string data
	     * @param  {string} str
	     * @param  {Object} opts Other options
	     */
	    extendFromString: function extendFromString(str, opts) {
	        return Path.extend(createPathOptions(str, opts));
	    },
	
	    /**
	     * Merge multiple paths
	     */
	    // TODO Apply transform
	    // TODO stroke dash
	    // TODO Optimize double memory cost problem
	    mergePath: function mergePath(pathEls, opts) {
	        var pathList = [];
	        var len = pathEls.length;
	        var pathEl;
	        var i;
	        for (i = 0; i < len; i++) {
	            pathEl = pathEls[i];
	            if (pathEl.__dirty) {
	                pathEl.buildPath(pathEl.path, pathEl.shape);
	            }
	            pathList.push(pathEl.path);
	        }
	
	        var pathBundle = new Path(opts);
	        pathBundle.buildPath = function (path) {
	            path.appendPath(pathList);
	            // Svg and vml renderer don't have context
	            var ctx = path.getContext();
	            if (ctx) {
	                path.rebuildPath(ctx);
	            }
	        };
	
	        return pathBundle;
	    }
	};

/***/ },
/* 265 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Path element
	 * @module zrender/graphic/Path
	 */
	
	var Displayable = __webpack_require__(266);
	var zrUtil = __webpack_require__(224);
	var PathProxy = __webpack_require__(269);
	var pathContain = __webpack_require__(272);
	
	var Gradient = __webpack_require__(225);
	
	function pathHasFill(style) {
	    var fill = style.fill;
	    return fill != null && fill !== 'none';
	}
	
	function pathHasStroke(style) {
	    var stroke = style.stroke;
	    return stroke != null && stroke !== 'none' && style.lineWidth > 0;
	}
	
	var abs = Math.abs;
	
	/**
	 * @alias module:zrender/graphic/Path
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	function Path(opts) {
	    Displayable.call(this, opts);
	
	    /**
	     * @type {module:zrender/core/PathProxy}
	     * @readOnly
	     */
	    this.path = new PathProxy();
	}
	
	Path.prototype = {
	
	    constructor: Path,
	
	    type: 'path',
	
	    __dirtyPath: true,
	
	    strokeContainThreshold: 5,
	
	    brush: function brush(ctx) {
	        ctx.save();
	
	        var style = this.style;
	        var path = this.path;
	        var hasStroke = pathHasStroke(style);
	        var hasFill = pathHasFill(style);
	
	        if (this.__dirtyPath) {
	            // Update gradient because bounding rect may changed
	            if (hasFill && style.fill instanceof Gradient) {
	                style.fill.updateCanvasGradient(this, ctx);
	            }
	            if (hasStroke && style.stroke instanceof Gradient) {
	                style.stroke.updateCanvasGradient(this, ctx);
	            }
	        }
	
	        style.bind(ctx, this);
	        this.setTransform(ctx);
	
	        var lineDash = style.lineDash;
	        var lineDashOffset = style.lineDashOffset;
	
	        var ctxLineDash = !!ctx.setLineDash;
	
	        // Proxy context
	        // Rebuild path in following 2 cases
	        // 1. Path is dirty
	        // 2. Path needs javascript implemented lineDash stroking.
	        //    In this case, lineDash information will not be saved in PathProxy
	        if (this.__dirtyPath || lineDash && !ctxLineDash && hasStroke) {
	            path = this.path.beginPath(ctx);
	
	            // Setting line dash before build path
	            if (lineDash && !ctxLineDash) {
	                path.setLineDash(lineDash);
	                path.setLineDashOffset(lineDashOffset);
	            }
	
	            this.buildPath(path, this.shape);
	
	            // Clear path dirty flag
	            this.__dirtyPath = false;
	        } else {
	            // Replay path building
	            ctx.beginPath();
	            this.path.rebuildPath(ctx);
	        }
	
	        hasFill && path.fill(ctx);
	
	        if (lineDash && ctxLineDash) {
	            ctx.setLineDash(lineDash);
	            ctx.lineDashOffset = lineDashOffset;
	        }
	
	        hasStroke && path.stroke(ctx);
	
	        // Draw rect text
	        if (style.text != null) {
	            // var rect = this.getBoundingRect();
	            this.drawRectText(ctx, this.getBoundingRect());
	        }
	
	        ctx.restore();
	    },
	
	    buildPath: function buildPath(ctx, shapeCfg) {},
	
	    getBoundingRect: function getBoundingRect() {
	        var rect = this._rect;
	        var style = this.style;
	        if (!rect) {
	            var path = this.path;
	            if (this.__dirtyPath) {
	                path.beginPath();
	                this.buildPath(path, this.shape);
	            }
	            rect = path.getBoundingRect();
	        }
	        /**
	         * Needs update rect with stroke lineWidth when
	         * 1. Element changes scale or lineWidth
	         * 2. First create rect
	         */
	        if (pathHasStroke(style) && (this.__dirty || !this._rect)) {
	            var rectWithStroke = this._rectWithStroke || (this._rectWithStroke = rect.clone());
	            rectWithStroke.copy(rect);
	            // FIXME Must after updateTransform
	            var w = style.lineWidth;
	            // PENDING, Min line width is needed when line is horizontal or vertical
	            var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	
	            // Only add extra hover lineWidth when there are no fill
	            if (!pathHasFill(style)) {
	                w = Math.max(w, this.strokeContainThreshold);
	            }
	            // Consider line width
	            // Line scale can't be 0;
	            if (lineScale > 1e-10) {
	                rectWithStroke.width += w / lineScale;
	                rectWithStroke.height += w / lineScale;
	                rectWithStroke.x -= w / lineScale / 2;
	                rectWithStroke.y -= w / lineScale / 2;
	            }
	            return rectWithStroke;
	        }
	        this._rect = rect;
	        return rect;
	    },
	
	    contain: function contain(x, y) {
	        var localPos = this.transformCoordToLocal(x, y);
	        var rect = this.getBoundingRect();
	        var style = this.style;
	        x = localPos[0];
	        y = localPos[1];
	
	        if (rect.contain(x, y)) {
	            var pathData = this.path.data;
	            if (pathHasStroke(style)) {
	                var lineWidth = style.lineWidth;
	                var lineScale = style.strokeNoScale ? this.getLineScale() : 1;
	                // Line scale can't be 0;
	                if (lineScale > 1e-10) {
	                    // Only add extra hover lineWidth when there are no fill
	                    if (!pathHasFill(style)) {
	                        lineWidth = Math.max(lineWidth, this.strokeContainThreshold);
	                    }
	                    if (pathContain.containStroke(pathData, lineWidth / lineScale, x, y)) {
	                        return true;
	                    }
	                }
	            }
	            if (pathHasFill(style)) {
	                return pathContain.contain(pathData, x, y);
	            }
	        }
	        return false;
	    },
	
	    /**
	     * @param  {boolean} dirtyPath
	     */
	    dirty: function dirty(dirtyPath) {
	        if (arguments.length === 0) {
	            dirtyPath = true;
	        }
	        // Only mark dirty, not mark clean
	        if (dirtyPath) {
	            this.__dirtyPath = dirtyPath;
	            this._rect = null;
	        }
	
	        this.__dirty = true;
	
	        this.__zr && this.__zr.refresh();
	
	        // Used as a clipping path
	        if (this.__clipTarget) {
	            this.__clipTarget.dirty();
	        }
	    },
	
	    /**
	     * Alias for animate('shape')
	     * @param {boolean} loop
	     */
	    animateShape: function animateShape(loop) {
	        return this.animate('shape', loop);
	    },
	
	    // Overwrite attrKV
	    attrKV: function attrKV(key, value) {
	        // FIXME
	        if (key === 'shape') {
	            this.setShape(value);
	        } else {
	            Displayable.prototype.attrKV.call(this, key, value);
	        }
	    },
	    /**
	     * @param {Object|string} key
	     * @param {*} value
	     */
	    setShape: function setShape(key, value) {
	        var shape = this.shape;
	        // Path from string may not have shape
	        if (shape) {
	            if (zrUtil.isObject(key)) {
	                for (var name in key) {
	                    shape[name] = key[name];
	                }
	            } else {
	                shape[key] = value;
	            }
	            this.dirty(true);
	        }
	        return this;
	    },
	
	    getLineScale: function getLineScale() {
	        var m = this.transform;
	        // Get the line scale.
	        // Determinant of `m` means how much the area is enlarged by the
	        // transformation. So its square root can be used as a scale factor
	        // for width.
	        return m && abs(m[0] - 1) > 1e-10 && abs(m[3] - 1) > 1e-10 ? Math.sqrt(abs(m[0] * m[3] - m[2] * m[1])) : 1;
	    }
	};
	
	/**
	 * 扩展一个 Path element, 比如星形，圆等。
	 * Extend a path element
	 * @param {Object} props
	 * @param {string} props.type Path type
	 * @param {Function} props.init Initialize
	 * @param {Function} props.buildPath Overwrite buildPath method
	 * @param {Object} [props.style] Extended default style config
	 * @param {Object} [props.shape] Extended default shape config
	 */
	Path.extend = function (defaults) {
	    var Sub = function Sub(opts) {
	        Path.call(this, opts);
	
	        if (defaults.style) {
	            // Extend default style
	            this.style.extendFrom(defaults.style, false);
	        }
	
	        // Extend default shape
	        var defaultShape = defaults.shape;
	        if (defaultShape) {
	            this.shape = this.shape || {};
	            var thisShape = this.shape;
	            for (var name in defaultShape) {
	                if (!thisShape.hasOwnProperty(name) && defaultShape.hasOwnProperty(name)) {
	                    thisShape[name] = defaultShape[name];
	                }
	            }
	        }
	
	        defaults.init && defaults.init.call(this, opts);
	    };
	
	    zrUtil.inherits(Sub, Path);
	
	    // FIXME 不能 extend position, rotation 等引用对象
	    for (var name in defaults) {
	        // Extending prototype values and methods
	        if (name !== 'style' && name !== 'shape') {
	            Sub.prototype[name] = defaults[name];
	        }
	    }
	
	    return Sub;
	};
	
	zrUtil.inherits(Path, Displayable);
	
	module.exports = Path;

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 可绘制的图形基类
	 * Base class of all displayable graphic objects
	 * @module zrender/graphic/Displayable
	 */
	
	var zrUtil = __webpack_require__(224);
	
	var Style = __webpack_require__(267);
	
	var Element = __webpack_require__(251);
	var RectText = __webpack_require__(268);
	// var Stateful = require('./mixin/Stateful');
	
	/**
	 * @alias module:zrender/graphic/Displayable
	 * @extends module:zrender/Element
	 * @extends module:zrender/graphic/mixin/RectText
	 */
	function Displayable(opts) {
	
	  opts = opts || {};
	
	  Element.call(this, opts);
	
	  // Extend properties
	  for (var name in opts) {
	    if (opts.hasOwnProperty(name) && name !== 'style') {
	      this[name] = opts[name];
	    }
	  }
	
	  /**
	   * @type {module:zrender/graphic/Style}
	   */
	  this.style = new Style(opts.style);
	
	  this._rect = null;
	  // Shapes for cascade clipping.
	  this.__clipPaths = [];
	
	  // FIXME Stateful must be mixined after style is setted
	  // Stateful.call(this, opts);
	}
	
	Displayable.prototype = {
	
	  constructor: Displayable,
	
	  type: 'displayable',
	
	  /**
	   * Displayable 是否为脏，Painter 中会根据该标记判断是否需要是否需要重新绘制
	   * Dirty flag. From which painter will determine if this displayable object needs brush
	   * @name module:zrender/graphic/Displayable#__dirty
	   * @type {boolean}
	   */
	  __dirty: true,
	
	  /**
	   * 图形是否可见，为true时不绘制图形，但是仍能触发鼠标事件
	   * If ignore drawing of the displayable object. Mouse event will still be triggered
	   * @name module:/zrender/graphic/Displayable#invisible
	   * @type {boolean}
	   * @default false
	   */
	  invisible: false,
	
	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z: 0,
	
	  /**
	   * @name module:/zrender/graphic/Displayable#z
	   * @type {number}
	   * @default 0
	   */
	  z2: 0,
	
	  /**
	   * z层level，决定绘画在哪层canvas中
	   * @name module:/zrender/graphic/Displayable#zlevel
	   * @type {number}
	   * @default 0
	   */
	  zlevel: 0,
	
	  /**
	   * 是否可拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  draggable: false,
	
	  /**
	   * 是否正在拖拽
	   * @name module:/zrender/graphic/Displayable#draggable
	   * @type {boolean}
	   * @default false
	   */
	  dragging: false,
	
	  /**
	   * 是否相应鼠标事件
	   * @name module:/zrender/graphic/Displayable#silent
	   * @type {boolean}
	   * @default false
	   */
	  silent: false,
	
	  /**
	   * If enable culling
	   * @type {boolean}
	   * @default false
	   */
	  culling: false,
	
	  /**
	   * Mouse cursor when hovered
	   * @name module:/zrender/graphic/Displayable#cursor
	   * @type {string}
	   */
	  cursor: 'pointer',
	
	  /**
	   * If hover area is bounding rect
	   * @name module:/zrender/graphic/Displayable#rectHover
	   * @type {string}
	   */
	  rectHover: false,
	
	  beforeBrush: function beforeBrush(ctx) {},
	
	  afterBrush: function afterBrush(ctx) {},
	
	  /**
	   * 图形绘制方法
	   * @param {Canvas2DRenderingContext} ctx
	   */
	  // Interface
	  brush: function brush(ctx) {},
	
	  /**
	   * 获取最小包围盒
	   * @return {module:zrender/core/BoundingRect}
	   */
	  // Interface
	  getBoundingRect: function getBoundingRect() {},
	
	  /**
	   * 判断坐标 x, y 是否在图形上
	   * If displayable element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  contain: function contain(x, y) {
	    return this.rectContain(x, y);
	  },
	
	  /**
	   * @param  {Function} cb
	   * @param  {}   context
	   */
	  traverse: function traverse(cb, context) {
	    cb.call(context, this);
	  },
	
	  /**
	   * 判断坐标 x, y 是否在图形的包围盒上
	   * If bounding rect of element contain coord x, y
	   * @param  {number} x
	   * @param  {number} y
	   * @return {boolean}
	   */
	  rectContain: function rectContain(x, y) {
	    var coord = this.transformCoordToLocal(x, y);
	    var rect = this.getBoundingRect();
	    return rect.contain(coord[0], coord[1]);
	  },
	
	  /**
	   * 标记图形元素为脏，并且在下一帧重绘
	   * Mark displayable element dirty and refresh next frame
	   */
	  dirty: function dirty() {
	    this.__dirty = true;
	
	    this._rect = null;
	
	    this.__zr && this.__zr.refresh();
	  },
	
	  /**
	   * 图形是否会触发事件
	   * If displayable object binded any event
	   * @return {boolean}
	   */
	  // TODO, 通过 bind 绑定的事件
	  // isSilent: function () {
	  //     return !(
	  //         this.hoverable || this.draggable
	  //         || this.onmousemove || this.onmouseover || this.onmouseout
	  //         || this.onmousedown || this.onmouseup || this.onclick
	  //         || this.ondragenter || this.ondragover || this.ondragleave
	  //         || this.ondrop
	  //     );
	  // },
	  /**
	   * Alias for animate('style')
	   * @param {boolean} loop
	   */
	  animateStyle: function animateStyle(loop) {
	    return this.animate('style', loop);
	  },
	
	  attrKV: function attrKV(key, value) {
	    if (key !== 'style') {
	      Element.prototype.attrKV.call(this, key, value);
	    } else {
	      this.style.set(value);
	    }
	  },
	
	  /**
	   * @param {Object|string} key
	   * @param {*} value
	   */
	  setStyle: function setStyle(key, value) {
	    this.style.set(key, value);
	    this.dirty();
	    return this;
	  }
	};
	
	zrUtil.inherits(Displayable, Element);
	
	zrUtil.mixin(Displayable, RectText);
	// zrUtil.mixin(Displayable, Stateful);
	
	module.exports = Displayable;

/***/ },
/* 267 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @module zrender/graphic/Style
	 */
	
	var STYLE_LIST_COMMON = ['lineCap', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY', 'shadowColor'];
	
	var Style = function Style(opts) {
	  this.extendFrom(opts);
	};
	
	Style.prototype = {
	
	  constructor: Style,
	
	  /**
	   * @type {string}
	   */
	  fill: '#000000',
	
	  /**
	   * @type {string}
	   */
	  stroke: null,
	
	  /**
	   * @type {number}
	   */
	  opacity: 1,
	
	  /**
	   * @type {Array.<number>}
	   */
	  lineDash: null,
	
	  /**
	   * @type {number}
	   */
	  lineDashOffset: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowBlur: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowOffsetX: 0,
	
	  /**
	   * @type {number}
	   */
	  shadowOffsetY: 0,
	
	  /**
	   * @type {number}
	   */
	  lineWidth: 1,
	
	  /**
	   * If stroke ignore scale
	   * @type {Boolean}
	   */
	  strokeNoScale: false,
	
	  // Bounding rect text configuration
	  // Not affected by element transform
	  /**
	   * @type {string}
	   */
	  text: null,
	
	  /**
	   * @type {string}
	   */
	  textFill: '#000',
	
	  /**
	   * @type {string}
	   */
	  textStroke: null,
	
	  /**
	   * 'inside', 'left', 'right', 'top', 'bottom'
	   * [x, y]
	   * @type {string|Array.<number>}
	   * @default 'inside'
	   */
	  textPosition: 'inside',
	
	  /**
	   * @type {string}
	   */
	  textBaseline: null,
	
	  /**
	   * @type {string}
	   */
	  textAlign: null,
	
	  /**
	   * @type {string}
	   */
	  textVerticalAlign: null,
	
	  /**
	   * @type {number}
	   */
	  textDistance: 5,
	
	  /**
	   * @type {number}
	   */
	  textShadowBlur: 0,
	
	  /**
	   * @type {number}
	   */
	  textShadowOffsetX: 0,
	
	  /**
	   * @type {number}
	   */
	  textShadowOffsetY: 0,
	
	  /**
	   * @param {CanvasRenderingContext2D} ctx
	   */
	  bind: function bind(ctx, el) {
	    var fill = this.fill;
	    var stroke = this.stroke;
	    for (var i = 0; i < STYLE_LIST_COMMON.length; i++) {
	      var styleName = STYLE_LIST_COMMON[i];
	
	      if (this[styleName] != null) {
	        ctx[styleName] = this[styleName];
	      }
	    }
	    if (stroke != null) {
	      var lineWidth = this.lineWidth;
	      ctx.lineWidth = lineWidth / (this.strokeNoScale && el && el.getLineScale ? el.getLineScale() : 1);
	    }
	    if (fill != null) {
	      // Use canvas gradient if has
	      ctx.fillStyle = fill.canvasGradient ? fill.canvasGradient : fill;
	    }
	    if (stroke != null) {
	      // Use canvas gradient if has
	      ctx.strokeStyle = stroke.canvasGradient ? stroke.canvasGradient : stroke;
	    }
	    this.opacity != null && (ctx.globalAlpha = this.opacity);
	  },
	
	  /**
	   * Extend from other style
	   * @param {zrender/graphic/Style} otherStyle
	   * @param {boolean} overwrite
	   */
	  extendFrom: function extendFrom(otherStyle, overwrite) {
	    if (otherStyle) {
	      var target = this;
	      for (var name in otherStyle) {
	        if (otherStyle.hasOwnProperty(name) && (overwrite || !target.hasOwnProperty(name))) {
	          target[name] = otherStyle[name];
	        }
	      }
	    }
	  },
	
	  /**
	   * Batch setting style with a given object
	   * @param {Object|string} obj
	   * @param {*} [obj]
	   */
	  set: function set(obj, value) {
	    if (typeof obj === 'string') {
	      this[obj] = value;
	    } else {
	      this.extendFrom(obj, true);
	    }
	  },
	
	  /**
	   * Clone
	   * @return {zrender/graphic/Style} [description]
	   */
	  clone: function clone() {
	    var newStyle = new this.constructor();
	    newStyle.extendFrom(this, true);
	    return newStyle;
	  }
	};
	
	var styleProto = Style.prototype;
	var name;
	var i;
	for (i = 0; i < STYLE_LIST_COMMON.length; i++) {
	  name = STYLE_LIST_COMMON[i];
	  if (!(name in styleProto)) {
	    styleProto[name] = null;
	  }
	}
	
	module.exports = Style;

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Mixin for drawing text in a element bounding rect
	 * @module zrender/mixin/RectText
	 */
	
	var textContain = __webpack_require__(235);
	var BoundingRect = __webpack_require__(236);
	
	var tmpRect = new BoundingRect();
	
	var RectText = function RectText() {};
	
	function parsePercent(value, maxValue) {
	    if (typeof value === 'string') {
	        if (value.lastIndexOf('%') >= 0) {
	            return parseFloat(value) / 100 * maxValue;
	        }
	        return parseFloat(value);
	    }
	    return value;
	}
	
	function setTransform(ctx, m) {
	    ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	}
	
	RectText.prototype = {
	
	    constructor: RectText,
	
	    /**
	     * Draw text in a rect with specified position.
	     * @param  {CanvasRenderingContext} ctx
	     * @param  {Object} rect Displayable rect
	     * @return {Object} textRect Alternative precalculated text bounding rect
	     */
	    drawRectText: function drawRectText(ctx, rect, textRect) {
	        var style = this.style;
	        var text = style.text;
	        // Convert to string
	        text != null && (text += '');
	        if (!text) {
	            return;
	        }
	        var x;
	        var y;
	        var textPosition = style.textPosition;
	        var distance = style.textDistance;
	        var align = style.textAlign;
	        var font = style.textFont || style.font;
	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;
	
	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	
	        // Transform rect to view space
	        var transform = this.transform;
	        var invTransform = this.invTransform;
	        if (transform) {
	            tmpRect.copy(rect);
	            tmpRect.applyTransform(transform);
	            rect = tmpRect;
	            // Transform back
	            setTransform(ctx, invTransform);
	        }
	
	        // Text position represented by coord
	        if (textPosition instanceof Array) {
	            // Percent
	            x = rect.x + parsePercent(textPosition[0], rect.width);
	            y = rect.y + parsePercent(textPosition[1], rect.height);
	            align = align || 'left';
	            baseline = baseline || 'top';
	        } else {
	            var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	            x = res.x;
	            y = res.y;
	            // Default align and baseline when has textPosition
	            align = align || res.textAlign;
	            baseline = baseline || res.textBaseline;
	        }
	
	        ctx.textAlign = align;
	        if (verticalAlign) {
	            switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;
	                // 'top'
	            }
	            // Ignore baseline
	            ctx.textBaseline = 'top';
	        } else {
	            ctx.textBaseline = baseline;
	        }
	
	        var textFill = style.textFill;
	        var textStroke = style.textStroke;
	        textFill && (ctx.fillStyle = textFill);
	        textStroke && (ctx.strokeStyle = textStroke);
	        ctx.font = font;
	
	        // Text shadow
	        ctx.shadowColor = style.textShadowColor;
	        ctx.shadowBlur = style.textShadowBlur;
	        ctx.shadowOffsetX = style.textShadowOffsetX;
	        ctx.shadowOffsetY = style.textShadowOffsetY;
	
	        var textLines = text.split('\n');
	        for (var i = 0; i < textLines.length; i++) {
	            textFill && ctx.fillText(textLines[i], x, y);
	            textStroke && ctx.strokeText(textLines[i], x, y);
	            y += textRect.lineHeight;
	        }
	
	        // Transform again
	        transform && setTransform(ctx, transform);
	    }
	};
	
	module.exports = RectText;

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Path 代理，可以在`buildPath`中用于替代`ctx`, 会保存每个path操作的命令到pathCommands属性中
	 * 可以用于 isInsidePath 判断以及获取boundingRect
	 *
	 * @module zrender/core/PathProxy
	 * @author Yi Shen (http://www.github.com/pissang)
	 */
	
	// TODO getTotalLength, getPointAtLength
	
	var curve = __webpack_require__(270);
	var vec2 = __webpack_require__(237);
	var bbox = __webpack_require__(271);
	var BoundingRect = __webpack_require__(236);
	
	var CMD = {
	    M: 1,
	    L: 2,
	    C: 3,
	    Q: 4,
	    A: 5,
	    Z: 6,
	    // Rect
	    R: 7
	};
	
	var min = [];
	var max = [];
	var min2 = [];
	var max2 = [];
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathCos = Math.cos;
	var mathSin = Math.sin;
	var mathSqrt = Math.sqrt;
	
	var hasTypedArray = typeof Float32Array != 'undefined';
	
	/**
	 * @alias module:zrender/core/PathProxy
	 * @constructor
	 */
	var PathProxy = function PathProxy() {
	
	    /**
	     * Path data. Stored as flat array
	     * @type {Array.<Object>}
	     */
	    this.data = [];
	
	    this._len = 0;
	
	    this._ctx = null;
	
	    this._xi = 0;
	    this._yi = 0;
	
	    this._x0 = 0;
	    this._y0 = 0;
	};
	
	/**
	 * 快速计算Path包围盒（并不是最小包围盒）
	 * @return {Object}
	 */
	PathProxy.prototype = {
	
	    constructor: PathProxy,
	
	    _lineDash: null,
	
	    _dashOffset: 0,
	
	    _dashIdx: 0,
	
	    _dashSum: 0,
	
	    getContext: function getContext() {
	        return this._ctx;
	    },
	
	    /**
	     * @param  {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    beginPath: function beginPath(ctx) {
	        this._ctx = ctx;
	
	        ctx && ctx.beginPath();
	
	        // Reset
	        this._len = 0;
	
	        if (this._lineDash) {
	            this._lineDash = null;
	
	            this._dashOffset = 0;
	        }
	
	        return this;
	    },
	
	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/core/PathProxy}
	     */
	    moveTo: function moveTo(x, y) {
	        this.addData(CMD.M, x, y);
	        this._ctx && this._ctx.moveTo(x, y);
	
	        // x0, y0, xi, yi 是记录在 _dashedXXXXTo 方法中使用
	        // xi, yi 记录当前点, x0, y0 在 closePath 的时候回到起始点。
	        // 有可能在 beginPath 之后直接调用 lineTo，这时候 x0, y0 需要
	        // 在 lineTo 方法中记录，这里先不考虑这种情况，dashed line 也只在 IE10- 中不支持
	        this._x0 = x;
	        this._y0 = y;
	
	        this._xi = x;
	        this._yi = y;
	
	        return this;
	    },
	
	    /**
	     * @param  {number} x
	     * @param  {number} y
	     * @return {module:zrender/core/PathProxy}
	     */
	    lineTo: function lineTo(x, y) {
	        this.addData(CMD.L, x, y);
	        if (this._ctx) {
	            this._needsDash() ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);
	        }
	        this._xi = x;
	        this._yi = y;
	        return this;
	    },
	
	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @param  {number} x3
	     * @param  {number} y3
	     * @return {module:zrender/core/PathProxy}
	     */
	    bezierCurveTo: function bezierCurveTo(x1, y1, x2, y2, x3, y3) {
	        this.addData(CMD.C, x1, y1, x2, y2, x3, y3);
	        if (this._ctx) {
	            this._needsDash() ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);
	        }
	        this._xi = x3;
	        this._yi = y3;
	        return this;
	    },
	
	    /**
	     * @param  {number} x1
	     * @param  {number} y1
	     * @param  {number} x2
	     * @param  {number} y2
	     * @return {module:zrender/core/PathProxy}
	     */
	    quadraticCurveTo: function quadraticCurveTo(x1, y1, x2, y2) {
	        this.addData(CMD.Q, x1, y1, x2, y2);
	        if (this._ctx) {
	            this._needsDash() ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);
	        }
	        this._xi = x2;
	        this._yi = y2;
	        return this;
	    },
	
	    /**
	     * @param  {number} cx
	     * @param  {number} cy
	     * @param  {number} r
	     * @param  {number} startAngle
	     * @param  {number} endAngle
	     * @param  {boolean} anticlockwise
	     * @return {module:zrender/core/PathProxy}
	     */
	    arc: function arc(cx, cy, r, startAngle, endAngle, anticlockwise) {
	        this.addData(CMD.A, cx, cy, r, r, startAngle, endAngle - startAngle, 0, anticlockwise ? 0 : 1);
	        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);
	
	        this._xi = mathCos(endAngle) * r + cx;
	        this._xi = mathSin(endAngle) * r + cx;
	        return this;
	    },
	
	    // TODO
	    arcTo: function arcTo(x1, y1, x2, y2, radius) {
	        if (this._ctx) {
	            this._ctx.arcTo(x1, y1, x2, y2, radius);
	        }
	        return this;
	    },
	
	    // TODO
	    rect: function rect(x, y, w, h) {
	        this._ctx && this._ctx.rect(x, y, w, h);
	        this.addData(CMD.R, x, y, w, h);
	        return this;
	    },
	
	    /**
	     * @return {module:zrender/core/PathProxy}
	     */
	    closePath: function closePath() {
	        this.addData(CMD.Z);
	
	        var ctx = this._ctx;
	        var x0 = this._x0;
	        var y0 = this._y0;
	        if (ctx) {
	            this._needsDash() && this._dashedLineTo(x0, y0);
	            ctx.closePath();
	        }
	
	        this._xi = x0;
	        this._yi = y0;
	        return this;
	    },
	
	    /**
	     * Context 从外部传入，因为有可能是 rebuildPath 完之后再 fill。
	     * stroke 同样
	     * @param {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    fill: function fill(ctx) {
	        ctx && ctx.fill();
	        this.toStatic();
	    },
	
	    /**
	     * @param {CanvasRenderingContext2D} ctx
	     * @return {module:zrender/core/PathProxy}
	     */
	    stroke: function stroke(ctx) {
	        ctx && ctx.stroke();
	        this.toStatic();
	    },
	
	    /**
	     * 必须在其它绘制命令前调用
	     * Must be invoked before all other path drawing methods
	     * @return {module:zrender/core/PathProxy}
	     */
	    setLineDash: function setLineDash(lineDash) {
	        if (lineDash instanceof Array) {
	            this._lineDash = lineDash;
	
	            this._dashIdx = 0;
	
	            var lineDashSum = 0;
	            for (var i = 0; i < lineDash.length; i++) {
	                lineDashSum += lineDash[i];
	            }
	            this._dashSum = lineDashSum;
	        }
	        return this;
	    },
	
	    /**
	     * 必须在其它绘制命令前调用
	     * Must be invoked before all other path drawing methods
	     * @return {module:zrender/core/PathProxy}
	     */
	    setLineDashOffset: function setLineDashOffset(offset) {
	        this._dashOffset = offset;
	        return this;
	    },
	
	    /**
	     *
	     * @return {boolean}
	     */
	    len: function len() {
	        return this._len;
	    },
	
	    /**
	     * 直接设置 Path 数据
	     */
	    setData: function setData(data) {
	
	        var len = data.length;
	
	        if (!(this.data && this.data.length == len) && hasTypedArray) {
	            this.data = new Float32Array(len);
	        }
	
	        for (var i = 0; i < len; i++) {
	            this.data[i] = data[i];
	        }
	
	        this._len = len;
	    },
	
	    /**
	     * 添加子路径
	     * @param {module:zrender/core/PathProxy|Array.<module:zrender/core/PathProxy>} path
	     */
	    appendPath: function appendPath(path) {
	        if (!(path instanceof Array)) {
	            path = [path];
	        }
	        var len = path.length;
	        var appendSize = 0;
	        var offset = this._len;
	        for (var i = 0; i < len; i++) {
	            appendSize += path[i].len();
	        }
	        if (hasTypedArray && this.data instanceof Float32Array) {
	            this.data = new Float32Array(offset + appendSize);
	        }
	        for (var i = 0; i < len; i++) {
	            var appendPathData = path[i].data;
	            for (var k = 0; k < appendPathData.length; k++) {
	                this.data[offset++] = appendPathData[k];
	            }
	        }
	        this._len = offset;
	    },
	
	    /**
	     * 填充 Path 数据。
	     * 尽量复用而不申明新的数组。大部分图形重绘的指令数据长度都是不变的。
	     */
	    addData: function addData(cmd) {
	        var data = this.data;
	        if (this._len + arguments.length > data.length) {
	            // 因为之前的数组已经转换成静态的 Float32Array
	            // 所以不够用时需要扩展一个新的动态数组
	            this._expandData();
	            data = this.data;
	        }
	        for (var i = 0; i < arguments.length; i++) {
	            data[this._len++] = arguments[i];
	        }
	
	        this._prevCmd = cmd;
	    },
	
	    _expandData: function _expandData() {
	        // Only if data is Float32Array
	        if (!(this.data instanceof Array)) {
	            var newData = [];
	            for (var i = 0; i < this._len; i++) {
	                newData[i] = this.data[i];
	            }
	            this.data = newData;
	        }
	    },
	
	    /**
	     * If needs js implemented dashed line
	     * @return {boolean}
	     * @private
	     */
	    _needsDash: function _needsDash() {
	        return this._lineDash;
	    },
	
	    _dashedLineTo: function _dashedLineTo(x1, y1) {
	        var dashSum = this._dashSum;
	        var offset = this._dashOffset;
	        var lineDash = this._lineDash;
	        var ctx = this._ctx;
	
	        var x0 = this._xi;
	        var y0 = this._yi;
	        var dx = x1 - x0;
	        var dy = y1 - y0;
	        var dist = mathSqrt(dx * dx + dy * dy);
	        var x = x0;
	        var y = y0;
	        var dash;
	        var nDash = lineDash.length;
	        var idx;
	        dx /= dist;
	        dy /= dist;
	
	        if (offset < 0) {
	            // Convert to positive offset
	            offset = dashSum + offset;
	        }
	        offset %= dashSum;
	        x -= offset * dx;
	        y -= offset * dy;
	
	        while (dx >= 0 && x <= x1 || dx < 0 && x > x1) {
	            idx = this._dashIdx;
	            dash = lineDash[idx];
	            x += dx * dash;
	            y += dy * dash;
	            this._dashIdx = (idx + 1) % nDash;
	            // Skip positive offset
	            if (dx > 0 && x < x0 || dx < 0 && x > x0) {
	                continue;
	            }
	            ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));
	        }
	        // Offset for next lineTo
	        dx = x - x1;
	        dy = y - y1;
	        this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	    },
	
	    // Not accurate dashed line to
	    _dashedBezierTo: function _dashedBezierTo(x1, y1, x2, y2, x3, y3) {
	        var dashSum = this._dashSum;
	        var offset = this._dashOffset;
	        var lineDash = this._lineDash;
	        var ctx = this._ctx;
	
	        var x0 = this._xi;
	        var y0 = this._yi;
	        var t;
	        var dx;
	        var dy;
	        var cubicAt = curve.cubicAt;
	        var bezierLen = 0;
	        var idx = this._dashIdx;
	        var nDash = lineDash.length;
	
	        var x;
	        var y;
	
	        var tmpLen = 0;
	
	        if (offset < 0) {
	            // Convert to positive offset
	            offset = dashSum + offset;
	        }
	        offset %= dashSum;
	        // Bezier approx length
	        for (t = 0; t < 1; t += 0.1) {
	            dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);
	            dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);
	            bezierLen += mathSqrt(dx * dx + dy * dy);
	        }
	
	        // Find idx after add offset
	        for (; idx < nDash; idx++) {
	            tmpLen += lineDash[idx];
	            if (tmpLen > offset) {
	                break;
	            }
	        }
	        t = (tmpLen - offset) / bezierLen;
	
	        while (t <= 1) {
	
	            x = cubicAt(x0, x1, x2, x3, t);
	            y = cubicAt(y0, y1, y2, y3, t);
	
	            // Use line to approximate dashed bezier
	            // Bad result if dash is long
	            idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);
	
	            t += lineDash[idx] / bezierLen;
	
	            idx = (idx + 1) % nDash;
	        }
	
	        // Finish the last segment and calculate the new offset
	        idx % 2 !== 0 && ctx.lineTo(x3, y3);
	        dx = x3 - x;
	        dy = y3 - y;
	        this._dashOffset = -mathSqrt(dx * dx + dy * dy);
	    },
	
	    _dashedQuadraticTo: function _dashedQuadraticTo(x1, y1, x2, y2) {
	        // Convert quadratic to cubic using degree elevation
	        var x3 = x2;
	        var y3 = y2;
	        x2 = (x2 + 2 * x1) / 3;
	        y2 = (y2 + 2 * y1) / 3;
	        x1 = (this._xi + 2 * x1) / 3;
	        y1 = (this._yi + 2 * y1) / 3;
	
	        this._dashedBezierTo(x1, y1, x2, y2, x3, y3);
	    },
	
	    /**
	     * 转成静态的 Float32Array 减少堆内存占用
	     * Convert dynamic array to static Float32Array
	     */
	    toStatic: function toStatic() {
	        var data = this.data;
	        if (data instanceof Array) {
	            data.length = this._len;
	            if (hasTypedArray) {
	                this.data = new Float32Array(data);
	            }
	        }
	    },
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect() {
	        min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;
	        max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;
	
	        var data = this.data;
	        var xi = 0;
	        var yi = 0;
	        var x0 = 0;
	        var y0 = 0;
	
	        for (var i = 0; i < data.length;) {
	            var cmd = data[i++];
	
	            if (i == 1) {
	                // 如果第一个命令是 L, C, Q
	                // 则 previous point 同绘制命令的第一个 point
	                //
	                // 第一个命令为 Arc 的情况下会在后面特殊处理
	                xi = data[i];
	                yi = data[i + 1];
	
	                x0 = xi;
	                y0 = yi;
	            }
	
	            switch (cmd) {
	                case CMD.M:
	                    // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                    // 在 closePath 的时候使用
	                    x0 = data[i++];
	                    y0 = data[i++];
	                    xi = x0;
	                    yi = y0;
	                    min2[0] = x0;
	                    min2[1] = y0;
	                    max2[0] = x0;
	                    max2[1] = y0;
	                    break;
	                case CMD.L:
	                    bbox.fromLine(xi, yi, data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.C:
	                    bbox.fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.Q:
	                    bbox.fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);
	                    xi = data[i++];
	                    yi = data[i++];
	                    break;
	                case CMD.A:
	                    // TODO Arc 判断的开销比较大
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++];
	                    var endAngle = data[i++] + startAngle;
	                    // TODO Arc 旋转
	                    var psi = data[i++];
	                    var anticlockwise = 1 - data[i++];
	
	                    if (i == 1) {
	                        // 直接使用 arc 命令
	                        // 第一个命令起点还未定义
	                        x0 = mathCos(startAngle) * rx + cx;
	                        y0 = mathSin(startAngle) * ry + cy;
	                    }
	
	                    bbox.fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);
	
	                    xi = mathCos(endAngle) * rx + cx;
	                    yi = mathSin(endAngle) * ry + cy;
	                    break;
	                case CMD.R:
	                    x0 = xi = data[i++];
	                    y0 = yi = data[i++];
	                    var width = data[i++];
	                    var height = data[i++];
	                    // Use fromLine
	                    bbox.fromLine(x0, y0, x0 + width, y0 + height, min2, max2);
	                    break;
	                case CMD.Z:
	                    xi = x0;
	                    yi = y0;
	                    break;
	            }
	
	            // Union
	            vec2.min(min, min, min2);
	            vec2.max(max, max, max2);
	        }
	
	        // No data
	        if (i === 0) {
	            min[0] = min[1] = max[0] = max[1] = 0;
	        }
	
	        return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	    },
	
	    /**
	     * Rebuild path from current data
	     * Rebuild path will not consider javascript implemented line dash.
	     * @param {CanvasRenderingContext} ctx
	     */
	    rebuildPath: function rebuildPath(ctx) {
	        var d = this.data;
	        for (var i = 0; i < this._len;) {
	            var cmd = d[i++];
	            switch (cmd) {
	                case CMD.M:
	                    ctx.moveTo(d[i++], d[i++]);
	                    break;
	                case CMD.L:
	                    ctx.lineTo(d[i++], d[i++]);
	                    break;
	                case CMD.C:
	                    ctx.bezierCurveTo(d[i++], d[i++], d[i++], d[i++], d[i++], d[i++]);
	                    break;
	                case CMD.Q:
	                    ctx.quadraticCurveTo(d[i++], d[i++], d[i++], d[i++]);
	                    break;
	                case CMD.A:
	                    var cx = d[i++];
	                    var cy = d[i++];
	                    var rx = d[i++];
	                    var ry = d[i++];
	                    var theta = d[i++];
	                    var dTheta = d[i++];
	                    var psi = d[i++];
	                    var fs = d[i++];
	                    var r = rx > ry ? rx : ry;
	                    var scaleX = rx > ry ? 1 : rx / ry;
	                    var scaleY = rx > ry ? ry / rx : 1;
	                    var isEllipse = Math.abs(rx - ry) > 1e-3;
	                    if (isEllipse) {
	                        ctx.translate(cx, cy);
	                        ctx.rotate(psi);
	                        ctx.scale(scaleX, scaleY);
	                        ctx.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                        ctx.scale(1 / scaleX, 1 / scaleY);
	                        ctx.rotate(-psi);
	                        ctx.translate(-cx, -cy);
	                    } else {
	                        ctx.arc(cx, cy, r, theta, theta + dTheta, 1 - fs);
	                    }
	                    break;
	                case CMD.R:
	                    ctx.rect(d[i++], d[i++], d[i++], d[i++]);
	                    break;
	                case CMD.Z:
	                    ctx.closePath();
	            }
	        }
	    }
	};
	
	PathProxy.CMD = CMD;
	
	module.exports = PathProxy;

/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 曲线辅助模块
	 * @module zrender/core/curve
	 * @author pissang(https://www.github.com/pissang)
	 */
	
	var vec2 = __webpack_require__(237);
	var v2Create = vec2.create;
	var v2DistSquare = vec2.distSquare;
	var mathPow = Math.pow;
	var mathSqrt = Math.sqrt;
	
	var EPSILON = 1e-4;
	
	var THREE_SQRT = mathSqrt(3);
	var ONE_THIRD = 1 / 3;
	
	// 临时变量
	var _v0 = v2Create();
	var _v1 = v2Create();
	var _v2 = v2Create();
	// var _v3 = vec2.create();
	
	function isAroundZero(val) {
	    return val > -EPSILON && val < EPSILON;
	}
	function isNotAroundZero(val) {
	    return val > EPSILON || val < -EPSILON;
	}
	/**
	 * 计算三次贝塞尔值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	function cubicAt(p0, p1, p2, p3, t) {
	    var onet = 1 - t;
	    return onet * onet * (onet * p0 + 3 * t * p1) + t * t * (t * p3 + 3 * onet * p2);
	}
	
	/**
	 * 计算三次贝塞尔导数值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @return {number}
	 */
	function cubicDerivativeAt(p0, p1, p2, p3, t) {
	    var onet = 1 - t;
	    return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	}
	
	/**
	 * 计算三次贝塞尔方程根，使用盛金公式
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} val
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	function cubicRootAt(p0, p1, p2, p3, val, roots) {
	    // Evaluate roots of cubic functions
	    var a = p3 + 3 * (p1 - p2) - p0;
	    var b = 3 * (p2 - p1 * 2 + p0);
	    var c = 3 * (p1 - p0);
	    var d = p0 - val;
	
	    var A = b * b - 3 * a * c;
	    var B = b * c - 9 * a * d;
	    var C = c * c - 3 * b * d;
	
	    var n = 0;
	
	    if (isAroundZero(A) && isAroundZero(B)) {
	        if (isAroundZero(b)) {
	            roots[0] = 0;
	        } else {
	            var t1 = -c / b; //t1, t2, t3, b is not zero
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        }
	    } else {
	        var disc = B * B - 4 * A * C;
	
	        if (isAroundZero(disc)) {
	            var K = B / A;
	            var t1 = -b / a + K; // t1, a is not zero
	            var t2 = -K / 2; // t2, t3
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var Y1 = A * b + 1.5 * a * (-B + discSqrt);
	            var Y2 = A * b + 1.5 * a * (-B - discSqrt);
	            if (Y1 < 0) {
	                Y1 = -mathPow(-Y1, ONE_THIRD);
	            } else {
	                Y1 = mathPow(Y1, ONE_THIRD);
	            }
	            if (Y2 < 0) {
	                Y2 = -mathPow(-Y2, ONE_THIRD);
	            } else {
	                Y2 = mathPow(Y2, ONE_THIRD);
	            }
	            var t1 = (-b - (Y1 + Y2)) / (3 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        } else {
	            var T = (2 * A * b - 3 * a * B) / (2 * mathSqrt(A * A * A));
	            var theta = Math.acos(T) / 3;
	            var ASqrt = mathSqrt(A);
	            var tmp = Math.cos(theta);
	
	            var t1 = (-b - 2 * ASqrt * tmp) / (3 * a);
	            var t2 = (-b + ASqrt * (tmp + THREE_SQRT * Math.sin(theta))) / (3 * a);
	            var t3 = (-b + ASqrt * (tmp - THREE_SQRT * Math.sin(theta))) / (3 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	            if (t3 >= 0 && t3 <= 1) {
	                roots[n++] = t3;
	            }
	        }
	    }
	    return n;
	}
	
	/**
	 * 计算三次贝塞尔方程极限值的位置
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {Array.<number>} extrema
	 * @return {number} 有效数目
	 */
	function cubicExtrema(p0, p1, p2, p3, extrema) {
	    var b = 6 * p2 - 12 * p1 + 6 * p0;
	    var a = 9 * p1 + 3 * p3 - 3 * p0 - 9 * p2;
	    var c = 3 * p1 - 3 * p0;
	
	    var n = 0;
	    if (isAroundZero(a)) {
	        if (isNotAroundZero(b)) {
	            var t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	                extrema[n++] = t1;
	            }
	        }
	    } else {
	        var disc = b * b - 4 * a * c;
	        if (isAroundZero(disc)) {
	            extrema[0] = -b / (2 * a);
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var t1 = (-b + discSqrt) / (2 * a);
	            var t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                extrema[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                extrema[n++] = t2;
	            }
	        }
	    }
	    return n;
	}
	
	/**
	 * 细分三次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} p3
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	function cubicSubdivide(p0, p1, p2, p3, t, out) {
	    var p01 = (p1 - p0) * t + p0;
	    var p12 = (p2 - p1) * t + p1;
	    var p23 = (p3 - p2) * t + p2;
	
	    var p012 = (p12 - p01) * t + p01;
	    var p123 = (p23 - p12) * t + p12;
	
	    var p0123 = (p123 - p012) * t + p012;
	    // Seg0
	    out[0] = p0;
	    out[1] = p01;
	    out[2] = p012;
	    out[3] = p0123;
	    // Seg1
	    out[4] = p0123;
	    out[5] = p123;
	    out[6] = p23;
	    out[7] = p3;
	}
	
	/**
	 * 投射点到三次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} [out] 投射点
	 * @return {number}
	 */
	function cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, out) {
	    // http://pomax.github.io/bezierinfo/#projections
	    var t;
	    var interval = 0.005;
	    var d = Infinity;
	    var prev;
	    var next;
	    var d1;
	    var d2;
	
	    _v0[0] = x;
	    _v0[1] = y;
	
	    // 先粗略估计一下可能的最小距离的 t 值
	    // PENDING
	    for (var _t = 0; _t < 1; _t += 0.05) {
	        _v1[0] = cubicAt(x0, x1, x2, x3, _t);
	        _v1[1] = cubicAt(y0, y1, y2, y3, _t);
	        d1 = v2DistSquare(_v0, _v1);
	        if (d1 < d) {
	            t = _t;
	            d = d1;
	        }
	    }
	    d = Infinity;
	
	    // At most 32 iteration
	    for (var i = 0; i < 32; i++) {
	        if (interval < EPSILON) {
	            break;
	        }
	        prev = t - interval;
	        next = t + interval;
	        // t - interval
	        _v1[0] = cubicAt(x0, x1, x2, x3, prev);
	        _v1[1] = cubicAt(y0, y1, y2, y3, prev);
	
	        d1 = v2DistSquare(_v1, _v0);
	
	        if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	        } else {
	            // t + interval
	            _v2[0] = cubicAt(x0, x1, x2, x3, next);
	            _v2[1] = cubicAt(y0, y1, y2, y3, next);
	            d2 = v2DistSquare(_v2, _v0);
	
	            if (next <= 1 && d2 < d) {
	                t = next;
	                d = d2;
	            } else {
	                interval *= 0.5;
	            }
	        }
	    }
	    // t
	    if (out) {
	        out[0] = cubicAt(x0, x1, x2, x3, t);
	        out[1] = cubicAt(y0, y1, y2, y3, t);
	    }
	    // console.log(interval, i);
	    return mathSqrt(d);
	}
	
	/**
	 * 计算二次方贝塞尔值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	function quadraticAt(p0, p1, p2, t) {
	    var onet = 1 - t;
	    return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	}
	
	/**
	 * 计算二次方贝塞尔导数值
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @return {number}
	 */
	function quadraticDerivativeAt(p0, p1, p2, t) {
	    return 2 * ((1 - t) * (p1 - p0) + t * (p2 - p1));
	}
	
	/**
	 * 计算二次方贝塞尔方程根
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} roots
	 * @return {number} 有效根数目
	 */
	function quadraticRootAt(p0, p1, p2, val, roots) {
	    var a = p0 - 2 * p1 + p2;
	    var b = 2 * (p1 - p0);
	    var c = p0 - val;
	
	    var n = 0;
	    if (isAroundZero(a)) {
	        if (isNotAroundZero(b)) {
	            var t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        }
	    } else {
	        var disc = b * b - 4 * a * c;
	        if (isAroundZero(disc)) {
	            var t1 = -b / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	        } else if (disc > 0) {
	            var discSqrt = mathSqrt(disc);
	            var t1 = (-b + discSqrt) / (2 * a);
	            var t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	                roots[n++] = t1;
	            }
	            if (t2 >= 0 && t2 <= 1) {
	                roots[n++] = t2;
	            }
	        }
	    }
	    return n;
	}
	
	/**
	 * 计算二次贝塞尔方程极限值
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @return {number}
	 */
	function quadraticExtremum(p0, p1, p2) {
	    var divider = p0 + p2 - 2 * p1;
	    if (divider === 0) {
	        // p1 is center of p0 and p2
	        return 0.5;
	    } else {
	        return (p0 - p1) / divider;
	    }
	}
	
	/**
	 * 细分二次贝塞尔曲线
	 * @memberOf module:zrender/core/curve
	 * @param  {number} p0
	 * @param  {number} p1
	 * @param  {number} p2
	 * @param  {number} t
	 * @param  {Array.<number>} out
	 */
	function quadraticSubdivide(p0, p1, p2, t, out) {
	    var p01 = (p1 - p0) * t + p0;
	    var p12 = (p2 - p1) * t + p1;
	    var p012 = (p12 - p01) * t + p01;
	
	    // Seg0
	    out[0] = p0;
	    out[1] = p01;
	    out[2] = p012;
	
	    // Seg1
	    out[3] = p012;
	    out[4] = p12;
	    out[5] = p2;
	}
	
	/**
	 * 投射点到二次贝塞尔曲线上，返回投射距离。
	 * 投射点有可能会有一个或者多个，这里只返回其中距离最短的一个。
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x
	 * @param {number} y
	 * @param {Array.<number>} out 投射点
	 * @return {number}
	 */
	function quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, out) {
	    // http://pomax.github.io/bezierinfo/#projections
	    var t;
	    var interval = 0.005;
	    var d = Infinity;
	
	    _v0[0] = x;
	    _v0[1] = y;
	
	    // 先粗略估计一下可能的最小距离的 t 值
	    // PENDING
	    for (var _t = 0; _t < 1; _t += 0.05) {
	        _v1[0] = quadraticAt(x0, x1, x2, _t);
	        _v1[1] = quadraticAt(y0, y1, y2, _t);
	        var d1 = v2DistSquare(_v0, _v1);
	        if (d1 < d) {
	            t = _t;
	            d = d1;
	        }
	    }
	    d = Infinity;
	
	    // At most 32 iteration
	    for (var i = 0; i < 32; i++) {
	        if (interval < EPSILON) {
	            break;
	        }
	        var prev = t - interval;
	        var next = t + interval;
	        // t - interval
	        _v1[0] = quadraticAt(x0, x1, x2, prev);
	        _v1[1] = quadraticAt(y0, y1, y2, prev);
	
	        var d1 = v2DistSquare(_v1, _v0);
	
	        if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	        } else {
	            // t + interval
	            _v2[0] = quadraticAt(x0, x1, x2, next);
	            _v2[1] = quadraticAt(y0, y1, y2, next);
	            var d2 = v2DistSquare(_v2, _v0);
	            if (next <= 1 && d2 < d) {
	                t = next;
	                d = d2;
	            } else {
	                interval *= 0.5;
	            }
	        }
	    }
	    // t
	    if (out) {
	        out[0] = quadraticAt(x0, x1, x2, t);
	        out[1] = quadraticAt(y0, y1, y2, t);
	    }
	    // console.log(interval, i);
	    return mathSqrt(d);
	}
	
	module.exports = {
	
	    cubicAt: cubicAt,
	
	    cubicDerivativeAt: cubicDerivativeAt,
	
	    cubicRootAt: cubicRootAt,
	
	    cubicExtrema: cubicExtrema,
	
	    cubicSubdivide: cubicSubdivide,
	
	    cubicProjectPoint: cubicProjectPoint,
	
	    quadraticAt: quadraticAt,
	
	    quadraticDerivativeAt: quadraticDerivativeAt,
	
	    quadraticRootAt: quadraticRootAt,
	
	    quadraticExtremum: quadraticExtremum,
	
	    quadraticSubdivide: quadraticSubdivide,
	
	    quadraticProjectPoint: quadraticProjectPoint
	};

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @author Yi Shen(https://github.com/pissang)
	 */
	
	var vec2 = __webpack_require__(237);
	var curve = __webpack_require__(270);
	
	var bbox = {};
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathSin = Math.sin;
	var mathCos = Math.cos;
	
	var start = vec2.create();
	var end = vec2.create();
	var extremity = vec2.create();
	
	var PI2 = Math.PI * 2;
	/**
	 * 从顶点数组中计算出最小包围盒，写入`min`和`max`中
	 * @module zrender/core/bbox
	 * @param {Array<Object>} points 顶点数组
	 * @param {number} min
	 * @param {number} max
	 */
	bbox.fromPoints = function (points, min, max) {
	    if (points.length === 0) {
	        return;
	    }
	    var p = points[0];
	    var left = p[0];
	    var right = p[0];
	    var top = p[1];
	    var bottom = p[1];
	    var i;
	
	    for (i = 1; i < points.length; i++) {
	        p = points[i];
	        left = mathMin(left, p[0]);
	        right = mathMax(right, p[0]);
	        top = mathMin(top, p[1]);
	        bottom = mathMax(bottom, p[1]);
	    }
	
	    min[0] = left;
	    min[1] = top;
	    max[0] = right;
	    max[1] = bottom;
	};
	
	/**
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromLine = function (x0, y0, x1, y1, min, max) {
	    min[0] = mathMin(x0, x1);
	    min[1] = mathMin(y0, y1);
	    max[0] = mathMax(x0, x1);
	    max[1] = mathMax(y0, y1);
	};
	
	/**
	 * 从三阶贝塞尔曲线(p0, p1, p2, p3)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {number} x3
	 * @param {number} y3
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromCubic = function (x0, y0, x1, y1, x2, y2, x3, y3, min, max) {
	    var xDim = [];
	    var yDim = [];
	    var cubicExtrema = curve.cubicExtrema;
	    var cubicAt = curve.cubicAt;
	    var left, right, top, bottom;
	    var i;
	    var n = cubicExtrema(x0, x1, x2, x3, xDim);
	
	    for (i = 0; i < n; i++) {
	        xDim[i] = cubicAt(x0, x1, x2, x3, xDim[i]);
	    }
	    n = cubicExtrema(y0, y1, y2, y3, yDim);
	    for (i = 0; i < n; i++) {
	        yDim[i] = cubicAt(y0, y1, y2, y3, yDim[i]);
	    }
	
	    xDim.push(x0, x3);
	    yDim.push(y0, y3);
	
	    left = mathMin.apply(null, xDim);
	    right = mathMax.apply(null, xDim);
	    top = mathMin.apply(null, yDim);
	    bottom = mathMax.apply(null, yDim);
	
	    min[0] = left;
	    min[1] = top;
	    max[0] = right;
	    max[1] = bottom;
	};
	
	/**
	 * 从二阶贝塞尔曲线(p0, p1, p2)中计算出最小包围盒，写入`min`和`max`中
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x0
	 * @param {number} y0
	 * @param {number} x1
	 * @param {number} y1
	 * @param {number} x2
	 * @param {number} y2
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromQuadratic = function (x0, y0, x1, y1, x2, y2, min, max) {
	    var quadraticExtremum = curve.quadraticExtremum;
	    var quadraticAt = curve.quadraticAt;
	    // Find extremities, where derivative in x dim or y dim is zero
	    var tx = mathMax(mathMin(quadraticExtremum(x0, x1, x2), 1), 0);
	    var ty = mathMax(mathMin(quadraticExtremum(y0, y1, y2), 1), 0);
	
	    var x = quadraticAt(x0, x1, x2, tx);
	    var y = quadraticAt(y0, y1, y2, ty);
	
	    min[0] = mathMin(x0, x2, x);
	    min[1] = mathMin(y0, y2, y);
	    max[0] = mathMax(x0, x2, x);
	    max[1] = mathMax(y0, y2, y);
	};
	
	/**
	 * 从圆弧中计算出最小包围盒，写入`min`和`max`中
	 * @method
	 * @memberOf module:zrender/core/bbox
	 * @param {number} x
	 * @param {number} y
	 * @param {number} rx
	 * @param {number} ry
	 * @param {number} startAngle
	 * @param {number} endAngle
	 * @param {number} anticlockwise
	 * @param {Array.<number>} min
	 * @param {Array.<number>} max
	 */
	bbox.fromArc = function (x, y, rx, ry, startAngle, endAngle, anticlockwise, min, max) {
	    var vec2Min = vec2.min;
	    var vec2Max = vec2.max;
	
	    var diff = Math.abs(startAngle - endAngle);
	
	    if (diff % PI2 < 1e-4 && diff > 1e-4) {
	        // Is a circle
	        min[0] = x - rx;
	        min[1] = y - ry;
	        max[0] = x + rx;
	        max[1] = y + ry;
	        return;
	    }
	
	    start[0] = mathCos(startAngle) * rx + x;
	    start[1] = mathSin(startAngle) * ry + y;
	
	    end[0] = mathCos(endAngle) * rx + x;
	    end[1] = mathSin(endAngle) * ry + y;
	
	    vec2Min(min, start, end);
	    vec2Max(max, start, end);
	
	    // Thresh to [0, Math.PI * 2]
	    startAngle = startAngle % PI2;
	    if (startAngle < 0) {
	        startAngle = startAngle + PI2;
	    }
	    endAngle = endAngle % PI2;
	    if (endAngle < 0) {
	        endAngle = endAngle + PI2;
	    }
	
	    if (startAngle > endAngle && !anticlockwise) {
	        endAngle += PI2;
	    } else if (startAngle < endAngle && anticlockwise) {
	        startAngle += PI2;
	    }
	    if (anticlockwise) {
	        var tmp = endAngle;
	        endAngle = startAngle;
	        startAngle = tmp;
	    }
	
	    // var number = 0;
	    // var step = (anticlockwise ? -Math.PI : Math.PI) / 2;
	    for (var angle = 0; angle < endAngle; angle += Math.PI / 2) {
	        if (angle > startAngle) {
	            extremity[0] = mathCos(angle) * rx + x;
	            extremity[1] = mathSin(angle) * ry + y;
	
	            vec2Min(min, extremity, min);
	            vec2Max(max, extremity, max);
	        }
	    }
	};
	
	module.exports = bbox;

/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var CMD = __webpack_require__(269).CMD;
	var line = __webpack_require__(273);
	var cubic = __webpack_require__(274);
	var quadratic = __webpack_require__(275);
	var arc = __webpack_require__(276);
	var normalizeRadian = __webpack_require__(277).normalizeRadian;
	var curve = __webpack_require__(270);
	
	var windingLine = __webpack_require__(278);
	
	var containStroke = line.containStroke;
	
	var PI2 = Math.PI * 2;
	
	var EPSILON = 1e-4;
	
	function isAroundEqual(a, b) {
	    return Math.abs(a - b) < EPSILON;
	}
	
	// 临时数组
	var roots = [-1, -1, -1];
	var extrema = [-1, -1];
	
	function swapExtrema() {
	    var tmp = extrema[0];
	    extrema[0] = extrema[1];
	    extrema[1] = tmp;
	}
	
	function windingCubic(x0, y0, x1, y1, x2, y2, x3, y3, x, y) {
	    // Quick reject
	    if (y > y0 && y > y1 && y > y2 && y > y3 || y < y0 && y < y1 && y < y2 && y < y3) {
	        return 0;
	    }
	    var nRoots = curve.cubicRootAt(y0, y1, y2, y3, y, roots);
	    if (nRoots === 0) {
	        return 0;
	    } else {
	        var w = 0;
	        var nExtrema = -1;
	        var y0_, y1_;
	        for (var i = 0; i < nRoots; i++) {
	            var t = roots[i];
	            var x_ = curve.cubicAt(x0, x1, x2, x3, t);
	            if (x_ < x) {
	                // Quick reject
	                continue;
	            }
	            if (nExtrema < 0) {
	                nExtrema = curve.cubicExtrema(y0, y1, y2, y3, extrema);
	                if (extrema[1] < extrema[0] && nExtrema > 1) {
	                    swapExtrema();
	                }
	                y0_ = curve.cubicAt(y0, y1, y2, y3, extrema[0]);
	                if (nExtrema > 1) {
	                    y1_ = curve.cubicAt(y0, y1, y2, y3, extrema[1]);
	                }
	            }
	            if (nExtrema == 2) {
	                // 分成三段单调函数
	                if (t < extrema[0]) {
	                    w += y0_ < y0 ? 1 : -1;
	                } else if (t < extrema[1]) {
	                    w += y1_ < y0_ ? 1 : -1;
	                } else {
	                    w += y3 < y1_ ? 1 : -1;
	                }
	            } else {
	                // 分成两段单调函数
	                if (t < extrema[0]) {
	                    w += y0_ < y0 ? 1 : -1;
	                } else {
	                    w += y3 < y0_ ? 1 : -1;
	                }
	            }
	        }
	        return w;
	    }
	}
	
	function windingQuadratic(x0, y0, x1, y1, x2, y2, x, y) {
	    // Quick reject
	    if (y > y0 && y > y1 && y > y2 || y < y0 && y < y1 && y < y2) {
	        return 0;
	    }
	    var nRoots = curve.quadraticRootAt(y0, y1, y2, y, roots);
	    if (nRoots === 0) {
	        return 0;
	    } else {
	        var t = curve.quadraticExtremum(y0, y1, y2);
	        if (t >= 0 && t <= 1) {
	            var w = 0;
	            var y_ = curve.quadraticAt(y0, y1, y2, t);
	            for (var i = 0; i < nRoots; i++) {
	                var x_ = curve.quadraticAt(x0, x1, x2, roots[i]);
	                if (x_ > x) {
	                    continue;
	                }
	                if (roots[i] < t) {
	                    w += y_ < y0 ? 1 : -1;
	                } else {
	                    w += y2 < y_ ? 1 : -1;
	                }
	            }
	            return w;
	        } else {
	            var x_ = curve.quadraticAt(x0, x1, x2, roots[0]);
	            if (x_ > x) {
	                return 0;
	            }
	            return y2 < y0 ? 1 : -1;
	        }
	    }
	}
	
	// TODO
	// Arc 旋转
	function windingArc(cx, cy, r, startAngle, endAngle, anticlockwise, x, y) {
	    y -= cy;
	    if (y > r || y < -r) {
	        return 0;
	    }
	    var tmp = Math.sqrt(r * r - y * y);
	    roots[0] = -tmp;
	    roots[1] = tmp;
	
	    var diff = Math.abs(startAngle - endAngle);
	    if (diff < 1e-4) {
	        return 0;
	    }
	    if (diff % PI2 < 1e-4) {
	        // Is a circle
	        startAngle = 0;
	        endAngle = PI2;
	        var dir = anticlockwise ? 1 : -1;
	        if (x >= roots[0] + cx && x <= roots[1] + cx) {
	            return dir;
	        } else {
	            return 0;
	        }
	    }
	
	    if (anticlockwise) {
	        var tmp = startAngle;
	        startAngle = normalizeRadian(endAngle);
	        endAngle = normalizeRadian(tmp);
	    } else {
	        startAngle = normalizeRadian(startAngle);
	        endAngle = normalizeRadian(endAngle);
	    }
	    if (startAngle > endAngle) {
	        endAngle += PI2;
	    }
	
	    var w = 0;
	    for (var i = 0; i < 2; i++) {
	        var x_ = roots[i];
	        if (x_ + cx > x) {
	            var angle = Math.atan2(y, x_);
	            var dir = anticlockwise ? 1 : -1;
	            if (angle < 0) {
	                angle = PI2 + angle;
	            }
	            if (angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle) {
	                if (angle > Math.PI / 2 && angle < Math.PI * 1.5) {
	                    dir = -dir;
	                }
	                w += dir;
	            }
	        }
	    }
	    return w;
	}
	
	function containPath(data, lineWidth, isStroke, x, y) {
	    var w = 0;
	    var xi = 0;
	    var yi = 0;
	    var x0 = 0;
	    var y0 = 0;
	
	    for (var i = 0; i < data.length;) {
	        var cmd = data[i++];
	        // Begin a new subpath
	        if (cmd === CMD.M && i > 1) {
	            // Close previous subpath
	            if (!isStroke) {
	                w += windingLine(xi, yi, x0, y0, x, y);
	            }
	            // 如果被任何一个 subpath 包含
	            if (w !== 0) {
	                return true;
	            }
	        }
	
	        if (i == 1) {
	            // 如果第一个命令是 L, C, Q
	            // 则 previous point 同绘制命令的第一个 point
	            //
	            // 第一个命令为 Arc 的情况下会在后面特殊处理
	            xi = data[i];
	            yi = data[i + 1];
	
	            x0 = xi;
	            y0 = yi;
	        }
	
	        switch (cmd) {
	            case CMD.M:
	                // moveTo 命令重新创建一个新的 subpath, 并且更新新的起点
	                // 在 closePath 的时候使用
	                x0 = data[i++];
	                y0 = data[i++];
	                xi = x0;
	                yi = y0;
	                break;
	            case CMD.L:
	                if (isStroke) {
	                    if (containStroke(xi, yi, data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // NOTE 在第一个命令为 L, C, Q 的时候会计算出 NaN
	                    w += windingLine(xi, yi, data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.C:
	                if (isStroke) {
	                    if (cubic.containStroke(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.Q:
	                if (isStroke) {
	                    if (quadratic.containStroke(xi, yi, data[i++], data[i++], data[i], data[i + 1], lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], x, y) || 0;
	                }
	                xi = data[i++];
	                yi = data[i++];
	                break;
	            case CMD.A:
	                // TODO Arc 判断的开销比较大
	                var cx = data[i++];
	                var cy = data[i++];
	                var rx = data[i++];
	                var ry = data[i++];
	                var theta = data[i++];
	                var dTheta = data[i++];
	                // TODO Arc 旋转
	                var psi = data[i++];
	                var anticlockwise = 1 - data[i++];
	                var x1 = Math.cos(theta) * rx + cx;
	                var y1 = Math.sin(theta) * ry + cy;
	                // 不是直接使用 arc 命令
	                if (i > 1) {
	                    w += windingLine(xi, yi, x1, y1, x, y);
	                } else {
	                    // 第一个命令起点还未定义
	                    x0 = x1;
	                    y0 = y1;
	                }
	                // zr 使用scale来模拟椭圆, 这里也对x做一定的缩放
	                var _x = (x - cx) * ry / rx + cx;
	                if (isStroke) {
	                    if (arc.containStroke(cx, cy, ry, theta, theta + dTheta, anticlockwise, lineWidth, _x, y)) {
	                        return true;
	                    }
	                } else {
	                    w += windingArc(cx, cy, ry, theta, theta + dTheta, anticlockwise, _x, y);
	                }
	                xi = Math.cos(theta + dTheta) * rx + cx;
	                yi = Math.sin(theta + dTheta) * ry + cy;
	                break;
	            case CMD.R:
	                x0 = xi = data[i++];
	                y0 = yi = data[i++];
	                var width = data[i++];
	                var height = data[i++];
	                var x1 = x0 + width;
	                var y1 = y0 + height;
	                if (isStroke) {
	                    if (containStroke(x0, y0, x1, y0, lineWidth, x, y) || containStroke(x1, y0, x1, y1, lineWidth, x, y) || containStroke(x1, y1, x0, y1, lineWidth, x, y) || containStroke(x0, y1, x1, y1, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // FIXME Clockwise ?
	                    w += windingLine(x1, y0, x1, y1, x, y);
	                    w += windingLine(x0, y1, x0, y0, x, y);
	                }
	                break;
	            case CMD.Z:
	                if (isStroke) {
	                    if (containStroke(xi, yi, x0, y0, lineWidth, x, y)) {
	                        return true;
	                    }
	                } else {
	                    // Close a subpath
	                    w += windingLine(xi, yi, x0, y0, x, y);
	                    // 如果被任何一个 subpath 包含
	                    if (w !== 0) {
	                        return true;
	                    }
	                }
	                xi = x0;
	                yi = y0;
	                break;
	        }
	    }
	    if (!isStroke && !isAroundEqual(yi, y0)) {
	        w += windingLine(xi, yi, x0, y0, x, y) || 0;
	    }
	    return w !== 0;
	}
	
	module.exports = {
	    contain: function contain(pathData, x, y) {
	        return containPath(pathData, 0, false, x, y);
	    },
	
	    containStroke: function containStroke(pathData, lineWidth, x, y) {
	        return containPath(pathData, lineWidth, true, x, y);
	    }
	};

/***/ },
/* 273 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {
	    /**
	     * 线段包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        var _a = 0;
	        var _b = x0;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l || y < y0 - _l && y < y1 - _l || x > x0 + _l && x > x1 + _l || x < x0 - _l && x < x1 - _l) {
	            return false;
	        }
	
	        if (x0 !== x1) {
	            _a = (y0 - y1) / (x0 - x1);
	            _b = (x0 * y1 - x1 * y0) / (x0 - x1);
	        } else {
	            return Math.abs(x - x0) <= _l / 2;
	        }
	        var tmp = _a * x - y + _b;
	        var _s = tmp * tmp / (_a * _a + 1);
	        return _s <= _l / 2 * _l / 2;
	    }
	};

/***/ },
/* 274 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var curve = __webpack_require__(270);
	
	module.exports = {
	    /**
	     * 三次贝塞尔曲线描边包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  x2
	     * @param  {number}  y2
	     * @param  {number}  x3
	     * @param  {number}  y3
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l && y > y2 + _l && y > y3 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l && y < y3 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l && x > x3 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l && x < x3 - _l) {
	            return false;
	        }
	        var d = curve.cubicProjectPoint(x0, y0, x1, y1, x2, y2, x3, y3, x, y, null);
	        return d <= _l / 2;
	    }
	};

/***/ },
/* 275 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var curve = __webpack_require__(270);
	
	module.exports = {
	    /**
	     * 二次贝塞尔曲线描边包含判断
	     * @param  {number}  x0
	     * @param  {number}  y0
	     * @param  {number}  x1
	     * @param  {number}  y1
	     * @param  {number}  x2
	     * @param  {number}  y2
	     * @param  {number}  lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {boolean}
	     */
	    containStroke: function containStroke(x0, y0, x1, y1, x2, y2, lineWidth, x, y) {
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	        // Quick reject
	        if (y > y0 + _l && y > y1 + _l && y > y2 + _l || y < y0 - _l && y < y1 - _l && y < y2 - _l || x > x0 + _l && x > x1 + _l && x > x2 + _l || x < x0 - _l && x < x1 - _l && x < x2 - _l) {
	            return false;
	        }
	        var d = curve.quadraticProjectPoint(x0, y0, x1, y1, x2, y2, x, y, null);
	        return d <= _l / 2;
	    }
	};

/***/ },
/* 276 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var normalizeRadian = __webpack_require__(277).normalizeRadian;
	var PI2 = Math.PI * 2;
	
	module.exports = {
	    /**
	     * 圆弧描边包含判断
	     * @param  {number}  cx
	     * @param  {number}  cy
	     * @param  {number}  r
	     * @param  {number}  startAngle
	     * @param  {number}  endAngle
	     * @param  {boolean}  anticlockwise
	     * @param  {number} lineWidth
	     * @param  {number}  x
	     * @param  {number}  y
	     * @return {Boolean}
	     */
	    containStroke: function containStroke(cx, cy, r, startAngle, endAngle, anticlockwise, lineWidth, x, y) {
	
	        if (lineWidth === 0) {
	            return false;
	        }
	        var _l = lineWidth;
	
	        x -= cx;
	        y -= cy;
	        var d = Math.sqrt(x * x + y * y);
	
	        if (d - _l > r || d + _l < r) {
	            return false;
	        }
	        if (Math.abs(startAngle - endAngle) % PI2 < 1e-4) {
	            // Is a circle
	            return true;
	        }
	        if (anticlockwise) {
	            var tmp = startAngle;
	            startAngle = normalizeRadian(endAngle);
	            endAngle = normalizeRadian(tmp);
	        } else {
	            startAngle = normalizeRadian(startAngle);
	            endAngle = normalizeRadian(endAngle);
	        }
	        if (startAngle > endAngle) {
	            endAngle += PI2;
	        }
	
	        var angle = Math.atan2(y, x);
	        if (angle < 0) {
	            angle += PI2;
	        }
	        return angle >= startAngle && angle <= endAngle || angle + PI2 >= startAngle && angle + PI2 <= endAngle;
	    }
	};

/***/ },
/* 277 */
/***/ function(module, exports) {

	"use strict";
	
	var PI2 = Math.PI * 2;
	module.exports = {
	    normalizeRadian: function normalizeRadian(angle) {
	        angle %= PI2;
	        if (angle < 0) {
	            angle += PI2;
	        }
	        return angle;
	    }
	};

/***/ },
/* 278 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function windingLine(x0, y0, x1, y1, x, y) {
	    if (y > y0 && y > y1 || y < y0 && y < y1) {
	        return 0;
	    }
	    if (y1 === y0) {
	        return 0;
	    }
	    var dir = y1 < y0 ? 1 : -1;
	    var t = (y - y0) / (y1 - y0);
	    var x_ = t * (x1 - x0) + x0;
	
	    return x_ > x ? dir : 0;
	};

/***/ },
/* 279 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var CMD = __webpack_require__(269).CMD;
	var vec2 = __webpack_require__(237);
	var v2ApplyTransform = vec2.applyTransform;
	
	var points = [[], [], []];
	var mathSqrt = Math.sqrt;
	var mathAtan2 = Math.atan2;
	function transformPath(path, m) {
	    var data = path.data;
	    var cmd;
	    var nPoint;
	    var i;
	    var j;
	    var k;
	    var p;
	
	    var M = CMD.M;
	    var C = CMD.C;
	    var L = CMD.L;
	    var R = CMD.R;
	    var A = CMD.A;
	    var Q = CMD.Q;
	
	    for (i = 0, j = 0; i < data.length;) {
	        cmd = data[i++];
	        j = i;
	        nPoint = 0;
	
	        switch (cmd) {
	            case M:
	                nPoint = 1;
	                break;
	            case L:
	                nPoint = 1;
	                break;
	            case C:
	                nPoint = 3;
	                break;
	            case Q:
	                nPoint = 2;
	                break;
	            case A:
	                var x = m[4];
	                var y = m[5];
	                var sx = mathSqrt(m[0] * m[0] + m[1] * m[1]);
	                var sy = mathSqrt(m[2] * m[2] + m[3] * m[3]);
	                var angle = mathAtan2(-m[1] / sy, m[0] / sx);
	                // cx
	                data[i++] += x;
	                // cy
	                data[i++] += y;
	                // Scale rx and ry
	                // FIXME Assume psi is 0 here
	                data[i++] *= sx;
	                data[i++] *= sy;
	
	                // Start angle
	                data[i++] += angle;
	                // end angle
	                data[i++] += angle;
	                // FIXME psi
	                i += 2;
	                j = i;
	                break;
	            case R:
	                // x0, y0
	                p[0] = data[i++];
	                p[1] = data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	                // x1, y1
	                p[0] += data[i++];
	                p[1] += data[i++];
	                v2ApplyTransform(p, p, m);
	                data[j++] = p[0];
	                data[j++] = p[1];
	        }
	
	        for (k = 0; k < nPoint; k++) {
	            var p = points[k];
	            p[0] = data[i++];
	            p[1] = data[i++];
	
	            v2ApplyTransform(p, p, m);
	            // Write back
	            data[j++] = p[0];
	            data[j++] = p[1];
	        }
	    }
	}
	
	module.exports = transformPath;

/***/ },
/* 280 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Image element
	 * @module zrender/graphic/Image
	 */
	
	var Displayable = __webpack_require__(266);
	var BoundingRect = __webpack_require__(236);
	var zrUtil = __webpack_require__(224);
	var roundRectHelper = __webpack_require__(281);
	
	var LRU = __webpack_require__(282);
	var globalImageCache = new LRU(50);
	/**
	 * @alias zrender/graphic/Image
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var ZImage = function ZImage(opts) {
	    Displayable.call(this, opts);
	};
	
	ZImage.prototype = {
	
	    constructor: ZImage,
	
	    type: 'image',
	
	    brush: function brush(ctx) {
	        var style = this.style;
	        var src = style.image;
	        var image;
	        // style.image is a url string
	        if (typeof src === 'string') {
	            image = this._image;
	        }
	        // style.image is an HTMLImageElement or HTMLCanvasElement or Canvas
	        else {
	                image = src;
	            }
	        // FIXME Case create many images with src
	        if (!image && src) {
	            // Try get from global image cache
	            var cachedImgObj = globalImageCache.get(src);
	            if (!cachedImgObj) {
	                // Create a new image
	                image = new Image();
	                image.onload = function () {
	                    image.onload = null;
	                    for (var i = 0; i < cachedImgObj.pending.length; i++) {
	                        cachedImgObj.pending[i].dirty();
	                    }
	                };
	                cachedImgObj = {
	                    image: image,
	                    pending: [this]
	                };
	                image.src = src;
	                globalImageCache.put(src, cachedImgObj);
	                this._image = image;
	                return;
	            } else {
	                image = cachedImgObj.image;
	                this._image = image;
	                // Image is not complete finish, add to pending list
	                if (!image.width || !image.height) {
	                    cachedImgObj.pending.push(this);
	                    return;
	                }
	            }
	        }
	
	        if (image) {
	            // 图片已经加载完成
	            // if (image.nodeName.toUpperCase() == 'IMG') {
	            //     if (!image.complete) {
	            //         return;
	            //     }
	            // }
	            // Else is canvas
	
	            var width = style.width || image.width;
	            var height = style.height || image.height;
	            var x = style.x || 0;
	            var y = style.y || 0;
	            // 图片加载失败
	            if (!image.width || !image.height) {
	                return;
	            }
	
	            ctx.save();
	
	            style.bind(ctx);
	
	            // 设置transform
	            this.setTransform(ctx);
	
	            if (style.r) {
	                // Border radius clipping
	                // FIXME
	                ctx.beginPath();
	                roundRectHelper.buildPath(ctx, style);
	                ctx.clip();
	            }
	
	            if (style.sWidth && style.sHeight) {
	                var sx = style.sx || 0;
	                var sy = style.sy || 0;
	                ctx.drawImage(image, sx, sy, style.sWidth, style.sHeight, x, y, width, height);
	            } else if (style.sx && style.sy) {
	                var sx = style.sx;
	                var sy = style.sy;
	                var sWidth = width - sx;
	                var sHeight = height - sy;
	                ctx.drawImage(image, sx, sy, sWidth, sHeight, x, y, width, height);
	            } else {
	                ctx.drawImage(image, x, y, width, height);
	            }
	
	            // 如果没设置宽和高的话自动根据图片宽高设置
	            if (style.width == null) {
	                style.width = width;
	            }
	            if (style.height == null) {
	                style.height = height;
	            }
	
	            // Draw rect text
	            if (style.text != null) {
	                this.drawRectText(ctx, this.getBoundingRect());
	            }
	
	            ctx.restore();
	        }
	    },
	
	    getBoundingRect: function getBoundingRect() {
	        var style = this.style;
	        if (!this._rect) {
	            this._rect = new BoundingRect(style.x || 0, style.y || 0, style.width || 0, style.height || 0);
	        }
	        return this._rect;
	    }
	};
	
	zrUtil.inherits(ZImage, Displayable);
	
	module.exports = ZImage;

/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = {
	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var width = shape.width;
	        var height = shape.height;
	        var r = shape.r;
	        var r1;
	        var r2;
	        var r3;
	        var r4;
	
	        // Convert width and height to positive for better borderRadius
	        if (width < 0) {
	            x = x + width;
	            width = -width;
	        }
	        if (height < 0) {
	            y = y + height;
	            height = -height;
	        }
	
	        if (typeof r === 'number') {
	            r1 = r2 = r3 = r4 = r;
	        } else if (r instanceof Array) {
	            if (r.length === 1) {
	                r1 = r2 = r3 = r4 = r[0];
	            } else if (r.length === 2) {
	                r1 = r3 = r[0];
	                r2 = r4 = r[1];
	            } else if (r.length === 3) {
	                r1 = r[0];
	                r2 = r4 = r[1];
	                r3 = r[2];
	            } else {
	                r1 = r[0];
	                r2 = r[1];
	                r3 = r[2];
	                r4 = r[3];
	            }
	        } else {
	            r1 = r2 = r3 = r4 = 0;
	        }
	
	        var total;
	        if (r1 + r2 > width) {
	            total = r1 + r2;
	            r1 *= width / total;
	            r2 *= width / total;
	        }
	        if (r3 + r4 > width) {
	            total = r3 + r4;
	            r3 *= width / total;
	            r4 *= width / total;
	        }
	        if (r2 + r3 > height) {
	            total = r2 + r3;
	            r2 *= height / total;
	            r3 *= height / total;
	        }
	        if (r1 + r4 > height) {
	            total = r1 + r4;
	            r1 *= height / total;
	            r4 *= height / total;
	        }
	        ctx.moveTo(x + r1, y);
	        ctx.lineTo(x + width - r2, y);
	        r2 !== 0 && ctx.quadraticCurveTo(x + width, y, x + width, y + r2);
	        ctx.lineTo(x + width, y + height - r3);
	        r3 !== 0 && ctx.quadraticCurveTo(x + width, y + height, x + width - r3, y + height);
	        ctx.lineTo(x + r4, y + height);
	        r4 !== 0 && ctx.quadraticCurveTo(x, y + height, x, y + height - r4);
	        ctx.lineTo(x, y + r1);
	        r1 !== 0 && ctx.quadraticCurveTo(x, y, x + r1, y);
	    }
	};

/***/ },
/* 282 */
/***/ function(module, exports) {

	"use strict";
	
	// Simple LRU cache use doubly linked list
	// @module zrender/core/LRU
	
	/**
	 * Simple double linked list. Compared with array, it has O(1) remove operation.
	 * @constructor
	 */
	var LinkedList = function LinkedList() {
	
	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.head = null;
	
	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.tail = null;
	
	    this._len = 0;
	};
	
	var linkedListProto = LinkedList.prototype;
	/**
	 * Insert a new value at the tail
	 * @param  {} val
	 * @return {module:zrender/core/LRU~Entry}
	 */
	linkedListProto.insert = function (val) {
	    var entry = new Entry(val);
	    this.insertEntry(entry);
	    return entry;
	};
	
	/**
	 * Insert an entry at the tail
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	linkedListProto.insertEntry = function (entry) {
	    if (!this.head) {
	        this.head = this.tail = entry;
	    } else {
	        this.tail.next = entry;
	        entry.prev = this.tail;
	        this.tail = entry;
	    }
	    this._len++;
	};
	
	/**
	 * Remove entry.
	 * @param  {module:zrender/core/LRU~Entry} entry
	 */
	linkedListProto.remove = function (entry) {
	    var prev = entry.prev;
	    var next = entry.next;
	    if (prev) {
	        prev.next = next;
	    } else {
	        // Is head
	        this.head = next;
	    }
	    if (next) {
	        next.prev = prev;
	    } else {
	        // Is tail
	        this.tail = prev;
	    }
	    entry.next = entry.prev = null;
	    this._len--;
	};
	
	/**
	 * @return {number}
	 */
	linkedListProto.len = function () {
	    return this._len;
	};
	
	/**
	 * @constructor
	 * @param {} val
	 */
	var Entry = function Entry(val) {
	    /**
	     * @type {}
	     */
	    this.value = val;
	
	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.next;
	
	    /**
	     * @type {module:zrender/core/LRU~Entry}
	     */
	    this.prev;
	};
	
	/**
	 * LRU Cache
	 * @constructor
	 * @alias module:zrender/core/LRU
	 */
	var LRU = function LRU(maxSize) {
	
	    this._list = new LinkedList();
	
	    this._map = {};
	
	    this._maxSize = maxSize || 10;
	};
	
	var LRUProto = LRU.prototype;
	
	/**
	 * @param  {string} key
	 * @param  {} value
	 */
	LRUProto.put = function (key, value) {
	    var list = this._list;
	    var map = this._map;
	    if (map[key] == null) {
	        var len = list.len();
	        if (len >= this._maxSize && len > 0) {
	            // Remove the least recently used
	            var leastUsedEntry = list.head;
	            list.remove(leastUsedEntry);
	            delete map[leastUsedEntry.key];
	        }
	
	        var entry = list.insert(value);
	        entry.key = key;
	        map[key] = entry;
	    }
	};
	
	/**
	 * @param  {string} key
	 * @return {}
	 */
	LRUProto.get = function (key) {
	    var entry = this._map[key];
	    var list = this._list;
	    if (entry != null) {
	        // Put the latest used entry in the tail
	        if (entry !== list.tail) {
	            list.remove(entry);
	            list.insertEntry(entry);
	        }
	
	        return entry.value;
	    }
	};
	
	/**
	 * Clear the cache
	 */
	LRUProto.clear = function () {
	    this._list.clear();
	    this._map = {};
	};
	
	module.exports = LRU;

/***/ },
/* 283 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Text element
	 * @module zrender/graphic/Text
	 *
	 * TODO Wrapping
	 */
	
	var Displayable = __webpack_require__(266);
	var zrUtil = __webpack_require__(224);
	var textContain = __webpack_require__(235);
	
	/**
	 * @alias zrender/graphic/Text
	 * @extends module:zrender/graphic/Displayable
	 * @constructor
	 * @param {Object} opts
	 */
	var Text = function Text(opts) {
	    Displayable.call(this, opts);
	};
	
	Text.prototype = {
	
	    constructor: Text,
	
	    type: 'text',
	
	    brush: function brush(ctx) {
	        var style = this.style;
	        var x = style.x || 0;
	        var y = style.y || 0;
	        // Convert to string
	        var text = style.text;
	        var textFill = style.fill;
	        var textStroke = style.stroke;
	
	        // Convert to string
	        text != null && (text += '');
	
	        if (text) {
	            ctx.save();
	
	            this.style.bind(ctx);
	            this.setTransform(ctx);
	
	            textFill && (ctx.fillStyle = textFill);
	            textStroke && (ctx.strokeStyle = textStroke);
	
	            ctx.font = style.textFont || style.font;
	            ctx.textAlign = style.textAlign;
	
	            if (style.textVerticalAlign) {
	                var rect = textContain.getBoundingRect(text, ctx.font, style.textAlign, 'top');
	                // Ignore textBaseline
	                ctx.textBaseline = 'top';
	                switch (style.textVerticalAlign) {
	                    case 'middle':
	                        y -= rect.height / 2;
	                        break;
	                    case 'bottom':
	                        y -= rect.height;
	                        break;
	                    // 'top'
	                }
	            } else {
	                    ctx.textBaseline = style.textBaseline;
	                }
	            var lineHeight = textContain.measureText('国', ctx.font).width;
	
	            var textLines = text.split('\n');
	            for (var i = 0; i < textLines.length; i++) {
	                textFill && ctx.fillText(textLines[i], x, y);
	                textStroke && ctx.strokeText(textLines[i], x, y);
	                y += lineHeight;
	            }
	
	            ctx.restore();
	        }
	    },
	
	    getBoundingRect: function getBoundingRect() {
	        if (!this._rect) {
	            var style = this.style;
	            var rect = textContain.getBoundingRect(style.text + '', style.textFont || style.font, style.textAlign, style.textBaseline);
	            rect.x += style.x || 0;
	            rect.y += style.y || 0;
	            this._rect = rect;
	        }
	        return this._rect;
	    }
	};
	
	zrUtil.inherits(Text, Displayable);
	
	module.exports = Text;

/***/ },
/* 284 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 圆形
	 * @module zrender/shape/Circle
	 */
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'circle',
	
	    shape: {
	        cx: 0,
	        cy: 0,
	        r: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        // Better stroking in ShapeBundle
	        ctx.moveTo(shape.cx + shape.r, shape.cy);
	        ctx.arc(shape.cx, shape.cy, shape.r, 0, Math.PI * 2, true);
	        return;
	    }
	});

/***/ },
/* 285 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 扇形
	 * @module zrender/graphic/shape/Sector
	 */
	
	// FIXME clockwise seems wrong
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'sector',
	
	    shape: {
	
	        cx: 0,
	
	        cy: 0,
	
	        r0: 0,
	
	        r: 0,
	
	        startAngle: 0,
	
	        endAngle: Math.PI * 2,
	
	        clockwise: true
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	
	        var x = shape.cx;
	        var y = shape.cy;
	        var r0 = Math.max(shape.r0 || 0, 0);
	        var r = Math.max(shape.r, 0);
	        var startAngle = shape.startAngle;
	        var endAngle = shape.endAngle;
	        var clockwise = shape.clockwise;
	
	        var unitX = Math.cos(startAngle);
	        var unitY = Math.sin(startAngle);
	
	        ctx.moveTo(unitX * r0 + x, unitY * r0 + y);
	
	        ctx.lineTo(unitX * r + x, unitY * r + y);
	
	        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	
	        ctx.lineTo(Math.cos(endAngle) * r0 + x, Math.sin(endAngle) * r0 + y);
	
	        if (r0 !== 0) {
	            ctx.arc(x, y, r0, endAngle, startAngle, clockwise);
	        }
	
	        ctx.closePath();
	    }
	});

/***/ },
/* 286 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 圆环
	 * @module zrender/graphic/shape/Ring
	 */
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'ring',
	
	    shape: {
	        cx: 0,
	        cy: 0,
	        r: 0,
	        r0: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.cx;
	        var y = shape.cy;
	        var PI2 = Math.PI * 2;
	        ctx.moveTo(x + shape.r, y);
	        ctx.arc(x, y, shape.r, 0, PI2, false);
	        ctx.moveTo(x + shape.r0, y);
	        ctx.arc(x, y, shape.r0, 0, PI2, true);
	    }
	});

/***/ },
/* 287 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 多边形
	 * @module zrender/shape/Polygon
	 */
	
	var polyHelper = __webpack_require__(288);
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'polygon',
	
	    shape: {
	        points: null,
	
	        smooth: false,
	
	        smoothConstraint: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        polyHelper.buildPath(ctx, shape, true);
	    }
	});

/***/ },
/* 288 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var smoothSpline = __webpack_require__(289);
	var smoothBezier = __webpack_require__(290);
	
	module.exports = {
	    buildPath: function buildPath(ctx, shape, closePath) {
	        var points = shape.points;
	        var smooth = shape.smooth;
	        if (points && points.length >= 2) {
	            if (smooth && smooth !== 'spline') {
	                var controlPoints = smoothBezier(points, smooth, closePath, shape.smoothConstraint);
	
	                ctx.moveTo(points[0][0], points[0][1]);
	                var len = points.length;
	                for (var i = 0; i < (closePath ? len : len - 1); i++) {
	                    var cp1 = controlPoints[i * 2];
	                    var cp2 = controlPoints[i * 2 + 1];
	                    var p = points[(i + 1) % len];
	                    ctx.bezierCurveTo(cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]);
	                }
	            } else {
	                if (smooth === 'spline') {
	                    points = smoothSpline(points, closePath);
	                }
	
	                ctx.moveTo(points[0][0], points[0][1]);
	                for (var i = 1, l = points.length; i < l; i++) {
	                    ctx.lineTo(points[i][0], points[i][1]);
	                }
	            }
	
	            closePath && ctx.closePath();
	        }
	    }
	};

/***/ },
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Catmull-Rom spline 插值折线
	 * @module zrender/shape/util/smoothSpline
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	var vec2 = __webpack_require__(237);
	
	/**
	 * @inner
	 */
	function interpolate(p0, p1, p2, p3, t, t2, t3) {
	    var v0 = (p2 - p0) * 0.5;
	    var v1 = (p3 - p1) * 0.5;
	    return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;
	}
	
	/**
	 * @alias module:zrender/shape/util/smoothSpline
	 * @param {Array} points 线段顶点数组
	 * @param {boolean} isLoop
	 * @return {Array}
	 */
	module.exports = function (points, isLoop) {
	    var len = points.length;
	    var ret = [];
	
	    var distance = 0;
	    for (var i = 1; i < len; i++) {
	        distance += vec2.distance(points[i - 1], points[i]);
	    }
	
	    var segs = distance / 2;
	    segs = segs < len ? len : segs;
	    for (var i = 0; i < segs; i++) {
	        var pos = i / (segs - 1) * (isLoop ? len : len - 1);
	        var idx = Math.floor(pos);
	
	        var w = pos - idx;
	
	        var p0;
	        var p1 = points[idx % len];
	        var p2;
	        var p3;
	        if (!isLoop) {
	            p0 = points[idx === 0 ? idx : idx - 1];
	            p2 = points[idx > len - 2 ? len - 1 : idx + 1];
	            p3 = points[idx > len - 3 ? len - 1 : idx + 2];
	        } else {
	            p0 = points[(idx - 1 + len) % len];
	            p2 = points[(idx + 1) % len];
	            p3 = points[(idx + 2) % len];
	        }
	
	        var w2 = w * w;
	        var w3 = w * w2;
	
	        ret.push([interpolate(p0[0], p1[0], p2[0], p3[0], w, w2, w3), interpolate(p0[1], p1[1], p2[1], p3[1], w, w2, w3)]);
	    }
	    return ret;
	};

/***/ },
/* 290 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 贝塞尔平滑曲线
	 * @module zrender/shape/util/smoothBezier
	 * @author pissang (https://www.github.com/pissang)
	 *         Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 */
	
	var vec2 = __webpack_require__(237);
	var v2Min = vec2.min;
	var v2Max = vec2.max;
	var v2Scale = vec2.scale;
	var v2Distance = vec2.distance;
	var v2Add = vec2.add;
	
	/**
	 * 贝塞尔平滑曲线
	 * @alias module:zrender/shape/util/smoothBezier
	 * @param {Array} points 线段顶点数组
	 * @param {number} smooth 平滑等级, 0-1
	 * @param {boolean} isLoop
	 * @param {Array} constraint 将计算出来的控制点约束在一个包围盒内
	 *                           比如 [[0, 0], [100, 100]], 这个包围盒会与
	 *                           整个折线的包围盒做一个并集用来约束控制点。
	 * @param {Array} 计算出来的控制点数组
	 */
	module.exports = function (points, smooth, isLoop, constraint) {
	    var cps = [];
	
	    var v = [];
	    var v1 = [];
	    var v2 = [];
	    var prevPoint;
	    var nextPoint;
	
	    var min, max;
	    if (constraint) {
	        min = [Infinity, Infinity];
	        max = [-Infinity, -Infinity];
	        for (var i = 0, len = points.length; i < len; i++) {
	            v2Min(min, min, points[i]);
	            v2Max(max, max, points[i]);
	        }
	        // 与指定的包围盒做并集
	        v2Min(min, min, constraint[0]);
	        v2Max(max, max, constraint[1]);
	    }
	
	    for (var i = 0, len = points.length; i < len; i++) {
	        var point = points[i];
	
	        if (isLoop) {
	            prevPoint = points[i ? i - 1 : len - 1];
	            nextPoint = points[(i + 1) % len];
	        } else {
	            if (i === 0 || i === len - 1) {
	                cps.push(vec2.clone(points[i]));
	                continue;
	            } else {
	                prevPoint = points[i - 1];
	                nextPoint = points[i + 1];
	            }
	        }
	
	        vec2.sub(v, nextPoint, prevPoint);
	
	        // use degree to scale the handle length
	        v2Scale(v, v, smooth);
	
	        var d0 = v2Distance(point, prevPoint);
	        var d1 = v2Distance(point, nextPoint);
	        var sum = d0 + d1;
	        if (sum !== 0) {
	            d0 /= sum;
	            d1 /= sum;
	        }
	
	        v2Scale(v1, v, -d0);
	        v2Scale(v2, v, d1);
	        var cp0 = v2Add([], point, v1);
	        var cp1 = v2Add([], point, v2);
	        if (constraint) {
	            v2Max(cp0, cp0, min);
	            v2Min(cp0, cp0, max);
	            v2Max(cp1, cp1, min);
	            v2Min(cp1, cp1, max);
	        }
	        cps.push(cp0);
	        cps.push(cp1);
	    }
	
	    if (isLoop) {
	        cps.push(cps.shift());
	    }
	
	    return cps;
	};

/***/ },
/* 291 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module zrender/graphic/shape/Polyline
	 */
	
	var polyHelper = __webpack_require__(288);
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'polyline',
	
	    shape: {
	        points: null,
	
	        smooth: false,
	
	        smoothConstraint: null
	    },
	
	    style: {
	        stroke: '#000',
	
	        fill: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        polyHelper.buildPath(ctx, shape, false);
	    }
	});

/***/ },
/* 292 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 矩形
	 * @module zrender/graphic/shape/Rect
	 */
	
	var roundRectHelper = __webpack_require__(281);
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'rect',
	
	    shape: {
	        // 左上、右上、右下、左下角的半径依次为r1、r2、r3、r4
	        // r缩写为1         相当于 [1, 1, 1, 1]
	        // r缩写为[1]       相当于 [1, 1, 1, 1]
	        // r缩写为[1, 2]    相当于 [1, 2, 1, 2]
	        // r缩写为[1, 2, 3] 相当于 [1, 2, 3, 2]
	        r: 0,
	
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var width = shape.width;
	        var height = shape.height;
	        if (!shape.r) {
	            ctx.rect(x, y, width, height);
	        } else {
	            roundRectHelper.buildPath(ctx, shape);
	        }
	        ctx.closePath();
	        return;
	    }
	});

/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 直线
	 * @module zrender/graphic/shape/Line
	 */
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'line',
	
	    shape: {
	        // Start point
	        x1: 0,
	        y1: 0,
	        // End point
	        x2: 0,
	        y2: 0,
	
	        percent: 1
	    },
	
	    style: {
	        stroke: '#000',
	        fill: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var x1 = shape.x1;
	        var y1 = shape.y1;
	        var x2 = shape.x2;
	        var y2 = shape.y2;
	        var percent = shape.percent;
	
	        if (percent === 0) {
	            return;
	        }
	
	        ctx.moveTo(x1, y1);
	
	        if (percent < 1) {
	            x2 = x1 * (1 - percent) + x2 * percent;
	            y2 = y1 * (1 - percent) + y2 * percent;
	        }
	        ctx.lineTo(x2, y2);
	    },
	
	    /**
	     * Get point at percent
	     * @param  {number} percent
	     * @return {Array.<number>}
	     */
	    pointAt: function pointAt(p) {
	        var shape = this.shape;
	        return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];
	    }
	});

/***/ },
/* 294 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 贝塞尔曲线
	 * @module zrender/shape/BezierCurve
	 */
	
	var curveTool = __webpack_require__(270);
	var quadraticSubdivide = curveTool.quadraticSubdivide;
	var cubicSubdivide = curveTool.cubicSubdivide;
	var quadraticAt = curveTool.quadraticAt;
	var cubicAt = curveTool.cubicAt;
	
	var out = [];
	module.exports = __webpack_require__(265).extend({
	
	    type: 'bezier-curve',
	
	    shape: {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        cpx1: 0,
	        cpy1: 0,
	        // cpx2: 0,
	        // cpy2: 0
	
	        // Curve show percent, for animating
	        percent: 1
	    },
	
	    style: {
	        stroke: '#000',
	        fill: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var x1 = shape.x1;
	        var y1 = shape.y1;
	        var x2 = shape.x2;
	        var y2 = shape.y2;
	        var cpx1 = shape.cpx1;
	        var cpy1 = shape.cpy1;
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        var percent = shape.percent;
	        if (percent === 0) {
	            return;
	        }
	
	        ctx.moveTo(x1, y1);
	
	        if (cpx2 == null || cpy2 == null) {
	            if (percent < 1) {
	                quadraticSubdivide(x1, cpx1, x2, percent, out);
	                cpx1 = out[1];
	                x2 = out[2];
	                quadraticSubdivide(y1, cpy1, y2, percent, out);
	                cpy1 = out[1];
	                y2 = out[2];
	            }
	
	            ctx.quadraticCurveTo(cpx1, cpy1, x2, y2);
	        } else {
	            if (percent < 1) {
	                cubicSubdivide(x1, cpx1, cpx2, x2, percent, out);
	                cpx1 = out[1];
	                cpx2 = out[2];
	                x2 = out[3];
	                cubicSubdivide(y1, cpy1, cpy2, y2, percent, out);
	                cpy1 = out[1];
	                cpy2 = out[2];
	                y2 = out[3];
	            }
	            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
	        }
	    },
	
	    /**
	     * Get point at percent
	     * @param  {number} percent
	     * @return {Array.<number>}
	     */
	    pointAt: function pointAt(p) {
	        var shape = this.shape;
	        var cpx2 = shape.cpx2;
	        var cpy2 = shape.cpy2;
	        if (cpx2 === null || cpy2 === null) {
	            return [quadraticAt(shape.x1, shape.cpx1, shape.x2, p), quadraticAt(shape.y1, shape.cpy1, shape.y2, p)];
	        } else {
	            return [cubicAt(shape.x1, shape.cpx1, shape.cpx1, shape.x2, p), cubicAt(shape.y1, shape.cpy1, shape.cpy1, shape.y2, p)];
	        }
	    }
	});

/***/ },
/* 295 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * 圆弧
	 * @module zrender/graphic/shape/Arc
	 */
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'arc',
	
	    shape: {
	
	        cx: 0,
	
	        cy: 0,
	
	        r: 0,
	
	        startAngle: 0,
	
	        endAngle: Math.PI * 2,
	
	        clockwise: true
	    },
	
	    style: {
	
	        stroke: '#000',
	
	        fill: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	
	        var x = shape.cx;
	        var y = shape.cy;
	        var r = Math.max(shape.r, 0);
	        var startAngle = shape.startAngle;
	        var endAngle = shape.endAngle;
	        var clockwise = shape.clockwise;
	
	        var unitX = Math.cos(startAngle);
	        var unitY = Math.sin(startAngle);
	
	        ctx.moveTo(unitX * r + x, unitY * r + y);
	        ctx.arc(x, y, r, startAngle, endAngle, !clockwise);
	    }
	});

/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var Gradient = __webpack_require__(225);
	
	/**
	 * x, y, x2, y2 are all percent from 0 to 1
	 * @param {number} [x=0]
	 * @param {number} [y=0]
	 * @param {number} [x2=1]
	 * @param {number} [y2=0]
	 * @param {Array.<Object>} colorStops
	 */
	var LinearGradient = function LinearGradient(x, y, x2, y2, colorStops) {
	    this.x = x == null ? 0 : x;
	
	    this.y = y == null ? 0 : y;
	
	    this.x2 = x2 == null ? 1 : x2;
	
	    this.y2 = y2 == null ? 0 : y2;
	
	    Gradient.call(this, colorStops);
	};
	
	LinearGradient.prototype = {
	
	    constructor: LinearGradient,
	
	    type: 'linear',
	
	    updateCanvasGradient: function updateCanvasGradient(shape, ctx) {
	        var rect = shape.getBoundingRect();
	        // var size =
	        var x = this.x * rect.width + rect.x;
	        var x2 = this.x2 * rect.width + rect.x;
	        var y = this.y * rect.height + rect.y;
	        var y2 = this.y2 * rect.height + rect.y;
	
	        var canvasGradient = ctx.createLinearGradient(x, y, x2, y2);
	
	        var colorStops = this.colorStops;
	        for (var i = 0; i < colorStops.length; i++) {
	            canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	        }
	
	        this.canvasGradient = canvasGradient;
	    }
	
	};
	
	zrUtil.inherits(LinearGradient, Gradient);
	
	module.exports = LinearGradient;

/***/ },
/* 297 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var Gradient = __webpack_require__(225);
	
	/**
	 * x, y, r are all percent from 0 to 1
	 * @param {number} [x=0.5]
	 * @param {number} [y=0.5]
	 * @param {number} [r=0.5]
	 * @param {Array.<Object>} [colorStops]
	 */
	var RadialGradient = function RadialGradient(x, y, r, colorStops) {
	    this.x = x == null ? 0.5 : x;
	
	    this.y = y == null ? 0.5 : y;
	
	    this.r = r == null ? 0.5 : r;
	
	    Gradient.call(this, colorStops);
	};
	
	RadialGradient.prototype = {
	
	    constructor: RadialGradient,
	
	    type: 'radial',
	
	    updateCanvasGradient: function updateCanvasGradient(shape, ctx) {
	        var rect = shape.getBoundingRect();
	
	        var width = rect.width;
	        var height = rect.height;
	        var min = Math.min(width, height);
	        // var max = Math.max(width, height);
	
	        var x = this.x * width + rect.x;
	        var y = this.y * height + rect.y;
	        var r = this.r * min;
	
	        var canvasGradient = ctx.createRadialGradient(x, y, 0, x, y, r);
	
	        var colorStops = this.colorStops;
	        for (var i = 0; i < colorStops.length; i++) {
	            canvasGradient.addColorStop(colorStops[i].offset, colorStops[i].color);
	        }
	
	        this.canvasGradient = canvasGradient;
	    }
	};
	
	zrUtil.inherits(RadialGradient, Gradient);
	
	module.exports = RadialGradient;

/***/ },
/* 298 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/*!
	 * ZRender, a high performance 2d drawing library.
	 *
	 * Copyright (c) 2013, Baidu Inc.
	 * All rights reserved.
	 *
	 * LICENSE
	 * https://github.com/ecomfe/zrender/blob/master/LICENSE.txt
	 */
	// Global defines
	
	var guid = __webpack_require__(252);
	var env = __webpack_require__(299);
	
	var Handler = __webpack_require__(300);
	var Storage = __webpack_require__(304);
	var Animation = __webpack_require__(305);
	
	var useVML = !env.canvasSupported;
	
	var painterCtors = {
	    canvas: __webpack_require__(306)
	};
	
	var instances = {}; // ZRender实例map索引
	
	var zrender = {};
	/**
	 * @type {string}
	 */
	zrender.version = '3.0.4';
	
	/**
	 * @param {HTMLElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 * @return {module:zrender/ZRender}
	 */
	zrender.init = function (dom, opts) {
	    var zr = new ZRender(guid(), dom, opts);
	    instances[zr.id] = zr;
	    return zr;
	};
	
	/**
	 * Dispose zrender instance
	 * @param {module:zrender/ZRender} zr
	 */
	zrender.dispose = function (zr) {
	    if (zr) {
	        zr.dispose();
	    } else {
	        for (var key in instances) {
	            instances[key].dispose();
	        }
	        instances = {};
	    }
	
	    return zrender;
	};
	
	/**
	 * 获取zrender实例
	 * @param {string} id ZRender对象索引
	 * @return {module:zrender/ZRender}
	 */
	zrender.getInstance = function (id) {
	    return instances[id];
	};
	
	zrender.registerPainter = function (name, Ctor) {
	    painterCtors[name] = Ctor;
	};
	
	function delInstance(id) {
	    delete instances[id];
	}
	
	/**
	 * @module zrender/ZRender
	 */
	/**
	 * @constructor
	 * @alias module:zrender/ZRender
	 * @param {string} id
	 * @param {HTMLDomElement} dom
	 * @param {Object} opts
	 * @param {string} [opts.renderer='canvas'] 'canvas' or 'svg'
	 * @param {number} [opts.devicePixelRatio]
	 */
	var ZRender = function ZRender(id, dom, opts) {
	
	    opts = opts || {};
	
	    /**
	     * @type {HTMLDomElement}
	     */
	    this.dom = dom;
	
	    /**
	     * @type {string}
	     */
	    this.id = id;
	
	    var self = this;
	    var storage = new Storage();
	
	    var rendererType = opts.renderer;
	    if (useVML) {
	        if (!painterCtors.vml) {
	            throw new Error('You need to require \'zrender/vml/vml\' to support IE8');
	        }
	        rendererType = 'vml';
	    } else if (!rendererType || !painterCtors[rendererType]) {
	        rendererType = 'canvas';
	    }
	    var painter = new painterCtors[rendererType](dom, storage, opts);
	
	    this.storage = storage;
	    this.painter = painter;
	    if (!env.node) {
	        this.handler = new Handler(painter.getViewportRoot(), storage, painter);
	    }
	
	    /**
	     * @type {module:zrender/animation/Animation}
	     */
	    this.animation = new Animation({
	        stage: {
	            update: function update() {
	                if (self._needsRefresh) {
	                    self.refreshImmediately();
	                }
	            }
	        }
	    });
	    this.animation.start();
	
	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._needsRefresh;
	
	    // 修改 storage.delFromMap, 每次删除元素之前删除动画
	    // FIXME 有点ugly
	    var oldDelFromMap = storage.delFromMap;
	    var oldAddToMap = storage.addToMap;
	
	    storage.delFromMap = function (elId) {
	        var el = storage.get(elId);
	
	        oldDelFromMap.call(storage, elId);
	
	        el && el.removeSelfFromZr(self);
	    };
	
	    storage.addToMap = function (el) {
	        oldAddToMap.call(storage, el);
	
	        el.addSelfToZr(self);
	    };
	};
	
	ZRender.prototype = {
	
	    constructor: ZRender,
	    /**
	     * 获取实例唯一标识
	     * @return {string}
	     */
	    getId: function getId() {
	        return this.id;
	    },
	
	    /**
	     * 添加元素
	     * @param  {string|module:zrender/Element} el
	     */
	    add: function add(el) {
	        this.storage.addRoot(el);
	        this._needsRefresh = true;
	    },
	
	    /**
	     * 删除元素
	     * @param  {string|module:zrender/Element} el
	     */
	    remove: function remove(el) {
	        this.storage.delRoot(el);
	        this._needsRefresh = true;
	    },
	
	    /**
	     * 修改指定zlevel的绘制配置项
	     *
	     * @param {string} zLevel
	     * @param {Object} config 配置对象
	     * @param {string} [config.clearColor=0] 每次清空画布的颜色
	     * @param {string} [config.motionBlur=false] 是否开启动态模糊
	     * @param {number} [config.lastFrameAlpha=0.7]
	     *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	    */
	    configLayer: function configLayer(zLevel, config) {
	        this.painter.configLayer(zLevel, config);
	        this._needsRefresh = true;
	    },
	
	    /**
	     * 视图更新
	     */
	    refreshImmediately: function refreshImmediately() {
	        // Clear needsRefresh ahead to avoid something wrong happens in refresh
	        // Or it will cause zrender refreshes again and again.
	        this._needsRefresh = false;
	        this.painter.refresh();
	        /**
	         * Avoid trigger zr.refresh in Element#beforeUpdate hook
	         */
	        this._needsRefresh = false;
	    },
	
	    /**
	     * 标记视图在浏览器下一帧需要绘制
	     */
	    refresh: function refresh() {
	        this._needsRefresh = true;
	    },
	
	    /**
	     * 调整视图大小
	     */
	    resize: function resize() {
	        this.painter.resize();
	        this.handler && this.handler.resize();
	    },
	
	    /**
	     * 停止所有动画
	     */
	    clearAnimation: function clearAnimation() {
	        this.animation.clear();
	    },
	
	    /**
	     * 获取视图宽度
	     */
	    getWidth: function getWidth() {
	        return this.painter.getWidth();
	    },
	
	    /**
	     * 获取视图高度
	     */
	    getHeight: function getHeight() {
	        return this.painter.getHeight();
	    },
	
	    /**
	     * 图像导出
	     * @param {string} type
	     * @param {string} [backgroundColor='#fff'] 背景色
	     * @return {string} 图片的Base64 url
	     */
	    toDataURL: function toDataURL(type, backgroundColor, args) {
	        return this.painter.toDataURL(type, backgroundColor, args);
	    },
	
	    /**
	     * 将常规shape转成image shape
	     * @param {module:zrender/graphic/Path} e
	     * @param {number} width
	     * @param {number} height
	     */
	    pathToImage: function pathToImage(e, width, height) {
	        var id = guid();
	        return this.painter.pathToImage(id, e, width, height);
	    },
	
	    /**
	     * 设置默认的cursor style
	     * @param {string} cursorStyle 例如 crosshair
	     */
	    setDefaultCursorStyle: function setDefaultCursorStyle(cursorStyle) {
	        this.handler.setDefaultCursorStyle(cursorStyle);
	    },
	
	    /**
	     * 事件绑定
	     *
	     * @param {string} eventName 事件名称
	     * @param {Function} eventHandler 响应函数
	     * @param {Object} [context] 响应函数
	     */
	    on: function on(eventName, eventHandler, context) {
	        this.handler && this.handler.on(eventName, eventHandler, context);
	    },
	
	    /**
	     * 事件解绑定，参数为空则解绑所有自定义事件
	     *
	     * @param {string} eventName 事件名称
	     * @param {Function} eventHandler 响应函数
	     */
	    off: function off(eventName, eventHandler) {
	        this.handler && this.handler.off(eventName, eventHandler);
	    },
	
	    /**
	     * 事件触发
	     *
	     * @param {string} eventName 事件名称，resize，hover，drag，etc
	     * @param {event=} event event dom事件对象
	     */
	    trigger: function trigger(eventName, event) {
	        this.handler && this.handler.trigger(eventName, event);
	    },
	
	    /**
	     * 清除当前ZRender下所有类图的数据和显示，clear后MVC和已绑定事件均还存在在，ZRender可用
	     */
	    clear: function clear() {
	        this.storage.delRoot();
	        this.painter.clear();
	    },
	
	    /**
	     * 释放当前ZR实例（删除包括dom，数据、显示和事件绑定），dispose后ZR不可用
	     */
	    dispose: function dispose() {
	        this.animation.stop();
	
	        this.clear();
	        this.storage.dispose();
	        this.painter.dispose();
	        this.handler && this.handler.dispose();
	
	        this.animation = this.storage = this.painter = this.handler = null;
	
	        delInstance(this.id);
	    }
	};
	
	module.exports = zrender;

/***/ },
/* 299 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * echarts设备环境识别
	 *
	 * @desc echarts基于Canvas，纯Javascript图表库，提供直观，生动，可交互，可个性化定制的数据统计图表。
	 * @author firede[firede@firede.us]
	 * @desc thanks zepto.
	 */
	
	var env = {};
	if (typeof navigator === 'undefined') {
	    // In node
	    env = {
	        browser: {},
	        os: {},
	        node: true,
	        // Assume canvas is supported
	        canvasSupported: true
	    };
	} else {
	    env = detect(navigator.userAgent);
	}
	
	module.exports = env;
	
	// Zepto.js
	// (c) 2010-2013 Thomas Fuchs
	// Zepto.js may be freely distributed under the MIT license.
	
	function detect(ua) {
	    var os = {};
	    var browser = {};
	    var webkit = ua.match(/Web[kK]it[\/]{0,1}([\d.]+)/);
	    var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
	    var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
	    var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
	    var iphone = !ipad && ua.match(/(iPhone\sOS)\s([\d_]+)/);
	    var webos = ua.match(/(webOS|hpwOS)[\s\/]([\d.]+)/);
	    var touchpad = webos && ua.match(/TouchPad/);
	    var kindle = ua.match(/Kindle\/([\d.]+)/);
	    var silk = ua.match(/Silk\/([\d._]+)/);
	    var blackberry = ua.match(/(BlackBerry).*Version\/([\d.]+)/);
	    var bb10 = ua.match(/(BB10).*Version\/([\d.]+)/);
	    var rimtabletos = ua.match(/(RIM\sTablet\sOS)\s([\d.]+)/);
	    var playbook = ua.match(/PlayBook/);
	    var chrome = ua.match(/Chrome\/([\d.]+)/) || ua.match(/CriOS\/([\d.]+)/);
	    var firefox = ua.match(/Firefox\/([\d.]+)/);
	    var safari = webkit && ua.match(/Mobile\//) && !chrome;
	    var webview = ua.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/) && !chrome;
	    var ie = ua.match(/MSIE\s([\d.]+)/)
	    // IE 11 Trident/7.0; rv:11.0
	     || ua.match(/Trident\/.+?rv:(([\d.]+))/);
	    var edge = ua.match(/Edge\/([\d.]+)/); // IE 12 and 12+
	
	    // Todo: clean this up with a better OS/browser seperation:
	    // - discern (more) between multiple browsers on android
	    // - decide if kindle fire in silk mode is android or not
	    // - Firefox on Android doesn't specify the Android version
	    // - possibly devide in os, device and browser hashes
	
	    if (browser.webkit = !!webkit) browser.version = webkit[1];
	
	    if (android) os.android = true, os.version = android[2];
	    if (iphone && !ipod) os.ios = os.iphone = true, os.version = iphone[2].replace(/_/g, '.');
	    if (ipad) os.ios = os.ipad = true, os.version = ipad[2].replace(/_/g, '.');
	    if (ipod) os.ios = os.ipod = true, os.version = ipod[3] ? ipod[3].replace(/_/g, '.') : null;
	    if (webos) os.webos = true, os.version = webos[2];
	    if (touchpad) os.touchpad = true;
	    if (blackberry) os.blackberry = true, os.version = blackberry[2];
	    if (bb10) os.bb10 = true, os.version = bb10[2];
	    if (rimtabletos) os.rimtabletos = true, os.version = rimtabletos[2];
	    if (playbook) browser.playbook = true;
	    if (kindle) os.kindle = true, os.version = kindle[1];
	    if (silk) browser.silk = true, browser.version = silk[1];
	    if (!silk && os.android && ua.match(/Kindle Fire/)) browser.silk = true;
	    if (chrome) browser.chrome = true, browser.version = chrome[1];
	    if (firefox) browser.firefox = true, browser.version = firefox[1];
	    if (ie) browser.ie = true, browser.version = ie[1];
	    if (safari && (ua.match(/Safari/) || !!os.ios)) browser.safari = true;
	    if (webview) browser.webview = true;
	    if (ie) browser.ie = true, browser.version = ie[1];
	    if (edge) browser.edge = true, browser.version = edge[1];
	
	    os.tablet = !!(ipad || playbook || android && !ua.match(/Mobile/) || firefox && ua.match(/Tablet/) || ie && !ua.match(/Phone/) && ua.match(/Touch/));
	    os.phone = !!(!os.tablet && !os.ipod && (android || iphone || webos || blackberry || bb10 || chrome && ua.match(/Android/) || chrome && ua.match(/CriOS\/([\d.]+)/) || firefox && ua.match(/Mobile/) || ie && ua.match(/Touch/)));
	
	    return {
	        browser: browser,
	        os: os,
	        node: false,
	        // 原生canvas支持，改极端点了
	        // canvasSupported : !(browser.ie && parseFloat(browser.version) < 9)
	        canvasSupported: document.createElement('canvas').getContext ? true : false,
	        // @see <http://stackoverflow.com/questions/4817029/whats-the-best-way-to-detect-a-touch-screen-device-using-javascript>
	        // works on most browsers
	        // IE10/11 does not support touch event, and MS Edge supports them but not by
	        // default, so we dont check navigator.maxTouchPoints for them here.
	        touchEventsSupported: 'ontouchstart' in window && !browser.ie && !browser.edge,
	        // <http://caniuse.com/#search=pointer%20event>.
	        pointerEventsSupported: 'onpointerdown' in window
	        // Firefox supports pointer but not by default,
	        // only MS browsers are reliable on pointer events currently.
	         && (browser.edge || browser.ie && browser.version >= 10)
	    };
	}

/***/ },
/* 300 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Handler控制模块
	 * @module zrender/Handler
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (shenyi.914@gmail.com)
	 */
	
	var env = __webpack_require__(299);
	var eventTool = __webpack_require__(301);
	var util = __webpack_require__(224);
	var Draggable = __webpack_require__(302);
	var GestureMgr = __webpack_require__(303);
	
	var Eventful = __webpack_require__(253);
	
	var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'mouseout'];
	!usePointerEvent() && mouseHandlerNames.push('mouseup', 'mousedown', 'mousemove');
	
	var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];
	
	var pointerHandlerNames = ['pointerdown', 'pointerup', 'pointermove'];
	
	var TOUCH_CLICK_DELAY = 300;
	
	// touch指尖错觉的尝试偏移量配置
	// var MOBILE_TOUCH_OFFSETS = [
	//     { x: 10 },
	//     { x: -20 },
	//     { x: 10, y: 10 },
	//     { y: -20 }
	// ];
	
	var addEventListener = eventTool.addEventListener;
	var removeEventListener = eventTool.removeEventListener;
	var normalizeEvent = eventTool.normalizeEvent;
	
	function makeEventPacket(eveType, target, event) {
	    return {
	        type: eveType,
	        event: event,
	        target: target,
	        cancelBubble: false,
	        offsetX: event.zrX,
	        offsetY: event.zrY,
	        gestureEvent: event.gestureEvent,
	        pinchX: event.pinchX,
	        pinchY: event.pinchY,
	        pinchScale: event.pinchScale,
	        wheelDelta: event.zrDelta
	    };
	}
	
	var domHandlers = {
	    /**
	     * Mouse move handler
	     * @inner
	     * @param {Event} event
	     */
	    mousemove: function mousemove(event) {
	        event = normalizeEvent(this.root, event);
	
	        var x = event.zrX;
	        var y = event.zrY;
	
	        var hovered = this.findHover(x, y, null);
	        var lastHovered = this._hovered;
	
	        this._hovered = hovered;
	
	        this.root.style.cursor = hovered ? hovered.cursor : this._defaultCursorStyle;
	        // Mouse out on previous hovered element
	        if (lastHovered && hovered !== lastHovered && lastHovered.__zr) {
	            this._dispatchProxy(lastHovered, 'mouseout', event);
	        }
	
	        // Mouse moving on one element
	        this._dispatchProxy(hovered, 'mousemove', event);
	
	        // Mouse over on a new element
	        if (hovered && hovered !== lastHovered) {
	            this._dispatchProxy(hovered, 'mouseover', event);
	        }
	    },
	
	    /**
	     * Mouse out handler
	     * @inner
	     * @param {Event} event
	     */
	    mouseout: function mouseout(event) {
	        event = normalizeEvent(this.root, event);
	
	        var element = event.toElement || event.relatedTarget;
	        if (element != this.root) {
	            while (element && element.nodeType != 9) {
	                // 忽略包含在root中的dom引起的mouseOut
	                if (element === this.root) {
	                    return;
	                }
	
	                element = element.parentNode;
	            }
	        }
	
	        this._dispatchProxy(this._hovered, 'mouseout', event);
	
	        this.trigger('globalout', {
	            event: event
	        });
	    },
	
	    /**
	     * Touch开始响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchstart: function touchstart(event) {
	        // FIXME
	        // 移动端可能需要default行为，例如静态图表时。
	        // eventTool.stop(event);// 阻止浏览器默认事件，重要
	        event = normalizeEvent(this.root, event);
	
	        this._lastTouchMoment = new Date();
	
	        processGesture(this, event, 'start');
	
	        // 平板补充一次findHover
	        // this._mobileFindFixed(event);
	        // Trigger mousemove and mousedown
	        domHandlers.mousemove.call(this, event);
	
	        domHandlers.mousedown.call(this, event);
	
	        setTouchTimer(this);
	    },
	
	    /**
	     * Touch移动响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchmove: function touchmove(event) {
	        // eventTool.stop(event);// 阻止浏览器默认事件，重要
	        event = normalizeEvent(this.root, event);
	
	        processGesture(this, event, 'change');
	
	        // Mouse move should always be triggered no matter whether
	        // there is gestrue event, because mouse move and pinch may
	        // be used at the same time.
	        domHandlers.mousemove.call(this, event);
	
	        setTouchTimer(this);
	    },
	
	    /**
	     * Touch结束响应函数
	     * @inner
	     * @param {Event} event
	     */
	    touchend: function touchend(event) {
	        // eventTool.stop(event);// 阻止浏览器默认事件，重要
	        event = normalizeEvent(this.root, event);
	
	        processGesture(this, event, 'end');
	
	        domHandlers.mouseup.call(this, event);
	
	        // click event should always be triggered no matter whether
	        // there is gestrue event. System click can not be prevented.
	        if (+new Date() - this._lastTouchMoment < TOUCH_CLICK_DELAY) {
	            // this._mobileFindFixed(event);
	            domHandlers.click.call(this, event);
	        }
	
	        setTouchTimer(this);
	    }
	};
	
	// Common handlers
	util.each(['click', 'mousedown', 'mouseup', 'mousewheel', 'dblclick'], function (name) {
	    domHandlers[name] = function (event) {
	        event = normalizeEvent(this.root, event);
	        // Find hover again to avoid click event is dispatched manually. Or click is triggered without mouseover
	        var hovered = this.findHover(event.zrX, event.zrY, null);
	        this._dispatchProxy(hovered, name, event);
	    };
	});
	
	// Pointer event handlers
	// util.each(['pointerdown', 'pointermove', 'pointerup'], function (name) {
	//     domHandlers[name] = function (event) {
	//         var mouseName = name.replace('pointer', 'mouse');
	//         domHandlers[mouseName].call(this, event);
	//     };
	// });
	
	function processGesture(zrHandler, event, stage) {
	    var gestureMgr = zrHandler._gestureMgr;
	
	    stage === 'start' && gestureMgr.clear();
	
	    var gestureInfo = gestureMgr.recognize(event, zrHandler.findHover(event.zrX, event.zrY, null));
	
	    stage === 'end' && gestureMgr.clear();
	
	    if (gestureInfo) {
	        // eventTool.stop(event);
	        var type = gestureInfo.type;
	        event.gestureEvent = type;
	
	        zrHandler._dispatchProxy(gestureInfo.target, type, gestureInfo.event);
	    }
	}
	
	/**
	 * 为控制类实例初始化dom 事件处理函数
	 *
	 * @inner
	 * @param {module:zrender/Handler} instance 控制类实例
	 */
	function initDomHandler(instance) {
	    var handlerNames = touchHandlerNames.concat(pointerHandlerNames);
	    for (var i = 0; i < handlerNames.length; i++) {
	        var name = handlerNames[i];
	        instance._handlers[name] = util.bind(domHandlers[name], instance);
	    }
	
	    for (var i = 0; i < mouseHandlerNames.length; i++) {
	        var name = mouseHandlerNames[i];
	        instance._handlers[name] = makeMouseHandler(domHandlers[name], instance);
	    }
	
	    function makeMouseHandler(fn, instance) {
	        return function () {
	            if (instance._touching) {
	                return;
	            }
	            return fn.apply(instance, arguments);
	        };
	    }
	}
	
	/**
	 * @alias module:zrender/Handler
	 * @constructor
	 * @extends module:zrender/mixin/Eventful
	 * @param {HTMLElement} root Main HTML element for painting.
	 * @param {module:zrender/Storage} storage Storage instance.
	 * @param {module:zrender/Painter} painter Painter instance.
	 */
	var Handler = function Handler(root, storage, painter) {
	    Eventful.call(this);
	
	    this.root = root;
	    this.storage = storage;
	    this.painter = painter;
	
	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._hovered;
	
	    /**
	     * @private
	     * @type {Date}
	     */
	    this._lastTouchMoment;
	
	    /**
	     * @private
	     * @type {number}
	     */
	    this._lastX;
	
	    /**
	     * @private
	     * @type {number}
	     */
	    this._lastY;
	
	    /**
	     * @private
	     * @type {string}
	     */
	    this._defaultCursorStyle = 'default';
	
	    /**
	     * @private
	     * @type {module:zrender/core/GestureMgr}
	     */
	    this._gestureMgr = new GestureMgr();
	
	    /**
	     * @private
	     * @type {Array.<Function>}
	     */
	    this._handlers = [];
	
	    /**
	     * @private
	     * @type {boolean}
	     */
	    this._touching = false;
	
	    /**
	     * @private
	     * @type {number}
	     */
	    this._touchTimer;
	
	    initDomHandler(this);
	
	    if (usePointerEvent()) {
	        mountHandlers(pointerHandlerNames, this);
	    } else if (useTouchEvent()) {
	        mountHandlers(touchHandlerNames, this);
	
	        // Handler of 'mouseout' event is needed in touch mode, which will be mounted below.
	        // addEventListener(root, 'mouseout', this._mouseoutHandler);
	    }
	
	    // Considering some devices that both enable touch and mouse event (like MS Surface
	    // and lenovo X240, @see #2350), we make mouse event be always listened, otherwise
	    // mouse event can not be handle in those devices.
	    mountHandlers(mouseHandlerNames, this);
	
	    Draggable.call(this);
	
	    function mountHandlers(handlerNames, instance) {
	        util.each(handlerNames, function (name) {
	            addEventListener(root, eventNameFix(name), instance._handlers[name]);
	        }, instance);
	    }
	};
	
	Handler.prototype = {
	
	    constructor: Handler,
	
	    /**
	     * Resize
	     */
	    resize: function resize(event) {
	        this._hovered = null;
	    },
	
	    /**
	     * Dispatch event
	     * @param {string} eventName
	     * @param {event=} eventArgs
	     */
	    dispatch: function dispatch(eventName, eventArgs) {
	        var handler = this._handlers[eventName];
	        handler && handler.call(this, eventArgs);
	    },
	
	    /**
	     * Dispose
	     */
	    dispose: function dispose() {
	        var root = this.root;
	
	        var handlerNames = mouseHandlerNames.concat(touchHandlerNames);
	
	        for (var i = 0; i < handlerNames.length; i++) {
	            var name = handlerNames[i];
	            removeEventListener(root, eventNameFix(name), this._handlers[name]);
	        }
	
	        this.root = this.storage = this.painter = null;
	    },
	
	    /**
	     * 设置默认的cursor style
	     * @param {string} cursorStyle 例如 crosshair
	     */
	    setDefaultCursorStyle: function setDefaultCursorStyle(cursorStyle) {
	        this._defaultCursorStyle = cursorStyle;
	    },
	
	    /**
	     * 事件分发代理
	     *
	     * @private
	     * @param {Object} targetEl 目标图形元素
	     * @param {string} eventName 事件名称
	     * @param {Object} event 事件对象
	     */
	    _dispatchProxy: function _dispatchProxy(targetEl, eventName, event) {
	        var eventHandler = 'on' + eventName;
	        var eventPacket = makeEventPacket(eventName, targetEl, event);
	
	        var el = targetEl;
	
	        while (el) {
	            el[eventHandler] && (eventPacket.cancelBubble = el[eventHandler].call(el, eventPacket));
	
	            el.trigger(eventName, eventPacket);
	
	            el = el.parent;
	
	            if (eventPacket.cancelBubble) {
	                break;
	            }
	        }
	
	        if (!eventPacket.cancelBubble) {
	            // 冒泡到顶级 zrender 对象
	            this.trigger(eventName, eventPacket);
	            // 分发事件到用户自定义层
	            // 用户有可能在全局 click 事件中 dispose，所以需要判断下 painter 是否存在
	            this.painter && this.painter.eachOtherLayer(function (layer) {
	                if (typeof layer[eventHandler] == 'function') {
	                    layer[eventHandler].call(layer, eventPacket);
	                }
	                if (layer.trigger) {
	                    layer.trigger(eventName, eventPacket);
	                }
	            });
	        }
	    },
	
	    /**
	     * @private
	     * @param {number} x
	     * @param {number} y
	     * @param {module:zrender/graphic/Displayable} exclude
	     * @method
	     */
	    findHover: function findHover(x, y, exclude) {
	        var list = this.storage.getDisplayList();
	        for (var i = list.length - 1; i >= 0; i--) {
	            if (!list[i].silent && list[i] !== exclude
	            // getDisplayList may include ignored item in VML mode
	             && !list[i].ignore && isHover(list[i], x, y)) {
	                return list[i];
	            }
	        }
	    }
	};
	
	function isHover(displayable, x, y) {
	    if (displayable[displayable.rectHover ? 'rectContain' : 'contain'](x, y)) {
	        var p = displayable.parent;
	        while (p) {
	            if (p.clipPath && !p.clipPath.contain(x, y)) {
	                // Clipped by parents
	                return false;
	            }
	            p = p.parent;
	        }
	        return true;
	    }
	
	    return false;
	}
	
	/**
	 * Prevent mouse event from being dispatched after Touch Events action
	 * @see <https://github.com/deltakosh/handjs/blob/master/src/hand.base.js>
	 * 1. Mobile browsers dispatch mouse events 300ms after touchend.
	 * 2. Chrome for Android dispatch mousedown for long-touch about 650ms
	 * Result: Blocking Mouse Events for 700ms.
	 */
	function setTouchTimer(instance) {
	    instance._touching = true;
	    clearTimeout(instance._touchTimer);
	    instance._touchTimer = setTimeout(function () {
	        instance._touching = false;
	    }, 700);
	}
	
	/**
	 * Althought MS Surface support screen touch, IE10/11 do not support
	 * touch event and MS Edge supported them but not by default (but chrome
	 * and firefox do). Thus we use Pointer event on MS browsers to handle touch.
	 */
	function usePointerEvent() {
	    // TODO
	    // pointermove event dont trigger when using finger.
	    // We may figger it out latter.
	    return false;
	    // return env.pointerEventsSupported
	    // In no-touch device we dont use pointer evnets but just
	    // use mouse event for avoiding problems.
	    // && window.navigator.maxTouchPoints;
	}
	
	function useTouchEvent() {
	    return env.touchEventsSupported;
	}
	
	function eventNameFix(name) {
	    return name === 'mousewheel' && env.browser.firefox ? 'DOMMouseScroll' : name;
	}
	
	util.mixin(Handler, Eventful);
	util.mixin(Handler, Draggable);
	
	module.exports = Handler;

/***/ },
/* 301 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 事件辅助类
	 * @module zrender/core/event
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 */
	
	var Eventful = __webpack_require__(253);
	
	var isDomLevel2 = typeof window !== 'undefined' && !!window.addEventListener;
	
	function getBoundingClientRect(el) {
	    // BlackBerry 5, iOS 3 (original iPhone) don't have getBoundingRect
	    return el.getBoundingClientRect ? el.getBoundingClientRect() : { left: 0, top: 0 };
	}
	/**
	 * 如果存在第三方嵌入的一些dom触发的事件，或touch事件，需要转换一下事件坐标
	 */
	function normalizeEvent(el, e) {
	
	    e = e || window.event;
	
	    if (e.zrX != null) {
	        return e;
	    }
	
	    var eventType = e.type;
	    var isTouch = eventType && eventType.indexOf('touch') >= 0;
	
	    if (!isTouch) {
	        var box = getBoundingClientRect(el);
	        e.zrX = e.clientX - box.left;
	        e.zrY = e.clientY - box.top;
	        e.zrDelta = e.wheelDelta ? e.wheelDelta / 120 : -(e.detail || 0) / 3;
	    } else {
	        var touch = eventType != 'touchend' ? e.targetTouches[0] : e.changedTouches[0];
	        if (touch) {
	            var rBounding = getBoundingClientRect(el);
	            // touch事件坐标是全屏的~
	            e.zrX = touch.clientX - rBounding.left;
	            e.zrY = touch.clientY - rBounding.top;
	        }
	    }
	
	    return e;
	}
	
	function addEventListener(el, name, handler) {
	    if (isDomLevel2) {
	        el.addEventListener(name, handler);
	    } else {
	        el.attachEvent('on' + name, handler);
	    }
	}
	
	function removeEventListener(el, name, handler) {
	    if (isDomLevel2) {
	        el.removeEventListener(name, handler);
	    } else {
	        el.detachEvent('on' + name, handler);
	    }
	}
	
	/**
	 * 停止冒泡和阻止默认行为
	 * @memberOf module:zrender/core/event
	 * @method
	 * @param {Event} e : event对象
	 */
	var stop = isDomLevel2 ? function (e) {
	    e.preventDefault();
	    e.stopPropagation();
	    e.cancelBubble = true;
	} : function (e) {
	    e.returnValue = false;
	    e.cancelBubble = true;
	};
	
	module.exports = {
	    normalizeEvent: normalizeEvent,
	    addEventListener: addEventListener,
	    removeEventListener: removeEventListener,
	
	    stop: stop,
	    // 做向上兼容
	    Dispatcher: Eventful
	};

/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict';
	
	// TODO Draggable for group
	// FIXME Draggable on element which has parent rotation or scale
	
	function Draggable() {
	
	    this.on('mousedown', this._dragStart, this);
	    this.on('mousemove', this._drag, this);
	    this.on('mouseup', this._dragEnd, this);
	    this.on('globalout', this._dragEnd, this);
	    // this._dropTarget = null;
	    // this._draggingTarget = null;
	
	    // this._x = 0;
	    // this._y = 0;
	}
	
	Draggable.prototype = {
	
	    constructor: Draggable,
	
	    _dragStart: function _dragStart(e) {
	        var draggingTarget = e.target;
	        if (draggingTarget && draggingTarget.draggable) {
	            this._draggingTarget = draggingTarget;
	            draggingTarget.dragging = true;
	            this._x = e.offsetX;
	            this._y = e.offsetY;
	
	            this._dispatchProxy(draggingTarget, 'dragstart', e.event);
	        }
	    },
	
	    _drag: function _drag(e) {
	        var draggingTarget = this._draggingTarget;
	        if (draggingTarget) {
	
	            var x = e.offsetX;
	            var y = e.offsetY;
	
	            var dx = x - this._x;
	            var dy = y - this._y;
	            this._x = x;
	            this._y = y;
	
	            draggingTarget.drift(dx, dy, e);
	            this._dispatchProxy(draggingTarget, 'drag', e.event);
	
	            var dropTarget = this.findHover(x, y, draggingTarget);
	            var lastDropTarget = this._dropTarget;
	            this._dropTarget = dropTarget;
	
	            if (draggingTarget !== dropTarget) {
	                if (lastDropTarget && dropTarget !== lastDropTarget) {
	                    this._dispatchProxy(lastDropTarget, 'dragleave', e.event);
	                }
	                if (dropTarget && dropTarget !== lastDropTarget) {
	                    this._dispatchProxy(dropTarget, 'dragenter', e.event);
	                }
	            }
	        }
	    },
	
	    _dragEnd: function _dragEnd(e) {
	        var draggingTarget = this._draggingTarget;
	
	        if (draggingTarget) {
	            draggingTarget.dragging = false;
	        }
	
	        this._dispatchProxy(draggingTarget, 'dragend', e.event);
	
	        if (this._dropTarget) {
	            this._dispatchProxy(this._dropTarget, 'drop', e.event);
	        }
	
	        this._draggingTarget = null;
	        this._dropTarget = null;
	    }
	
	};
	
	module.exports = Draggable;

/***/ },
/* 303 */
/***/ function(module, exports) {

	'use strict';
	/**
	 * Only implements needed gestures for mobile.
	 */
	
	var GestureMgr = function GestureMgr() {
	
	    /**
	     * @private
	     * @type {Array.<Object>}
	     */
	    this._track = [];
	};
	
	GestureMgr.prototype = {
	
	    constructor: GestureMgr,
	
	    recognize: function recognize(event, target) {
	        this._doTrack(event, target);
	        return this._recognize(event);
	    },
	
	    clear: function clear() {
	        this._track.length = 0;
	        return this;
	    },
	
	    _doTrack: function _doTrack(event, target) {
	        var touches = event.touches;
	
	        if (!touches) {
	            return;
	        }
	
	        var trackItem = {
	            points: [],
	            touches: [],
	            target: target,
	            event: event
	        };
	
	        for (var i = 0, len = touches.length; i < len; i++) {
	            var touch = touches[i];
	            trackItem.points.push([touch.clientX, touch.clientY]);
	            trackItem.touches.push(touch);
	        }
	
	        this._track.push(trackItem);
	    },
	
	    _recognize: function _recognize(event) {
	        for (var eventName in recognizers) {
	            if (recognizers.hasOwnProperty(eventName)) {
	                var gestureInfo = recognizers[eventName](this._track, event);
	                if (gestureInfo) {
	                    return gestureInfo;
	                }
	            }
	        }
	    }
	};
	
	function dist(pointPair) {
	    var dx = pointPair[1][0] - pointPair[0][0];
	    var dy = pointPair[1][1] - pointPair[0][1];
	
	    return Math.sqrt(dx * dx + dy * dy);
	}
	
	function center(pointPair) {
	    return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];
	}
	
	var recognizers = {
	
	    pinch: function pinch(track, event) {
	        var trackLen = track.length;
	
	        if (!trackLen) {
	            return;
	        }
	
	        var pinchEnd = (track[trackLen - 1] || {}).points;
	        var pinchPre = (track[trackLen - 2] || {}).points || pinchEnd;
	
	        if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {
	            var pinchScale = dist(pinchEnd) / dist(pinchPre);
	            !isFinite(pinchScale) && (pinchScale = 1);
	
	            event.pinchScale = pinchScale;
	
	            var pinchCenter = center(pinchEnd);
	            event.pinchX = pinchCenter[0];
	            event.pinchY = pinchCenter[1];
	
	            return {
	                type: 'pinch',
	                target: track[0].target,
	                event: event
	            };
	        }
	    }
	
	    // Only pinch currently.
	};
	
	module.exports = GestureMgr;

/***/ },
/* 304 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Storage内容仓库模块
	 * @module zrender/Storage
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 * @author errorrik (errorrik@gmail.com)
	 * @author pissang (https://github.com/pissang/)
	 */
	
	var util = __webpack_require__(224);
	
	var Group = __webpack_require__(250);
	
	function shapeCompareFunc(a, b) {
	    if (a.zlevel === b.zlevel) {
	        if (a.z === b.z) {
	            if (a.z2 === b.z2) {
	                return a.__renderidx - b.__renderidx;
	            }
	            return a.z2 - b.z2;
	        }
	        return a.z - b.z;
	    }
	    return a.zlevel - b.zlevel;
	}
	/**
	 * 内容仓库 (M)
	 * @alias module:zrender/Storage
	 * @constructor
	 */
	var Storage = function Storage() {
	    // 所有常规形状，id索引的map
	    this._elements = {};
	
	    this._roots = [];
	
	    this._displayList = [];
	
	    this._displayListLen = 0;
	};
	
	Storage.prototype = {
	
	    constructor: Storage,
	
	    /**
	     * 返回所有图形的绘制队列
	     * @param {boolean} [update=false] 是否在返回前更新该数组
	     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组, 在 update 为 true 的时候有效
	     *
	     * 详见{@link module:zrender/graphic/Displayable.prototype.updateDisplayList}
	     * @return {Array.<module:zrender/graphic/Displayable>}
	     */
	    getDisplayList: function getDisplayList(update, includeIgnore) {
	        includeIgnore = includeIgnore || false;
	        if (update) {
	            this.updateDisplayList(includeIgnore);
	        }
	        return this._displayList;
	    },
	
	    /**
	     * 更新图形的绘制队列。
	     * 每次绘制前都会调用，该方法会先深度优先遍历整个树，更新所有Group和Shape的变换并且把所有可见的Shape保存到数组中，
	     * 最后根据绘制的优先级（zlevel > z > 插入顺序）排序得到绘制队列
	     * @param {boolean} [includeIgnore=false] 是否包含 ignore 的数组
	     */
	    updateDisplayList: function updateDisplayList(includeIgnore) {
	        this._displayListLen = 0;
	        var roots = this._roots;
	        var displayList = this._displayList;
	        for (var i = 0, len = roots.length; i < len; i++) {
	            this._updateAndAddDisplayable(roots[i], null, includeIgnore);
	        }
	        displayList.length = this._displayListLen;
	
	        for (var i = 0, len = displayList.length; i < len; i++) {
	            displayList[i].__renderidx = i;
	        }
	
	        displayList.sort(shapeCompareFunc);
	    },
	
	    _updateAndAddDisplayable: function _updateAndAddDisplayable(el, clipPaths, includeIgnore) {
	
	        if (el.ignore && !includeIgnore) {
	            return;
	        }
	
	        el.beforeUpdate();
	
	        el.update();
	
	        el.afterUpdate();
	
	        var clipPath = el.clipPath;
	        if (clipPath) {
	            // clipPath 的变换是基于 group 的变换
	            clipPath.parent = el;
	            clipPath.updateTransform();
	
	            // FIXME 效率影响
	            if (clipPaths) {
	                clipPaths = clipPaths.slice();
	                clipPaths.push(clipPath);
	            } else {
	                clipPaths = [clipPath];
	            }
	        }
	
	        if (el.type == 'group') {
	            var children = el._children;
	
	            for (var i = 0; i < children.length; i++) {
	                var child = children[i];
	
	                // Force to mark as dirty if group is dirty
	                // FIXME __dirtyPath ?
	                child.__dirty = el.__dirty || child.__dirty;
	
	                this._updateAndAddDisplayable(child, clipPaths, includeIgnore);
	            }
	
	            // Mark group clean here
	            el.__dirty = false;
	        } else {
	            el.__clipPaths = clipPaths;
	
	            this._displayList[this._displayListLen++] = el;
	        }
	    },
	
	    /**
	     * 添加图形(Shape)或者组(Group)到根节点
	     * @param {module:zrender/Element} el
	     */
	    addRoot: function addRoot(el) {
	        // Element has been added
	        if (this._elements[el.id]) {
	            return;
	        }
	
	        if (el instanceof Group) {
	            el.addChildrenToStorage(this);
	        }
	
	        this.addToMap(el);
	        this._roots.push(el);
	    },
	
	    /**
	     * 删除指定的图形(Shape)或者组(Group)
	     * @param {string|Array.<string>} [elId] 如果为空清空整个Storage
	     */
	    delRoot: function delRoot(elId) {
	        if (elId == null) {
	            // 不指定elId清空
	            for (var i = 0; i < this._roots.length; i++) {
	                var root = this._roots[i];
	                if (root instanceof Group) {
	                    root.delChildrenFromStorage(this);
	                }
	            }
	
	            this._elements = {};
	            this._roots = [];
	            this._displayList = [];
	            this._displayListLen = 0;
	
	            return;
	        }
	
	        if (elId instanceof Array) {
	            for (var i = 0, l = elId.length; i < l; i++) {
	                this.delRoot(elId[i]);
	            }
	            return;
	        }
	
	        var el;
	        if (typeof elId == 'string') {
	            el = this._elements[elId];
	        } else {
	            el = elId;
	        }
	
	        var idx = util.indexOf(this._roots, el);
	        if (idx >= 0) {
	            this.delFromMap(el.id);
	            this._roots.splice(idx, 1);
	            if (el instanceof Group) {
	                el.delChildrenFromStorage(this);
	            }
	        }
	    },
	
	    addToMap: function addToMap(el) {
	        if (el instanceof Group) {
	            el.__storage = this;
	        }
	        el.dirty();
	
	        this._elements[el.id] = el;
	
	        return this;
	    },
	
	    get: function get(elId) {
	        return this._elements[elId];
	    },
	
	    delFromMap: function delFromMap(elId) {
	        var elements = this._elements;
	        var el = elements[elId];
	        if (el) {
	            delete elements[elId];
	            if (el instanceof Group) {
	                el.__storage = null;
	            }
	        }
	
	        return this;
	    },
	
	    /**
	     * 清空并且释放Storage
	     */
	    dispose: function dispose() {
	        this._elements = this._renderList = this._roots = null;
	    }
	};
	
	module.exports = Storage;

/***/ },
/* 305 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * 动画主类, 调度和管理所有动画控制器
	 *
	 * @module zrender/animation/Animation
	 * @author pissang(https://github.com/pissang)
	 */
	// TODO Additive animation
	// http://iosoteric.com/additive-animations-animatewithduration-in-ios-8/
	// https://developer.apple.com/videos/wwdc2014/#236
	
	var util = __webpack_require__(224);
	var Dispatcher = __webpack_require__(301).Dispatcher;
	
	var requestAnimationFrame = typeof window !== 'undefined' && (window.requestAnimationFrame || window.msRequestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame) || function (func) {
	    setTimeout(func, 16);
	};
	
	var Animator = __webpack_require__(256);
	/**
	 * @typedef {Object} IZRenderStage
	 * @property {Function} update
	 */
	
	/**
	 * @alias module:zrender/animation/Animation
	 * @constructor
	 * @param {Object} [options]
	 * @param {Function} [options.onframe]
	 * @param {IZRenderStage} [options.stage]
	 * @example
	 *     var animation = new Animation();
	 *     var obj = {
	 *         x: 100,
	 *         y: 100
	 *     };
	 *     animation.animate(node.position)
	 *         .when(1000, {
	 *             x: 500,
	 *             y: 500
	 *         })
	 *         .when(2000, {
	 *             x: 100,
	 *             y: 100
	 *         })
	 *         .start('spline');
	 */
	var Animation = function Animation(options) {
	
	    options = options || {};
	
	    this.stage = options.stage || {};
	
	    this.onframe = options.onframe || function () {};
	
	    // private properties
	    this._clips = [];
	
	    this._running = false;
	
	    this._time = 0;
	
	    Dispatcher.call(this);
	};
	
	Animation.prototype = {
	
	    constructor: Animation,
	    /**
	     * 添加 clip
	     * @param {module:zrender/animation/Clip} clip
	     */
	    addClip: function addClip(clip) {
	        this._clips.push(clip);
	    },
	    /**
	     * 添加 animator
	     * @param {module:zrender/animation/Animator} animator
	     */
	    addAnimator: function addAnimator(animator) {
	        animator.animation = this;
	        var clips = animator.getClips();
	        for (var i = 0; i < clips.length; i++) {
	            this.addClip(clips[i]);
	        }
	    },
	    /**
	     * 删除动画片段
	     * @param {module:zrender/animation/Clip} clip
	     */
	    removeClip: function removeClip(clip) {
	        var idx = util.indexOf(this._clips, clip);
	        if (idx >= 0) {
	            this._clips.splice(idx, 1);
	        }
	    },
	
	    /**
	     * 删除动画片段
	     * @param {module:zrender/animation/Animator} animator
	     */
	    removeAnimator: function removeAnimator(animator) {
	        var clips = animator.getClips();
	        for (var i = 0; i < clips.length; i++) {
	            this.removeClip(clips[i]);
	        }
	        animator.animation = null;
	    },
	
	    _update: function _update() {
	
	        var time = new Date().getTime();
	        var delta = time - this._time;
	        var clips = this._clips;
	        var len = clips.length;
	
	        var deferredEvents = [];
	        var deferredClips = [];
	        for (var i = 0; i < len; i++) {
	            var clip = clips[i];
	            var e = clip.step(time);
	            // Throw out the events need to be called after
	            // stage.update, like destroy
	            if (e) {
	                deferredEvents.push(e);
	                deferredClips.push(clip);
	            }
	        }
	
	        // Remove the finished clip
	        for (var i = 0; i < len;) {
	            if (clips[i]._needsRemove) {
	                clips[i] = clips[len - 1];
	                clips.pop();
	                len--;
	            } else {
	                i++;
	            }
	        }
	
	        len = deferredEvents.length;
	        for (var i = 0; i < len; i++) {
	            deferredClips[i].fire(deferredEvents[i]);
	        }
	
	        this._time = time;
	
	        this.onframe(delta);
	
	        this.trigger('frame', delta);
	
	        if (this.stage.update) {
	            this.stage.update();
	        }
	    },
	    /**
	     * 开始运行动画
	     */
	    start: function start() {
	        var self = this;
	
	        this._running = true;
	
	        function step() {
	            if (self._running) {
	
	                requestAnimationFrame(step);
	
	                self._update();
	            }
	        }
	
	        this._time = new Date().getTime();
	        requestAnimationFrame(step);
	    },
	    /**
	     * 停止运行动画
	     */
	    stop: function stop() {
	        this._running = false;
	    },
	    /**
	     * 清除所有动画片段
	     */
	    clear: function clear() {
	        this._clips = [];
	    },
	    /**
	     * 对一个目标创建一个animator对象，可以指定目标中的属性使用动画
	     * @param  {Object} target
	     * @param  {Object} options
	     * @param  {boolean} [options.loop=false] 是否循环播放动画
	     * @param  {Function} [options.getter=null]
	     *         如果指定getter函数，会通过getter函数取属性值
	     * @param  {Function} [options.setter=null]
	     *         如果指定setter函数，会通过setter函数设置属性值
	     * @return {module:zrender/animation/Animation~Animator}
	     */
	    animate: function animate(target, options) {
	        options = options || {};
	        var animator = new Animator(target, options.loop, options.getter, options.setter);
	
	        return animator;
	    }
	};
	
	util.mixin(Animation, Dispatcher);
	
	module.exports = Animation;

/***/ },
/* 306 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Default canvas painter
	 * @module zrender/Painter
	 * @author Kener (@Kener-林峰, kener.linfeng@gmail.com)
	 *         errorrik (errorrik@gmail.com)
	 *         pissang (https://www.github.com/pissang)
	 */
	
	var config = __webpack_require__(261);
	var util = __webpack_require__(224);
	var log = __webpack_require__(260);
	var BoundingRect = __webpack_require__(236);
	
	var Layer = __webpack_require__(307);
	
	function parseInt10(val) {
	    return parseInt(val, 10);
	}
	
	function isLayerValid(layer) {
	    if (!layer) {
	        return false;
	    }
	
	    if (layer.isBuildin) {
	        return true;
	    }
	
	    if (typeof layer.resize !== 'function' || typeof layer.refresh !== 'function') {
	        return false;
	    }
	
	    return true;
	}
	
	function preProcessLayer(layer) {
	    layer.__unusedCount++;
	}
	
	function postProcessLayer(layer) {
	    layer.__dirty = false;
	    if (layer.__unusedCount == 1) {
	        layer.clear();
	    }
	}
	
	var tmpRect = new BoundingRect(0, 0, 0, 0);
	var viewRect = new BoundingRect(0, 0, 0, 0);
	function isDisplayableCulled(el, width, height) {
	    tmpRect.copy(el.getBoundingRect());
	    if (el.transform) {
	        tmpRect.applyTransform(el.transform);
	    }
	    viewRect.width = width;
	    viewRect.height = height;
	    return !tmpRect.intersect(viewRect);
	}
	
	function isClipPathChanged(clipPaths, prevClipPaths) {
	    if (!clipPaths || !prevClipPaths || clipPaths.length !== prevClipPaths.length) {
	        return true;
	    }
	    for (var i = 0; i < clipPaths.length; i++) {
	        if (clipPaths[i] !== prevClipPaths[i]) {
	            return true;
	        }
	    }
	}
	
	function doClip(clipPaths, ctx) {
	    for (var i = 0; i < clipPaths.length; i++) {
	        var clipPath = clipPaths[i];
	        var m;
	        if (clipPath.transform) {
	            m = clipPath.transform;
	            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	        var path = clipPath.path;
	        path.beginPath(ctx);
	        clipPath.buildPath(path, clipPath.shape);
	        ctx.clip();
	        // Transform back
	        if (clipPath.transform) {
	            m = clipPath.invTransform;
	            ctx.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	    }
	}
	
	/**
	 * @alias module:zrender/Painter
	 * @constructor
	 * @param {HTMLElement} root 绘图容器
	 * @param {module:zrender/Storage} storage
	 * @param {Ojbect} opts
	 */
	var Painter = function Painter(root, storage, opts) {
	    var singleCanvas = !root.nodeName // In node ?
	     || root.nodeName.toUpperCase() === 'CANVAS';
	
	    opts = opts || {};
	
	    /**
	     * @type {number}
	     */
	    this.dpr = opts.devicePixelRatio || config.devicePixelRatio;
	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._singleCanvas = singleCanvas;
	    /**
	     * 绘图容器
	     * @type {HTMLElement}
	     */
	    this.root = root;
	
	    var rootStyle = root.style;
	
	    // In node environment using node-canvas
	    if (rootStyle) {
	        rootStyle['-webkit-tap-highlight-color'] = 'transparent';
	        rootStyle['-webkit-user-select'] = 'none';
	        rootStyle['user-select'] = 'none';
	        rootStyle['-webkit-touch-callout'] = 'none';
	
	        root.innerHTML = '';
	    }
	
	    /**
	     * @type {module:zrender/Storage}
	     */
	    this.storage = storage;
	
	    if (!singleCanvas) {
	        var width = this._getWidth();
	        var height = this._getHeight();
	        this._width = width;
	        this._height = height;
	
	        var domRoot = document.createElement('div');
	        this._domRoot = domRoot;
	        var domRootStyle = domRoot.style;
	
	        // domRoot.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domRootStyle.position = 'relative';
	        domRootStyle.overflow = 'hidden';
	        domRootStyle.width = this._width + 'px';
	        domRootStyle.height = this._height + 'px';
	        root.appendChild(domRoot);
	
	        /**
	         * @type {Object.<key, module:zrender/Layer>}
	         * @private
	         */
	        this._layers = {};
	        /**
	         * @type {Array.<number>}
	         * @private
	         */
	        this._zlevelList = [];
	    } else {
	        // Use canvas width and height directly
	        var width = root.width;
	        var height = root.height;
	        this._width = width;
	        this._height = height;
	
	        // Create layer if only one given canvas
	        // Device pixel ratio is fixed to 1 because given canvas has its specified width and height
	        var mainLayer = new Layer(root, this, 1);
	        mainLayer.initContext();
	        // FIXME Use canvas width and height
	        // mainLayer.resize(width, height);
	        this._layers = {
	            0: mainLayer
	        };
	        this._zlevelList = [0];
	    }
	
	    this._layerConfig = {};
	
	    this.pathToImage = this._createPathToImage();
	};
	
	Painter.prototype = {
	
	    constructor: Painter,
	
	    /**
	     * If painter use a single canvas
	     * @return {boolean}
	     */
	    isSingleCanvas: function isSingleCanvas() {
	        return this._singleCanvas;
	    },
	    /**
	     * @return {HTMLDivElement}
	     */
	    getViewportRoot: function getViewportRoot() {
	        return this._singleCanvas ? this._layers[0].dom : this._domRoot;
	    },
	
	    /**
	     * 刷新
	     * @param {boolean} [paintAll=false] 强制绘制所有displayable
	     */
	    refresh: function refresh(paintAll) {
	        var list = this.storage.getDisplayList(true);
	        var zlevelList = this._zlevelList;
	
	        this._paintList(list, paintAll);
	
	        // Paint custum layers
	        for (var i = 0; i < zlevelList.length; i++) {
	            var z = zlevelList[i];
	            var layer = this._layers[z];
	            if (!layer.isBuildin && layer.refresh) {
	                layer.refresh();
	            }
	        }
	
	        return this;
	    },
	
	    _paintList: function _paintList(list, paintAll) {
	
	        if (paintAll == null) {
	            paintAll = false;
	        }
	
	        this._updateLayerStatus(list);
	
	        var currentLayer;
	        var currentZLevel;
	        var ctx;
	
	        var viewWidth = this._width;
	        var viewHeight = this._height;
	
	        this.eachBuildinLayer(preProcessLayer);
	
	        // var invTransform = [];
	        var prevElClipPaths = null;
	
	        for (var i = 0, l = list.length; i < l; i++) {
	            var el = list[i];
	            var elZLevel = this._singleCanvas ? 0 : el.zlevel;
	            // Change draw layer
	            if (currentZLevel !== elZLevel) {
	                // Only 0 zlevel if only has one canvas
	                currentZLevel = elZLevel;
	                currentLayer = this.getLayer(currentZLevel);
	
	                if (!currentLayer.isBuildin) {
	                    log('ZLevel ' + currentZLevel + ' has been used by unkown layer ' + currentLayer.id);
	                }
	
	                ctx = currentLayer.ctx;
	
	                // Reset the count
	                currentLayer.__unusedCount = 0;
	
	                if (currentLayer.__dirty || paintAll) {
	                    currentLayer.clear();
	                }
	            }
	
	            if ((currentLayer.__dirty || paintAll) &&
	            // Ignore invisible element
	            !el.invisible
	            // Ignore transparent element
	             && el.style.opacity !== 0
	            // Ignore scale 0 element, in some environment like node-canvas
	            // Draw a scale 0 element can cause all following draw wrong
	             && el.scale[0] && el.scale[1]
	            // Ignore culled element
	             && !(el.culling && isDisplayableCulled(el, viewWidth, viewHeight))) {
	                var clipPaths = el.__clipPaths;
	
	                // Optimize when clipping on group with several elements
	                if (isClipPathChanged(clipPaths, prevElClipPaths)) {
	                    // If has previous clipping state, restore from it
	                    if (prevElClipPaths) {
	                        ctx.restore();
	                    }
	                    // New clipping state
	                    if (clipPaths) {
	                        ctx.save();
	                        doClip(clipPaths, ctx);
	                    }
	                    prevElClipPaths = clipPaths;
	                }
	                // TODO Use events ?
	                el.beforeBrush && el.beforeBrush(ctx);
	                el.brush(ctx, false);
	                el.afterBrush && el.afterBrush(ctx);
	            }
	
	            el.__dirty = false;
	        }
	
	        // If still has clipping state
	        if (prevElClipPaths) {
	            ctx.restore();
	        }
	
	        this.eachBuildinLayer(postProcessLayer);
	    },
	
	    /**
	     * 获取 zlevel 所在层，如果不存在则会创建一个新的层
	     * @param {number} zlevel
	     * @return {module:zrender/Layer}
	     */
	    getLayer: function getLayer(zlevel) {
	        if (this._singleCanvas) {
	            return this._layers[0];
	        }
	
	        var layer = this._layers[zlevel];
	        if (!layer) {
	            // Create a new layer
	            layer = new Layer('zr_' + zlevel, this, this.dpr);
	            layer.isBuildin = true;
	
	            if (this._layerConfig[zlevel]) {
	                util.merge(layer, this._layerConfig[zlevel], true);
	            }
	
	            this.insertLayer(zlevel, layer);
	
	            // Context is created after dom inserted to document
	            // Or excanvas will get 0px clientWidth and clientHeight
	            layer.initContext();
	        }
	
	        return layer;
	    },
	
	    insertLayer: function insertLayer(zlevel, layer) {
	
	        var layersMap = this._layers;
	        var zlevelList = this._zlevelList;
	        var len = zlevelList.length;
	        var prevLayer = null;
	        var i = -1;
	        var domRoot = this._domRoot;
	
	        if (layersMap[zlevel]) {
	            log('ZLevel ' + zlevel + ' has been used already');
	            return;
	        }
	        // Check if is a valid layer
	        if (!isLayerValid(layer)) {
	            log('Layer of zlevel ' + zlevel + ' is not valid');
	            return;
	        }
	
	        if (len > 0 && zlevel > zlevelList[0]) {
	            for (i = 0; i < len - 1; i++) {
	                if (zlevelList[i] < zlevel && zlevelList[i + 1] > zlevel) {
	                    break;
	                }
	            }
	            prevLayer = layersMap[zlevelList[i]];
	        }
	        zlevelList.splice(i + 1, 0, zlevel);
	
	        if (prevLayer) {
	            var prevDom = prevLayer.dom;
	            if (prevDom.nextSibling) {
	                domRoot.insertBefore(layer.dom, prevDom.nextSibling);
	            } else {
	                domRoot.appendChild(layer.dom);
	            }
	        } else {
	            if (domRoot.firstChild) {
	                domRoot.insertBefore(layer.dom, domRoot.firstChild);
	            } else {
	                domRoot.appendChild(layer.dom);
	            }
	        }
	
	        layersMap[zlevel] = layer;
	    },
	
	    // Iterate each layer
	    eachLayer: function eachLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            cb.call(context, this._layers[z], z);
	        }
	    },
	
	    // Iterate each buildin layer
	    eachBuildinLayer: function eachBuildinLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var layer;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            layer = this._layers[z];
	            if (layer.isBuildin) {
	                cb.call(context, layer, z);
	            }
	        }
	    },
	
	    // Iterate each other layer except buildin layer
	    eachOtherLayer: function eachOtherLayer(cb, context) {
	        var zlevelList = this._zlevelList;
	        var layer;
	        var z;
	        var i;
	        for (i = 0; i < zlevelList.length; i++) {
	            z = zlevelList[i];
	            layer = this._layers[z];
	            if (!layer.isBuildin) {
	                cb.call(context, layer, z);
	            }
	        }
	    },
	
	    /**
	     * 获取所有已创建的层
	     * @param {Array.<module:zrender/Layer>} [prevLayer]
	     */
	    getLayers: function getLayers() {
	        return this._layers;
	    },
	
	    _updateLayerStatus: function _updateLayerStatus(list) {
	
	        var layers = this._layers;
	
	        var elCounts = {};
	
	        this.eachBuildinLayer(function (layer, z) {
	            elCounts[z] = layer.elCount;
	            layer.elCount = 0;
	        });
	
	        for (var i = 0, l = list.length; i < l; i++) {
	            var el = list[i];
	            var zlevel = this._singleCanvas ? 0 : el.zlevel;
	            var layer = layers[zlevel];
	            if (layer) {
	                layer.elCount++;
	                // 已经被标记为需要刷新
	                if (layer.__dirty) {
	                    continue;
	                }
	                layer.__dirty = el.__dirty;
	            }
	        }
	
	        // 层中的元素数量有发生变化
	        this.eachBuildinLayer(function (layer, z) {
	            if (elCounts[z] !== layer.elCount) {
	                layer.__dirty = true;
	            }
	        });
	    },
	
	    /**
	     * 清除hover层外所有内容
	     */
	    clear: function clear() {
	        this.eachBuildinLayer(this._clearLayer);
	        return this;
	    },
	
	    _clearLayer: function _clearLayer(layer) {
	        layer.clear();
	    },
	
	    /**
	     * 修改指定zlevel的绘制参数
	     *
	     * @param {string} zlevel
	     * @param {Object} config 配置对象
	     * @param {string} [config.clearColor=0] 每次清空画布的颜色
	     * @param {string} [config.motionBlur=false] 是否开启动态模糊
	     * @param {number} [config.lastFrameAlpha=0.7]
	     *                 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	     */
	    configLayer: function configLayer(zlevel, config) {
	        if (config) {
	            var layerConfig = this._layerConfig;
	            if (!layerConfig[zlevel]) {
	                layerConfig[zlevel] = config;
	            } else {
	                util.merge(layerConfig[zlevel], config, true);
	            }
	
	            var layer = this._layers[zlevel];
	
	            if (layer) {
	                util.merge(layer, layerConfig[zlevel], true);
	            }
	        }
	    },
	
	    /**
	     * 删除指定层
	     * @param {number} zlevel 层所在的zlevel
	     */
	    delLayer: function delLayer(zlevel) {
	        var layers = this._layers;
	        var zlevelList = this._zlevelList;
	        var layer = layers[zlevel];
	        if (!layer) {
	            return;
	        }
	        layer.dom.parentNode.removeChild(layer.dom);
	        delete layers[zlevel];
	
	        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);
	    },
	
	    /**
	     * 区域大小变化后重绘
	     */
	    resize: function resize(width, height) {
	        var domRoot = this._domRoot;
	        // FIXME Why ?
	        domRoot.style.display = 'none';
	
	        width = width || this._getWidth();
	        height = height || this._getHeight();
	
	        domRoot.style.display = '';
	
	        // 优化没有实际改变的resize
	        if (this._width != width || height != this._height) {
	            domRoot.style.width = width + 'px';
	            domRoot.style.height = height + 'px';
	
	            for (var id in this._layers) {
	                this._layers[id].resize(width, height);
	            }
	
	            this.refresh(true);
	        }
	
	        this._width = width;
	        this._height = height;
	
	        return this;
	    },
	
	    /**
	     * 清除单独的一个层
	     * @param {number} zlevel
	     */
	    clearLayer: function clearLayer(zlevel) {
	        var layer = this._layers[zlevel];
	        if (layer) {
	            layer.clear();
	        }
	    },
	
	    /**
	     * 释放
	     */
	    dispose: function dispose() {
	        this.root.innerHTML = '';
	
	        this.root = this.storage = this._domRoot = this._layers = null;
	    },
	
	    /**
	     * Get canvas which has all thing rendered
	     * @param {Object} opts
	     * @param {string} [opts.backgroundColor]
	     */
	    getRenderedCanvas: function getRenderedCanvas(opts) {
	        opts = opts || {};
	        if (this._singleCanvas) {
	            return this._layers[0].dom;
	        }
	
	        var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);
	        imageLayer.initContext();
	
	        var ctx = imageLayer.ctx;
	        imageLayer.clearColor = opts.backgroundColor;
	        imageLayer.clear();
	
	        var displayList = this.storage.getDisplayList(true);
	
	        for (var i = 0; i < displayList.length; i++) {
	            var el = displayList[i];
	            if (!el.invisible) {
	                el.beforeBrush && el.beforeBrush(ctx);
	                // TODO Check image cross origin
	                el.brush(ctx, false);
	                el.afterBrush && el.afterBrush(ctx);
	            }
	        }
	
	        return imageLayer.dom;
	    },
	    /**
	     * 获取绘图区域宽度
	     */
	    getWidth: function getWidth() {
	        return this._width;
	    },
	
	    /**
	     * 获取绘图区域高度
	     */
	    getHeight: function getHeight() {
	        return this._height;
	    },
	
	    _getWidth: function _getWidth() {
	        var root = this.root;
	        var stl = document.defaultView.getComputedStyle(root);
	
	        // FIXME Better way to get the width and height when element has not been append to the document
	        return (root.clientWidth || parseInt10(stl.width) || parseInt10(root.style.width)) - (parseInt10(stl.paddingLeft) || 0) - (parseInt10(stl.paddingRight) || 0) | 0;
	    },
	
	    _getHeight: function _getHeight() {
	        var root = this.root;
	        var stl = document.defaultView.getComputedStyle(root);
	
	        return (root.clientHeight || parseInt10(stl.height) || parseInt10(root.style.height)) - (parseInt10(stl.paddingTop) || 0) - (parseInt10(stl.paddingBottom) || 0) | 0;
	    },
	
	    _pathToImage: function _pathToImage(id, path, width, height, dpr) {
	        var canvas = document.createElement('canvas');
	        var ctx = canvas.getContext('2d');
	
	        canvas.width = width * dpr;
	        canvas.height = height * dpr;
	
	        ctx.clearRect(0, 0, width * dpr, height * dpr);
	
	        var pathTransform = {
	            position: path.position,
	            rotation: path.rotation,
	            scale: path.scale
	        };
	        path.position = [0, 0, 0];
	        path.rotation = 0;
	        path.scale = [1, 1];
	        if (path) {
	            path.brush(ctx);
	        }
	
	        var ImageShape = __webpack_require__(280);
	        var imgShape = new ImageShape({
	            id: id,
	            style: {
	                x: 0,
	                y: 0,
	                image: canvas
	            }
	        });
	
	        if (pathTransform.position != null) {
	            imgShape.position = path.position = pathTransform.position;
	        }
	
	        if (pathTransform.rotation != null) {
	            imgShape.rotation = path.rotation = pathTransform.rotation;
	        }
	
	        if (pathTransform.scale != null) {
	            imgShape.scale = path.scale = pathTransform.scale;
	        }
	
	        return imgShape;
	    },
	
	    _createPathToImage: function _createPathToImage() {
	        var me = this;
	
	        return function (id, e, width, height) {
	            return me._pathToImage(id, e, width, height, me.dpr);
	        };
	    }
	};
	
	module.exports = Painter;

/***/ },
/* 307 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module zrender/Layer
	 * @author pissang(https://www.github.com/pissang)
	 */
	
	var util = __webpack_require__(224);
	var config = __webpack_require__(261);
	
	function returnFalse() {
	    return false;
	}
	
	/**
	 * 创建dom
	 *
	 * @inner
	 * @param {string} id dom id 待用
	 * @param {string} type dom type，such as canvas, div etc.
	 * @param {Painter} painter painter instance
	 * @param {number} number
	 */
	function createDom(id, type, painter, dpr) {
	    var newDom = document.createElement(type);
	    var width = painter.getWidth();
	    var height = painter.getHeight();
	
	    var newDomStyle = newDom.style;
	    // 没append呢，请原谅我这样写，清晰~
	    newDomStyle.position = 'absolute';
	    newDomStyle.left = 0;
	    newDomStyle.top = 0;
	    newDomStyle.width = width + 'px';
	    newDomStyle.height = height + 'px';
	    newDom.width = width * dpr;
	    newDom.height = height * dpr;
	
	    // id不作为索引用，避免可能造成的重名，定义为私有属性
	    newDom.setAttribute('data-zr-dom-id', id);
	    return newDom;
	}
	
	/**
	 * @alias module:zrender/Layer
	 * @constructor
	 * @extends module:zrender/mixin/Transformable
	 * @param {string} id
	 * @param {module:zrender/Painter} painter
	 * @param {number} [dpr]
	 */
	var Layer = function Layer(id, painter, dpr) {
	    var dom;
	    dpr = dpr || config.devicePixelRatio;
	    if (typeof id === 'string') {
	        dom = createDom(id, 'canvas', painter, dpr);
	    }
	    // Not using isDom because in node it will return false
	    else if (util.isObject(id)) {
	            dom = id;
	            id = dom.id;
	        }
	    this.id = id;
	    this.dom = dom;
	
	    var domStyle = dom.style;
	    if (domStyle) {
	        // Not in node
	        dom.onselectstart = returnFalse; // 避免页面选中的尴尬
	        domStyle['-webkit-user-select'] = 'none';
	        domStyle['user-select'] = 'none';
	        domStyle['-webkit-touch-callout'] = 'none';
	        domStyle['-webkit-tap-highlight-color'] = 'rgba(0,0,0,0)';
	    }
	
	    this.domBack = null;
	    this.ctxBack = null;
	
	    this.painter = painter;
	
	    this.config = null;
	
	    // Configs
	    /**
	     * 每次清空画布的颜色
	     * @type {string}
	     * @default 0
	     */
	    this.clearColor = 0;
	    /**
	     * 是否开启动态模糊
	     * @type {boolean}
	     * @default false
	     */
	    this.motionBlur = false;
	    /**
	     * 在开启动态模糊的时候使用，与上一帧混合的alpha值，值越大尾迹越明显
	     * @type {number}
	     * @default 0.7
	     */
	    this.lastFrameAlpha = 0.7;
	
	    /**
	     * Layer dpr
	     * @type {number}
	     */
	    this.dpr = dpr;
	};
	
	Layer.prototype = {
	
	    constructor: Layer,
	
	    elCount: 0,
	
	    __dirty: true,
	
	    initContext: function initContext() {
	        this.ctx = this.dom.getContext('2d');
	
	        var dpr = this.dpr;
	        if (dpr != 1) {
	            this.ctx.scale(dpr, dpr);
	        }
	    },
	
	    createBackBuffer: function createBackBuffer() {
	        var dpr = this.dpr;
	
	        this.domBack = createDom('back-' + this.id, 'canvas', this.painter, dpr);
	        this.ctxBack = this.domBack.getContext('2d');
	
	        if (dpr != 1) {
	            this.ctxBack.scale(dpr, dpr);
	        }
	    },
	
	    /**
	     * @param  {number} width
	     * @param  {number} height
	     */
	    resize: function resize(width, height) {
	        var dpr = this.dpr;
	
	        var dom = this.dom;
	        var domStyle = dom.style;
	        var domBack = this.domBack;
	
	        domStyle.width = width + 'px';
	        domStyle.height = height + 'px';
	
	        dom.width = width * dpr;
	        dom.height = height * dpr;
	
	        if (dpr != 1) {
	            this.ctx.scale(dpr, dpr);
	        }
	
	        if (domBack) {
	            domBack.width = width * dpr;
	            domBack.height = height * dpr;
	
	            if (dpr != 1) {
	                this.ctxBack.scale(dpr, dpr);
	            }
	        }
	    },
	
	    /**
	     * 清空该层画布
	     * @param {boolean} clearAll Clear all with out motion blur
	     */
	    clear: function clear(clearAll) {
	        var dom = this.dom;
	        var ctx = this.ctx;
	        var width = dom.width;
	        var height = dom.height;
	
	        var haveClearColor = this.clearColor;
	        var haveMotionBLur = this.motionBlur && !clearAll;
	        var lastFrameAlpha = this.lastFrameAlpha;
	
	        var dpr = this.dpr;
	
	        if (haveMotionBLur) {
	            if (!this.domBack) {
	                this.createBackBuffer();
	            }
	
	            this.ctxBack.globalCompositeOperation = 'copy';
	            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);
	        }
	
	        ctx.clearRect(0, 0, width / dpr, height / dpr);
	        if (haveClearColor) {
	            ctx.save();
	            ctx.fillStyle = this.clearColor;
	            ctx.fillRect(0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }
	
	        if (haveMotionBLur) {
	            var domBack = this.domBack;
	            ctx.save();
	            ctx.globalAlpha = lastFrameAlpha;
	            ctx.drawImage(domBack, 0, 0, width / dpr, height / dpr);
	            ctx.restore();
	        }
	    }
	};
	
	module.exports = Layer;

/***/ },
/* 308 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	var PI = Math.PI;
	/**
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {Object} [opts]
	 * @param {string} [opts.text]
	 * @param {string} [opts.color]
	 * @param {string} [opts.textColor]
	 * @return {module:zrender/Element}
	 */
	module.exports = function (api, opts) {
	    opts = opts || {};
	    zrUtil.defaults(opts, {
	        text: 'loading',
	        color: '#c23531',
	        textColor: '#000',
	        maskColor: 'rgba(255, 255, 255, 0.8)',
	        zlevel: 0
	    });
	    var mask = new graphic.Rect({
	        style: {
	            fill: opts.maskColor
	        },
	        zlevel: opts.zlevel,
	        z: 10000
	    });
	    var arc = new graphic.Arc({
	        shape: {
	            startAngle: -PI / 2,
	            endAngle: -PI / 2 + 0.1,
	            r: 10
	        },
	        style: {
	            stroke: opts.color,
	            lineCap: 'round',
	            lineWidth: 5
	        },
	        zlevel: opts.zlevel,
	        z: 10001
	    });
	    var labelRect = new graphic.Rect({
	        style: {
	            fill: 'none',
	            text: opts.text,
	            textPosition: 'right',
	            textDistance: 10,
	            textFill: opts.textColor
	        },
	        zlevel: opts.zlevel,
	        z: 10001
	    });
	
	    arc.animateShape(true).when(1000, {
	        endAngle: PI * 3 / 2
	    }).start('circularInOut');
	    arc.animateShape(true).when(1000, {
	        startAngle: PI * 3 / 2
	    }).delay(300).start('circularInOut');
	
	    var group = new graphic.Group();
	    group.add(arc);
	    group.add(labelRect);
	    group.add(mask);
	    // Inject resize
	    group.resize = function () {
	        var cx = api.getWidth() / 2;
	        var cy = api.getHeight() / 2;
	        arc.setShape({
	            cx: cx,
	            cy: cy
	        });
	        var r = arc.shape.r;
	        labelRect.setShape({
	            x: cx - r,
	            y: cy - r,
	            width: r * 2,
	            height: r * 2
	        });
	
	        mask.setShape({
	            x: 0,
	            y: 0,
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	    };
	    group.resize();
	    return group;
	};

/***/ },
/* 309 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var Gradient = __webpack_require__(225);
	module.exports = function (seriesType, styleType, ecModel) {
	    function encodeColor(seriesModel) {
	        var colorAccessPath = [styleType, 'normal', 'color'];
	        var colorList = ecModel.get('color');
	        var data = seriesModel.getData();
	        var color = seriesModel.get(colorAccessPath) // Set in itemStyle
	         || colorList[seriesModel.seriesIndex % colorList.length]; // Default color
	
	        // FIXME Set color function or use the platte color
	        data.setVisual('color', color);
	
	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            if (typeof color === 'function' && !(color instanceof Gradient)) {
	                data.each(function (idx) {
	                    data.setItemVisual(idx, 'color', color(seriesModel.getDataParams(idx)));
	                });
	            }
	
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var color = itemModel.get(colorAccessPath, true);
	                if (color != null) {
	                    data.setItemVisual(idx, 'color', color);
	                }
	            });
	        }
	    }
	    seriesType ? ecModel.eachSeriesByType(seriesType, encodeColor) : ecModel.eachSeries(encodeColor);
	};

/***/ },
/* 310 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Compatitable with 2.0
	
	var zrUtil = __webpack_require__(224);
	var compatStyle = __webpack_require__(311);
	
	function get(opt, path) {
	    path = path.split(',');
	    var obj = opt;
	    for (var i = 0; i < path.length; i++) {
	        obj = obj && obj[path[i]];
	        if (obj == null) {
	            break;
	        }
	    }
	    return obj;
	}
	
	function set(opt, path, val, overwrite) {
	    path = path.split(',');
	    var obj = opt;
	    var key;
	    for (var i = 0; i < path.length - 1; i++) {
	        key = path[i];
	        if (obj[key] == null) {
	            obj[key] = {};
	        }
	        obj = obj[key];
	    }
	    if (overwrite || obj[path[i]] == null) {
	        obj[path[i]] = val;
	    }
	}
	
	function compatLayoutProperties(option) {
	    each(LAYOUT_PROPERTIES, function (prop) {
	        if (prop[0] in option && !(prop[1] in option)) {
	            option[prop[1]] = option[prop[0]];
	        }
	    });
	}
	
	var LAYOUT_PROPERTIES = [['x', 'left'], ['y', 'top'], ['x2', 'right'], ['y2', 'bottom']];
	
	var COMPATITABLE_COMPONENTS = ['grid', 'geo', 'parallel', 'legend', 'toolbox', 'title', 'visualMap', 'dataZoom', 'timeline'];
	
	var COMPATITABLE_SERIES = ['bar', 'boxplot', 'candlestick', 'chord', 'effectScatter', 'funnel', 'gauge', 'lines', 'graph', 'heatmap', 'line', 'map', 'parallel', 'pie', 'radar', 'sankey', 'scatter', 'treemap'];
	
	var each = zrUtil.each;
	
	module.exports = function (option) {
	    each(option.series, function (seriesOpt) {
	        if (!zrUtil.isObject(seriesOpt)) {
	            return;
	        }
	
	        var seriesType = seriesOpt.type;
	
	        compatStyle(seriesOpt);
	
	        if (seriesType === 'pie' || seriesType === 'gauge') {
	            if (seriesOpt.clockWise != null) {
	                seriesOpt.clockwise = seriesOpt.clockWise;
	            }
	        }
	        if (seriesType === 'gauge') {
	            var pointerColor = get(seriesOpt, 'pointer.color');
	            pointerColor != null && set(seriesOpt, 'itemStyle.normal.color', pointerColor);
	        }
	
	        for (var i = 0; i < COMPATITABLE_SERIES.length; i++) {
	            if (COMPATITABLE_SERIES[i] === seriesOpt.type) {
	                compatLayoutProperties(seriesOpt);
	                break;
	            }
	        }
	    });
	
	    // dataRange has changed to visualMap
	    if (option.dataRange) {
	        option.visualMap = option.dataRange;
	    }
	
	    each(COMPATITABLE_COMPONENTS, function (componentName) {
	        var options = option[componentName];
	        if (options) {
	            if (!zrUtil.isArray(options)) {
	                options = [options];
	            }
	            each(options, function (option) {
	                compatLayoutProperties(option);
	            });
	        }
	    });
	};

/***/ },
/* 311 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var POSSIBLE_STYLES = ['areaStyle', 'lineStyle', 'nodeStyle', 'linkStyle', 'chordStyle', 'label', 'labelLine'];
	
	function compatItemStyle(opt) {
	    var itemStyleOpt = opt && opt.itemStyle;
	    if (itemStyleOpt) {
	        zrUtil.each(POSSIBLE_STYLES, function (styleName) {
	            var normalItemStyleOpt = itemStyleOpt.normal;
	            var emphasisItemStyleOpt = itemStyleOpt.emphasis;
	            if (normalItemStyleOpt && normalItemStyleOpt[styleName]) {
	                opt[styleName] = opt[styleName] || {};
	                if (!opt[styleName].normal) {
	                    opt[styleName].normal = normalItemStyleOpt[styleName];
	                } else {
	                    zrUtil.merge(opt[styleName].normal, normalItemStyleOpt[styleName]);
	                }
	                normalItemStyleOpt[styleName] = null;
	            }
	            if (emphasisItemStyleOpt && emphasisItemStyleOpt[styleName]) {
	                opt[styleName] = opt[styleName] || {};
	                if (!opt[styleName].emphasis) {
	                    opt[styleName].emphasis = emphasisItemStyleOpt[styleName];
	                } else {
	                    zrUtil.merge(opt[styleName].emphasis, emphasisItemStyleOpt[styleName]);
	                }
	                emphasisItemStyleOpt[styleName] = null;
	            }
	        });
	    }
	}
	
	module.exports = function (seriesOpt) {
	    if (!seriesOpt) {
	        return;
	    }
	    compatItemStyle(seriesOpt);
	    compatItemStyle(seriesOpt.markPoint);
	    compatItemStyle(seriesOpt.markLine);
	    var data = seriesOpt.data;
	    if (data) {
	        for (var i = 0; i < data.length; i++) {
	            compatItemStyle(data[i]);
	        }
	        // mark point data
	        var markPoint = seriesOpt.markPoint;
	        if (markPoint && markPoint.data) {
	            var mpData = markPoint.data;
	            for (var i = 0; i < mpData.length; i++) {
	                compatItemStyle(mpData[i]);
	            }
	        }
	        // mark line data
	        var markLine = seriesOpt.markLine;
	        if (markLine && markLine.data) {
	            var mlData = markLine.data;
	            for (var i = 0; i < mlData.length; i++) {
	                if (zrUtil.isArray(mlData[i])) {
	                    compatItemStyle(mlData[i][0]);
	                    compatItemStyle(mlData[i][1]);
	                } else {
	                    compatItemStyle(mlData[i]);
	                }
	            }
	        }
	    }
	};

/***/ },
/* 312 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	__webpack_require__(313);
	__webpack_require__(318);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(324), 'line', 'circle', 'line'));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(325), 'line'));
	
	// Down sample after filter
	echarts.registerProcessor('statistic', zrUtil.curry(__webpack_require__(326), 'line'));
	
	// In case developer forget to include grid component
	__webpack_require__(327);

/***/ },
/* 313 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createListFromArray = __webpack_require__(314);
	var SeriesModel = __webpack_require__(248);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.line',
	
	    dependencies: ['grid', 'polar'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        return createListFromArray(option.data, this, ecModel);
	    },
	
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	        // stack: null
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        polarIndex: 0,
	
	        // If clip the overflow value
	        clipOverflow: true,
	
	        label: {
	            normal: {
	                // show: false,
	                position: 'top'
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                //           'inside'|'left'|'right'|'top'|'bottom'
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            }
	            // emphasis: {
	            // show: false,
	            // position: 'top'
	            // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	            // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	            //           'inside'|'left'|'right'|'top'|'bottom'
	            // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            // }
	        },
	        // itemStyle: {
	        //     normal: {
	        //         // color: 各异
	        //     },
	        //     emphasis: {
	        //         // color: 各异,
	        //     }
	        // },
	        lineStyle: {
	            normal: {
	                width: 2,
	                type: 'solid'
	            }
	        },
	        // areaStyle: {
	        // },
	        // smooth: false,
	        // smoothMonotone: null,
	        // 拐点图形类型
	        symbol: 'emptyCircle',
	        // 拐点图形大小
	        symbolSize: 4,
	        // 拐点图形旋转控制
	        // symbolRotate: null,
	
	        // 是否显示 symbol, 只有在 tooltip hover 的时候显示
	        showSymbol: true,
	        // 标志图形默认只有主轴显示（随主轴标签间隔隐藏策略）
	        // showAllSymbol: false
	        //
	        // 大数据过滤，'average', 'max', 'min', 'sum'
	        // sampling: 'none'
	
	        animationEasing: 'linear'
	    }
	});

/***/ },
/* 314 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var completeDimensions = __webpack_require__(317);
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var CoordinateSystem = __webpack_require__(246);
	var getDataItemValue = modelUtil.getDataItemValue;
	var converDataValue = modelUtil.converDataValue;
	
	function firstDataNotNull(data) {
	    var i = 0;
	    while (i < data.length && data[i] == null) {
	        i++;
	    }
	    return data[i];
	}
	function ifNeedCompleteOrdinalData(data) {
	    var sampleItem = firstDataNotNull(data);
	    return sampleItem != null && !zrUtil.isArray(getDataItemValue(sampleItem));
	}
	
	/**
	 * Helper function to create a list from option data
	 */
	function createListFromArray(data, seriesModel, ecModel) {
	    // If data is undefined
	    data = data || [];
	
	    var coordSysName = seriesModel.get('coordinateSystem');
	    var creator = creators[coordSysName];
	    var registeredCoordSys = CoordinateSystem.get(coordSysName);
	    // FIXME
	    var result = creator && creator(data, seriesModel, ecModel);
	    var dimensions = result && result.dimensions;
	    if (!dimensions) {
	        // Get dimensions from registered coordinate system
	        dimensions = registeredCoordSys && registeredCoordSys.dimensions || ['x', 'y'];
	        dimensions = completeDimensions(dimensions, data, dimensions.concat(['value']));
	    }
	    var categoryAxisModel = result && result.categoryAxisModel;
	
	    var categoryDimIndex = dimensions[0].type === 'ordinal' ? 0 : dimensions[1].type === 'ordinal' ? 1 : -1;
	
	    var list = new List(dimensions, seriesModel);
	
	    var nameList = createNameList(result, data);
	
	    var dimValueGetter = categoryAxisModel && ifNeedCompleteOrdinalData(data) ? function (itemOpt, dimName, dataIndex, dimIndex) {
	        // Use dataIndex as ordinal value in categoryAxis
	        return dimIndex === categoryDimIndex ? dataIndex : converDataValue(getDataItemValue(itemOpt), dimensions[dimIndex]);
	    } : function (itemOpt, dimName, dataIndex, dimIndex) {
	        var val = getDataItemValue(itemOpt);
	        return converDataValue(val && val[dimIndex], dimensions[dimIndex]);
	    };
	
	    list.initData(data, nameList, dimValueGetter);
	
	    return list;
	}
	
	function isStackable(axisType) {
	    return axisType !== 'category' && axisType !== 'time';
	}
	
	function getDimTypeByAxis(axisType) {
	    return axisType === 'category' ? 'ordinal' : axisType === 'time' ? 'time' : 'float';
	}
	
	/**
	 * Creaters for each coord system.
	 * @return {Object} {dimensions, categoryAxisModel};
	 */
	var creators = {
	
	    cartesian2d: function cartesian2d(data, seriesModel, ecModel) {
	        var xAxisModel = ecModel.getComponent('xAxis', seriesModel.get('xAxisIndex'));
	        var yAxisModel = ecModel.getComponent('yAxis', seriesModel.get('yAxisIndex'));
	        var xAxisType = xAxisModel.get('type');
	        var yAxisType = yAxisModel.get('type');
	
	        var dimensions = [{
	            name: 'x',
	            type: getDimTypeByAxis(xAxisType),
	            stackable: isStackable(xAxisType)
	        }, {
	            name: 'y',
	            // If two category axes
	            type: getDimTypeByAxis(yAxisType),
	            stackable: isStackable(yAxisType)
	        }];
	
	        completeDimensions(dimensions, data, ['x', 'y', 'z']);
	
	        return {
	            dimensions: dimensions,
	            categoryAxisModel: xAxisType === 'category' ? xAxisModel : yAxisType === 'category' ? yAxisModel : null
	        };
	    },
	
	    polar: function polar(data, seriesModel, ecModel) {
	        var polarIndex = seriesModel.get('polarIndex') || 0;
	
	        var axisFinder = function axisFinder(axisModel) {
	            return axisModel.get('polarIndex') === polarIndex;
	        };
	
	        var angleAxisModel = ecModel.findComponents({
	            mainType: 'angleAxis', filter: axisFinder
	        })[0];
	        var radiusAxisModel = ecModel.findComponents({
	            mainType: 'radiusAxis', filter: axisFinder
	        })[0];
	
	        var radiusAxisType = radiusAxisModel.get('type');
	        var angleAxisType = angleAxisModel.get('type');
	
	        var dimensions = [{
	            name: 'radius',
	            type: getDimTypeByAxis(radiusAxisType),
	            stackable: isStackable(radiusAxisType)
	        }, {
	            name: 'angle',
	            type: getDimTypeByAxis(angleAxisType),
	            stackable: isStackable(angleAxisType)
	        }];
	
	        completeDimensions(dimensions, data, ['radius', 'angle', 'value']);
	
	        return {
	            dimensions: dimensions,
	            categoryAxisModel: angleAxisType === 'category' ? angleAxisModel : radiusAxisType === 'category' ? radiusAxisModel : null
	        };
	    },
	
	    geo: function geo(data, seriesModel, ecModel) {
	        // TODO Region
	        // 多个散点图系列在同一个地区的时候
	        return {
	            dimensions: completeDimensions([{ name: 'lng' }, { name: 'lat' }], data, ['lng', 'lat', 'value'])
	        };
	    }
	};
	
	function createNameList(result, data) {
	    var nameList = [];
	
	    if (result && result.categoryAxisModel) {
	        // FIXME Two category axis
	        var categories = result.categoryAxisModel.getCategories();
	        if (categories) {
	            var dataLen = data.length;
	            // Ordered data is given explicitly like
	            // [[3, 0.2], [1, 0.3], [2, 0.15]]
	            // or given scatter data,
	            // pick the category
	            if (zrUtil.isArray(data[0]) && data[0].length > 1) {
	                nameList = [];
	                for (var i = 0; i < dataLen; i++) {
	                    nameList[i] = categories[data[i][0]];
	                }
	            } else {
	                nameList = categories.slice(0);
	            }
	        }
	    }
	
	    return nameList;
	}
	
	module.exports = createListFromArray;

/***/ },
/* 315 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	/**
	 * List for data storage
	 * @module echarts/data/List
	 */
	
	var UNDEFINED = 'undefined';
	var globalObj = typeof window === 'undefined' ? global : window;
	var Float64Array = _typeof(globalObj.Float64Array) === UNDEFINED ? Array : globalObj.Float64Array;
	var Int32Array = _typeof(globalObj.Int32Array) === UNDEFINED ? Array : globalObj.Int32Array;
	
	var dataCtors = {
	    'float': Float64Array,
	    'int': Int32Array,
	    // Ordinal data type can be string or int
	    'ordinal': Array,
	    'number': Array,
	    'time': Array
	};
	
	var Model = __webpack_require__(229);
	var DataDiffer = __webpack_require__(316);
	
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var isObject = zrUtil.isObject;
	
	var IMMUTABLE_PROPERTIES = ['stackedOn', '_nameList', '_idList', '_rawData'];
	
	var transferImmuProperties = function transferImmuProperties(a, b, wrappedMethod) {
	    zrUtil.each(IMMUTABLE_PROPERTIES.concat(wrappedMethod || []), function (propName) {
	        if (b.hasOwnProperty(propName)) {
	            a[propName] = b[propName];
	        }
	    });
	};
	
	/**
	 * @constructor
	 * @alias module:echarts/data/List
	 *
	 * @param {Array.<string>} dimensions
	 *        Dimensions should be concrete names like x, y, z, lng, lat, angle, radius
	 * @param {module:echarts/model/Model} hostModel
	 */
	var List = function List(dimensions, hostModel) {
	
	    dimensions = dimensions || ['x', 'y'];
	
	    var dimensionInfos = {};
	    var dimensionNames = [];
	    for (var i = 0; i < dimensions.length; i++) {
	        var dimensionName;
	        var dimensionInfo = {};
	        if (typeof dimensions[i] === 'string') {
	            dimensionName = dimensions[i];
	            dimensionInfo = {
	                name: dimensionName,
	                stackable: false,
	                // Type can be 'float', 'int', 'number'
	                // Default is number, Precision of float may not enough
	                type: 'number'
	            };
	        } else {
	            dimensionInfo = dimensions[i];
	            dimensionName = dimensionInfo.name;
	            dimensionInfo.type = dimensionInfo.type || 'number';
	        }
	        dimensionNames.push(dimensionName);
	        dimensionInfos[dimensionName] = dimensionInfo;
	    }
	    /**
	     * @readOnly
	     * @type {Array.<string>}
	     */
	    this.dimensions = dimensionNames;
	
	    /**
	     * Infomation of each data dimension, like data type.
	     * @type {Object}
	     */
	    this._dimensionInfos = dimensionInfos;
	
	    /**
	     * @type {module:echarts/model/Model}
	     */
	    this.hostModel = hostModel;
	
	    /**
	     * Indices stores the indices of data subset after filtered.
	     * This data subset will be used in chart.
	     * @type {Array.<number>}
	     * @readOnly
	     */
	    this.indices = [];
	
	    /**
	     * Data storage
	     * @type {Object.<key, TypedArray|Array>}
	     * @private
	     */
	    this._storage = {};
	
	    /**
	     * @type {Array.<string>}
	     */
	    this._nameList = [];
	    /**
	     * @type {Array.<string>}
	     */
	    this._idList = [];
	    /**
	     * Models of data option is stored sparse for optimizing memory cost
	     * @type {Array.<module:echarts/model/Model>}
	     * @private
	     */
	    this._optionModels = [];
	
	    /**
	     * @param {module:echarts/data/List}
	     */
	    this.stackedOn = null;
	
	    /**
	     * Global visual properties after visual coding
	     * @type {Object}
	     * @private
	     */
	    this._visual = {};
	
	    /**
	     * Globel layout properties.
	     * @type {Object}
	     * @private
	     */
	    this._layout = {};
	
	    /**
	     * Item visual properties after visual coding
	     * @type {Array.<Object>}
	     * @private
	     */
	    this._itemVisuals = [];
	
	    /**
	     * Item layout properties after layout
	     * @type {Array.<Object>}
	     * @private
	     */
	    this._itemLayouts = [];
	
	    /**
	     * Graphic elemnents
	     * @type {Array.<module:zrender/Element>}
	     * @private
	     */
	    this._graphicEls = [];
	
	    /**
	     * @type {Array.<Array|Object>}
	     * @private
	     */
	    this._rawData;
	
	    /**
	     * @type {Object}
	     * @private
	     */
	    this._extent;
	};
	
	var listProto = List.prototype;
	
	listProto.type = 'list';
	
	/**
	 * Get dimension name
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */
	listProto.getDimension = function (dim) {
	    if (!isNaN(dim)) {
	        dim = this.dimensions[dim] || dim;
	    }
	    return dim;
	};
	/**
	 * Get type and stackable info of particular dimension
	 * @param {string|number} dim
	 *        Dimension can be concrete names like x, y, z, lng, lat, angle, radius
	 *        Or a ordinal number. For example getDimensionInfo(0) will return 'x' or 'lng' or 'radius'
	 */
	listProto.getDimensionInfo = function (dim) {
	    return zrUtil.clone(this._dimensionInfos[this.getDimension(dim)]);
	};
	
	/**
	 * Initialize from data
	 * @param {Array.<Object|number|Array>} data
	 * @param {Array.<string>} [nameList]
	 * @param {Function} [dimValueGetter] (dataItem, dimName, dataIndex, dimIndex) => number
	 */
	listProto.initData = function (data, nameList, dimValueGetter) {
	    data = data || [];
	
	    this._rawData = data;
	
	    // Clear
	    var storage = this._storage = {};
	    var indices = this.indices = [];
	
	    var dimensions = this.dimensions;
	    var size = data.length;
	    var dimensionInfoMap = this._dimensionInfos;
	
	    var idList = [];
	    var nameRepeatCount = {};
	
	    nameList = nameList || [];
	
	    // Init storage
	    for (var i = 0; i < dimensions.length; i++) {
	        var dimInfo = dimensionInfoMap[dimensions[i]];
	        var DataCtor = dataCtors[dimInfo.type];
	        storage[dimensions[i]] = new DataCtor(size);
	    }
	
	    // Default dim value getter
	    dimValueGetter = dimValueGetter || function (dataItem, dimName, dataIndex, dimIndex) {
	        var value = modelUtil.getDataItemValue(dataItem);
	        return modelUtil.converDataValue(zrUtil.isArray(value) ? value[dimIndex]
	        // If value is a single number or something else not array.
	        : value, dimensionInfoMap[dimName]);
	    };
	
	    for (var idx = 0; idx < data.length; idx++) {
	        var dataItem = data[idx];
	        // Each data item is value
	        // [1, 2]
	        // 2
	        // Bar chart, line chart which uses category axis
	        // only gives the 'y' value. 'x' value is the indices of cateogry
	        // Use a tempValue to normalize the value to be a (x, y) value
	
	        // Store the data by dimensions
	        for (var k = 0; k < dimensions.length; k++) {
	            var dim = dimensions[k];
	            var dimStorage = storage[dim];
	            // PENDING NULL is empty or zero
	            dimStorage[idx] = dimValueGetter(dataItem, dim, idx, k);
	        }
	
	        indices.push(idx);
	    }
	
	    // Use the name in option and create id
	    for (var i = 0; i < data.length; i++) {
	        var id = '';
	        if (!nameList[i]) {
	            nameList[i] = data[i].name;
	            // Try using the id in option
	            id = data[i].id;
	        }
	        var name = nameList[i] || '';
	        if (!id && name) {
	            // Use name as id and add counter to avoid same name
	            nameRepeatCount[name] = nameRepeatCount[name] || 0;
	            id = name;
	            if (nameRepeatCount[name] > 0) {
	                id += '__ec__' + nameRepeatCount[name];
	            }
	            nameRepeatCount[name]++;
	        }
	        id && (idList[i] = id);
	    }
	
	    this._nameList = nameList;
	    this._idList = idList;
	};
	
	/**
	 * @return {number}
	 */
	listProto.count = function () {
	    return this.indices.length;
	};
	
	/**
	 * Get value. Return NaN if idx is out of range.
	 * @param {string} dim Dim must be concrete name.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */
	listProto.get = function (dim, idx, stack) {
	    var storage = this._storage;
	    var dataIndex = this.indices[idx];
	
	    // If value not exists
	    if (dataIndex == null) {
	        return NaN;
	    }
	
	    var value = storage[dim] && storage[dim][dataIndex];
	    // FIXME ordinal data type is not stackable
	    if (stack) {
	        var dimensionInfo = this._dimensionInfos[dim];
	        if (dimensionInfo && dimensionInfo.stackable) {
	            var stackedOn = this.stackedOn;
	            while (stackedOn) {
	                // Get no stacked data of stacked on
	                var stackedValue = stackedOn.get(dim, idx);
	                // Considering positive stack, negative stack and empty data
	                if (value >= 0 && stackedValue > 0 || // Positive stack
	                value <= 0 && stackedValue < 0 // Negative stack
	                ) {
	                        value += stackedValue;
	                    }
	                stackedOn = stackedOn.stackedOn;
	            }
	        }
	    }
	    return value;
	};
	
	/**
	 * Get value for multi dimensions.
	 * @param {Array.<string>} [dimensions] If ignored, using all dimensions.
	 * @param {number} idx
	 * @param {boolean} stack
	 * @return {number}
	 */
	listProto.getValues = function (dimensions, idx, stack) {
	    var values = [];
	
	    if (!zrUtil.isArray(dimensions)) {
	        stack = idx;
	        idx = dimensions;
	        dimensions = this.dimensions;
	    }
	
	    for (var i = 0, len = dimensions.length; i < len; i++) {
	        values.push(this.get(dimensions[i], idx, stack));
	    }
	
	    return values;
	};
	
	/**
	 * If value is NaN. Inlcuding '-'
	 * @param {string} dim
	 * @param {number} idx
	 * @return {number}
	 */
	listProto.hasValue = function (idx) {
	    var dimensions = this.dimensions;
	    var dimensionInfos = this._dimensionInfos;
	    for (var i = 0, len = dimensions.length; i < len; i++) {
	        if (
	        // Ordinal type can be string or number
	        dimensionInfos[dimensions[i]].type !== 'ordinal' && isNaN(this.get(dimensions[i], idx))) {
	            return false;
	        }
	    }
	    return true;
	};
	
	/**
	 * Get extent of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */
	listProto.getDataExtent = function (dim, stack) {
	    var dimData = this._storage[dim];
	    var dimInfo = this.getDimensionInfo(dim);
	    stack = dimInfo && dimInfo.stackable && stack;
	    var dimExtent = (this._extent || (this._extent = {}))[dim + !!stack];
	    var value;
	    if (dimExtent) {
	        return dimExtent;
	    }
	    // var dimInfo = this._dimensionInfos[dim];
	    if (dimData) {
	        var min = Infinity;
	        var max = -Infinity;
	        // var isOrdinal = dimInfo.type === 'ordinal';
	        for (var i = 0, len = this.count(); i < len; i++) {
	            value = this.get(dim, i, stack);
	            // FIXME
	            // if (isOrdinal && typeof value === 'string') {
	            //     value = zrUtil.indexOf(dimData, value);
	            //     console.log(value);
	            // }
	            value < min && (min = value);
	            value > max && (max = value);
	        }
	        return this._extent[dim + stack] = [min, max];
	    } else {
	        return [Infinity, -Infinity];
	    }
	};
	
	/**
	 * Get sum of data in one dimension
	 * @param {string} dim
	 * @param {boolean} stack
	 */
	listProto.getSum = function (dim, stack) {
	    var dimData = this._storage[dim];
	    var sum = 0;
	    if (dimData) {
	        for (var i = 0, len = this.count(); i < len; i++) {
	            var value = this.get(dim, i, stack);
	            if (!isNaN(value)) {
	                sum += value;
	            }
	        }
	    }
	    return sum;
	};
	
	/**
	 * Retreive the index with given value
	 * @param {number} idx
	 * @param {number} value
	 * @return {number}
	 */
	// FIXME Precision of float value
	listProto.indexOf = function (dim, value) {
	    var storage = this._storage;
	    var dimData = storage[dim];
	    var indices = this.indices;
	
	    if (dimData) {
	        for (var i = 0, len = indices.length; i < len; i++) {
	            var rawIndex = indices[i];
	            if (dimData[rawIndex] === value) {
	                return i;
	            }
	        }
	    }
	    return -1;
	};
	
	/**
	 * Retreive the index with given name
	 * @param {number} idx
	 * @param {number} name
	 * @return {number}
	 */
	listProto.indexOfName = function (name) {
	    var indices = this.indices;
	    var nameList = this._nameList;
	
	    for (var i = 0, len = indices.length; i < len; i++) {
	        var rawIndex = indices[i];
	        if (nameList[rawIndex] === name) {
	            return i;
	        }
	    }
	
	    return -1;
	};
	
	/**
	 * Retreive the index of nearest value
	 * @param {string>} dim
	 * @param {number} value
	 * @param {boolean} stack If given value is after stacked
	 * @return {number}
	 */
	listProto.indexOfNearest = function (dim, value, stack) {
	    var storage = this._storage;
	    var dimData = storage[dim];
	
	    if (dimData) {
	        var minDist = Number.MAX_VALUE;
	        var nearestIdx = -1;
	        for (var i = 0, len = this.count(); i < len; i++) {
	            var dist = Math.abs(this.get(dim, i, stack) - value);
	            if (dist <= minDist) {
	                minDist = dist;
	                nearestIdx = i;
	            }
	        }
	        return nearestIdx;
	    }
	    return -1;
	};
	
	/**
	 * Get raw data index
	 * @param {number} idx
	 * @return {number}
	 */
	listProto.getRawIndex = function (idx) {
	    var rawIdx = this.indices[idx];
	    return rawIdx == null ? -1 : rawIdx;
	};
	
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	listProto.getName = function (idx) {
	    return this._nameList[this.indices[idx]] || '';
	};
	
	/**
	 * @param {number} idx
	 * @param {boolean} [notDefaultIdx=false]
	 * @return {string}
	 */
	listProto.getId = function (idx) {
	    return this._idList[this.indices[idx]] || this.getRawIndex(idx) + '';
	};
	
	function normalizeDimensions(dimensions) {
	    if (!zrUtil.isArray(dimensions)) {
	        dimensions = [dimensions];
	    }
	    return dimensions;
	}
	
	/**
	 * Data iteration
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 *
	 * @example
	 *  list.each('x', function (x, idx) {});
	 *  list.each(['x', 'y'], function (x, y, idx) {});
	 *  list.each(function (idx) {})
	 */
	listProto.each = function (dimensions, cb, stack, context) {
	    if (typeof dimensions === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dimensions;
	        dimensions = [];
	    }
	
	    dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	
	    var value = [];
	    var dimSize = dimensions.length;
	    var indices = this.indices;
	
	    context = context || this;
	
	    for (var i = 0; i < indices.length; i++) {
	        if (dimSize === 0) {
	            cb.call(context, i);
	        }
	        // Simple optimization
	        else if (dimSize === 1) {
	                cb.call(context, this.get(dimensions[0], i, stack), i);
	            } else {
	                for (var k = 0; k < dimSize; k++) {
	                    value[k] = this.get(dimensions[k], i, stack);
	                }
	                // Index
	                value[k] = i;
	                cb.apply(context, value);
	            }
	    }
	};
	
	/**
	 * Data filter
	 * @param {string|Array.<string>}
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 */
	listProto.filterSelf = function (dimensions, cb, stack, context) {
	    if (typeof dimensions === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dimensions;
	        dimensions = [];
	    }
	
	    dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	
	    var newIndices = [];
	    var value = [];
	    var dimSize = dimensions.length;
	    var indices = this.indices;
	
	    context = context || this;
	
	    for (var i = 0; i < indices.length; i++) {
	        var keep;
	        // Simple optimization
	        if (dimSize === 1) {
	            keep = cb.call(context, this.get(dimensions[0], i, stack), i);
	        } else {
	            for (var k = 0; k < dimSize; k++) {
	                value[k] = this.get(dimensions[k], i, stack);
	            }
	            value[k] = i;
	            keep = cb.apply(context, value);
	        }
	        if (keep) {
	            newIndices.push(indices[i]);
	        }
	    }
	
	    this.indices = newIndices;
	
	    // Reset data extent
	    this._extent = {};
	
	    return this;
	};
	
	/**
	 * Data mapping to a plain array
	 * @param {string|Array.<string>} [dimensions]
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	listProto.mapArray = function (dimensions, cb, stack, context) {
	    if (typeof dimensions === 'function') {
	        context = stack;
	        stack = cb;
	        cb = dimensions;
	        dimensions = [];
	    }
	
	    var result = [];
	    this.each(dimensions, function () {
	        result.push(cb && cb.apply(this, arguments));
	    }, stack, context);
	    return result;
	};
	
	function cloneListForMapAndSample(original, excludeDimensions) {
	    var allDimensions = original.dimensions;
	    var list = new List(zrUtil.map(allDimensions, original.getDimensionInfo, original), original.hostModel);
	    // FIXME If needs stackedOn, value may already been stacked
	    transferImmuProperties(list, original, original._wrappedMethods);
	
	    var storage = list._storage = {};
	    var originalStorage = original._storage;
	    // Init storage
	    for (var i = 0; i < allDimensions.length; i++) {
	        var dim = allDimensions[i];
	        var dimStore = originalStorage[dim];
	        if (zrUtil.indexOf(excludeDimensions, dim) >= 0) {
	            storage[dim] = new dimStore.constructor(originalStorage[dim].length);
	        } else {
	            // Direct reference for other dimensions
	            storage[dim] = originalStorage[dim];
	        }
	    }
	    return list;
	}
	
	/**
	 * Data mapping to a new List with given dimensions
	 * @param {string|Array.<string>} dimensions
	 * @param {Function} cb
	 * @param {boolean} [stack=false]
	 * @param {*} [context=this]
	 * @return {Array}
	 */
	listProto.map = function (dimensions, cb, stack, context) {
	    dimensions = zrUtil.map(normalizeDimensions(dimensions), this.getDimension, this);
	
	    var list = cloneListForMapAndSample(this, dimensions);
	    // Following properties are all immutable.
	    // So we can reference to the same value
	    var indices = list.indices = this.indices;
	
	    var storage = list._storage;
	
	    var tmpRetValue = [];
	    this.each(dimensions, function () {
	        var idx = arguments[arguments.length - 1];
	        var retValue = cb && cb.apply(this, arguments);
	        if (retValue != null) {
	            // a number
	            if (typeof retValue === 'number') {
	                tmpRetValue[0] = retValue;
	                retValue = tmpRetValue;
	            }
	            for (var i = 0; i < retValue.length; i++) {
	                var dim = dimensions[i];
	                var dimStore = storage[dim];
	                var rawIdx = indices[idx];
	                if (dimStore) {
	                    dimStore[rawIdx] = retValue[i];
	                }
	            }
	        }
	    }, stack, context);
	
	    return list;
	};
	
	/**
	 * Large data down sampling on given dimension
	 * @param {string} dimension
	 * @param {number} rate
	 * @param {Function} sampleValue
	 * @param {Function} sampleIndex Sample index for name and id
	 */
	listProto.downSample = function (dimension, rate, sampleValue, sampleIndex) {
	    var list = cloneListForMapAndSample(this, [dimension]);
	    var storage = this._storage;
	    var targetStorage = list._storage;
	
	    var originalIndices = this.indices;
	    var indices = list.indices = [];
	
	    var frameValues = [];
	    var frameIndices = [];
	    var frameSize = Math.floor(1 / rate);
	
	    var dimStore = targetStorage[dimension];
	    var len = this.count();
	    // Copy data from original data
	    for (var i = 0; i < storage[dimension].length; i++) {
	        targetStorage[dimension][i] = storage[dimension][i];
	    }
	    for (var i = 0; i < len; i += frameSize) {
	        // Last frame
	        if (frameSize > len - i) {
	            frameSize = len - i;
	            frameValues.length = frameSize;
	        }
	        for (var k = 0; k < frameSize; k++) {
	            var idx = originalIndices[i + k];
	            frameValues[k] = dimStore[idx];
	            frameIndices[k] = idx;
	        }
	        var value = sampleValue(frameValues);
	        var idx = frameIndices[sampleIndex(frameValues, value) || 0];
	        // Only write value on the filtered data
	        dimStore[idx] = value;
	        indices.push(idx);
	    }
	    return list;
	};
	
	/**
	 * Get model of one data item.
	 *
	 * @param {number} idx
	 */
	// FIXME Model proxy ?
	listProto.getItemModel = function (idx) {
	    var hostModel = this.hostModel;
	    idx = this.indices[idx];
	    return new Model(this._rawData[idx], hostModel, hostModel.ecModel);
	};
	
	/**
	 * Create a data differ
	 * @param {module:echarts/data/List} otherList
	 * @return {module:echarts/data/DataDiffer}
	 */
	listProto.diff = function (otherList) {
	    var idList = this._idList;
	    var otherIdList = otherList && otherList._idList;
	    return new DataDiffer(otherList ? otherList.indices : [], this.indices, function (idx) {
	        return otherIdList[idx] || idx + '';
	    }, function (idx) {
	        return idList[idx] || idx + '';
	    });
	};
	/**
	 * Get visual property.
	 * @param {string} key
	 */
	listProto.getVisual = function (key) {
	    var visual = this._visual;
	    return visual && visual[key];
	};
	
	/**
	 * Set visual property
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setVisual('color', color);
	 *  setVisual({
	 *      'color': color
	 *  });
	 */
	listProto.setVisual = function (key, val) {
	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                this.setVisual(name, key[name]);
	            }
	        }
	        return;
	    }
	    this._visual = this._visual || {};
	    this._visual[key] = val;
	};
	
	/**
	 * Set layout property.
	 * @param {string} key
	 * @param {*} [val]
	 */
	listProto.setLayout = function (key, val) {
	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                this.setLayout(name, key[name]);
	            }
	        }
	        return;
	    }
	    this._layout[key] = val;
	};
	
	/**
	 * Get layout property.
	 * @param  {string} key.
	 * @return {*}
	 */
	listProto.getLayout = function (key) {
	    return this._layout[key];
	};
	
	/**
	 * Get layout of single data item
	 * @param {number} idx
	 */
	listProto.getItemLayout = function (idx) {
	    return this._itemLayouts[idx];
	},
	
	/**
	 * Set layout of single data item
	 * @param {number} idx
	 * @param {Object} layout
	 * @param {boolean=} [merge=false]
	 */
	listProto.setItemLayout = function (idx, layout, merge) {
	    this._itemLayouts[idx] = merge ? zrUtil.extend(this._itemLayouts[idx] || {}, layout) : layout;
	},
	
	/**
	 * Get visual property of single data item
	 * @param {number} idx
	 * @param {string} key
	 * @param {boolean} ignoreParent
	 */
	listProto.getItemVisual = function (idx, key, ignoreParent) {
	    var itemVisual = this._itemVisuals[idx];
	    var val = itemVisual && itemVisual[key];
	    if (val == null && !ignoreParent) {
	        // Use global visual property
	        return this.getVisual(key);
	    }
	    return val;
	},
	
	/**
	 * Set visual property of single data item
	 *
	 * @param {number} idx
	 * @param {string|Object} key
	 * @param {*} [value]
	 *
	 * @example
	 *  setItemVisual(0, 'color', color);
	 *  setItemVisual(0, {
	 *      'color': color
	 *  });
	 */
	listProto.setItemVisual = function (idx, key, value) {
	    var itemVisual = this._itemVisuals[idx] || {};
	    this._itemVisuals[idx] = itemVisual;
	
	    if (isObject(key)) {
	        for (var name in key) {
	            if (key.hasOwnProperty(name)) {
	                itemVisual[name] = key[name];
	            }
	        }
	        return;
	    }
	    itemVisual[key] = value;
	};
	
	var setItemDataAndSeriesIndex = function setItemDataAndSeriesIndex(child) {
	    child.seriesIndex = this.seriesIndex;
	    child.dataIndex = this.dataIndex;
	};
	/**
	 * Set graphic element relative to data. It can be set as null
	 * @param {number} idx
	 * @param {module:zrender/Element} [el]
	 */
	listProto.setItemGraphicEl = function (idx, el) {
	    var hostModel = this.hostModel;
	
	    if (el) {
	        // Add data index and series index for indexing the data by element
	        // Useful in tooltip
	        el.dataIndex = idx;
	        el.seriesIndex = hostModel && hostModel.seriesIndex;
	        if (el.type === 'group') {
	            el.traverse(setItemDataAndSeriesIndex, el);
	        }
	    }
	
	    this._graphicEls[idx] = el;
	};
	
	/**
	 * @param {number} idx
	 * @return {module:zrender/Element}
	 */
	listProto.getItemGraphicEl = function (idx) {
	    return this._graphicEls[idx];
	};
	
	/**
	 * @param {Function} cb
	 * @param {*} context
	 */
	listProto.eachItemGraphicEl = function (cb, context) {
	    zrUtil.each(this._graphicEls, function (el, idx) {
	        if (el) {
	            cb && cb.call(context, el, idx);
	        }
	    });
	};
	
	/**
	 * Shallow clone a new list except visual and layout properties, and graph elements.
	 * New list only change the indices.
	 */
	listProto.cloneShallow = function () {
	    var dimensionInfoList = zrUtil.map(this.dimensions, this.getDimensionInfo, this);
	    var list = new List(dimensionInfoList, this.hostModel);
	
	    // FIXME
	    list._storage = this._storage;
	
	    transferImmuProperties(list, this, this._wrappedMethods);
	
	    list.indices = this.indices.slice();
	
	    return list;
	};
	
	/**
	 * Wrap some method to add more feature
	 * @param {string} methodName
	 * @param {Function} injectFunction
	 */
	listProto.wrapMethod = function (methodName, injectFunction) {
	    var originalMethod = this[methodName];
	    if (typeof originalMethod !== 'function') {
	        return;
	    }
	    this._wrappedMethods = this._wrappedMethods || [];
	    this._wrappedMethods.push(methodName);
	    this[methodName] = function () {
	        var res = originalMethod.apply(this, arguments);
	        return injectFunction.call(this, res);
	    };
	};
	
	module.exports = List;
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 316 */
/***/ function(module, exports) {

	'use strict';
	
	function defaultKeyGetter(item) {
	    return item;
	}
	
	function DataDiffer(oldArr, newArr, oldKeyGetter, newKeyGetter) {
	    this._old = oldArr;
	    this._new = newArr;
	
	    this._oldKeyGetter = oldKeyGetter || defaultKeyGetter;
	    this._newKeyGetter = newKeyGetter || defaultKeyGetter;
	}
	
	DataDiffer.prototype = {
	
	    constructor: DataDiffer,
	
	    /**
	     * Callback function when add a data
	     */
	    add: function add(func) {
	        this._add = func;
	        return this;
	    },
	
	    /**
	     * Callback function when update a data
	     */
	    update: function update(func) {
	        this._update = func;
	        return this;
	    },
	
	    /**
	     * Callback function when remove a data
	     */
	    remove: function remove(func) {
	        this._remove = func;
	        return this;
	    },
	
	    execute: function execute() {
	        var oldArr = this._old;
	        var newArr = this._new;
	        var oldKeyGetter = this._oldKeyGetter;
	        var newKeyGetter = this._newKeyGetter;
	
	        var oldDataIndexMap = {};
	        var newDataIndexMap = {};
	        var i;
	
	        initIndexMap(oldArr, oldDataIndexMap, oldKeyGetter);
	        initIndexMap(newArr, newDataIndexMap, newKeyGetter);
	
	        // Travel by inverted order to make sure order consistency
	        // when duplicate keys exists (consider newDataIndex.pop() below).
	        // For performance consideration, these code below do not look neat.
	        for (i = 0; i < oldArr.length; i++) {
	            var key = oldKeyGetter(oldArr[i]);
	            var idx = newDataIndexMap[key];
	
	            // idx can never be empty array here. see 'set null' logic below.
	            if (idx != null) {
	                // Consider there is duplicate key (for example, use dataItem.name as key).
	                // We should make sure every item in newArr and oldArr can be visited.
	                var len = idx.length;
	                if (len) {
	                    len === 1 && (newDataIndexMap[key] = null);
	                    idx = idx.unshift();
	                } else {
	                    newDataIndexMap[key] = null;
	                }
	                this._update && this._update(idx, i);
	            } else {
	                this._remove && this._remove(i);
	            }
	        }
	
	        for (var key in newDataIndexMap) {
	            if (newDataIndexMap.hasOwnProperty(key)) {
	                var idx = newDataIndexMap[key];
	                if (idx == null) {
	                    continue;
	                }
	                // idx can never be empty array here. see 'set null' logic above.
	                if (!idx.length) {
	                    this._add && this._add(idx);
	                } else {
	                    for (var i = 0, len = idx.length; i < len; i++) {
	                        this._add && this._add(idx[i]);
	                    }
	                }
	            }
	        }
	    }
	};
	
	function initIndexMap(arr, map, keyGetter) {
	    for (var i = 0; i < arr.length; i++) {
	        var key = keyGetter(arr[i]);
	        var existence = map[key];
	        if (existence == null) {
	            map[key] = i;
	        } else {
	            if (!existence.length) {
	                map[key] = existence = [existence];
	            }
	            existence.push(i);
	        }
	    }
	}
	
	module.exports = DataDiffer;

/***/ },
/* 317 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Complete dimensions by data (guess dimension).
	 */
	
	var zrUtil = __webpack_require__(224);
	
	/**
	 * Complete the dimensions array guessed from the data structure.
	 * @param  {Array.<string>} dimensions      Necessary dimensions, like ['x', 'y']
	 * @param  {Array} data                     Data list. [[1, 2, 3], [2, 3, 4]]
	 * @param  {Array.<string>} defaultNames    Default names to fill not necessary dimensions, like ['value']
	 * @param  {string} extraPrefix             Prefix of name when filling the left dimensions.
	 * @return {Array.<string>}
	 */
	function completeDimensions(dimensions, data, defaultNames, extraPrefix) {
	    if (!data) {
	        return dimensions;
	    }
	
	    var value0 = retrieveValue(data[0]);
	    var dimSize = zrUtil.isArray(value0) && value0.length || 1;
	
	    defaultNames = defaultNames || [];
	    extraPrefix = extraPrefix || 'extra';
	    for (var i = 0; i < dimSize; i++) {
	        if (!dimensions[i]) {
	            var name = defaultNames[i] || extraPrefix + (i - defaultNames.length);
	            dimensions[i] = guessOrdinal(data, i) ? { type: 'ordinal', name: name } : name;
	        }
	    }
	
	    return dimensions;
	}
	
	// The rule should not be complex, otherwise user might not
	// be able to known where the data is wrong.
	function guessOrdinal(data, dimIndex) {
	    for (var i = 0, len = data.length; i < len; i++) {
	        var value = retrieveValue(data[i]);
	
	        if (!zrUtil.isArray(value)) {
	            return false;
	        }
	
	        var value = value[dimIndex];
	        if (value != null && isFinite(value)) {
	            return false;
	        } else if (zrUtil.isString(value) && value !== '-') {
	            return true;
	        }
	    }
	    return false;
	}
	
	function retrieveValue(o) {
	    return zrUtil.isArray(o) ? o : zrUtil.isObject(o) ? o.value : o;
	}
	
	module.exports = completeDimensions;

/***/ },
/* 318 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var SymbolDraw = __webpack_require__(319);
	var _Symbol = __webpack_require__(320);
	var lineAnimationDiff = __webpack_require__(322);
	var graphic = __webpack_require__(263);
	
	var polyHelper = __webpack_require__(323);
	
	var ChartView = __webpack_require__(262);
	
	function isPointsSame(points1, points2) {
	    if (points1.length !== points2.length) {
	        return;
	    }
	    for (var i = 0; i < points1.length; i++) {
	        var p1 = points1[i];
	        var p2 = points2[i];
	        if (p1[0] !== p2[0] || p1[1] !== p2[1]) {
	            return;
	        }
	    }
	    return true;
	}
	
	function getSmooth(smooth) {
	    return typeof smooth === 'number' ? smooth : smooth ? 0.3 : 0;
	}
	
	function getAxisExtentWithGap(axis) {
	    var extent = axis.getGlobalExtent();
	    if (axis.onBand) {
	        // Remove extra 1px to avoid line miter in clipped edge
	        var halfBandWidth = axis.getBandWidth() / 2 - 1;
	        var dir = extent[1] > extent[0] ? 1 : -1;
	        extent[0] += dir * halfBandWidth;
	        extent[1] -= dir * halfBandWidth;
	    }
	    return extent;
	}
	
	function sign(val) {
	    return val >= 0 ? 1 : -1;
	}
	/**
	 * @param {module:echarts/coord/cartesian/Cartesian2D|module:echarts/coord/polar/Polar} coordSys
	 * @param {module:echarts/data/List} data
	 * @param {Array.<Array.<number>>} points
	 * @private
	 */
	function getStackedOnPoints(coordSys, data) {
	    var baseAxis = coordSys.getBaseAxis();
	    var valueAxis = coordSys.getOtherAxis(baseAxis);
	    var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];
	
	    var valueDim = valueAxis.dim;
	
	    var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	
	    return data.mapArray([valueDim], function (val, idx) {
	        var stackedOnSameSign;
	        var stackedOn = data.stackedOn;
	        // Find first stacked value with same sign
	        while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	            stackedOnSameSign = stackedOn;
	            break;
	        }
	        var stackedData = [];
	        stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	        stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	
	        return coordSys.dataToPoint(stackedData);
	    }, true);
	}
	
	function queryDataIndex(data, payload) {
	    if (payload.dataIndex != null) {
	        return payload.dataIndex;
	    } else if (payload.name != null) {
	        return data.indexOfName(payload.name);
	    }
	}
	
	function createGridClipShape(cartesian, hasAnimation, seriesModel) {
	    var xExtent = getAxisExtentWithGap(cartesian.getAxis('x'));
	    var yExtent = getAxisExtentWithGap(cartesian.getAxis('y'));
	    var isHorizontal = cartesian.getBaseAxis().isHorizontal();
	
	    var x = xExtent[0];
	    var y = yExtent[0];
	    var width = xExtent[1] - x;
	    var height = yExtent[1] - y;
	    // Expand clip shape to avoid line value exceeds axis
	    if (!seriesModel.get('clipOverflow')) {
	        if (isHorizontal) {
	            y -= height;
	            height *= 3;
	        } else {
	            x -= width;
	            width *= 3;
	        }
	    }
	    var clipPath = new graphic.Rect({
	        shape: {
	            x: x,
	            y: y,
	            width: width,
	            height: height
	        }
	    });
	
	    if (hasAnimation) {
	        clipPath.shape[isHorizontal ? 'width' : 'height'] = 0;
	        graphic.initProps(clipPath, {
	            shape: {
	                width: width,
	                height: height
	            }
	        }, seriesModel);
	    }
	
	    return clipPath;
	}
	
	function createPolarClipShape(polar, hasAnimation, seriesModel) {
	    var angleAxis = polar.getAngleAxis();
	    var radiusAxis = polar.getRadiusAxis();
	
	    var radiusExtent = radiusAxis.getExtent();
	    var angleExtent = angleAxis.getExtent();
	
	    var RADIAN = Math.PI / 180;
	
	    var clipPath = new graphic.Sector({
	        shape: {
	            cx: polar.cx,
	            cy: polar.cy,
	            r0: radiusExtent[0],
	            r: radiusExtent[1],
	            startAngle: -angleExtent[0] * RADIAN,
	            endAngle: -angleExtent[1] * RADIAN,
	            clockwise: angleAxis.inverse
	        }
	    });
	
	    if (hasAnimation) {
	        clipPath.shape.endAngle = -angleExtent[0] * RADIAN;
	        graphic.initProps(clipPath, {
	            shape: {
	                endAngle: -angleExtent[1] * RADIAN
	            }
	        }, seriesModel);
	    }
	
	    return clipPath;
	}
	
	function createClipShape(coordSys, hasAnimation, seriesModel) {
	    return coordSys.type === 'polar' ? createPolarClipShape(coordSys, hasAnimation, seriesModel) : createGridClipShape(coordSys, hasAnimation, seriesModel);
	}
	
	module.exports = ChartView.extend({
	
	    type: 'line',
	
	    init: function init() {
	        var lineGroup = new graphic.Group();
	
	        var symbolDraw = new SymbolDraw();
	        this.group.add(symbolDraw.group);
	
	        this._symbolDraw = symbolDraw;
	        this._lineGroup = lineGroup;
	    },
	
	    render: function render(seriesModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var group = this.group;
	        var data = seriesModel.getData();
	        var lineStyleModel = seriesModel.getModel('lineStyle.normal');
	        var areaStyleModel = seriesModel.getModel('areaStyle.normal');
	
	        var points = data.mapArray(data.getItemLayout, true);
	
	        var isCoordSysPolar = coordSys.type === 'polar';
	        var prevCoordSys = this._coordSys;
	
	        var symbolDraw = this._symbolDraw;
	        var polyline = this._polyline;
	        var polygon = this._polygon;
	
	        var lineGroup = this._lineGroup;
	
	        var hasAnimation = seriesModel.get('animation');
	
	        var isAreaChart = !areaStyleModel.isEmpty();
	        var stackedOnPoints = getStackedOnPoints(coordSys, data);
	
	        var showSymbol = seriesModel.get('showSymbol');
	
	        var isSymbolIgnore = showSymbol && !isCoordSysPolar && !seriesModel.get('showAllSymbol') && this._getSymbolIgnoreFunc(data, coordSys);
	
	        // Remove temporary symbols
	        var oldData = this._data;
	        oldData && oldData.eachItemGraphicEl(function (el, idx) {
	            if (el.__temp) {
	                group.remove(el);
	                oldData.setItemGraphicEl(idx, null);
	            }
	        });
	
	        // Remove previous created symbols if showSymbol changed to false
	        if (!showSymbol) {
	            symbolDraw.remove();
	        }
	
	        group.add(lineGroup);
	
	        // Initialization animation or coordinate system changed
	        if (!(polyline && prevCoordSys.type === coordSys.type)) {
	            showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	
	            polyline = this._newPolyline(points, coordSys, hasAnimation);
	            if (isAreaChart) {
	                polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	            }
	            lineGroup.setClipPath(createClipShape(coordSys, true, seriesModel));
	        } else {
	            if (isAreaChart && !polygon) {
	                // If areaStyle is added
	                polygon = this._newPolygon(points, stackedOnPoints, coordSys, hasAnimation);
	            } else if (polygon && !isAreaChart) {
	                // If areaStyle is removed
	                lineGroup.remove(polygon);
	                polygon = this._polygon = null;
	            }
	
	            // Update clipPath
	            lineGroup.setClipPath(createClipShape(coordSys, false, seriesModel));
	
	            // Always update, or it is wrong in the case turning on legend
	            // because points are not changed
	            showSymbol && symbolDraw.updateData(data, isSymbolIgnore);
	
	            // Stop symbol animation and sync with line points
	            // FIXME performance?
	            data.eachItemGraphicEl(function (el) {
	                el.stopAnimation(true);
	            });
	
	            // In the case data zoom triggerred refreshing frequently
	            // Data may not change if line has a category axis. So it should animate nothing
	            if (!isPointsSame(this._stackedOnPoints, stackedOnPoints) || !isPointsSame(this._points, points)) {
	                if (hasAnimation) {
	                    this._updateAnimation(data, stackedOnPoints, coordSys, api);
	                } else {
	                    polyline.setShape({
	                        points: points
	                    });
	                    polygon && polygon.setShape({
	                        points: points,
	                        stackedOnPoints: stackedOnPoints
	                    });
	                }
	            }
	        }
	
	        polyline.setStyle(zrUtil.defaults(
	        // Use color in lineStyle first
	        lineStyleModel.getLineStyle(), {
	            stroke: data.getVisual('color'),
	            lineJoin: 'bevel'
	        }));
	
	        var smooth = seriesModel.get('smooth');
	        smooth = getSmooth(seriesModel.get('smooth'));
	        polyline.setShape({
	            smooth: smooth,
	            smoothMonotone: seriesModel.get('smoothMonotone')
	        });
	
	        if (polygon) {
	            var stackedOn = data.stackedOn;
	            var stackedOnSmooth = 0;
	
	            polygon.style.opacity = 0.7;
	            polygon.setStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	                fill: data.getVisual('color'),
	                lineJoin: 'bevel'
	            }));
	
	            if (stackedOn) {
	                var stackedOnSeries = stackedOn.hostModel;
	                stackedOnSmooth = getSmooth(stackedOnSeries.get('smooth'));
	            }
	
	            polygon.setShape({
	                smooth: smooth,
	                stackedOnSmooth: stackedOnSmooth,
	                smoothMonotone: seriesModel.get('smoothMonotone')
	            });
	        }
	
	        this._data = data;
	        // Save the coordinate system for transition animation when data changed
	        this._coordSys = coordSys;
	        this._stackedOnPoints = stackedOnPoints;
	        this._points = points;
	    },
	
	    highlight: function highlight(seriesModel, ecModel, api, payload) {
	        var data = seriesModel.getData();
	        var dataIndex = queryDataIndex(data, payload);
	
	        if (dataIndex != null && dataIndex >= 0) {
	            var symbol = data.getItemGraphicEl(dataIndex);
	            if (!symbol) {
	                // Create a temporary symbol if it is not exists
	                var pt = data.getItemLayout(dataIndex);
	                symbol = new _Symbol(data, dataIndex, api);
	                symbol.position = pt;
	                symbol.setZ(seriesModel.get('zlevel'), seriesModel.get('z'));
	                symbol.ignore = isNaN(pt[0]) || isNaN(pt[1]);
	                symbol.__temp = true;
	                data.setItemGraphicEl(dataIndex, symbol);
	
	                // Stop scale animation
	                symbol.stopSymbolAnimation(true);
	
	                this.group.add(symbol);
	            }
	            symbol.highlight();
	        } else {
	            // Highlight whole series
	            ChartView.prototype.highlight.call(this, seriesModel, ecModel, api, payload);
	        }
	    },
	
	    downplay: function downplay(seriesModel, ecModel, api, payload) {
	        var data = seriesModel.getData();
	        var dataIndex = queryDataIndex(data, payload);
	        if (dataIndex != null && dataIndex >= 0) {
	            var symbol = data.getItemGraphicEl(dataIndex);
	            if (symbol) {
	                if (symbol.__temp) {
	                    data.setItemGraphicEl(dataIndex, null);
	                    this.group.remove(symbol);
	                } else {
	                    symbol.downplay();
	                }
	            }
	        } else {
	            // Downplay whole series
	            ChartView.prototype.downplay.call(this, seriesModel, ecModel, api, payload);
	        }
	    },
	
	    /**
	     * @param {module:zrender/container/Group} group
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    _newPolyline: function _newPolyline(points) {
	        var polyline = this._polyline;
	        // Remove previous created polyline
	        if (polyline) {
	            this._lineGroup.remove(polyline);
	        }
	
	        polyline = new polyHelper.Polyline({
	            shape: {
	                points: points
	            },
	            silent: true,
	            z2: 10
	        });
	
	        this._lineGroup.add(polyline);
	
	        this._polyline = polyline;
	
	        return polyline;
	    },
	
	    /**
	     * @param {module:zrender/container/Group} group
	     * @param {Array.<Array.<number>>} stackedOnPoints
	     * @param {Array.<Array.<number>>} points
	     * @private
	     */
	    _newPolygon: function _newPolygon(points, stackedOnPoints) {
	        var polygon = this._polygon;
	        // Remove previous created polygon
	        if (polygon) {
	            this._lineGroup.remove(polygon);
	        }
	
	        polygon = new polyHelper.Polygon({
	            shape: {
	                points: points,
	                stackedOnPoints: stackedOnPoints
	            },
	            silent: true
	        });
	
	        this._lineGroup.add(polygon);
	
	        this._polygon = polygon;
	        return polygon;
	    },
	    /**
	     * @private
	     */
	    _getSymbolIgnoreFunc: function _getSymbolIgnoreFunc(data, coordSys) {
	        var categoryAxis = coordSys.getAxesByScale('ordinal')[0];
	        // `getLabelInterval` is provided by echarts/component/axis
	        if (categoryAxis && categoryAxis.isLabelIgnored) {
	            return zrUtil.bind(categoryAxis.isLabelIgnored, categoryAxis);
	        }
	    },
	
	    /**
	     * @private
	     */
	    // FIXME Two value axis
	    _updateAnimation: function _updateAnimation(data, stackedOnPoints, coordSys, api) {
	        var polyline = this._polyline;
	        var polygon = this._polygon;
	        var seriesModel = data.hostModel;
	
	        var diff = lineAnimationDiff(this._data, data, this._stackedOnPoints, stackedOnPoints, this._coordSys, coordSys);
	        polyline.shape.points = diff.current;
	
	        graphic.updateProps(polyline, {
	            shape: {
	                points: diff.next
	            }
	        }, seriesModel);
	
	        if (polygon) {
	            polygon.setShape({
	                points: diff.current,
	                stackedOnPoints: diff.stackedOnCurrent
	            });
	            graphic.updateProps(polygon, {
	                shape: {
	                    points: diff.next,
	                    stackedOnPoints: diff.stackedOnNext
	                }
	            }, seriesModel);
	        }
	
	        var updatedDataInfo = [];
	        var diffStatus = diff.status;
	
	        for (var i = 0; i < diffStatus.length; i++) {
	            var cmd = diffStatus[i].cmd;
	            if (cmd === '=') {
	                var el = data.getItemGraphicEl(diffStatus[i].idx1);
	                if (el) {
	                    updatedDataInfo.push({
	                        el: el,
	                        ptIdx: i // Index of points
	                    });
	                }
	            }
	        }
	
	        if (polyline.animators && polyline.animators.length) {
	            polyline.animators[0].during(function () {
	                for (var i = 0; i < updatedDataInfo.length; i++) {
	                    var el = updatedDataInfo[i].el;
	                    el.attr('position', polyline.shape.points[updatedDataInfo[i].ptIdx]);
	                }
	            });
	        }
	    },
	
	    remove: function remove(ecModel) {
	        var group = this.group;
	        var oldData = this._data;
	        this._lineGroup.removeAll();
	        this._symbolDraw.remove(true);
	        // Remove temporary created elements when highlighting
	        oldData && oldData.eachItemGraphicEl(function (el, idx) {
	            if (el.__temp) {
	                group.remove(el);
	                oldData.setItemGraphicEl(idx, null);
	            }
	        });
	
	        this._polyline = this._polygon = this._coordSys = this._points = this._stackedOnPoints = this._data = null;
	    }
	});

/***/ },
/* 319 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/SymbolDraw
	 */
	
	var graphic = __webpack_require__(263);
	var _Symbol = __webpack_require__(320);
	
	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/SymbolDraw
	 * @param {module:zrender/graphic/Group} [symbolCtor]
	 */
	function SymbolDraw(symbolCtor) {
	    this.group = new graphic.Group();
	
	    this._symbolCtor = symbolCtor || _Symbol;
	}
	
	var symbolDrawProto = SymbolDraw.prototype;
	
	function symbolNeedsDraw(data, idx, isIgnore) {
	    var point = data.getItemLayout(idx);
	    return point && !isNaN(point[0]) && !isNaN(point[1]) && !(isIgnore && isIgnore(idx)) && data.getItemVisual(idx, 'symbol') !== 'none';
	}
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 * @param {Array.<boolean>} [isIgnore]
	 */
	symbolDrawProto.updateData = function (data, isIgnore) {
	    var group = this.group;
	    var seriesModel = data.hostModel;
	    var oldData = this._data;
	
	    var SymbolCtor = this._symbolCtor;
	
	    data.diff(oldData).add(function (newIdx) {
	        var point = data.getItemLayout(newIdx);
	        if (symbolNeedsDraw(data, newIdx, isIgnore)) {
	            var symbolEl = new SymbolCtor(data, newIdx);
	            symbolEl.attr('position', point);
	            data.setItemGraphicEl(newIdx, symbolEl);
	            group.add(symbolEl);
	        }
	    }).update(function (newIdx, oldIdx) {
	        var symbolEl = oldData.getItemGraphicEl(oldIdx);
	        var point = data.getItemLayout(newIdx);
	        if (!symbolNeedsDraw(data, newIdx, isIgnore)) {
	            group.remove(symbolEl);
	            return;
	        }
	        if (!symbolEl) {
	            symbolEl = new SymbolCtor(data, newIdx);
	            symbolEl.attr('position', point);
	        } else {
	            symbolEl.updateData(data, newIdx);
	            graphic.updateProps(symbolEl, {
	                position: point
	            }, seriesModel);
	        }
	
	        // Add back
	        group.add(symbolEl);
	
	        data.setItemGraphicEl(newIdx, symbolEl);
	    }).remove(function (oldIdx) {
	        var el = oldData.getItemGraphicEl(oldIdx);
	        el && el.fadeOut(function () {
	            group.remove(el);
	        });
	    }).execute();
	
	    this._data = data;
	};
	
	symbolDrawProto.updateLayout = function () {
	    var data = this._data;
	    if (data) {
	        // Not use animation
	        data.eachItemGraphicEl(function (el, idx) {
	            el.attr('position', data.getItemLayout(idx));
	        });
	    }
	};
	
	symbolDrawProto.remove = function (enableAnimation) {
	    var group = this.group;
	    var data = this._data;
	    if (data) {
	        if (enableAnimation) {
	            data.eachItemGraphicEl(function (el) {
	                el.fadeOut(function () {
	                    group.remove(el);
	                });
	            });
	        } else {
	            group.removeAll();
	        }
	    }
	};
	
	module.exports = SymbolDraw;

/***/ },
/* 320 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/Symbol
	 */
	
	var zrUtil = __webpack_require__(224);
	var symbolUtil = __webpack_require__(321);
	var graphic = __webpack_require__(263);
	var numberUtil = __webpack_require__(228);
	
	function normalizeSymbolSize(symbolSize) {
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [+symbolSize, +symbolSize];
	    }
	    return symbolSize;
	}
	
	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/Symbol}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */
	function _Symbol(data, idx) {
	    graphic.Group.call(this);
	
	    this.updateData(data, idx);
	}
	
	var symbolProto = _Symbol.prototype;
	
	function driftSymbol(dx, dy) {
	    this.parent.drift(dx, dy);
	}
	
	symbolProto._createSymbol = function (symbolType, data, idx) {
	    // Remove paths created before
	    this.removeAll();
	
	    var seriesModel = data.hostModel;
	    var color = data.getItemVisual(idx, 'color');
	
	    var symbolPath = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	
	    symbolPath.attr({
	        style: {
	            strokeNoScale: true
	        },
	        z2: 100,
	        culling: true,
	        scale: [0, 0]
	    });
	    // Rewrite drift method
	    symbolPath.drift = driftSymbol;
	
	    var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	
	    graphic.initProps(symbolPath, {
	        scale: size
	    }, seriesModel);
	
	    this._symbolType = symbolType;
	
	    this.add(symbolPath);
	};
	
	/**
	 * Stop animation
	 * @param {boolean} toLastFrame
	 */
	symbolProto.stopSymbolAnimation = function (toLastFrame) {
	    this.childAt(0).stopAnimation(toLastFrame);
	};
	
	/**
	 * Get scale(aka, current symbol size).
	 * Including the change caused by animation
	 * @param {Array.<number>} toLastFrame
	 */
	symbolProto.getScale = function () {
	    return this.childAt(0).scale;
	};
	
	/**
	 * Highlight symbol
	 */
	symbolProto.highlight = function () {
	    this.childAt(0).trigger('emphasis');
	};
	
	/**
	 * Downplay symbol
	 */
	symbolProto.downplay = function () {
	    this.childAt(0).trigger('normal');
	};
	
	/**
	 * @param {number} zlevel
	 * @param {number} z
	 */
	symbolProto.setZ = function (zlevel, z) {
	    var symbolPath = this.childAt(0);
	    symbolPath.zlevel = zlevel;
	    symbolPath.z = z;
	};
	
	symbolProto.setDraggable = function (draggable) {
	    var symbolPath = this.childAt(0);
	    symbolPath.draggable = draggable;
	    symbolPath.cursor = draggable ? 'move' : 'pointer';
	};
	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	symbolProto.updateData = function (data, idx) {
	    var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	    var seriesModel = data.hostModel;
	    var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	    if (symbolType !== this._symbolType) {
	        this._createSymbol(symbolType, data, idx);
	    } else {
	        var symbolPath = this.childAt(0);
	        graphic.updateProps(symbolPath, {
	            scale: symbolSize
	        }, seriesModel);
	    }
	    this._updateCommon(data, idx, symbolSize);
	
	    this._seriesModel = seriesModel;
	};
	
	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	var normalLabelAccessPath = ['label', 'normal'];
	var emphasisLabelAccessPath = ['label', 'emphasis'];
	
	symbolProto._updateCommon = function (data, idx, symbolSize) {
	    var symbolPath = this.childAt(0);
	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	    var color = data.getItemVisual(idx, 'color');
	
	    var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	
	    symbolPath.rotation = itemModel.getShallow('symbolRotate') * Math.PI / 180 || 0;
	
	    var symbolOffset = itemModel.getShallow('symbolOffset');
	    if (symbolOffset) {
	        var pos = symbolPath.position;
	        pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	        pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	    }
	
	    symbolPath.setColor(color);
	
	    zrUtil.extend(symbolPath.style,
	    // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke
	    normalItemStyleModel.getItemStyle(['color']));
	
	    var labelModel = itemModel.getModel(normalLabelAccessPath);
	    var hoverLabelModel = itemModel.getModel(emphasisLabelAccessPath);
	
	    var elStyle = symbolPath.style;
	
	    // Get last value dim
	    var dimensions = data.dimensions.slice();
	    var valueDim = dimensions.pop();
	    var dataType;
	    while ((dataType = data.getDimensionInfo(valueDim).type) === 'ordinal' || dataType === 'time') {
	        valueDim = dimensions.pop();
	    }
	
	    if (labelModel.get('show')) {
	        graphic.setText(elStyle, labelModel, color);
	        elStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), data.get(valueDim, idx));
	    } else {
	        elStyle.text = '';
	    }
	
	    if (hoverLabelModel.getShallow('show')) {
	        graphic.setText(hoverStyle, hoverLabelModel, color);
	        hoverStyle.text = zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), data.get(valueDim, idx));
	    } else {
	        hoverStyle.text = '';
	    }
	
	    var size = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	
	    symbolPath.off('mouseover').off('mouseout').off('emphasis').off('normal');
	
	    graphic.setHoverStyle(symbolPath, hoverStyle);
	
	    if (itemModel.getShallow('hoverAnimation')) {
	        var onEmphasis = function onEmphasis() {
	            var ratio = size[1] / size[0];
	            this.animateTo({
	                scale: [Math.max(size[0] * 1.1, size[0] + 3), Math.max(size[1] * 1.1, size[1] + 3 * ratio)]
	            }, 400, 'elasticOut');
	        };
	        var onNormal = function onNormal() {
	            this.animateTo({
	                scale: size
	            }, 400, 'elasticOut');
	        };
	        symbolPath.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	    }
	};
	
	symbolProto.fadeOut = function (cb) {
	    var symbolPath = this.childAt(0);
	    // Not show text when animating
	    symbolPath.style.text = '';
	    graphic.updateProps(symbolPath, {
	        scale: [0, 0]
	    }, this._seriesModel, cb);
	};
	
	zrUtil.inherits(_Symbol, graphic.Group);
	
	module.exports = _Symbol;

/***/ },
/* 321 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Symbol factory
	
	var graphic = __webpack_require__(263);
	var BoundingRect = __webpack_require__(236);
	
	/**
	 * Triangle shape
	 * @inner
	 */
	var Triangle = graphic.extendShape({
	    type: 'triangle',
	    shape: {
	        cx: 0,
	        cy: 0,
	        width: 0,
	        height: 0
	    },
	    buildPath: function buildPath(path, shape) {
	        var cx = shape.cx;
	        var cy = shape.cy;
	        var width = shape.width / 2;
	        var height = shape.height / 2;
	        path.moveTo(cx, cy - height);
	        path.lineTo(cx + width, cy + height);
	        path.lineTo(cx - width, cy + height);
	        path.closePath();
	    }
	});
	/**
	 * Diamond shape
	 * @inner
	 */
	var Diamond = graphic.extendShape({
	    type: 'diamond',
	    shape: {
	        cx: 0,
	        cy: 0,
	        width: 0,
	        height: 0
	    },
	    buildPath: function buildPath(path, shape) {
	        var cx = shape.cx;
	        var cy = shape.cy;
	        var width = shape.width / 2;
	        var height = shape.height / 2;
	        path.moveTo(cx, cy - height);
	        path.lineTo(cx + width, cy);
	        path.lineTo(cx, cy + height);
	        path.lineTo(cx - width, cy);
	        path.closePath();
	    }
	});
	
	/**
	 * Pin shape
	 * @inner
	 */
	var Pin = graphic.extendShape({
	    type: 'pin',
	    shape: {
	        // x, y on the cusp
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },
	
	    buildPath: function buildPath(path, shape) {
	        var x = shape.x;
	        var y = shape.y;
	        var w = shape.width / 5 * 3;
	        // Height must be larger than width
	        var h = Math.max(w, shape.height);
	        var r = w / 2;
	
	        // Dist on y with tangent point and circle center
	        var dy = r * r / (h - r);
	        var cy = y - h + r + dy;
	        var angle = Math.asin(dy / r);
	        // Dist on x with tangent point and circle center
	        var dx = Math.cos(angle) * r;
	
	        var tanX = Math.sin(angle);
	        var tanY = Math.cos(angle);
	
	        path.arc(x, cy, r, Math.PI - angle, Math.PI * 2 + angle);
	
	        var cpLen = r * 0.6;
	        var cpLen2 = r * 0.7;
	        path.bezierCurveTo(x + dx - tanX * cpLen, cy + dy + tanY * cpLen, x, y - cpLen2, x, y);
	        path.bezierCurveTo(x, y - cpLen2, x - dx + tanX * cpLen, cy + dy + tanY * cpLen, x - dx, cy + dy);
	        path.closePath();
	    }
	});
	
	/**
	 * Arrow shape
	 * @inner
	 */
	var Arrow = graphic.extendShape({
	
	    type: 'arrow',
	
	    shape: {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var height = shape.height;
	        var width = shape.width;
	        var x = shape.x;
	        var y = shape.y;
	        var dx = width / 3 * 2;
	        ctx.moveTo(x, y);
	        ctx.lineTo(x + dx, y + height);
	        ctx.lineTo(x, y + height / 4 * 3);
	        ctx.lineTo(x - dx, y + height);
	        ctx.lineTo(x, y);
	        ctx.closePath();
	    }
	});
	
	/**
	 * Map of path contructors
	 * @type {Object.<string, module:zrender/graphic/Path>}
	 */
	var symbolCtors = {
	    line: graphic.Line,
	
	    rect: graphic.Rect,
	
	    roundRect: graphic.Rect,
	
	    square: graphic.Rect,
	
	    circle: graphic.Circle,
	
	    diamond: Diamond,
	
	    pin: Pin,
	
	    arrow: Arrow,
	
	    triangle: Triangle
	};
	
	var symbolShapeMakers = {
	
	    line: function line(x, y, w, h, shape) {
	        // FIXME
	        shape.x1 = x;
	        shape.y1 = y + h / 2;
	        shape.x2 = x + w;
	        shape.y2 = y + h / 2;
	    },
	
	    rect: function rect(x, y, w, h, shape) {
	        shape.x = x;
	        shape.y = y;
	        shape.width = w;
	        shape.height = h;
	    },
	
	    roundRect: function roundRect(x, y, w, h, shape) {
	        shape.x = x;
	        shape.y = y;
	        shape.width = w;
	        shape.height = h;
	        shape.r = Math.min(w, h) / 4;
	    },
	
	    square: function square(x, y, w, h, shape) {
	        var size = Math.min(w, h);
	        shape.x = x;
	        shape.y = y;
	        shape.width = size;
	        shape.height = size;
	    },
	
	    circle: function circle(x, y, w, h, shape) {
	        // Put circle in the center of square
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.r = Math.min(w, h) / 2;
	    },
	
	    diamond: function diamond(x, y, w, h, shape) {
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },
	
	    pin: function pin(x, y, w, h, shape) {
	        shape.x = x + w / 2;
	        shape.y = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },
	
	    arrow: function arrow(x, y, w, h, shape) {
	        shape.x = x + w / 2;
	        shape.y = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    },
	
	    triangle: function triangle(x, y, w, h, shape) {
	        shape.cx = x + w / 2;
	        shape.cy = y + h / 2;
	        shape.width = w;
	        shape.height = h;
	    }
	};
	
	var symbolBuildProxies = {};
	for (var name in symbolCtors) {
	    symbolBuildProxies[name] = new symbolCtors[name]();
	}
	
	var _Symbol = graphic.extendShape({
	
	    type: 'symbol',
	
	    shape: {
	        symbolType: '',
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0
	    },
	
	    beforeBrush: function beforeBrush() {
	        var style = this.style;
	        var shape = this.shape;
	        // FIXME
	        if (shape.symbolType === 'pin' && style.textPosition === 'inside') {
	            style.textPosition = ['50%', '40%'];
	            style.textAlign = 'center';
	            style.textVerticalAlign = 'middle';
	        }
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var symbolType = shape.symbolType;
	        var proxySymbol = symbolBuildProxies[symbolType];
	        if (shape.symbolType !== 'none') {
	            if (!proxySymbol) {
	                // Default rect
	                symbolType = 'rect';
	                proxySymbol = symbolBuildProxies[symbolType];
	            }
	            symbolShapeMakers[symbolType](shape.x, shape.y, shape.width, shape.height, proxySymbol.shape);
	            proxySymbol.buildPath(ctx, proxySymbol.shape);
	        }
	    }
	});
	
	// Provide setColor helper method to avoid determine if set the fill or stroke outside
	var symbolPathSetColor = function symbolPathSetColor(color) {
	    if (this.type !== 'image') {
	        var symbolStyle = this.style;
	        var symbolShape = this.shape;
	        if (symbolShape && symbolShape.symbolType === 'line') {
	            symbolStyle.stroke = color;
	        } else if (this.__isEmptyBrush) {
	            symbolStyle.stroke = color;
	            symbolStyle.fill = '#fff';
	        } else {
	            // FIXME 判断图形默认是填充还是描边，使用 onlyStroke ?
	            symbolStyle.fill && (symbolStyle.fill = color);
	            symbolStyle.stroke && (symbolStyle.stroke = color);
	        }
	        this.dirty();
	    }
	};
	
	var symbolUtil = {
	    /**
	     * Create a symbol element with given symbol configuration: shape, x, y, width, height, color
	     * @param {string} symbolType
	     * @param {number} x
	     * @param {number} y
	     * @param {number} w
	     * @param {number} h
	     * @param {string} color
	     */
	    createSymbol: function createSymbol(symbolType, x, y, w, h, color) {
	        var isEmpty = symbolType.indexOf('empty') === 0;
	        if (isEmpty) {
	            symbolType = symbolType.substr(5, 1).toLowerCase() + symbolType.substr(6);
	        }
	        var symbolPath;
	
	        if (symbolType.indexOf('image://') === 0) {
	            symbolPath = new graphic.Image({
	                style: {
	                    image: symbolType.slice(8),
	                    x: x,
	                    y: y,
	                    width: w,
	                    height: h
	                }
	            });
	        } else if (symbolType.indexOf('path://') === 0) {
	            symbolPath = graphic.makePath(symbolType.slice(7), {}, new BoundingRect(x, y, w, h));
	        } else {
	            symbolPath = new _Symbol({
	                shape: {
	                    symbolType: symbolType,
	                    x: x,
	                    y: y,
	                    width: w,
	                    height: h
	                }
	            });
	        }
	
	        symbolPath.__isEmptyBrush = isEmpty;
	
	        symbolPath.setColor = symbolPathSetColor;
	
	        symbolPath.setColor(color);
	
	        return symbolPath;
	    }
	};
	
	module.exports = symbolUtil;

/***/ },
/* 322 */
/***/ function(module, exports) {

	'use strict';
	
	// var arrayDiff = require('zrender/lib/core/arrayDiff');
	// 'zrender/core/arrayDiff' has been used before, but it did
	// not do well in performance when roam with fixed dataZoom window.
	
	function sign(val) {
	    return val >= 0 ? 1 : -1;
	}
	
	function getStackedOnPoint(coordSys, data, idx) {
	    var baseAxis = coordSys.getBaseAxis();
	    var valueAxis = coordSys.getOtherAxis(baseAxis);
	    var valueStart = baseAxis.onZero ? 0 : valueAxis.scale.getExtent()[0];
	
	    var valueDim = valueAxis.dim;
	    var baseDataOffset = valueDim === 'x' || valueDim === 'radius' ? 1 : 0;
	
	    var stackedOnSameSign;
	    var stackedOn = data.stackedOn;
	    var val = data.get(valueDim, idx);
	    // Find first stacked value with same sign
	    while (stackedOn && sign(stackedOn.get(valueDim, idx)) === sign(val)) {
	        stackedOnSameSign = stackedOn;
	        break;
	    }
	    var stackedData = [];
	    stackedData[baseDataOffset] = data.get(baseAxis.dim, idx);
	    stackedData[1 - baseDataOffset] = stackedOnSameSign ? stackedOnSameSign.get(valueDim, idx, true) : valueStart;
	
	    return coordSys.dataToPoint(stackedData);
	}
	
	// function convertToIntId(newIdList, oldIdList) {
	//     // Generate int id instead of string id.
	//     // Compare string maybe slow in score function of arrDiff
	
	//     // Assume id in idList are all unique
	//     var idIndicesMap = {};
	//     var idx = 0;
	//     for (var i = 0; i < newIdList.length; i++) {
	//         idIndicesMap[newIdList[i]] = idx;
	//         newIdList[i] = idx++;
	//     }
	//     for (var i = 0; i < oldIdList.length; i++) {
	//         var oldId = oldIdList[i];
	//         // Same with newIdList
	//         if (idIndicesMap[oldId]) {
	//             oldIdList[i] = idIndicesMap[oldId];
	//         }
	//         else {
	//             oldIdList[i] = idx++;
	//         }
	//     }
	// }
	
	function diffData(oldData, newData) {
	    var diffResult = [];
	
	    newData.diff(oldData).add(function (idx) {
	        diffResult.push({ cmd: '+', idx: idx });
	    }).update(function (newIdx, oldIdx) {
	        diffResult.push({ cmd: '=', idx: oldIdx, idx1: newIdx });
	    }).remove(function (idx) {
	        diffResult.push({ cmd: '-', idx: idx });
	    }).execute();
	
	    return diffResult;
	}
	
	module.exports = function (oldData, newData, oldStackedOnPoints, newStackedOnPoints, oldCoordSys, newCoordSys) {
	    var diff = diffData(oldData, newData);
	
	    // var newIdList = newData.mapArray(newData.getId);
	    // var oldIdList = oldData.mapArray(oldData.getId);
	
	    // convertToIntId(newIdList, oldIdList);
	
	    // // FIXME One data ?
	    // diff = arrayDiff(oldIdList, newIdList);
	
	    var currPoints = [];
	    var nextPoints = [];
	    // Points for stacking base line
	    var currStackedPoints = [];
	    var nextStackedPoints = [];
	
	    var status = [];
	    var sortedIndices = [];
	    var rawIndices = [];
	    var dims = newCoordSys.dimensions;
	    for (var i = 0; i < diff.length; i++) {
	        var diffItem = diff[i];
	        var pointAdded = true;
	
	        // FIXME, animation is not so perfect when dataZoom window moves fast
	        // Which is in case remvoing or add more than one data in the tail or head
	        switch (diffItem.cmd) {
	            case '=':
	                var currentPt = oldData.getItemLayout(diffItem.idx);
	                var nextPt = newData.getItemLayout(diffItem.idx1);
	                // If previous data is NaN, use next point directly
	                if (isNaN(currentPt[0]) || isNaN(currentPt[1])) {
	                    currentPt = nextPt.slice();
	                }
	                currPoints.push(currentPt);
	                nextPoints.push(nextPt);
	
	                currStackedPoints.push(oldStackedOnPoints[diffItem.idx]);
	                nextStackedPoints.push(newStackedOnPoints[diffItem.idx1]);
	
	                rawIndices.push(newData.getRawIndex(diffItem.idx1));
	                break;
	            case '+':
	                var idx = diffItem.idx;
	                currPoints.push(oldCoordSys.dataToPoint([newData.get(dims[0], idx, true), newData.get(dims[1], idx, true)]));
	
	                nextPoints.push(newData.getItemLayout(idx).slice());
	
	                currStackedPoints.push(getStackedOnPoint(oldCoordSys, newData, idx));
	                nextStackedPoints.push(newStackedOnPoints[idx]);
	
	                rawIndices.push(newData.getRawIndex(idx));
	                break;
	            case '-':
	                var idx = diffItem.idx;
	                var rawIndex = oldData.getRawIndex(idx);
	                // Data is replaced. In the case of dynamic data queue
	                // FIXME FIXME FIXME
	                if (rawIndex !== idx) {
	                    currPoints.push(oldData.getItemLayout(idx));
	                    nextPoints.push(newCoordSys.dataToPoint([oldData.get(dims[0], idx, true), oldData.get(dims[1], idx, true)]));
	
	                    currStackedPoints.push(oldStackedOnPoints[idx]);
	                    nextStackedPoints.push(getStackedOnPoint(newCoordSys, oldData, idx));
	
	                    rawIndices.push(rawIndex);
	                } else {
	                    pointAdded = false;
	                }
	        }
	
	        // Original indices
	        if (pointAdded) {
	            status.push(diffItem);
	            sortedIndices.push(sortedIndices.length);
	        }
	    }
	
	    // Diff result may be crossed if all items are changed
	    // Sort by data index
	    sortedIndices.sort(function (a, b) {
	        return rawIndices[a] - rawIndices[b];
	    });
	
	    var sortedCurrPoints = [];
	    var sortedNextPoints = [];
	
	    var sortedCurrStackedPoints = [];
	    var sortedNextStackedPoints = [];
	
	    var sortedStatus = [];
	    for (var i = 0; i < sortedIndices.length; i++) {
	        var idx = sortedIndices[i];
	        sortedCurrPoints[i] = currPoints[idx];
	        sortedNextPoints[i] = nextPoints[idx];
	
	        sortedCurrStackedPoints[i] = currStackedPoints[idx];
	        sortedNextStackedPoints[i] = nextStackedPoints[idx];
	
	        sortedStatus[i] = status[idx];
	    }
	
	    return {
	        current: sortedCurrPoints,
	        next: sortedNextPoints,
	
	        stackedOnCurrent: sortedCurrStackedPoints,
	        stackedOnNext: sortedNextStackedPoints,
	
	        status: sortedStatus
	    };
	};

/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Poly path support NaN point
	
	var Path = __webpack_require__(265);
	var vec2 = __webpack_require__(237);
	
	var vec2Min = vec2.min;
	var vec2Max = vec2.max;
	
	var scaleAndAdd = vec2.scaleAndAdd;
	var v2Copy = vec2.copy;
	
	// Temporary variable
	var v = [];
	var cp0 = [];
	var cp1 = [];
	
	function drawSegment(ctx, points, start, stop, len, dir, smoothMin, smoothMax, smooth, smoothMonotone) {
	    var idx = start;
	    for (var k = 0; k < len; k++) {
	        var p = points[idx];
	        if (idx >= stop || idx < 0 || isNaN(p[0]) || isNaN(p[1])) {
	            break;
	        }
	
	        if (idx === start) {
	            ctx[dir > 0 ? 'moveTo' : 'lineTo'](p[0], p[1]);
	            v2Copy(cp0, p);
	        } else {
	            if (smooth > 0) {
	                var prevIdx = idx - dir;
	                var nextIdx = idx + dir;
	
	                var ratioNextSeg = 0.5;
	                var prevP = points[prevIdx];
	                var nextP = points[nextIdx];
	                // Last point
	                if (dir > 0 && (idx === len - 1 || isNaN(nextP[0]) || isNaN(nextP[1])) || dir <= 0 && (idx === 0 || isNaN(nextP[0]) || isNaN(nextP[1]))) {
	                    v2Copy(cp1, p);
	                } else {
	                    // If next data is null
	                    if (isNaN(nextP[0]) || isNaN(nextP[1])) {
	                        nextP = p;
	                    }
	
	                    vec2.sub(v, nextP, prevP);
	
	                    var lenPrevSeg;
	                    var lenNextSeg;
	                    if (smoothMonotone === 'x' || smoothMonotone === 'y') {
	                        var dim = smoothMonotone === 'x' ? 0 : 1;
	                        lenPrevSeg = Math.abs(p[dim] - prevP[dim]);
	                        lenNextSeg = Math.abs(p[dim] - nextP[dim]);
	                    } else {
	                        lenPrevSeg = vec2.dist(p, prevP);
	                        lenNextSeg = vec2.dist(p, nextP);
	                    }
	
	                    // Use ratio of seg length
	                    ratioNextSeg = lenNextSeg / (lenNextSeg + lenPrevSeg);
	
	                    scaleAndAdd(cp1, p, v, -smooth * (1 - ratioNextSeg));
	                }
	                // Smooth constraint
	                vec2Min(cp0, cp0, smoothMax);
	                vec2Max(cp0, cp0, smoothMin);
	                vec2Min(cp1, cp1, smoothMax);
	                vec2Max(cp1, cp1, smoothMin);
	
	                ctx.bezierCurveTo(cp0[0], cp0[1], cp1[0], cp1[1], p[0], p[1]);
	                // cp0 of next segment
	                scaleAndAdd(cp0, p, v, smooth * ratioNextSeg);
	            } else {
	                ctx.lineTo(p[0], p[1]);
	            }
	        }
	
	        idx += dir;
	    }
	
	    return k;
	}
	
	function getBoundingBox(points, smoothConstraint) {
	    var ptMin = [Infinity, Infinity];
	    var ptMax = [-Infinity, -Infinity];
	    if (smoothConstraint) {
	        for (var i = 0; i < points.length; i++) {
	            var pt = points[i];
	            if (pt[0] < ptMin[0]) {
	                ptMin[0] = pt[0];
	            }
	            if (pt[1] < ptMin[1]) {
	                ptMin[1] = pt[1];
	            }
	            if (pt[0] > ptMax[0]) {
	                ptMax[0] = pt[0];
	            }
	            if (pt[1] > ptMax[1]) {
	                ptMax[1] = pt[1];
	            }
	        }
	    }
	    return {
	        min: smoothConstraint ? ptMin : ptMax,
	        max: smoothConstraint ? ptMax : ptMin
	    };
	}
	
	module.exports = {
	
	    Polyline: Path.extend({
	
	        type: 'ec-polyline',
	
	        shape: {
	            points: [],
	
	            smooth: 0,
	
	            smoothConstraint: true,
	
	            smoothMonotone: null
	        },
	
	        style: {
	            fill: null,
	
	            stroke: '#000'
	        },
	
	        buildPath: function buildPath(ctx, shape) {
	            var points = shape.points;
	
	            var i = 0;
	            var len = points.length;
	
	            var result = getBoundingBox(points, shape.smoothConstraint);
	
	            while (i < len) {
	                i += drawSegment(ctx, points, i, len, len, 1, result.min, result.max, shape.smooth, shape.smoothMonotone) + 1;
	            }
	        }
	    }),
	
	    Polygon: Path.extend({
	
	        type: 'ec-polygon',
	
	        shape: {
	            points: [],
	
	            // Offset between stacked base points and points
	            stackedOnPoints: [],
	
	            smooth: 0,
	
	            stackedOnSmooth: 0,
	
	            smoothConstraint: true,
	
	            smoothMonotone: null
	        },
	
	        buildPath: function buildPath(ctx, shape) {
	            var points = shape.points;
	            var stackedOnPoints = shape.stackedOnPoints;
	
	            var i = 0;
	            var len = points.length;
	            var smoothMonotone = shape.smoothMonotone;
	            var bbox = getBoundingBox(points, shape.smoothConstraint);
	            var stackedOnBBox = getBoundingBox(stackedOnPoints, shape.smoothConstraint);
	            while (i < len) {
	                var k = drawSegment(ctx, points, i, len, len, 1, bbox.min, bbox.max, shape.smooth, smoothMonotone);
	                drawSegment(ctx, stackedOnPoints, i + k - 1, len, k, -1, stackedOnBBox.min, stackedOnBBox.max, shape.stackedOnSmooth, smoothMonotone);
	                i += k + 1;
	
	                ctx.closePath();
	            }
	        }
	    })
	};

/***/ },
/* 324 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (seriesType, defaultSymbolType, legendSymbol, ecModel, api) {
	
	    // Encoding visual for all series include which is filtered for legend drawing
	    ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	
	        var symbolType = seriesModel.get('symbol') || defaultSymbolType;
	        var symbolSize = seriesModel.get('symbolSize');
	
	        data.setVisual({
	            legendSymbol: legendSymbol || symbolType,
	            symbol: symbolType,
	            symbolSize: symbolSize
	        });
	
	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            if (typeof symbolSize === 'function') {
	                data.each(function (idx) {
	                    var rawValue = seriesModel.getRawValue(idx);
	                    // FIXME
	                    var params = seriesModel.getDataParams(idx);
	                    data.setItemVisual(idx, 'symbolSize', symbolSize(rawValue, params));
	                });
	            }
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var itemSymbolType = itemModel.get('symbol', true);
	                var itemSymbolSize = itemModel.get('symbolSize', true);
	                // If has item symbol
	                if (itemSymbolType != null) {
	                    data.setItemVisual(idx, 'symbol', itemSymbolType);
	                }
	                if (itemSymbolSize != null) {
	                    // PENDING Transform symbolSize ?
	                    data.setItemVisual(idx, 'symbolSize', itemSymbolSize);
	                }
	            });
	        }
	    });
	};

/***/ },
/* 325 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (seriesType, ecModel, api) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	        var coordSys = seriesModel.coordinateSystem;
	
	        var dims = coordSys.dimensions;
	        data.each(dims, function (x, y, idx) {
	            var point;
	            if (!isNaN(x) && !isNaN(y)) {
	                point = coordSys.dataToPoint([x, y]);
	            } else {
	                // Also {Array.<number>}, not undefined to avoid if...else... statement
	                point = [NaN, NaN];
	            }
	
	            data.setItemLayout(idx, point);
	        }, true);
	    });
	};

/***/ },
/* 326 */
/***/ function(module, exports) {

	'use strict';
	
	var samplers = {
	    average: function average(frame) {
	        var sum = 0;
	        var count = 0;
	        for (var i = 0; i < frame.length; i++) {
	            if (!isNaN(frame[i])) {
	                sum += frame[i];
	                count++;
	            }
	        }
	        // Return NaN if count is 0
	        return count === 0 ? NaN : sum / count;
	    },
	    sum: function sum(frame) {
	        var sum = 0;
	        for (var i = 0; i < frame.length; i++) {
	            // Ignore NaN
	            sum += frame[i] || 0;
	        }
	        return sum;
	    },
	    max: function max(frame) {
	        var max = -Infinity;
	        for (var i = 0; i < frame.length; i++) {
	            frame[i] > max && (max = frame[i]);
	        }
	        return max;
	    },
	    min: function min(frame) {
	        var min = Infinity;
	        for (var i = 0; i < frame.length; i++) {
	            frame[i] < min && (min = frame[i]);
	        }
	        return min;
	    }
	};
	
	var indexSampler = function indexSampler(frame, value) {
	    return Math.round(frame.length / 2);
	};
	module.exports = function (seriesType, ecModel, api) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var data = seriesModel.getData();
	        var sampling = seriesModel.get('sampling');
	        var coordSys = seriesModel.coordinateSystem;
	        // Only cartesian2d support down sampling
	        if (coordSys.type === 'cartesian2d' && sampling) {
	            var baseAxis = coordSys.getBaseAxis();
	            var valueAxis = coordSys.getOtherAxis(baseAxis);
	            var extent = baseAxis.getExtent();
	            // Coordinste system has been resized
	            var size = extent[1] - extent[0];
	            var rate = Math.round(data.count() / size);
	            if (rate > 1) {
	                var sampler;
	                if (typeof sampling === 'string') {
	                    sampler = samplers[sampling];
	                } else if (typeof sampling === 'function') {
	                    sampler = sampling;
	                }
	                if (sampler) {
	                    data = data.downSample(valueAxis.dim, 1 / rate, sampler, indexSampler);
	                    seriesModel.setData(data);
	                }
	            }
	        }
	    }, this);
	};

/***/ },
/* 327 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	
	__webpack_require__(328);
	
	__webpack_require__(345);
	
	// Grid view
	__webpack_require__(222).extendComponentView({
	
	    type: 'grid',
	
	    render: function render(gridModel, ecModel) {
	        this.group.removeAll();
	        if (gridModel.get('show')) {
	            this.group.add(new graphic.Rect({
	                shape: gridModel.coordinateSystem.getRect(),
	                style: zrUtil.defaults({
	                    fill: gridModel.get('backgroundColor')
	                }, gridModel.getItemStyle()),
	                silent: true
	            }));
	        }
	    }
	});

/***/ },
/* 328 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Grid is a region which contains at most 4 cartesian systems
	 *
	 * TODO Default cartesian
	 */
	var factory = exports;
	
	var layout = __webpack_require__(242);
	var axisHelper = __webpack_require__(329);
	
	var zrUtil = __webpack_require__(224);
	var Cartesian2D = __webpack_require__(335);
	var Axis2D = __webpack_require__(337);
	
	var each = zrUtil.each;
	
	var ifAxisCrossZero = axisHelper.ifAxisCrossZero;
	var niceScaleExtent = axisHelper.niceScaleExtent;
	
	// 依赖 GridModel, AxisModel 做预处理
	__webpack_require__(340);
	
	/**
	 * Check if the axis is used in the specified grid
	 * @inner
	 */
	function isAxisUsedInTheGrid(axisModel, gridModel, ecModel) {
	    return ecModel.getComponent('grid', axisModel.get('gridIndex')) === gridModel;
	}
	
	function getLabelUnionRect(axis) {
	    var axisModel = axis.model;
	    var labels = axisModel.getFormattedLabels();
	    var rect;
	    var step = 1;
	    var labelCount = labels.length;
	    if (labelCount > 40) {
	        // Simple optimization for large amount of labels
	        step = Math.ceil(labelCount / 40);
	    }
	    for (var i = 0; i < labelCount; i += step) {
	        if (!axis.isLabelIgnored(i)) {
	            var singleRect = axisModel.getTextRect(labels[i]);
	            // FIXME consider label rotate
	            rect ? rect.union(singleRect) : rect = singleRect;
	        }
	    }
	    return rect;
	}
	
	function Grid(gridModel, ecModel, api) {
	    /**
	     * @type {Object.<string, module:echarts/coord/cartesian/Cartesian2D>}
	     * @private
	     */
	    this._coordsMap = {};
	
	    /**
	     * @type {Array.<module:echarts/coord/cartesian/Cartesian>}
	     * @private
	     */
	    this._coordsList = [];
	
	    /**
	     * @type {Object.<string, module:echarts/coord/cartesian/Axis2D>}
	     * @private
	     */
	    this._axesMap = {};
	
	    /**
	     * @type {Array.<module:echarts/coord/cartesian/Axis2D>}
	     * @private
	     */
	    this._axesList = [];
	
	    this._initCartesian(gridModel, ecModel, api);
	
	    this._model = gridModel;
	}
	
	var gridProto = Grid.prototype;
	
	gridProto.type = 'grid';
	
	gridProto.getRect = function () {
	    return this._rect;
	};
	
	gridProto.update = function (ecModel, api) {
	
	    var axesMap = this._axesMap;
	
	    this._updateScale(ecModel, this._model);
	
	    function ifAxisCanNotOnZero(otherAxisDim) {
	        var axes = axesMap[otherAxisDim];
	        for (var idx in axes) {
	            var axis = axes[idx];
	            if (axis && (axis.type === 'category' || !ifAxisCrossZero(axis))) {
	                return true;
	            }
	        }
	        return false;
	    }
	
	    each(axesMap.x, function (xAxis) {
	        niceScaleExtent(xAxis, xAxis.model);
	    });
	    each(axesMap.y, function (yAxis) {
	        niceScaleExtent(yAxis, yAxis.model);
	    });
	    // Fix configuration
	    each(axesMap.x, function (xAxis) {
	        // onZero can not be enabled in these two situations
	        // 1. When any other axis is a category axis
	        // 2. When any other axis not across 0 point
	        if (ifAxisCanNotOnZero('y')) {
	            xAxis.onZero = false;
	        }
	    });
	    each(axesMap.y, function (yAxis) {
	        if (ifAxisCanNotOnZero('x')) {
	            yAxis.onZero = false;
	        }
	    });
	
	    // Resize again if containLabel is enabled
	    // FIXME It may cause getting wrong grid size in data processing stage
	    this.resize(this._model, api);
	};
	
	/**
	 * Resize the grid
	 * @param {module:echarts/coord/cartesian/GridModel} gridModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	gridProto.resize = function (gridModel, api) {
	
	    var gridRect = layout.getLayoutRect(gridModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	
	    this._rect = gridRect;
	
	    var axesList = this._axesList;
	
	    adjustAxes();
	
	    // Minus label size
	    if (gridModel.get('containLabel')) {
	        each(axesList, function (axis) {
	            if (!axis.model.get('axisLabel.inside')) {
	                var labelUnionRect = getLabelUnionRect(axis);
	                if (labelUnionRect) {
	                    var dim = axis.isHorizontal() ? 'height' : 'width';
	                    var margin = axis.model.get('axisLabel.margin');
	                    gridRect[dim] -= labelUnionRect[dim] + margin;
	                    if (axis.position === 'top') {
	                        gridRect.y += labelUnionRect.height + margin;
	                    } else if (axis.position === 'left') {
	                        gridRect.x += labelUnionRect.width + margin;
	                    }
	                }
	            }
	        });
	
	        adjustAxes();
	    }
	
	    function adjustAxes() {
	        each(axesList, function (axis) {
	            var isHorizontal = axis.isHorizontal();
	            var extent = isHorizontal ? [0, gridRect.width] : [0, gridRect.height];
	            var idx = axis.inverse ? 1 : 0;
	            axis.setExtent(extent[idx], extent[1 - idx]);
	            updateAxisTransfrom(axis, isHorizontal ? gridRect.x : gridRect.y);
	        });
	    }
	};
	
	/**
	 * @param {string} axisType
	 * @param {ndumber} [axisIndex]
	 */
	gridProto.getAxis = function (axisType, axisIndex) {
	    var axesMapOnDim = this._axesMap[axisType];
	    if (axesMapOnDim != null) {
	        if (axisIndex == null) {
	            // Find first axis
	            for (var name in axesMapOnDim) {
	                return axesMapOnDim[name];
	            }
	        }
	        return axesMapOnDim[axisIndex];
	    }
	};
	
	gridProto.getCartesian = function (xAxisIndex, yAxisIndex) {
	    var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	    return this._coordsMap[key];
	};
	
	/**
	 * Initialize cartesian coordinate systems
	 * @private
	 */
	gridProto._initCartesian = function (gridModel, ecModel, api) {
	    var axisPositionUsed = {
	        left: false,
	        right: false,
	        top: false,
	        bottom: false
	    };
	
	    var axesMap = {
	        x: {},
	        y: {}
	    };
	    var axesCount = {
	        x: 0,
	        y: 0
	    };
	
	    /// Create axis
	    ecModel.eachComponent('xAxis', createAxisCreator('x'), this);
	    ecModel.eachComponent('yAxis', createAxisCreator('y'), this);
	
	    if (!axesCount.x || !axesCount.y) {
	        // Roll back when there no either x or y axis
	        this._axesMap = {};
	        this._axesList = [];
	        return;
	    }
	
	    this._axesMap = axesMap;
	
	    /// Create cartesian2d
	    each(axesMap.x, function (xAxis, xAxisIndex) {
	        each(axesMap.y, function (yAxis, yAxisIndex) {
	            var key = 'x' + xAxisIndex + 'y' + yAxisIndex;
	            var cartesian = new Cartesian2D(key);
	
	            cartesian.grid = this;
	
	            this._coordsMap[key] = cartesian;
	            this._coordsList.push(cartesian);
	
	            cartesian.addAxis(xAxis);
	            cartesian.addAxis(yAxis);
	        }, this);
	    }, this);
	
	    function createAxisCreator(axisType) {
	        return function (axisModel, idx) {
	            if (!isAxisUsedInTheGrid(axisModel, gridModel, ecModel)) {
	                return;
	            }
	
	            var axisPosition = axisModel.get('position');
	            if (axisType === 'x') {
	                // Fix position
	                if (axisPosition !== 'top' && axisPosition !== 'bottom') {
	                    // Default bottom of X
	                    axisPosition = 'bottom';
	                }
	                if (axisPositionUsed[axisPosition]) {
	                    axisPosition = axisPosition === 'top' ? 'bottom' : 'top';
	                }
	            } else {
	                // Fix position
	                if (axisPosition !== 'left' && axisPosition !== 'right') {
	                    // Default left of Y
	                    axisPosition = 'left';
	                }
	                if (axisPositionUsed[axisPosition]) {
	                    axisPosition = axisPosition === 'left' ? 'right' : 'left';
	                }
	            }
	            axisPositionUsed[axisPosition] = true;
	
	            var axis = new Axis2D(axisType, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisPosition);
	
	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');
	
	            axis.onZero = axisModel.get('axisLine.onZero');
	
	            // Inject axis into axisModel
	            axisModel.axis = axis;
	
	            // Inject axisModel into axis
	            axis.model = axisModel;
	
	            // Index of axis, can be used as key
	            axis.index = idx;
	
	            this._axesList.push(axis);
	
	            axesMap[axisType][idx] = axis;
	            axesCount[axisType]++;
	        };
	    }
	};
	
	/**
	 * Update cartesian properties from series
	 * @param  {module:echarts/model/Option} option
	 * @private
	 */
	gridProto._updateScale = function (ecModel, gridModel) {
	    // Reset scale
	    zrUtil.each(this._axesList, function (axis) {
	        axis.scale.setExtent(Infinity, -Infinity);
	    });
	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.get('coordinateSystem') === 'cartesian2d') {
	            var xAxisIndex = seriesModel.get('xAxisIndex');
	            var yAxisIndex = seriesModel.get('yAxisIndex');
	
	            var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	            var yAxisModel = ecModel.getComponent('yAxis', yAxisIndex);
	
	            if (!isAxisUsedInTheGrid(xAxisModel, gridModel, ecModel) || !isAxisUsedInTheGrid(yAxisModel, gridModel, ecModel)) {
	                return;
	            }
	
	            var cartesian = this.getCartesian(xAxisIndex, yAxisIndex);
	            var data = seriesModel.getData();
	            var xAxis = cartesian.getAxis('x');
	            var yAxis = cartesian.getAxis('y');
	
	            if (data.type === 'list') {
	                unionExtent(data, xAxis, seriesModel);
	                unionExtent(data, yAxis, seriesModel);
	            }
	        }
	    }, this);
	
	    function unionExtent(data, axis, seriesModel) {
	        each(seriesModel.coordDimToDataDim(axis.dim), function (dim) {
	            axis.scale.unionExtent(data.getDataExtent(dim, axis.scale.type !== 'ordinal'));
	        });
	    }
	};
	
	/**
	 * @inner
	 */
	function updateAxisTransfrom(axis, coordBase) {
	    var axisExtent = axis.getExtent();
	    var axisExtentSum = axisExtent[0] + axisExtent[1];
	
	    // Fast transform
	    axis.toGlobalCoord = axis.dim === 'x' ? function (coord) {
	        return coord + coordBase;
	    } : function (coord) {
	        return axisExtentSum - coord + coordBase;
	    };
	    axis.toLocalCoord = axis.dim === 'x' ? function (coord) {
	        return coord - coordBase;
	    } : function (coord) {
	        return axisExtentSum - coord + coordBase;
	    };
	}
	
	Grid.create = function (ecModel, api) {
	    var grids = [];
	    ecModel.eachComponent('grid', function (gridModel, idx) {
	        var grid = new Grid(gridModel, ecModel, api);
	        grid.name = 'grid_' + idx;
	        grid.resize(gridModel, api);
	
	        gridModel.coordinateSystem = grid;
	
	        grids.push(grid);
	    });
	
	    // Inject the coordinateSystems into seriesModel
	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.get('coordinateSystem') !== 'cartesian2d') {
	            return;
	        }
	        var xAxisIndex = seriesModel.get('xAxisIndex');
	        // TODO Validate
	        var xAxisModel = ecModel.getComponent('xAxis', xAxisIndex);
	        var grid = grids[xAxisModel.get('gridIndex')];
	        seriesModel.coordinateSystem = grid.getCartesian(xAxisIndex, seriesModel.get('yAxisIndex'));
	    });
	
	    return grids;
	};
	
	// For deciding which dimensions to use when creating list data
	Grid.dimensions = Cartesian2D.prototype.dimensions;
	
	__webpack_require__(246).register('cartesian2d', Grid);
	
	module.exports = Grid;

/***/ },
/* 329 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var OrdinalScale = __webpack_require__(330);
	var IntervalScale = __webpack_require__(332);
	__webpack_require__(333);
	__webpack_require__(334);
	var Scale = __webpack_require__(331);
	
	var numberUtil = __webpack_require__(228);
	var zrUtil = __webpack_require__(224);
	var textContain = __webpack_require__(235);
	var axisHelper = {};
	
	/**
	 * Get axis scale extent before niced.
	 */
	axisHelper.getScaleExtent = function (axis, model) {
	    var scale = axis.scale;
	    var originalExtent = scale.getExtent();
	    var span = originalExtent[1] - originalExtent[0];
	    if (scale.type === 'ordinal') {
	        // If series has no data, scale extent may be wrong
	        if (!isFinite(span)) {
	            return [0, 0];
	        } else {
	            return originalExtent;
	        }
	    }
	    var min = model.getMin ? model.getMin() : model.get('min');
	    var max = model.getMax ? model.getMax() : model.get('max');
	    var crossZero = model.getNeedCrossZero ? model.getNeedCrossZero() : !model.get('scale');
	    var boundaryGap = model.get('boundaryGap');
	    if (!zrUtil.isArray(boundaryGap)) {
	        boundaryGap = [boundaryGap || 0, boundaryGap || 0];
	    }
	    boundaryGap[0] = numberUtil.parsePercent(boundaryGap[0], 1);
	    boundaryGap[1] = numberUtil.parsePercent(boundaryGap[1], 1);
	    var fixMin = true;
	    var fixMax = true;
	    // Add boundary gap
	    if (min == null) {
	        min = originalExtent[0] - boundaryGap[0] * span;
	        fixMin = false;
	    }
	    if (max == null) {
	        max = originalExtent[1] + boundaryGap[1] * span;
	        fixMax = false;
	    }
	    // TODO Only one data
	    if (min === 'dataMin') {
	        min = originalExtent[0];
	    }
	    if (max === 'dataMax') {
	        max = originalExtent[1];
	    }
	    // Evaluate if axis needs cross zero
	    if (crossZero) {
	        // Axis is over zero and min is not set
	        if (min > 0 && max > 0 && !fixMin) {
	            min = 0;
	        }
	        // Axis is under zero and max is not set
	        if (min < 0 && max < 0 && !fixMax) {
	            max = 0;
	        }
	    }
	    return [min, max];
	};
	
	axisHelper.niceScaleExtent = function (axis, model) {
	    var scale = axis.scale;
	    var extent = axisHelper.getScaleExtent(axis, model);
	    var fixMin = model.get('min') != null;
	    var fixMax = model.get('max') != null;
	    scale.setExtent(extent[0], extent[1]);
	    scale.niceExtent(model.get('splitNumber'), fixMin, fixMax);
	
	    // If some one specified the min, max. And the default calculated interval
	    // is not good enough. He can specify the interval. It is often appeared
	    // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard
	    // to be 60.
	    // FIXME
	    var interval = model.get('interval');
	    if (interval != null) {
	        scale.setInterval && scale.setInterval(interval);
	    }
	};
	
	/**
	 * @param {module:echarts/model/Model} model
	 * @param {string} [axisType] Default retrieve from model.type
	 * @return {module:echarts/scale/*}
	 */
	axisHelper.createScaleByModel = function (model, axisType) {
	    axisType = axisType || model.get('type');
	    if (axisType) {
	        switch (axisType) {
	            // Buildin scale
	            case 'category':
	                return new OrdinalScale(model.getCategories(), [Infinity, -Infinity]);
	            case 'value':
	                return new IntervalScale();
	            // Extended scale, like time and log
	            default:
	                return (Scale.getClass(axisType) || IntervalScale).create(model);
	        }
	    }
	};
	
	/**
	 * Check if the axis corss 0
	 */
	axisHelper.ifAxisCrossZero = function (axis) {
	    var dataExtent = axis.scale.getExtent();
	    var min = dataExtent[0];
	    var max = dataExtent[1];
	    return !(min > 0 && max > 0 || min < 0 && max < 0);
	};
	
	/**
	 * @param {Array.<number>} tickCoords In axis self coordinate.
	 * @param {Array.<string>} labels
	 * @param {string} font
	 * @param {boolean} isAxisHorizontal
	 * @return {number}
	 */
	axisHelper.getAxisLabelInterval = function (tickCoords, labels, font, isAxisHorizontal) {
	    // FIXME
	    // 不同角的axis和label，不只是horizontal和vertical.
	
	    var textSpaceTakenRect;
	    var autoLabelInterval = 0;
	    var accumulatedLabelInterval = 0;
	
	    var step = 1;
	    if (labels.length > 40) {
	        // Simple optimization for large amount of labels
	        step = Math.round(labels.length / 40);
	    }
	    for (var i = 0; i < tickCoords.length; i += step) {
	        var tickCoord = tickCoords[i];
	        var rect = textContain.getBoundingRect(labels[i], font, 'center', 'top');
	        rect[isAxisHorizontal ? 'x' : 'y'] += tickCoord;
	        rect[isAxisHorizontal ? 'width' : 'height'] *= 1.5;
	        if (!textSpaceTakenRect) {
	            textSpaceTakenRect = rect.clone();
	        }
	        // There is no space for current label;
	        else if (textSpaceTakenRect.intersect(rect)) {
	                accumulatedLabelInterval++;
	                autoLabelInterval = Math.max(autoLabelInterval, accumulatedLabelInterval);
	            } else {
	                textSpaceTakenRect.union(rect);
	                // Reset
	                accumulatedLabelInterval = 0;
	            }
	    }
	    if (autoLabelInterval === 0 && step > 1) {
	        return step;
	    }
	    return autoLabelInterval * step;
	};
	
	/**
	 * @param {Object} axis
	 * @param {Function} labelFormatter
	 * @return {Array.<string>}
	 */
	axisHelper.getFormattedLabels = function (axis, labelFormatter) {
	    var scale = axis.scale;
	    var labels = scale.getTicksLabels();
	    var ticks = scale.getTicks();
	    if (typeof labelFormatter === 'string') {
	        labelFormatter = function (tpl) {
	            return function (val) {
	                return tpl.replace('{value}', val);
	            };
	        }(labelFormatter);
	        return zrUtil.map(labels, labelFormatter);
	    } else if (typeof labelFormatter === 'function') {
	        return zrUtil.map(ticks, function (tick, idx) {
	            return labelFormatter(axis.type === 'category' ? scale.getLabel(tick) : tick, idx);
	        }, this);
	    } else {
	        return labels;
	    }
	};
	
	module.exports = axisHelper;

/***/ },
/* 330 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Linear continuous scale
	 * @module echarts/coord/scale/Ordinal
	 *
	 * http://en.wikipedia.org/wiki/Level_of_measurement
	 */
	
	// FIXME only one data
	
	var zrUtil = __webpack_require__(224);
	var Scale = __webpack_require__(331);
	
	var scaleProto = Scale.prototype;
	
	var OrdinalScale = Scale.extend({
	
	    type: 'ordinal',
	
	    init: function init(data, extent) {
	        this._data = data;
	        this._extent = extent || [0, data.length - 1];
	    },
	
	    parse: function parse(val) {
	        return typeof val === 'string' ? zrUtil.indexOf(this._data, val)
	        // val might be float.
	        : Math.round(val);
	    },
	
	    contain: function contain(rank) {
	        rank = this.parse(rank);
	        return scaleProto.contain.call(this, rank) && this._data[rank] != null;
	    },
	
	    /**
	     * Normalize given rank or name to linear [0, 1]
	     * @param {number|string} [val]
	     * @return {number}
	     */
	    normalize: function normalize(val) {
	        return scaleProto.normalize.call(this, this.parse(val));
	    },
	
	    scale: function scale(val) {
	        return Math.round(scaleProto.scale.call(this, val));
	    },
	
	    /**
	     * @return {Array}
	     */
	    getTicks: function getTicks() {
	        var ticks = [];
	        var extent = this._extent;
	        var rank = extent[0];
	
	        while (rank <= extent[1]) {
	            ticks.push(rank);
	            rank++;
	        }
	
	        return ticks;
	    },
	
	    /**
	     * Get item on rank n
	     * @param {number} n
	     * @return {string}
	     */
	    getLabel: function getLabel(n) {
	        return this._data[n];
	    },
	
	    /**
	     * @return {number}
	     */
	    count: function count() {
	        return this._extent[1] - this._extent[0] + 1;
	    },
	
	    niceTicks: zrUtil.noop,
	    niceExtent: zrUtil.noop
	});
	
	/**
	 * @return {module:echarts/scale/Time}
	 */
	OrdinalScale.create = function () {
	    return new OrdinalScale();
	};
	
	module.exports = OrdinalScale;

/***/ },
/* 331 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * // Scale class management
	 * @module echarts/scale/Scale
	 */
	
	var clazzUtil = __webpack_require__(230);
	
	function Scale() {
	    /**
	     * Extent
	     * @type {Array.<number>}
	     * @protected
	     */
	    this._extent = [Infinity, -Infinity];
	
	    /**
	     * Step is calculated in adjustExtent
	     * @type {Array.<number>}
	     * @protected
	     */
	    this._interval = 0;
	
	    this.init && this.init.apply(this, arguments);
	}
	
	var scaleProto = Scale.prototype;
	
	/**
	 * Parse input val to valid inner number.
	 * @param {*} val
	 * @return {number}
	 */
	scaleProto.parse = function (val) {
	    // Notice: This would be a trap here, If the implementation
	    // of this method depends on extent, and this method is used
	    // before extent set (like in dataZoom), it would be wrong.
	    // Nevertheless, parse does not depend on extent generally.
	    return val;
	};
	
	scaleProto.contain = function (val) {
	    var extent = this._extent;
	    return val >= extent[0] && val <= extent[1];
	};
	
	/**
	 * Normalize value to linear [0, 1], return 0.5 if extent span is 0
	 * @param {number} val
	 * @return {number}
	 */
	scaleProto.normalize = function (val) {
	    var extent = this._extent;
	    if (extent[1] === extent[0]) {
	        return 0.5;
	    }
	    return (val - extent[0]) / (extent[1] - extent[0]);
	};
	
	/**
	 * Scale normalized value
	 * @param {number} val
	 * @return {number}
	 */
	scaleProto.scale = function (val) {
	    var extent = this._extent;
	    return val * (extent[1] - extent[0]) + extent[0];
	};
	
	/**
	 * Set extent from data
	 * @param {Array.<number>} other
	 */
	scaleProto.unionExtent = function (other) {
	    var extent = this._extent;
	    other[0] < extent[0] && (extent[0] = other[0]);
	    other[1] > extent[1] && (extent[1] = other[1]);
	    // not setExtent because in log axis it may transformed to power
	    // this.setExtent(extent[0], extent[1]);
	};
	
	/**
	 * Get extent
	 * @return {Array.<number>}
	 */
	scaleProto.getExtent = function () {
	    return this._extent.slice();
	};
	
	/**
	 * Set extent
	 * @param {number} start
	 * @param {number} end
	 */
	scaleProto.setExtent = function (start, end) {
	    var thisExtent = this._extent;
	    if (!isNaN(start)) {
	        thisExtent[0] = start;
	    }
	    if (!isNaN(end)) {
	        thisExtent[1] = end;
	    }
	};
	
	/**
	 * @return {Array.<string>}
	 */
	scaleProto.getTicksLabels = function () {
	    var labels = [];
	    var ticks = this.getTicks();
	    for (var i = 0; i < ticks.length; i++) {
	        labels.push(this.getLabel(ticks[i]));
	    }
	    return labels;
	};
	
	clazzUtil.enableClassExtend(Scale);
	clazzUtil.enableClassManagement(Scale, {
	    registerWhenExtend: true
	});
	
	module.exports = Scale;

/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Interval scale
	 * @module echarts/scale/Interval
	 */
	
	var numberUtil = __webpack_require__(228);
	var formatUtil = __webpack_require__(227);
	var Scale = __webpack_require__(331);
	
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	/**
	 * @alias module:echarts/coord/scale/Interval
	 * @constructor
	 */
	var IntervalScale = Scale.extend({
	
	    type: 'interval',
	
	    _interval: 0,
	
	    setExtent: function setExtent(start, end) {
	        var thisExtent = this._extent;
	        //start,end may be a Number like '25',so...
	        if (!isNaN(start)) {
	            thisExtent[0] = parseFloat(start);
	        }
	        if (!isNaN(end)) {
	            thisExtent[1] = parseFloat(end);
	        }
	    },
	
	    unionExtent: function unionExtent(other) {
	        var extent = this._extent;
	        other[0] < extent[0] && (extent[0] = other[0]);
	        other[1] > extent[1] && (extent[1] = other[1]);
	
	        // unionExtent may called by it's sub classes
	        IntervalScale.prototype.setExtent.call(this, extent[0], extent[1]);
	    },
	    /**
	     * Get interval
	     */
	    getInterval: function getInterval() {
	        if (!this._interval) {
	            this.niceTicks();
	        }
	        return this._interval;
	    },
	
	    /**
	     * Set interval
	     */
	    setInterval: function setInterval(interval) {
	        this._interval = interval;
	        // Dropped auto calculated niceExtent and use user setted extent
	        // We assume user wan't to set both interval, min, max to get a better result
	        this._niceExtent = this._extent.slice();
	    },
	
	    /**
	     * @return {Array.<number>}
	     */
	    getTicks: function getTicks() {
	        if (!this._interval) {
	            this.niceTicks();
	        }
	        var interval = this._interval;
	        var extent = this._extent;
	        var ticks = [];
	
	        // Consider this case: using dataZoom toolbox, zoom and zoom.
	        var safeLimit = 10000;
	
	        if (interval) {
	            var niceExtent = this._niceExtent;
	            if (extent[0] < niceExtent[0]) {
	                ticks.push(extent[0]);
	            }
	            var tick = niceExtent[0];
	            while (tick <= niceExtent[1]) {
	                ticks.push(tick);
	                // Avoid rounding error
	                tick = numberUtil.round(tick + interval);
	                if (ticks.length > safeLimit) {
	                    return [];
	                }
	            }
	            if (extent[1] > niceExtent[1]) {
	                ticks.push(extent[1]);
	            }
	        }
	
	        return ticks;
	    },
	
	    /**
	     * @return {Array.<string>}
	     */
	    getTicksLabels: function getTicksLabels() {
	        var labels = [];
	        var ticks = this.getTicks();
	        for (var i = 0; i < ticks.length; i++) {
	            labels.push(this.getLabel(ticks[i]));
	        }
	        return labels;
	    },
	
	    /**
	     * @param {number} n
	     * @return {number}
	     */
	    getLabel: function getLabel(data) {
	        return formatUtil.addCommas(data);
	    },
	
	    /**
	     * Update interval and extent of intervals for nice ticks
	     *
	     * @param {number} [splitNumber = 5] Desired number of ticks
	     */
	    niceTicks: function niceTicks(splitNumber) {
	        splitNumber = splitNumber || 5;
	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        if (!isFinite(span)) {
	            return;
	        }
	        // User may set axis min 0 and data are all negative
	        // FIXME If it needs to reverse ?
	        if (span < 0) {
	            span = -span;
	            extent.reverse();
	        }
	
	        // From "Nice Numbers for Graph Labels" of Graphic Gems
	        // var niceSpan = numberUtil.nice(span, false);
	        var step = numberUtil.nice(span / splitNumber, true);
	
	        // Niced extent inside original extent
	        var niceExtent = [numberUtil.round(mathCeil(extent[0] / step) * step), numberUtil.round(mathFloor(extent[1] / step) * step)];
	
	        this._interval = step;
	        this._niceExtent = niceExtent;
	    },
	
	    /**
	     * Nice extent.
	     * @param {number} [splitNumber = 5] Given approx tick number
	     * @param {boolean} [fixMin=false]
	     * @param {boolean} [fixMax=false]
	     */
	    niceExtent: function niceExtent(splitNumber, fixMin, fixMax) {
	        var extent = this._extent;
	        // If extent start and end are same, expand them
	        if (extent[0] === extent[1]) {
	            if (extent[0] !== 0) {
	                // Expand extent
	                var expandSize = extent[0] / 2;
	                extent[0] -= expandSize;
	                extent[1] += expandSize;
	            } else {
	                extent[1] = 1;
	            }
	        }
	        var span = extent[1] - extent[0];
	        // If there are no data and extent are [Infinity, -Infinity]
	        if (!isFinite(span)) {
	            extent[0] = 0;
	            extent[1] = 1;
	        }
	
	        this.niceTicks(splitNumber);
	
	        // var extent = this._extent;
	        var interval = this._interval;
	
	        if (!fixMin) {
	            extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	        }
	        if (!fixMax) {
	            extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	        }
	    }
	});
	
	/**
	 * @return {module:echarts/scale/Time}
	 */
	IntervalScale.create = function () {
	    return new IntervalScale();
	};
	
	module.exports = IntervalScale;

/***/ },
/* 333 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Interval scale
	 * @module echarts/coord/scale/Time
	 */
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var formatUtil = __webpack_require__(227);
	
	var IntervalScale = __webpack_require__(332);
	
	var intervalScaleProto = IntervalScale.prototype;
	
	var mathCeil = Math.ceil;
	var mathFloor = Math.floor;
	var ONE_DAY = 3600000 * 24;
	
	// FIXME 公用？
	var bisect = function bisect(a, x, lo, hi) {
	    while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (a[mid][2] < x) {
	            lo = mid + 1;
	        } else {
	            hi = mid;
	        }
	    }
	    return lo;
	};
	
	/**
	 * @alias module:echarts/coord/scale/Time
	 * @constructor
	 */
	var TimeScale = IntervalScale.extend({
	    type: 'time',
	
	    // Overwrite
	    getLabel: function getLabel(val) {
	        var stepLvl = this._stepLvl;
	
	        var date = new Date(val);
	
	        return formatUtil.formatTime(stepLvl[0], date);
	    },
	
	    // Overwrite
	    niceExtent: function niceExtent(approxTickNum, fixMin, fixMax) {
	        var extent = this._extent;
	        // If extent start and end are same, expand them
	        if (extent[0] === extent[1]) {
	            // Expand extent
	            extent[0] -= ONE_DAY;
	            extent[1] += ONE_DAY;
	        }
	        // If there are no data and extent are [Infinity, -Infinity]
	        if (extent[1] === -Infinity && extent[0] === Infinity) {
	            var d = new Date();
	            extent[1] = new Date(d.getFullYear(), d.getMonth(), d.getDate());
	            extent[0] = extent[1] - ONE_DAY;
	        }
	
	        this.niceTicks(approxTickNum, fixMin, fixMax);
	
	        // var extent = this._extent;
	        var interval = this._interval;
	
	        if (!fixMin) {
	            extent[0] = numberUtil.round(mathFloor(extent[0] / interval) * interval);
	        }
	        if (!fixMax) {
	            extent[1] = numberUtil.round(mathCeil(extent[1] / interval) * interval);
	        }
	    },
	
	    // Overwrite
	    niceTicks: function niceTicks(approxTickNum) {
	        approxTickNum = approxTickNum || 10;
	
	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        var approxInterval = span / approxTickNum;
	        var scaleLevelsLen = scaleLevels.length;
	        var idx = bisect(scaleLevels, approxInterval, 0, scaleLevelsLen);
	
	        var level = scaleLevels[Math.min(idx, scaleLevelsLen - 1)];
	        var interval = level[2];
	        // Same with interval scale if span is much larger than 1 year
	        if (level[0] === 'year') {
	            var yearSpan = span / interval;
	
	            // From "Nice Numbers for Graph Labels" of Graphic Gems
	            // var niceYearSpan = numberUtil.nice(yearSpan, false);
	            var yearStep = numberUtil.nice(yearSpan / approxTickNum, true);
	
	            interval *= yearStep;
	        }
	
	        var niceExtent = [mathCeil(extent[0] / interval) * interval, mathFloor(extent[1] / interval) * interval];
	
	        this._stepLvl = level;
	        // Interval will be used in getTicks
	        this._interval = interval;
	        this._niceExtent = niceExtent;
	    },
	
	    parse: function parse(val) {
	        // val might be float.
	        return +numberUtil.parseDate(val);
	    }
	});
	
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	    TimeScale.prototype[methodName] = function (val) {
	        return intervalScaleProto[methodName].call(this, this.parse(val));
	    };
	});
	
	// Steps from d3
	var scaleLevels = [
	// Format       step    interval
	['hh:mm:ss', 1, 1000], // 1s
	['hh:mm:ss', 5, 1000 * 5], // 5s
	['hh:mm:ss', 10, 1000 * 10], // 10s
	['hh:mm:ss', 15, 1000 * 15], // 15s
	['hh:mm:ss', 30, 1000 * 30], // 30s
	['hh:mm\nMM-dd', 1, 60000], // 1m
	['hh:mm\nMM-dd', 5, 60000 * 5], // 5m
	['hh:mm\nMM-dd', 10, 60000 * 10], // 10m
	['hh:mm\nMM-dd', 15, 60000 * 15], // 15m
	['hh:mm\nMM-dd', 30, 60000 * 30], // 30m
	['hh:mm\nMM-dd', 1, 3600000], // 1h
	['hh:mm\nMM-dd', 2, 3600000 * 2], // 2h
	['hh:mm\nMM-dd', 6, 3600000 * 6], // 6h
	['hh:mm\nMM-dd', 12, 3600000 * 12], // 12h
	['MM-dd\nyyyy', 1, ONE_DAY], // 1d
	['week', 7, ONE_DAY * 7], // 7d
	['month', 1, ONE_DAY * 31], // 1M
	['quarter', 3, ONE_DAY * 380 / 4], // 3M
	['half-year', 6, ONE_DAY * 380 / 2], // 6M
	['year', 1, ONE_DAY * 380] // 1Y
	];
	
	/**
	 * @return {module:echarts/scale/Time}
	 */
	TimeScale.create = function () {
	    return new TimeScale();
	};
	
	module.exports = TimeScale;

/***/ },
/* 334 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Log scale
	 * @module echarts/scale/Log
	 */
	
	var zrUtil = __webpack_require__(224);
	var Scale = __webpack_require__(331);
	var numberUtil = __webpack_require__(228);
	
	// Use some method of IntervalScale
	var IntervalScale = __webpack_require__(332);
	
	var scaleProto = Scale.prototype;
	var intervalScaleProto = IntervalScale.prototype;
	
	var mathFloor = Math.floor;
	var mathCeil = Math.ceil;
	var mathPow = Math.pow;
	
	var LOG_BASE = 10;
	var mathLog = Math.log;
	
	var LogScale = Scale.extend({
	
	    type: 'log',
	
	    /**
	     * @return {Array.<number>}
	     */
	    getTicks: function getTicks() {
	        return zrUtil.map(intervalScaleProto.getTicks.call(this), function (val) {
	            return numberUtil.round(mathPow(LOG_BASE, val));
	        });
	    },
	
	    /**
	     * @param {number} val
	     * @return {string}
	     */
	    getLabel: intervalScaleProto.getLabel,
	
	    /**
	     * @param  {number} val
	     * @return {number}
	     */
	    scale: function scale(val) {
	        val = scaleProto.scale.call(this, val);
	        return mathPow(LOG_BASE, val);
	    },
	
	    /**
	     * @param {number} start
	     * @param {number} end
	     */
	    setExtent: function setExtent(start, end) {
	        start = mathLog(start) / mathLog(LOG_BASE);
	        end = mathLog(end) / mathLog(LOG_BASE);
	        intervalScaleProto.setExtent.call(this, start, end);
	    },
	
	    /**
	     * @return {number} end
	     */
	    getExtent: function getExtent() {
	        var extent = scaleProto.getExtent.call(this);
	        extent[0] = mathPow(LOG_BASE, extent[0]);
	        extent[1] = mathPow(LOG_BASE, extent[1]);
	        return extent;
	    },
	
	    /**
	     * @param  {Array.<number>} extent
	     */
	    unionExtent: function unionExtent(extent) {
	        extent[0] = mathLog(extent[0]) / mathLog(LOG_BASE);
	        extent[1] = mathLog(extent[1]) / mathLog(LOG_BASE);
	        scaleProto.unionExtent.call(this, extent);
	    },
	
	    /**
	     * Update interval and extent of intervals for nice ticks
	     * @param  {number} [approxTickNum = 10] Given approx tick number
	     */
	    niceTicks: function niceTicks(approxTickNum) {
	        approxTickNum = approxTickNum || 10;
	        var extent = this._extent;
	        var span = extent[1] - extent[0];
	        if (span === Infinity || span <= 0) {
	            return;
	        }
	
	        var interval = mathPow(10, mathFloor(mathLog(span / approxTickNum) / Math.LN10));
	        var err = approxTickNum / span * interval;
	
	        // Filter ticks to get closer to the desired count.
	        if (err <= 0.5) {
	            interval *= 10;
	        }
	        var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];
	
	        this._interval = interval;
	        this._niceExtent = niceExtent;
	    },
	
	    /**
	     * Nice extent.
	     * @param {number} [approxTickNum = 10] Given approx tick number
	     * @param {boolean} [fixMin=false]
	     * @param {boolean} [fixMax=false]
	     */
	    niceExtent: intervalScaleProto.niceExtent
	});
	
	zrUtil.each(['contain', 'normalize'], function (methodName) {
	    LogScale.prototype[methodName] = function (val) {
	        val = mathLog(val) / mathLog(LOG_BASE);
	        return scaleProto[methodName].call(this, val);
	    };
	});
	
	LogScale.create = function () {
	    return new LogScale();
	};
	
	module.exports = LogScale;

/***/ },
/* 335 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Cartesian = __webpack_require__(336);
	
	function Cartesian2D(name) {
	
	    Cartesian.call(this, name);
	}
	
	Cartesian2D.prototype = {
	
	    constructor: Cartesian2D,
	
	    type: 'cartesian2d',
	
	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['x', 'y'],
	
	    /**
	     * Base axis will be used on stacking.
	     *
	     * @return {module:echarts/coord/cartesian/Axis2D}
	     */
	    getBaseAxis: function getBaseAxis() {
	        return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAxis('x');
	    },
	
	    /**
	     * If contain point
	     * @param {Array.<number>} point
	     * @return {boolean}
	     */
	    containPoint: function containPoint(point) {
	        var axisX = this.getAxis('x');
	        var axisY = this.getAxis('y');
	        return axisX.contain(axisX.toLocalCoord(point[0])) && axisY.contain(axisY.toLocalCoord(point[1]));
	    },
	
	    /**
	     * If contain data
	     * @param {Array.<number>} data
	     * @return {boolean}
	     */
	    containData: function containData(data) {
	        return this.getAxis('x').containData(data[0]) && this.getAxis('y').containData(data[1]);
	    },
	
	    /**
	     * Convert series data to an array of points
	     * @param {module:echarts/data/List} data
	     * @param {boolean} stack
	     * @return {Array}
	     *  Return array of points. For example:
	     *  `[[10, 10], [20, 20], [30, 30]]`
	     */
	    dataToPoints: function dataToPoints(data, stack) {
	        return data.mapArray(['x', 'y'], function (x, y) {
	            return this.dataToPoint([x, y]);
	        }, stack, this);
	    },
	
	    /**
	     * @param {Array.<number>} data
	     * @param {boolean} [clamp=false]
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data, clamp) {
	        var xAxis = this.getAxis('x');
	        var yAxis = this.getAxis('y');
	        return [xAxis.toGlobalCoord(xAxis.dataToCoord(data[0], clamp)), yAxis.toGlobalCoord(yAxis.dataToCoord(data[1], clamp))];
	    },
	
	    /**
	     * @param {Array.<number>} point
	     * @param {boolean} [clamp=false]
	     * @return {Array.<number>}
	     */
	    pointToData: function pointToData(point, clamp) {
	        var xAxis = this.getAxis('x');
	        var yAxis = this.getAxis('y');
	        return [xAxis.coordToData(xAxis.toLocalCoord(point[0]), clamp), yAxis.coordToData(yAxis.toLocalCoord(point[1]), clamp)];
	    },
	
	    /**
	     * Get other axis
	     * @param {module:echarts/coord/cartesian/Axis2D} axis
	     */
	    getOtherAxis: function getOtherAxis(axis) {
	        return this.getAxis(axis.dim === 'x' ? 'y' : 'x');
	    }
	};
	
	zrUtil.inherits(Cartesian2D, Cartesian);
	
	module.exports = Cartesian2D;

/***/ },
/* 336 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Cartesian coordinate system
	 * @module  echarts/coord/Cartesian
	 *
	 */
	
	var zrUtil = __webpack_require__(224);
	
	function dimAxisMapper(dim) {
	    return this._axes[dim];
	}
	
	/**
	 * @alias module:echarts/coord/Cartesian
	 * @constructor
	 */
	var Cartesian = function Cartesian(name) {
	    this._axes = {};
	
	    this._dimList = [];
	
	    /**
	     * @type {string}
	     */
	    this.name = name || '';
	};
	
	Cartesian.prototype = {
	
	    constructor: Cartesian,
	
	    type: 'cartesian',
	
	    /**
	     * Get axis
	     * @param  {number|string} dim
	     * @return {module:echarts/coord/Cartesian~Axis}
	     */
	    getAxis: function getAxis(dim) {
	        return this._axes[dim];
	    },
	
	    /**
	     * Get axes list
	     * @return {Array.<module:echarts/coord/Cartesian~Axis>}
	     */
	    getAxes: function getAxes() {
	        return zrUtil.map(this._dimList, dimAxisMapper, this);
	    },
	
	    /**
	     * Get axes list by given scale type
	     */
	    getAxesByScale: function getAxesByScale(scaleType) {
	        scaleType = scaleType.toLowerCase();
	        return zrUtil.filter(this.getAxes(), function (axis) {
	            return axis.scale.type === scaleType;
	        });
	    },
	
	    /**
	     * Add axis
	     * @param {module:echarts/coord/Cartesian.Axis}
	     */
	    addAxis: function addAxis(axis) {
	        var dim = axis.dim;
	
	        this._axes[dim] = axis;
	
	        this._dimList.push(dim);
	    },
	
	    /**
	     * Convert data to coord in nd space
	     * @param {Array.<number>|Object.<string, number>} val
	     * @return {Array.<number>|Object.<string, number>}
	     */
	    dataToCoord: function dataToCoord(val) {
	        return this._dataCoordConvert(val, 'dataToCoord');
	    },
	
	    /**
	     * Convert coord in nd space to data
	     * @param  {Array.<number>|Object.<string, number>} val
	     * @return {Array.<number>|Object.<string, number>}
	     */
	    coordToData: function coordToData(val) {
	        return this._dataCoordConvert(val, 'coordToData');
	    },
	
	    _dataCoordConvert: function _dataCoordConvert(input, method) {
	        var dimList = this._dimList;
	
	        var output = input instanceof Array ? [] : {};
	
	        for (var i = 0; i < dimList.length; i++) {
	            var dim = dimList[i];
	            var axis = this._axes[dim];
	
	            output[dim] = axis[method](input[dim]);
	        }
	
	        return output;
	    }
	};
	
	module.exports = Cartesian;

/***/ },
/* 337 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	var axisLabelInterval = __webpack_require__(339);
	
	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var Axis2D = function Axis2D(dim, scale, coordExtent, axisType, position) {
	  Axis.call(this, dim, scale, coordExtent);
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = axisType || 'value';
	
	  /**
	   * Axis position
	   *  - 'top'
	   *  - 'bottom'
	   *  - 'left'
	   *  - 'right'
	   */
	  this.position = position || 'bottom';
	};
	
	Axis2D.prototype = {
	
	  constructor: Axis2D,
	
	  /**
	   * Index of axis, can be used as key
	   */
	  index: 0,
	  /**
	   * If axis is on the zero position of the other axis
	   * @type {boolean}
	   */
	  onZero: false,
	
	  /**
	   * Axis model
	   * @param {module:echarts/coord/cartesian/AxisModel}
	   */
	  model: null,
	
	  isHorizontal: function isHorizontal() {
	    var position = this.position;
	    return position === 'top' || position === 'bottom';
	  },
	
	  getGlobalExtent: function getGlobalExtent() {
	    var ret = this.getExtent();
	    ret[0] = this.toGlobalCoord(ret[0]);
	    ret[1] = this.toGlobalCoord(ret[1]);
	    return ret;
	  },
	
	  /**
	   * @return {number}
	   */
	  getLabelInterval: function getLabelInterval() {
	    var labelInterval = this._labelInterval;
	    if (!labelInterval) {
	      labelInterval = this._labelInterval = axisLabelInterval(this);
	    }
	    return labelInterval;
	  },
	
	  /**
	   * If label is ignored.
	   * Automatically used when axis is category and label can not be all shown
	   * @param  {number}  idx
	   * @return {boolean}
	   */
	  isLabelIgnored: function isLabelIgnored(idx) {
	    if (this.type === 'category') {
	      var labelInterval = this.getLabelInterval();
	      return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	    }
	  },
	
	  /**
	   * Transform global coord to local coord,
	   * i.e. var localCoord = axis.toLocalCoord(80);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toLocalCoord: null,
	
	  /**
	   * Transform global coord to local coord,
	   * i.e. var globalCoord = axis.toLocalCoord(40);
	   * designate by module:echarts/coord/cartesian/Grid.
	   * @type {Function}
	   */
	  toGlobalCoord: null
	
	};
	zrUtil.inherits(Axis2D, Axis);
	
	module.exports = Axis2D;

/***/ },
/* 338 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var numberUtil = __webpack_require__(228);
	var linearMap = numberUtil.linearMap;
	var zrUtil = __webpack_require__(224);
	
	function fixExtentWithBands(extent, nTick) {
	    var size = extent[1] - extent[0];
	    var len = nTick;
	    var margin = size / len / 2;
	    extent[0] += margin;
	    extent[1] -= margin;
	}
	
	var normalizedExtent = [0, 1];
	/**
	 * @name module:echarts/coord/CartesianAxis
	 * @constructor
	 */
	var Axis = function Axis(dim, scale, extent) {
	
	    /**
	     * Axis dimension. Such as 'x', 'y', 'z', 'angle', 'radius'
	     * @type {string}
	     */
	    this.dim = dim;
	
	    /**
	     * Axis scale
	     * @type {module:echarts/coord/scale/*}
	     */
	    this.scale = scale;
	
	    /**
	     * @type {Array.<number>}
	     * @private
	     */
	    this._extent = extent || [0, 0];
	
	    /**
	     * @type {boolean}
	     */
	    this.inverse = false;
	
	    /**
	     * Usually true when axis has a ordinal scale
	     * @type {boolean}
	     */
	    this.onBand = false;
	};
	
	Axis.prototype = {
	
	    constructor: Axis,
	
	    /**
	     * If axis extent contain given coord
	     * @param {number} coord
	     * @return {boolean}
	     */
	    contain: function contain(coord) {
	        var extent = this._extent;
	        var min = Math.min(extent[0], extent[1]);
	        var max = Math.max(extent[0], extent[1]);
	        return coord >= min && coord <= max;
	    },
	
	    /**
	     * If axis extent contain given data
	     * @param {number} data
	     * @return {boolean}
	     */
	    containData: function containData(data) {
	        return this.contain(this.dataToCoord(data));
	    },
	
	    /**
	     * Get coord extent.
	     * @return {Array.<number>}
	     */
	    getExtent: function getExtent() {
	        var ret = this._extent.slice();
	        return ret;
	    },
	
	    /**
	     * Get precision used for formatting
	     * @param {Array.<number>} [dataExtent]
	     * @return {number}
	     */
	    getPixelPrecision: function getPixelPrecision(dataExtent) {
	        return numberUtil.getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);
	    },
	
	    /**
	     * Set coord extent
	     * @param {number} start
	     * @param {number} end
	     */
	    setExtent: function setExtent(start, end) {
	        var extent = this._extent;
	        extent[0] = start;
	        extent[1] = end;
	    },
	
	    /**
	     * Convert data to coord. Data is the rank if it has a ordinal scale
	     * @param {number} data
	     * @param  {boolean} clamp
	     * @return {number}
	     */
	    dataToCoord: function dataToCoord(data, clamp) {
	        var extent = this._extent;
	        var scale = this.scale;
	        data = scale.normalize(data);
	
	        if (this.onBand && scale.type === 'ordinal') {
	            extent = extent.slice();
	            fixExtentWithBands(extent, scale.count());
	        }
	
	        return linearMap(data, normalizedExtent, extent, clamp);
	    },
	
	    /**
	     * Convert coord to data. Data is the rank if it has a ordinal scale
	     * @param {number} coord
	     * @param  {boolean} clamp
	     * @return {number}
	     */
	    coordToData: function coordToData(coord, clamp) {
	        var extent = this._extent;
	        var scale = this.scale;
	
	        if (this.onBand && scale.type === 'ordinal') {
	            extent = extent.slice();
	            fixExtentWithBands(extent, scale.count());
	        }
	
	        var t = linearMap(coord, extent, normalizedExtent, clamp);
	
	        return this.scale.scale(t);
	    },
	    /**
	     * @return {Array.<number>}
	     */
	    getTicksCoords: function getTicksCoords() {
	        if (this.onBand) {
	            var bands = this.getBands();
	            var coords = [];
	            for (var i = 0; i < bands.length; i++) {
	                coords.push(bands[i][0]);
	            }
	            if (bands[i - 1]) {
	                coords.push(bands[i - 1][1]);
	            }
	            return coords;
	        } else {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        }
	    },
	
	    /**
	     * Coords of labels are on the ticks or on the middle of bands
	     * @return {Array.<number>}
	     */
	    getLabelsCoords: function getLabelsCoords() {
	        if (this.onBand) {
	            var bands = this.getBands();
	            var coords = [];
	            var band;
	            for (var i = 0; i < bands.length; i++) {
	                band = bands[i];
	                coords.push((band[0] + band[1]) / 2);
	            }
	            return coords;
	        } else {
	            return zrUtil.map(this.scale.getTicks(), this.dataToCoord, this);
	        }
	    },
	
	    /**
	     * Get bands.
	     *
	     * If axis has labels [1, 2, 3, 4]. Bands on the axis are
	     * |---1---|---2---|---3---|---4---|.
	     *
	     * @return {Array}
	     */
	    // FIXME Situation when labels is on ticks
	    getBands: function getBands() {
	        var extent = this.getExtent();
	        var bands = [];
	        var len = this.scale.count();
	        var start = extent[0];
	        var end = extent[1];
	        var span = end - start;
	
	        for (var i = 0; i < len; i++) {
	            bands.push([span * i / len + start, span * (i + 1) / len + start]);
	        }
	        return bands;
	    },
	
	    /**
	     * Get width of band
	     * @return {number}
	     */
	    getBandWidth: function getBandWidth() {
	        var axisExtent = this._extent;
	        var dataExtent = this.scale.getExtent();
	
	        var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);
	
	        var size = Math.abs(axisExtent[1] - axisExtent[0]);
	
	        return Math.abs(size) / len;
	    }
	};
	
	module.exports = Axis;

/***/ },
/* 339 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Helper function for axisLabelInterval calculation
	 */
	
	var zrUtil = __webpack_require__(224);
	var axisHelper = __webpack_require__(329);
	
	module.exports = function (axis) {
	    var axisModel = axis.model;
	    var labelModel = axisModel.getModel('axisLabel');
	    var labelInterval = labelModel.get('interval');
	    if (!(axis.type === 'category' && labelInterval === 'auto')) {
	        return labelInterval === 'auto' ? 0 : labelInterval;
	    }
	
	    return axisHelper.getAxisLabelInterval(zrUtil.map(axis.scale.getTicks(), axis.dataToCoord, axis), axisModel.getFormattedLabels(), labelModel.getModel('textStyle').getFont(), axis.isHorizontal());
	};

/***/ },
/* 340 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// Grid 是在有直角坐标系的时候必须要存在的
	// 所以这里也要被 Cartesian2D 依赖
	
	__webpack_require__(341);
	var ComponentModel = __webpack_require__(240);
	
	module.exports = ComponentModel.extend({
	
	    type: 'grid',
	
	    dependencies: ['xAxis', 'yAxis'],
	
	    layoutMode: 'box',
	
	    /**
	     * @type {module:echarts/coord/cartesian/Grid}
	     */
	    coordinateSystem: null,
	
	    defaultOption: {
	        show: false,
	        zlevel: 0,
	        z: 0,
	        left: '10%',
	        top: 60,
	        right: '10%',
	        bottom: 60,
	        // If grid size contain label
	        containLabel: false,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderWidth: 1,
	        borderColor: '#ccc'
	    }
	});

/***/ },
/* 341 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ComponentModel = __webpack_require__(240);
	var zrUtil = __webpack_require__(224);
	var axisModelCreator = __webpack_require__(342);
	
	var AxisModel = ComponentModel.extend({
	
	    type: 'cartesian2dAxis',
	
	    /**
	     * @type {module:echarts/coord/cartesian/Axis2D}
	     */
	    axis: null,
	
	    /**
	     * @override
	     */
	    init: function init() {
	        AxisModel.superApply(this, 'init', arguments);
	        this._resetRange();
	    },
	
	    /**
	     * @override
	     */
	    mergeOption: function mergeOption() {
	        AxisModel.superApply(this, 'mergeOption', arguments);
	        this._resetRange();
	    },
	
	    /**
	     * @override
	     */
	    restoreData: function restoreData() {
	        AxisModel.superApply(this, 'restoreData', arguments);
	        this._resetRange();
	    },
	
	    /**
	     * @public
	     * @param {number} rangeStart
	     * @param {number} rangeEnd
	     */
	    setRange: function setRange(rangeStart, rangeEnd) {
	        this.option.rangeStart = rangeStart;
	        this.option.rangeEnd = rangeEnd;
	    },
	
	    /**
	     * @public
	     * @return {Array.<number|string|Date>}
	     */
	    getMin: function getMin() {
	        var option = this.option;
	        return option.rangeStart != null ? option.rangeStart : option.min;
	    },
	
	    /**
	     * @public
	     * @return {Array.<number|string|Date>}
	     */
	    getMax: function getMax() {
	        var option = this.option;
	        return option.rangeEnd != null ? option.rangeEnd : option.max;
	    },
	
	    /**
	     * @public
	     * @return {boolean}
	     */
	    getNeedCrossZero: function getNeedCrossZero() {
	        var option = this.option;
	        return option.rangeStart != null || option.rangeEnd != null ? false : !option.scale;
	    },
	
	    /**
	     * @private
	     */
	    _resetRange: function _resetRange() {
	        // rangeStart and rangeEnd is readonly.
	        this.option.rangeStart = this.option.rangeEnd = null;
	    }
	
	});
	
	function getAxisType(axisDim, option) {
	    // Default axis with data is category axis
	    return option.type || (option.data ? 'category' : 'value');
	}
	
	zrUtil.merge(AxisModel.prototype, __webpack_require__(344));
	
	var extraOption = {
	    gridIndex: 0
	};
	
	axisModelCreator('x', AxisModel, getAxisType, extraOption);
	axisModelCreator('y', AxisModel, getAxisType, extraOption);
	
	module.exports = AxisModel;

/***/ },
/* 342 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var axisDefault = __webpack_require__(343);
	var zrUtil = __webpack_require__(224);
	var ComponentModel = __webpack_require__(240);
	var layout = __webpack_require__(242);
	
	// FIXME axisType is fixed ?
	var AXIS_TYPES = ['value', 'category', 'time', 'log'];
	
	/**
	 * Generate sub axis model class
	 * @param {string} axisName 'x' 'y' 'radius' 'angle' 'parallel'
	 * @param {module:echarts/model/Component} BaseAxisModelClass
	 * @param {Function} axisTypeDefaulter
	 * @param {Object} [extraDefaultOption]
	 */
	module.exports = function (axisName, BaseAxisModelClass, axisTypeDefaulter, extraDefaultOption) {
	
	    zrUtil.each(AXIS_TYPES, function (axisType) {
	
	        BaseAxisModelClass.extend({
	
	            type: axisName + 'Axis.' + axisType,
	
	            mergeDefaultAndTheme: function mergeDefaultAndTheme(option, ecModel) {
	                var layoutMode = this.layoutMode;
	                var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};
	
	                var themeModel = ecModel.getTheme();
	                zrUtil.merge(option, themeModel.get(axisType + 'Axis'));
	                zrUtil.merge(option, this.getDefaultOption());
	
	                option.type = axisTypeDefaulter(axisName, option);
	
	                if (layoutMode) {
	                    layout.mergeLayoutParam(option, inputPositionParams, layoutMode);
	                }
	            },
	
	            defaultOption: zrUtil.mergeAll([{}, axisDefault[axisType + 'Axis'], extraDefaultOption], true)
	        });
	    });
	
	    ComponentModel.registerSubTypeDefaulter(axisName + 'Axis', zrUtil.curry(axisTypeDefaulter, axisName));
	};

/***/ },
/* 343 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var defaultOption = {
	    show: true,
	    zlevel: 0, // 一级层叠
	    z: 0, // 二级层叠
	    // 反向坐标轴
	    inverse: false,
	    // 坐标轴名字，默认为空
	    name: '',
	    // 坐标轴名字位置，支持'start' | 'middle' | 'end'
	    nameLocation: 'end',
	    // 坐标轴文字样式，默认取全局样式
	    nameTextStyle: {},
	    // 文字与轴线距离
	    nameGap: 15,
	    // 坐标轴线
	    axisLine: {
	        // 默认显示，属性show控制显示与否
	        show: true,
	        onZero: true,
	        // 属性lineStyle控制线条样式
	        lineStyle: {
	            color: '#333',
	            width: 1,
	            type: 'solid'
	        }
	    },
	    // 坐标轴小标记
	    axisTick: {
	        // 属性show控制显示与否，默认显示
	        show: true,
	        // 控制小标记是否在grid里
	        inside: false,
	        // 属性length控制线长
	        length: 5,
	        // 属性lineStyle控制线条样式
	        lineStyle: {
	            color: '#333',
	            width: 1
	        }
	    },
	    // 坐标轴文本标签，详见axis.axisLabel
	    axisLabel: {
	        show: true,
	        // 控制文本标签是否在grid里
	        inside: false,
	        rotate: 0,
	        margin: 8,
	        // formatter: null,
	        // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	        textStyle: {
	            color: '#333',
	            fontSize: 12
	        }
	    },
	    // 分隔线
	    splitLine: {
	        // 默认显示，属性show控制显示与否
	        show: true,
	        // 属性lineStyle（详见lineStyle）控制线条样式
	        lineStyle: {
	            color: ['#ccc'],
	            width: 1,
	            type: 'solid'
	        }
	    },
	    // 分隔区域
	    splitArea: {
	        // 默认不显示，属性show控制显示与否
	        show: false,
	        // 属性areaStyle（详见areaStyle）控制区域样式
	        areaStyle: {
	            color: ['rgba(250,250,250,0.3)', 'rgba(200,200,200,0.3)']
	        }
	    }
	};
	
	var categoryAxis = zrUtil.merge({
	    // 类目起始和结束两端空白策略
	    boundaryGap: true,
	    // 坐标轴小标记
	    axisTick: {
	        interval: 'auto'
	    },
	    // 坐标轴文本标签，详见axis.axisLabel
	    axisLabel: {
	        interval: 'auto'
	    }
	}, defaultOption);
	
	var valueAxis = zrUtil.defaults({
	    // 数值起始和结束两端空白策略
	    boundaryGap: [0, 0],
	    // 最小值, 设置成 'dataMin' 则从数据中计算最小值
	    // min: null,
	    // 最大值，设置成 'dataMax' 则从数据中计算最大值
	    // max: null,
	    // Readonly prop, specifies start value of the range when using data zoom.
	    // rangeStart: null
	    // Readonly prop, specifies end value of the range when using data zoom.
	    // rangeEnd: null
	    // 脱离0值比例，放大聚焦到最终_min，_max区间
	    // scale: false,
	    // 分割段数，默认为5
	    splitNumber: 5
	}, defaultOption);
	
	// FIXME
	var timeAxis = zrUtil.defaults({
	    scale: true,
	    min: 'dataMin',
	    max: 'dataMax'
	}, valueAxis);
	var logAxis = zrUtil.defaults({}, valueAxis);
	logAxis.scale = true;
	
	module.exports = {
	    categoryAxis: categoryAxis,
	    valueAxis: valueAxis,
	    timeAxis: timeAxis,
	    logAxis: logAxis
	};

/***/ },
/* 344 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var axisHelper = __webpack_require__(329);
	
	function getName(obj) {
	    if (zrUtil.isObject(obj) && obj.value != null) {
	        return obj.value;
	    } else {
	        return obj;
	    }
	}
	/**
	 * Get categories
	 */
	function getCategories() {
	    return this.get('type') === 'category' && zrUtil.map(this.get('data'), getName);
	}
	
	/**
	 * Format labels
	 * @return {Array.<string>}
	 */
	function getFormattedLabels() {
	    return axisHelper.getFormattedLabels(this.axis, this.get('axisLabel.formatter'));
	}
	
	module.exports = {
	
	    getFormattedLabels: getFormattedLabels,
	
	    getCategories: getCategories
	};

/***/ },
/* 345 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// TODO boundaryGap
	
	__webpack_require__(341);
	
	__webpack_require__(346);

/***/ },
/* 346 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var AxisBuilder = __webpack_require__(347);
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick;
	var getInterval = AxisBuilder.getInterval;
	
	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	var selfBuilderAttrs = ['splitLine', 'splitArea'];
	
	var AxisView = __webpack_require__(222).extendComponentView({
	
	    type: 'axis',
	
	    render: function render(axisModel, ecModel) {
	
	        this.group.removeAll();
	
	        if (!axisModel.get('show')) {
	            return;
	        }
	
	        var gridModel = ecModel.getComponent('grid', axisModel.get('gridIndex'));
	
	        var layout = layoutAxis(gridModel, axisModel);
	
	        var axisBuilder = new AxisBuilder(axisModel, layout);
	
	        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	
	        this.group.add(axisBuilder.getGroup());
	
	        zrUtil.each(selfBuilderAttrs, function (name) {
	            if (axisModel.get(name + '.show')) {
	                this['_' + name](axisModel, gridModel, layout.labelInterval);
	            }
	        }, this);
	    },
	
	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {number|Function} labelInterval
	     * @private
	     */
	    _splitLine: function _splitLine(axisModel, gridModel, labelInterval) {
	        var axis = axisModel.axis;
	
	        var splitLineModel = axisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineWidth = lineStyleModel.get('width');
	        var lineColors = lineStyleModel.get('color');
	
	        var lineInterval = getInterval(splitLineModel, labelInterval);
	
	        lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];
	
	        var gridRect = gridModel.coordinateSystem.getRect();
	        var isHorizontal = axis.isHorizontal();
	
	        var splitLines = [];
	        var lineCount = 0;
	
	        var ticksCoords = axis.getTicksCoords();
	
	        var p1 = [];
	        var p2 = [];
	        for (var i = 0; i < ticksCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, lineInterval)) {
	                continue;
	            }
	
	            var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	
	            if (isHorizontal) {
	                p1[0] = tickCoord;
	                p1[1] = gridRect.y;
	                p2[0] = tickCoord;
	                p2[1] = gridRect.y + gridRect.height;
	            } else {
	                p1[0] = gridRect.x;
	                p1[1] = tickCoord;
	                p2[0] = gridRect.x + gridRect.width;
	                p2[1] = tickCoord;
	            }
	
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Line(graphic.subPixelOptimizeLine({
	                shape: {
	                    x1: p1[0],
	                    y1: p1[1],
	                    x2: p2[0],
	                    y2: p2[1]
	                },
	                style: {
	                    lineWidth: lineWidth
	                },
	                silent: true
	            })));
	        }
	
	        // Simple optimization
	        // Batching the lines if color are the same
	        var lineStyle = lineStyleModel.getLineStyle();
	        for (var i = 0; i < splitLines.length; i++) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: zrUtil.defaults({
	                    stroke: lineColors[i % lineColors.length]
	                }, lineStyle),
	                silent: true
	            }));
	        }
	    },
	
	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @param {number|Function} labelInterval
	     * @private
	     */
	    _splitArea: function _splitArea(axisModel, gridModel, labelInterval) {
	        var axis = axisModel.axis;
	
	        var splitAreaModel = axisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');
	
	        var gridRect = gridModel.coordinateSystem.getRect();
	        var ticksCoords = axis.getTicksCoords();
	
	        var prevX = axis.toGlobalCoord(ticksCoords[0]);
	        var prevY = axis.toGlobalCoord(ticksCoords[0]);
	
	        var splitAreaRects = [];
	        var count = 0;
	
	        var areaInterval = getInterval(splitAreaModel, labelInterval);
	
	        areaColors = zrUtil.isArray(areaColors) ? areaColors : [areaColors];
	
	        for (var i = 1; i < ticksCoords.length; i++) {
	            if (ifIgnoreOnTick(axis, i, areaInterval)) {
	                continue;
	            }
	
	            var tickCoord = axis.toGlobalCoord(ticksCoords[i]);
	
	            var x;
	            var y;
	            var width;
	            var height;
	            if (axis.isHorizontal()) {
	                x = prevX;
	                y = gridRect.y;
	                width = tickCoord - x;
	                height = gridRect.height;
	            } else {
	                x = gridRect.x;
	                y = prevY;
	                width = gridRect.width;
	                height = tickCoord - y;
	            }
	
	            var colorIndex = count++ % areaColors.length;
	            splitAreaRects[colorIndex] = splitAreaRects[colorIndex] || [];
	            splitAreaRects[colorIndex].push(new graphic.Rect({
	                shape: {
	                    x: x,
	                    y: y,
	                    width: width,
	                    height: height
	                },
	                silent: true
	            }));
	
	            prevX = x + width;
	            prevY = y + height;
	        }
	
	        // Simple optimization
	        // Batching the rects if color are the same
	        var areaStyle = areaStyleModel.getAreaStyle();
	        for (var i = 0; i < splitAreaRects.length; i++) {
	            this.group.add(graphic.mergePath(splitAreaRects[i], {
	                style: zrUtil.defaults({
	                    fill: areaColors[i % areaColors.length]
	                }, areaStyle),
	                silent: true
	            }));
	        }
	    }
	});
	
	AxisView.extend({
	    type: 'xAxis'
	});
	AxisView.extend({
	    type: 'yAxis'
	});
	
	/**
	 * @inner
	 */
	function layoutAxis(gridModel, axisModel) {
	    var grid = gridModel.coordinateSystem;
	    var axis = axisModel.axis;
	    var layout = {};
	
	    var rawAxisPosition = axis.position;
	    var axisPosition = axis.onZero ? 'onZero' : rawAxisPosition;
	    var axisDim = axis.dim;
	
	    // [left, right, top, bottom]
	    var rect = grid.getRect();
	    var rectBound = [rect.x, rect.x + rect.width, rect.y, rect.y + rect.height];
	
	    var posMap = {
	        x: { top: rectBound[2], bottom: rectBound[3] },
	        y: { left: rectBound[0], right: rectBound[1] }
	    };
	    posMap.x.onZero = Math.max(Math.min(getZero('y'), posMap.x.bottom), posMap.x.top);
	    posMap.y.onZero = Math.max(Math.min(getZero('x'), posMap.y.right), posMap.y.left);
	
	    function getZero(dim, val) {
	        var theAxis = grid.getAxis(dim);
	        return theAxis.toGlobalCoord(theAxis.dataToCoord(0));
	    }
	
	    // Axis position
	    layout.position = [axisDim === 'y' ? posMap.y[axisPosition] : rectBound[0], axisDim === 'x' ? posMap.x[axisPosition] : rectBound[3]];
	
	    // Axis rotation
	    var r = { x: 0, y: 1 };
	    layout.rotation = Math.PI / 2 * r[axisDim];
	
	    // Tick and label direction, x y is axisDim
	    var dirMap = { top: -1, bottom: 1, left: -1, right: 1 };
	
	    layout.labelDirection = layout.tickDirection = layout.nameDirection = dirMap[rawAxisPosition];
	    if (axis.onZero) {
	        layout.labelOffset = posMap[axisDim][rawAxisPosition] - posMap[axisDim].onZero;
	    }
	
	    if (axisModel.getModel('axisTick').get('inside')) {
	        layout.tickDirection = -layout.tickDirection;
	    }
	    if (axisModel.getModel('axisLabel').get('inside')) {
	        layout.labelDirection = -layout.labelDirection;
	    }
	
	    // Special label rotation
	    var labelRotation = axisModel.getModel('axisLabel').get('rotate');
	    layout.labelRotation = axisPosition === 'top' ? -labelRotation : labelRotation;
	
	    // label interval when auto mode.
	    layout.labelInterval = axis.getLabelInterval();
	
	    // Over splitLine and splitArea
	    layout.z2 = 1;
	
	    return layout;
	}

/***/ },
/* 347 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var Model = __webpack_require__(229);
	var numberUtil = __webpack_require__(228);
	var remRadian = numberUtil.remRadian;
	var isRadianAroundZero = numberUtil.isRadianAroundZero;
	
	var PI = Math.PI;
	
	/**
	 * A final axis is translated and rotated from a "standard axis".
	 * So opt.position and opt.rotation is required.
	 *
	 * A standard axis is and axis from [0, 0] to [0, axisExtent[1]],
	 * for example: (0, 0) ------------> (0, 50)
	 *
	 * nameDirection or tickDirection or labelDirection is 1 means tick
	 * or label is below the standard axis, whereas is -1 means above
	 * the standard axis. labelOffset means offset between label and axis,
	 * which is useful when 'onZero', where axisLabel is in the grid and
	 * label in outside grid.
	 *
	 * Tips: like always,
	 * positive rotation represents anticlockwise, and negative rotation
	 * represents clockwise.
	 * The direction of position coordinate is the same as the direction
	 * of screen coordinate.
	 *
	 * Do not need to consider axis 'inverse', which is auto processed by
	 * axis extent.
	 *
	 * @param {module:zrender/container/Group} group
	 * @param {Object} axisModel
	 * @param {Object} opt Standard axis parameters.
	 * @param {Array.<number>} opt.position [x, y]
	 * @param {number} opt.rotation by radian
	 * @param {number} [opt.nameDirection=1] 1 or -1 Used when nameLocation is 'middle'.
	 * @param {number} [opt.tickDirection=1] 1 or -1
	 * @param {number} [opt.labelDirection=1] 1 or -1
	 * @param {number} [opt.labelOffset=0] Usefull when onZero.
	 * @param {string} [opt.axisName] default get from axisModel.
	 * @param {number} [opt.labelRotation] by degree, default get from axisModel.
	 * @param {number} [opt.labelInterval] Default label interval when label
	 *                                     interval from model is null or 'auto'.
	 * @param {number} [opt.strokeContainThreshold] Default label interval when label
	 * @param {number} [opt.silent=true]
	 */
	var AxisBuilder = function AxisBuilder(axisModel, opt) {
	
	    /**
	     * @readOnly
	     */
	    this.opt = opt;
	
	    /**
	     * @readOnly
	     */
	    this.axisModel = axisModel;
	
	    // Default value
	    zrUtil.defaults(opt, {
	        labelOffset: 0,
	        nameDirection: 1,
	        tickDirection: 1,
	        labelDirection: 1,
	        silent: true
	    });
	
	    /**
	     * @readOnly
	     */
	    this.group = new graphic.Group({
	        position: opt.position.slice(),
	        rotation: opt.rotation
	    });
	};
	
	AxisBuilder.prototype = {
	
	    constructor: AxisBuilder,
	
	    hasBuilder: function hasBuilder(name) {
	        return !!builders[name];
	    },
	
	    add: function add(name) {
	        builders[name].call(this);
	    },
	
	    getGroup: function getGroup() {
	        return this.group;
	    }
	
	};
	
	var builders = {
	
	    /**
	     * @private
	     */
	    axisLine: function axisLine() {
	        var opt = this.opt;
	        var axisModel = this.axisModel;
	
	        if (!axisModel.get('axisLine.show')) {
	            return;
	        }
	
	        var extent = this.axisModel.axis.getExtent();
	
	        this.group.add(new graphic.Line({
	            shape: {
	                x1: extent[0],
	                y1: 0,
	                x2: extent[1],
	                y2: 0
	            },
	            style: zrUtil.extend({ lineCap: 'round' }, axisModel.getModel('axisLine.lineStyle').getLineStyle()),
	            strokeContainThreshold: opt.strokeContainThreshold,
	            silent: !!opt.silent,
	            z2: 1
	        }));
	    },
	
	    /**
	     * @private
	     */
	    axisTick: function axisTick() {
	        var axisModel = this.axisModel;
	
	        if (!axisModel.get('axisTick.show')) {
	            return;
	        }
	
	        var axis = axisModel.axis;
	        var tickModel = axisModel.getModel('axisTick');
	        var opt = this.opt;
	
	        var lineStyleModel = tickModel.getModel('lineStyle');
	        var tickLen = tickModel.get('length');
	        var tickInterval = getInterval(tickModel, opt.labelInterval);
	        var ticksCoords = axis.getTicksCoords();
	        var tickLines = [];
	
	        for (var i = 0; i < ticksCoords.length; i++) {
	            // Only ordinal scale support tick interval
	            if (ifIgnoreOnTick(axis, i, tickInterval)) {
	                continue;
	            }
	
	            var tickCoord = ticksCoords[i];
	
	            // Tick line
	            tickLines.push(new graphic.Line(graphic.subPixelOptimizeLine({
	                shape: {
	                    x1: tickCoord,
	                    y1: 0,
	                    x2: tickCoord,
	                    y2: opt.tickDirection * tickLen
	                },
	                style: {
	                    lineWidth: lineStyleModel.get('width')
	                },
	                silent: true
	            })));
	        }
	
	        this.group.add(graphic.mergePath(tickLines, {
	            style: lineStyleModel.getLineStyle(),
	            z2: 2,
	            silent: true
	        }));
	    },
	
	    /**
	     * @param {module:echarts/coord/cartesian/AxisModel} axisModel
	     * @param {module:echarts/coord/cartesian/GridModel} gridModel
	     * @private
	     */
	    axisLabel: function axisLabel() {
	        var axisModel = this.axisModel;
	
	        if (!axisModel.get('axisLabel.show')) {
	            return;
	        }
	
	        var opt = this.opt;
	        var axis = axisModel.axis;
	        var labelModel = axisModel.getModel('axisLabel');
	        var textStyleModel = labelModel.getModel('textStyle');
	        var labelMargin = labelModel.get('margin');
	        var ticks = axis.scale.getTicks();
	        var labels = axisModel.getFormattedLabels();
	
	        // Special label rotate.
	        var labelRotation = opt.labelRotation;
	        if (labelRotation == null) {
	            labelRotation = labelModel.get('rotate') || 0;
	        }
	        // To radian.
	        labelRotation = labelRotation * PI / 180;
	
	        var labelLayout = innerTextLayout(opt, labelRotation, opt.labelDirection);
	        var categoryData = axisModel.get('data');
	
	        var textEls = [];
	        for (var i = 0; i < ticks.length; i++) {
	            if (ifIgnoreOnTick(axis, i, opt.labelInterval)) {
	                continue;
	            }
	
	            var itemTextStyleModel = textStyleModel;
	            if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                itemTextStyleModel = new Model(categoryData[i].textStyle, textStyleModel, axisModel.ecModel);
	            }
	
	            var tickCoord = axis.dataToCoord(ticks[i]);
	            var pos = [tickCoord, opt.labelOffset + opt.labelDirection * labelMargin];
	
	            var textEl = new graphic.Text({
	                style: {
	                    text: labels[i],
	                    textAlign: itemTextStyleModel.get('align', true) || labelLayout.textAlign,
	                    textVerticalAlign: itemTextStyleModel.get('baseline', true) || labelLayout.verticalAlign,
	                    textFont: itemTextStyleModel.getFont(),
	                    fill: itemTextStyleModel.getTextColor()
	                },
	                position: pos,
	                rotation: labelLayout.rotation,
	                silent: true,
	                z2: 10
	            });
	            textEls.push(textEl);
	            this.group.add(textEl);
	        }
	
	        function isTwoLabelOverlapped(current, next) {
	            var firstRect = current && current.getBoundingRect().clone();
	            var nextRect = next && next.getBoundingRect().clone();
	            if (firstRect && nextRect) {
	                firstRect.applyTransform(current.getLocalTransform());
	                nextRect.applyTransform(next.getLocalTransform());
	                return firstRect.intersect(nextRect);
	            }
	        }
	        if (axis.type !== 'category') {
	            // If min or max are user set, we need to check
	            // If the tick on min(max) are overlap on their neighbour tick
	            // If they are overlapped, we need to hide the min(max) tick label
	            if (axisModel.getMin ? axisModel.getMin() : axisModel.get('min')) {
	                var firstLabel = textEls[0];
	                var nextLabel = textEls[1];
	                if (isTwoLabelOverlapped(firstLabel, nextLabel)) {
	                    firstLabel.ignore = true;
	                }
	            }
	            if (axisModel.getMax ? axisModel.getMax() : axisModel.get('max')) {
	                var lastLabel = textEls[textEls.length - 1];
	                var prevLabel = textEls[textEls.length - 2];
	                if (isTwoLabelOverlapped(prevLabel, lastLabel)) {
	                    lastLabel.ignore = true;
	                }
	            }
	        }
	    },
	
	    /**
	     * @private
	     */
	    axisName: function axisName() {
	        var opt = this.opt;
	        var axisModel = this.axisModel;
	
	        var name = this.opt.axisName;
	        // If name is '', do not get name from axisMode.
	        if (name == null) {
	            name = axisModel.get('name');
	        }
	
	        if (!name) {
	            return;
	        }
	
	        var nameLocation = axisModel.get('nameLocation');
	        var nameDirection = opt.nameDirection;
	        var textStyleModel = axisModel.getModel('nameTextStyle');
	        var gap = axisModel.get('nameGap') || 0;
	
	        var extent = this.axisModel.axis.getExtent();
	        var gapSignal = extent[0] > extent[1] ? -1 : 1;
	        var pos = [nameLocation === 'start' ? extent[0] - gapSignal * gap : nameLocation === 'end' ? extent[1] + gapSignal * gap : (extent[0] + extent[1]) / 2, // 'middle'
	        // Reuse labelOffset.
	        nameLocation === 'middle' ? opt.labelOffset + nameDirection * gap : 0];
	
	        var labelLayout;
	
	        if (nameLocation === 'middle') {
	            labelLayout = innerTextLayout(opt, opt.rotation, nameDirection);
	        } else {
	            labelLayout = endTextLayout(opt, nameLocation, extent);
	        }
	
	        this.group.add(new graphic.Text({
	            style: {
	                text: name,
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor() || axisModel.get('axisLine.lineStyle.color'),
	                textAlign: labelLayout.textAlign,
	                textVerticalAlign: labelLayout.verticalAlign
	            },
	            position: pos,
	            rotation: labelLayout.rotation,
	            silent: true,
	            z2: 1
	        }));
	    }
	
	};
	
	/**
	 * @inner
	 */
	function innerTextLayout(opt, textRotation, direction) {
	    var rotationDiff = remRadian(textRotation - opt.rotation);
	    var textAlign;
	    var verticalAlign;
	
	    if (isRadianAroundZero(rotationDiff)) {
	        // Label is parallel with axis line.
	        verticalAlign = direction > 0 ? 'top' : 'bottom';
	        textAlign = 'center';
	    } else if (isRadianAroundZero(rotationDiff - PI)) {
	        // Label is inverse parallel with axis line.
	        verticalAlign = direction > 0 ? 'bottom' : 'top';
	        textAlign = 'center';
	    } else {
	        verticalAlign = 'middle';
	
	        if (rotationDiff > 0 && rotationDiff < PI) {
	            textAlign = direction > 0 ? 'right' : 'left';
	        } else {
	            textAlign = direction > 0 ? 'left' : 'right';
	        }
	    }
	
	    return {
	        rotation: rotationDiff,
	        textAlign: textAlign,
	        verticalAlign: verticalAlign
	    };
	}
	
	/**
	 * @inner
	 */
	function endTextLayout(opt, textPosition, extent) {
	    var rotationDiff = remRadian(-opt.rotation);
	    var textAlign;
	    var verticalAlign;
	    var inverse = extent[0] > extent[1];
	    var onLeft = textPosition === 'start' && !inverse || textPosition !== 'start' && inverse;
	
	    if (isRadianAroundZero(rotationDiff - PI / 2)) {
	        verticalAlign = onLeft ? 'bottom' : 'top';
	        textAlign = 'center';
	    } else if (isRadianAroundZero(rotationDiff - PI * 1.5)) {
	        verticalAlign = onLeft ? 'top' : 'bottom';
	        textAlign = 'center';
	    } else {
	        verticalAlign = 'middle';
	        if (rotationDiff < PI * 1.5 && rotationDiff > PI / 2) {
	            textAlign = onLeft ? 'left' : 'right';
	        } else {
	            textAlign = onLeft ? 'right' : 'left';
	        }
	    }
	
	    return {
	        rotation: rotationDiff,
	        textAlign: textAlign,
	        verticalAlign: verticalAlign
	    };
	}
	
	/**
	 * @static
	 */
	var ifIgnoreOnTick = AxisBuilder.ifIgnoreOnTick = function (axis, i, interval) {
	    var rawTick;
	    var scale = axis.scale;
	    return scale.type === 'ordinal' && (typeof interval === 'function' ? (rawTick = scale.getTicks()[i], !interval(rawTick, scale.getLabel(rawTick))) : i % (interval + 1));
	};
	
	/**
	 * @static
	 */
	var getInterval = AxisBuilder.getInterval = function (model, labelInterval) {
	    var interval = model.get('interval');
	    if (interval == null || interval == 'auto') {
	        interval = labelInterval;
	    }
	    return interval;
	};
	
	module.exports = AxisBuilder;

/***/ },
/* 348 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	__webpack_require__(328);
	
	__webpack_require__(349);
	__webpack_require__(350);
	
	var barLayoutGrid = __webpack_require__(352);
	var echarts = __webpack_require__(222);
	
	echarts.registerLayout(zrUtil.curry(barLayoutGrid, 'bar'));
	// Visual coding for legend
	echarts.registerVisualCoding('chart', function (ecModel) {
	    ecModel.eachSeriesByType('bar', function (seriesModel) {
	        var data = seriesModel.getData();
	        data.setVisual('legendSymbol', 'roundRect');
	    });
	});
	
	// In case developer forget to include grid component
	__webpack_require__(327);

/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var createListFromArray = __webpack_require__(314);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.bar',
	
	    dependencies: ['grid', 'polar'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        return createListFromArray(option.data, this, ecModel);
	    },
	
	    getMarkerPosition: function getMarkerPosition(value) {
	        var coordSys = this.coordinateSystem;
	        if (coordSys) {
	            var pt = coordSys.dataToPoint(value);
	            var data = this.getData();
	            var offset = data.getLayout('offset');
	            var size = data.getLayout('size');
	            var offsetIndex = coordSys.getBaseAxis().isHorizontal() ? 0 : 1;
	            pt[offsetIndex] += offset + size / 2;
	            return pt;
	        }
	        return [NaN, NaN];
	    },
	
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,
	        // stack: null
	
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        // 最小高度改为0
	        barMinHeight: 0,
	
	        // barMaxWidth: null,
	        // 默认自适应
	        // barWidth: null,
	        // 柱间距离，默认为柱形宽度的30%，可设固定值
	        // barGap: '30%',
	        // 类目间柱形距离，默认为类目间距的20%，可设固定值
	        // barCategoryGap: '20%',
	        // label: {
	        //     normal: {
	        //         show: false
	        //         formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	
	        //         // 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	        //         //           'inside' | 'insideleft' | 'insideTop' | 'insideRight' | 'insideBottom' |
	        //         //           'outside' |'left' | 'right'|'top'|'bottom'
	        //         position:
	
	        //         textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	        //     }
	        // },
	        itemStyle: {
	            normal: {
	                // color: '各异',
	                // 柱条边线
	                barBorderColor: '#fff',
	                // 柱条边线线宽，单位px，默认为1
	                barBorderWidth: 0
	            },
	            emphasis: {
	                // color: '各异',
	                // 柱条边线
	                barBorderColor: '#fff',
	                // 柱条边线线宽，单位px，默认为1
	                barBorderWidth: 0
	            }
	        }
	    }
	});

/***/ },
/* 350 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	
	zrUtil.extend(__webpack_require__(229).prototype, __webpack_require__(351));
	
	function fixLayoutWithLineWidth(layout, lineWidth) {
	    var signX = layout.width > 0 ? 1 : -1;
	    var signY = layout.height > 0 ? 1 : -1;
	    // In case width or height are too small.
	    lineWidth = Math.min(lineWidth, Math.abs(layout.width), Math.abs(layout.height));
	    layout.x += signX * lineWidth / 2;
	    layout.y += signY * lineWidth / 2;
	    layout.width -= signX * lineWidth;
	    layout.height -= signY * lineWidth;
	}
	
	module.exports = __webpack_require__(222).extendChartView({
	
	    type: 'bar',
	
	    render: function render(seriesModel, ecModel, api) {
	        var coordinateSystemType = seriesModel.get('coordinateSystem');
	
	        if (coordinateSystemType === 'cartesian2d') {
	            this._renderOnCartesian(seriesModel, ecModel, api);
	        }
	
	        return this.group;
	    },
	
	    _renderOnCartesian: function _renderOnCartesian(seriesModel, ecModel, api) {
	        var group = this.group;
	        var data = seriesModel.getData();
	        var oldData = this._data;
	
	        var cartesian = seriesModel.coordinateSystem;
	        var baseAxis = cartesian.getBaseAxis();
	        var isHorizontal = baseAxis.isHorizontal();
	
	        var enableAnimation = seriesModel.get('animation');
	
	        var barBorderWidthQuery = ['itemStyle', 'normal', 'barBorderWidth'];
	
	        function createRect(dataIndex, isUpdate) {
	            var layout = data.getItemLayout(dataIndex);
	            var lineWidth = data.getItemModel(dataIndex).get(barBorderWidthQuery) || 0;
	            fixLayoutWithLineWidth(layout, lineWidth);
	
	            var rect = new graphic.Rect({
	                shape: zrUtil.extend({}, layout)
	            });
	            // Animation
	            if (enableAnimation) {
	                var rectShape = rect.shape;
	                var animateProperty = isHorizontal ? 'height' : 'width';
	                var animateTarget = {};
	                rectShape[animateProperty] = 0;
	                animateTarget[animateProperty] = layout[animateProperty];
	                graphic[isUpdate ? 'updateProps' : 'initProps'](rect, {
	                    shape: animateTarget
	                }, seriesModel);
	            }
	            return rect;
	        }
	        data.diff(oldData).add(function (dataIndex) {
	            // 空数据
	            if (!data.hasValue(dataIndex)) {
	                return;
	            }
	
	            var rect = createRect(dataIndex);
	
	            data.setItemGraphicEl(dataIndex, rect);
	
	            group.add(rect);
	        }).update(function (newIndex, oldIndex) {
	            var rect = oldData.getItemGraphicEl(oldIndex);
	            // 空数据
	            if (!data.hasValue(newIndex)) {
	                group.remove(rect);
	                return;
	            }
	            if (!rect) {
	                rect = createRect(newIndex, true);
	            }
	
	            var layout = data.getItemLayout(newIndex);
	            var lineWidth = data.getItemModel(newIndex).get(barBorderWidthQuery) || 0;
	            fixLayoutWithLineWidth(layout, lineWidth);
	
	            graphic.updateProps(rect, {
	                shape: layout
	            }, seriesModel);
	
	            data.setItemGraphicEl(newIndex, rect);
	
	            // Add back
	            group.add(rect);
	        }).remove(function (idx) {
	            var rect = oldData.getItemGraphicEl(idx);
	            if (rect) {
	                // Not show text when animating
	                rect.style.text = '';
	                graphic.updateProps(rect, {
	                    shape: {
	                        width: 0
	                    }
	                }, seriesModel, function () {
	                    group.remove(rect);
	                });
	            }
	        }).execute();
	
	        this._updateStyle(seriesModel, data, isHorizontal);
	
	        this._data = data;
	    },
	
	    _updateStyle: function _updateStyle(seriesModel, data, isHorizontal) {
	        function setLabel(style, model, color, labelText, labelPositionOutside) {
	            graphic.setText(style, model, color);
	            style.text = labelText;
	            if (style.textPosition === 'outside') {
	                style.textPosition = labelPositionOutside;
	            }
	        }
	
	        data.eachItemGraphicEl(function (rect, idx) {
	            var itemModel = data.getItemModel(idx);
	            var color = data.getItemVisual(idx, 'color');
	            var layout = data.getItemLayout(idx);
	            var itemStyleModel = itemModel.getModel('itemStyle.normal');
	
	            var hoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	
	            rect.setShape('r', itemStyleModel.get('barBorderRadius') || 0);
	
	            rect.setStyle(zrUtil.defaults({
	                fill: color
	            }, itemStyleModel.getBarItemStyle()));
	
	            var labelPositionOutside = isHorizontal ? layout.height > 0 ? 'bottom' : 'top' : layout.width > 0 ? 'left' : 'right';
	
	            var labelModel = itemModel.getModel('label.normal');
	            var hoverLabelModel = itemModel.getModel('label.emphasis');
	            var rectStyle = rect.style;
	            if (labelModel.get('show')) {
	                setLabel(rectStyle, labelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), seriesModel.getRawValue(idx)), labelPositionOutside);
	            } else {
	                rectStyle.text = '';
	            }
	            if (hoverLabelModel.get('show')) {
	                setLabel(hoverStyle, hoverLabelModel, color, zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), seriesModel.getRawValue(idx)), labelPositionOutside);
	            } else {
	                hoverStyle.text = '';
	            }
	            graphic.setHoverStyle(rect, hoverStyle);
	        });
	    },
	
	    remove: function remove(ecModel, api) {
	        var group = this.group;
	        if (ecModel.get('animation')) {
	            if (this._data) {
	                this._data.eachItemGraphicEl(function (el) {
	                    // Not show text when animating
	                    el.style.text = '';
	                    graphic.updateProps(el, {
	                        shape: {
	                            width: 0
	                        }
	                    }, ecModel, function () {
	                        group.remove(el);
	                    });
	                });
	            }
	        } else {
	            group.removeAll();
	        }
	    }
	});

/***/ },
/* 351 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = {
	    getBarItemStyle: __webpack_require__(232)([['fill', 'color'], ['stroke', 'barBorderColor'], ['lineWidth', 'barBorderWidth'], ['opacity'], ['shadowBlur'], ['shadowOffsetX'], ['shadowOffsetY'], ['shadowColor']])
	};

/***/ },
/* 352 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var parsePercent = numberUtil.parsePercent;
	
	function getSeriesStackId(seriesModel) {
	    return seriesModel.get('stack') || '__ec_stack_' + seriesModel.seriesIndex;
	}
	
	function calBarWidthAndOffset(barSeries, api) {
	    // Columns info on each category axis. Key is cartesian name
	    var columnsMap = {};
	
	    zrUtil.each(barSeries, function (seriesModel, idx) {
	        var cartesian = seriesModel.coordinateSystem;
	
	        var baseAxis = cartesian.getBaseAxis();
	
	        var columnsOnAxis = columnsMap[baseAxis.index] || {
	            remainedWidth: baseAxis.getBandWidth(),
	            autoWidthCount: 0,
	            categoryGap: '20%',
	            gap: '30%',
	            axis: baseAxis,
	            stacks: {}
	        };
	        var stacks = columnsOnAxis.stacks;
	        columnsMap[baseAxis.index] = columnsOnAxis;
	
	        var stackId = getSeriesStackId(seriesModel);
	
	        if (!stacks[stackId]) {
	            columnsOnAxis.autoWidthCount++;
	        }
	        stacks[stackId] = stacks[stackId] || {
	            width: 0,
	            maxWidth: 0
	        };
	
	        var barWidth = seriesModel.get('barWidth');
	        var barMaxWidth = seriesModel.get('barMaxWidth');
	        var barGap = seriesModel.get('barGap');
	        var barCategoryGap = seriesModel.get('barCategoryGap');
	        // TODO
	        if (barWidth && !stacks[stackId].width) {
	            barWidth = Math.min(columnsOnAxis.remainedWidth, barWidth);
	            stacks[stackId].width = barWidth;
	            columnsOnAxis.remainedWidth -= barWidth;
	        }
	
	        barMaxWidth && (stacks[stackId].maxWidth = barMaxWidth);
	        barGap != null && (columnsOnAxis.gap = barGap);
	        barCategoryGap != null && (columnsOnAxis.categoryGap = barCategoryGap);
	    });
	
	    var result = {};
	
	    zrUtil.each(columnsMap, function (columnsOnAxis, coordSysName) {
	
	        result[coordSysName] = {};
	
	        var stacks = columnsOnAxis.stacks;
	        var baseAxis = columnsOnAxis.axis;
	        var bandWidth = baseAxis.getBandWidth();
	        var categoryGap = parsePercent(columnsOnAxis.categoryGap, bandWidth);
	        var barGapPercent = parsePercent(columnsOnAxis.gap, 1);
	
	        var remainedWidth = columnsOnAxis.remainedWidth;
	        var autoWidthCount = columnsOnAxis.autoWidthCount;
	        var autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	        autoWidth = Math.max(autoWidth, 0);
	
	        // Find if any auto calculated bar exceeded maxBarWidth
	        zrUtil.each(stacks, function (column, stack) {
	            var maxWidth = column.maxWidth;
	            if (!column.width && maxWidth && maxWidth < autoWidth) {
	                maxWidth = Math.min(maxWidth, remainedWidth);
	                remainedWidth -= maxWidth;
	                column.width = maxWidth;
	                autoWidthCount--;
	            }
	        });
	
	        // Recalculate width again
	        autoWidth = (remainedWidth - categoryGap) / (autoWidthCount + (autoWidthCount - 1) * barGapPercent);
	        autoWidth = Math.max(autoWidth, 0);
	
	        var widthSum = 0;
	        var lastColumn;
	        zrUtil.each(stacks, function (column, idx) {
	            if (!column.width) {
	                column.width = autoWidth;
	            }
	            lastColumn = column;
	            widthSum += column.width * (1 + barGapPercent);
	        });
	        if (lastColumn) {
	            widthSum -= lastColumn.width * barGapPercent;
	        }
	
	        var offset = -widthSum / 2;
	        zrUtil.each(stacks, function (column, stackId) {
	            result[coordSysName][stackId] = result[coordSysName][stackId] || {
	                offset: offset,
	                width: column.width
	            };
	
	            offset += column.width * (1 + barGapPercent);
	        });
	    });
	
	    return result;
	}
	
	/**
	 * @param {string} seriesType
	 * @param {module:echarts/model/Global} ecModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function barLayoutGrid(seriesType, ecModel, api) {
	
	    var barWidthAndOffset = calBarWidthAndOffset(zrUtil.filter(ecModel.getSeriesByType(seriesType), function (seriesModel) {
	        return !ecModel.isSeriesFiltered(seriesModel) && seriesModel.coordinateSystem && seriesModel.coordinateSystem.type === 'cartesian2d';
	    }));
	
	    var lastStackCoords = {};
	
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	
	        var data = seriesModel.getData();
	        var cartesian = seriesModel.coordinateSystem;
	        var baseAxis = cartesian.getBaseAxis();
	
	        var stackId = getSeriesStackId(seriesModel);
	        var columnLayoutInfo = barWidthAndOffset[baseAxis.index][stackId];
	        var columnOffset = columnLayoutInfo.offset;
	        var columnWidth = columnLayoutInfo.width;
	        var valueAxis = cartesian.getOtherAxis(baseAxis);
	
	        var barMinHeight = seriesModel.get('barMinHeight') || 0;
	
	        var valueAxisStart = baseAxis.onZero ? valueAxis.toGlobalCoord(valueAxis.dataToCoord(0)) : valueAxis.getGlobalExtent()[0];
	
	        var coords = cartesian.dataToPoints(data, true);
	        lastStackCoords[stackId] = lastStackCoords[stackId] || [];
	
	        data.setLayout({
	            offset: columnOffset,
	            size: columnWidth
	        });
	        data.each(valueAxis.dim, function (value, idx) {
	            // 空数据
	            if (isNaN(value)) {
	                return;
	            }
	            if (!lastStackCoords[stackId][idx]) {
	                lastStackCoords[stackId][idx] = {
	                    // Positive stack
	                    p: valueAxisStart,
	                    // Negative stack
	                    n: valueAxisStart
	                };
	            }
	            var sign = value >= 0 ? 'p' : 'n';
	            var coord = coords[idx];
	            var lastCoord = lastStackCoords[stackId][idx][sign];
	            var x, y, width, height;
	            if (valueAxis.isHorizontal()) {
	                x = lastCoord;
	                y = coord[1] + columnOffset;
	                width = coord[0] - lastCoord;
	                height = columnWidth;
	
	                if (Math.abs(width) < barMinHeight) {
	                    width = (width < 0 ? -1 : 1) * barMinHeight;
	                }
	                lastStackCoords[stackId][idx][sign] += width;
	            } else {
	                x = coord[0] + columnOffset;
	                y = lastCoord;
	                width = columnWidth;
	                height = coord[1] - lastCoord;
	                if (Math.abs(height) < barMinHeight) {
	                    // Include zero to has a positive bar
	                    height = (height <= 0 ? -1 : 1) * barMinHeight;
	                }
	                lastStackCoords[stackId][idx][sign] += height;
	            }
	
	            data.setItemLayout(idx, {
	                x: x,
	                y: y,
	                width: width,
	                height: height
	            });
	        }, true);
	    }, this);
	}
	
	module.exports = barLayoutGrid;

/***/ },
/* 353 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	__webpack_require__(354);
	__webpack_require__(356);
	
	__webpack_require__(357)('pie', [{
	    type: 'pieToggleSelect',
	    event: 'pieselectchanged',
	    method: 'toggleSelected'
	}, {
	    type: 'pieSelect',
	    event: 'pieselected',
	    method: 'select'
	}, {
	    type: 'pieUnSelect',
	    event: 'pieunselected',
	    method: 'unSelect'
	}]);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(358), 'pie'));
	
	echarts.registerLayout(zrUtil.curry(__webpack_require__(359), 'pie'));
	
	echarts.registerProcessor('filter', zrUtil.curry(__webpack_require__(361), 'pie'));

/***/ },
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var completeDimensions = __webpack_require__(317);
	
	var dataSelectableMixin = __webpack_require__(355);
	
	var PieSeries = __webpack_require__(222).extendSeriesModel({
	
	    type: 'series.pie',
	
	    // Overwrite
	    init: function init(option) {
	        PieSeries.superApply(this, 'init', arguments);
	
	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this._dataBeforeProcessed;
	        };
	
	        this.updateSelectedMap();
	
	        this._defaultLabelLine(option);
	    },
	
	    // Overwrite
	    mergeOption: function mergeOption(newOption) {
	        PieSeries.superCall(this, 'mergeOption', newOption);
	        this.updateSelectedMap();
	    },
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var dimensions = completeDimensions(['value'], option.data);
	        var list = new List(dimensions, this);
	        list.initData(option.data);
	        return list;
	    },
	
	    // Overwrite
	    getDataParams: function getDataParams(dataIndex) {
	        var data = this._data;
	        var params = PieSeries.superCall(this, 'getDataParams', dataIndex);
	        var sum = data.getSum('value');
	        // FIXME toFixed?
	        //
	        // Percent is 0 if sum is 0
	        params.percent = !sum ? 0 : +(data.get('value', dataIndex) / sum * 100).toFixed(2);
	
	        params.$vars.push('percent');
	        return params;
	    },
	
	    _defaultLabelLine: function _defaultLabelLine(option) {
	        // Extend labelLine emphasis
	        modelUtil.defaultEmphasis(option.labelLine, ['show']);
	
	        var labelLineNormalOpt = option.labelLine.normal;
	        var labelLineEmphasisOpt = option.labelLine.emphasis;
	        // Not show label line if `label.normal.show = false`
	        labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	        labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	        // 默认全局居中
	        center: ['50%', '50%'],
	        radius: [0, '75%'],
	        // 默认顺时针
	        clockwise: true,
	        startAngle: 90,
	        // 最小角度改为0
	        minAngle: 0,
	        // 选中是扇区偏移量
	        selectedOffset: 10,
	
	        // If use strategy to avoid label overlapping
	        avoidLabelOverlap: true,
	        // 选择模式，默认关闭，可选single，multiple
	        // selectedMode: false,
	        // 南丁格尔玫瑰图模式，'radius'（半径） | 'area'（面积）
	        // roseType: null,
	
	        label: {
	            normal: {
	                // If rotate around circle
	                rotate: false,
	                show: true,
	                // 'outer', 'inside', 'center'
	                position: 'outer'
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	                // distance: 当position为inner时有效，为label位置到圆心的距离与圆半径(环状图为内外半径和)的比例系数
	            },
	            emphasis: {}
	        },
	        // Enabled when label.normal.position is 'outer'
	        labelLine: {
	            normal: {
	                show: true,
	                // 引导线两段中的第一段长度
	                length: 20,
	                // 引导线两段中的第二段长度
	                length2: 5,
	                smooth: false,
	                lineStyle: {
	                    // color: 各异,
	                    width: 1,
	                    type: 'solid'
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderColor: 'rgba(0,0,0,0)',
	                borderWidth: 1
	            },
	            emphasis: {
	                // color: 各异,
	                borderColor: 'rgba(0,0,0,0)',
	                borderWidth: 1
	            }
	        },
	
	        animationEasing: 'cubicOut',
	
	        data: []
	    }
	});
	
	zrUtil.mixin(PieSeries, dataSelectableMixin);
	
	module.exports = PieSeries;

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Data selectable mixin for chart series.
	 * To eanble data select, option of series must have `selectedMode`.
	 * And each data item will use `selected` to toggle itself selected status
	 *
	 * @module echarts/chart/helper/DataSelectable
	 */
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = {
	
	    updateSelectedMap: function updateSelectedMap() {
	        var option = this.option;
	        this._dataOptMap = zrUtil.reduce(option.data, function (dataOptMap, dataOpt) {
	            dataOptMap[dataOpt.name] = dataOpt;
	            return dataOptMap;
	        }, {});
	    },
	    /**
	     * @param {string} name
	     */
	    // PENGING If selectedMode is null ?
	    select: function select(name) {
	        var dataOptMap = this._dataOptMap;
	        var dataOpt = dataOptMap[name];
	        var selectedMode = this.get('selectedMode');
	        if (selectedMode === 'single') {
	            zrUtil.each(dataOptMap, function (dataOpt) {
	                dataOpt.selected = false;
	            });
	        }
	        dataOpt && (dataOpt.selected = true);
	    },
	
	    /**
	     * @param {string} name
	     */
	    unSelect: function unSelect(name) {
	        var dataOpt = this._dataOptMap[name];
	        // var selectedMode = this.get('selectedMode');
	        // selectedMode !== 'single' && dataOpt && (dataOpt.selected = false);
	        dataOpt && (dataOpt.selected = false);
	    },
	
	    /**
	     * @param {string} name
	     */
	    toggleSelected: function toggleSelected(name) {
	        var dataOpt = this._dataOptMap[name];
	        if (dataOpt != null) {
	            this[dataOpt.selected ? 'unSelect' : 'select'](name);
	            return dataOpt.selected;
	        }
	    },
	
	    /**
	     * @param {string} name
	     */
	    isSelected: function isSelected(name) {
	        var dataOpt = this._dataOptMap[name];
	        return dataOpt && dataOpt.selected;
	    }
	};

/***/ },
/* 356 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	
	/**
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function updateDataSelected(uid, seriesModel, hasAnimation, api) {
	    var data = seriesModel.getData();
	    var dataIndex = this.dataIndex;
	    var name = data.getName(dataIndex);
	    var selectedOffset = seriesModel.get('selectedOffset');
	
	    api.dispatchAction({
	        type: 'pieToggleSelect',
	        from: uid,
	        name: name,
	        seriesId: seriesModel.id
	    });
	
	    data.each(function (idx) {
	        toggleItemSelected(data.getItemGraphicEl(idx), data.getItemLayout(idx), seriesModel.isSelected(data.getName(idx)), selectedOffset, hasAnimation);
	    });
	}
	
	/**
	 * @param {module:zrender/graphic/Sector} el
	 * @param {Object} layout
	 * @param {boolean} isSelected
	 * @param {number} selectedOffset
	 * @param {boolean} hasAnimation
	 * @inner
	 */
	function toggleItemSelected(el, layout, isSelected, selectedOffset, hasAnimation) {
	    var midAngle = (layout.startAngle + layout.endAngle) / 2;
	
	    var dx = Math.cos(midAngle);
	    var dy = Math.sin(midAngle);
	
	    var offset = isSelected ? selectedOffset : 0;
	    var position = [dx * offset, dy * offset];
	
	    hasAnimation
	    // animateTo will stop revious animation like update transition
	    ? el.animate().when(200, {
	        position: position
	    }).start('bounceOut') : el.attr('position', position);
	}
	
	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */
	function PiePiece(data, idx) {
	
	    graphic.Group.call(this);
	
	    var sector = new graphic.Sector({
	        z2: 2
	    });
	    var polyline = new graphic.Polyline();
	    var text = new graphic.Text();
	    this.add(sector);
	    this.add(polyline);
	    this.add(text);
	
	    this.updateData(data, idx, true);
	
	    // Hover to change label and labelLine
	    function onEmphasis() {
	        polyline.ignore = polyline.hoverIgnore;
	        text.ignore = text.hoverIgnore;
	    }
	    function onNormal() {
	        polyline.ignore = polyline.normalIgnore;
	        text.ignore = text.normalIgnore;
	    }
	    this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}
	
	var piePieceProto = PiePiece.prototype;
	
	function getLabelStyle(data, idx, state, labelModel, labelPosition) {
	    var textStyleModel = labelModel.getModel('textStyle');
	    var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	    return {
	        fill: textStyleModel.getTextColor() || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	        textFont: textStyleModel.getFont(),
	        text: zrUtil.retrieve(data.hostModel.getFormattedLabel(idx, state), data.getName(idx))
	    };
	}
	
	piePieceProto.updateData = function (data, idx, firstCreate) {
	
	    var sector = this.childAt(0);
	
	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var sectorShape = zrUtil.extend({}, layout);
	    sectorShape.label = null;
	    if (firstCreate) {
	        sector.setShape(sectorShape);
	        sector.shape.endAngle = layout.startAngle;
	        graphic.updateProps(sector, {
	            shape: {
	                endAngle: layout.endAngle
	            }
	        }, seriesModel);
	    } else {
	        graphic.updateProps(sector, {
	            shape: sectorShape
	        }, seriesModel);
	    }
	
	    // Update common style
	    var itemStyleModel = itemModel.getModel('itemStyle');
	    var visualColor = data.getItemVisual(idx, 'color');
	
	    sector.setStyle(zrUtil.defaults({
	        fill: visualColor
	    }, itemStyleModel.getModel('normal').getItemStyle()));
	    sector.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	
	    // Toggle selected
	    toggleItemSelected(this, data.getItemLayout(idx), itemModel.get('selected'), seriesModel.get('selectedOffset'), seriesModel.get('animation'));
	
	    function onEmphasis() {
	        // Sector may has animation of updating data. Force to move to the last frame
	        // Or it may stopped on the wrong shape
	        sector.stopAnimation(true);
	        sector.animateTo({
	            shape: {
	                r: layout.r + 10
	            }
	        }, 300, 'elasticOut');
	    }
	    function onNormal() {
	        sector.stopAnimation(true);
	        sector.animateTo({
	            shape: {
	                r: layout.r
	            }
	        }, 300, 'elasticOut');
	    }
	    sector.off('mouseover').off('mouseout').off('emphasis').off('normal');
	    if (itemModel.get('hoverAnimation')) {
	        sector.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	    }
	
	    this._updateLabel(data, idx);
	
	    graphic.setHoverStyle(this);
	};
	
	piePieceProto._updateLabel = function (data, idx) {
	
	    var labelLine = this.childAt(1);
	    var labelText = this.childAt(2);
	
	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var labelLayout = layout.label;
	    var visualColor = data.getItemVisual(idx, 'color');
	
	    graphic.updateProps(labelLine, {
	        shape: {
	            points: labelLayout.linePoints || [[labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y], [labelLayout.x, labelLayout.y]]
	        }
	    }, seriesModel);
	
	    graphic.updateProps(labelText, {
	        style: {
	            x: labelLayout.x,
	            y: labelLayout.y
	        }
	    }, seriesModel);
	    labelText.attr({
	        style: {
	            textVerticalAlign: labelLayout.verticalAlign,
	            textAlign: labelLayout.textAlign,
	            textFont: labelLayout.font
	        },
	        rotation: labelLayout.rotation,
	        origin: [labelLayout.x, labelLayout.y],
	        z2: 10
	    });
	
	    var labelModel = itemModel.getModel('label.normal');
	    var labelHoverModel = itemModel.getModel('label.emphasis');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	    var labelPosition = labelModel.get('position') || labelHoverModel.get('position');
	
	    labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel, labelPosition));
	
	    labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	    labelText.hoverIgnore = !labelHoverModel.get('show');
	
	    labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	    labelLine.hoverIgnore = !labelLineHoverModel.get('show');
	
	    // Default use item visual color
	    labelLine.setStyle({
	        stroke: visualColor
	    });
	    labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	
	    labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel, labelPosition);
	    labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	
	    var smooth = labelLineModel.get('smooth');
	    if (smooth && smooth === true) {
	        smooth = 0.4;
	    }
	    labelLine.setShape({
	        smooth: smooth
	    });
	};
	
	zrUtil.inherits(PiePiece, graphic.Group);
	
	// Pie view
	var Pie = __webpack_require__(262).extend({
	
	    type: 'pie',
	
	    init: function init() {
	        var sectorGroup = new graphic.Group();
	        this._sectorGroup = sectorGroup;
	    },
	
	    render: function render(seriesModel, ecModel, api, payload) {
	        if (payload && payload.from === this.uid) {
	            return;
	        }
	
	        var data = seriesModel.getData();
	        var oldData = this._data;
	        var group = this.group;
	
	        var hasAnimation = ecModel.get('animation');
	        var isFirstRender = !oldData;
	
	        var onSectorClick = zrUtil.curry(updateDataSelected, this.uid, seriesModel, hasAnimation, api);
	
	        var selectedMode = seriesModel.get('selectedMode');
	
	        data.diff(oldData).add(function (idx) {
	            var piePiece = new PiePiece(data, idx);
	            if (isFirstRender) {
	                piePiece.eachChild(function (child) {
	                    child.stopAnimation(true);
	                });
	            }
	
	            selectedMode && piePiece.on('click', onSectorClick);
	
	            data.setItemGraphicEl(idx, piePiece);
	
	            group.add(piePiece);
	        }).update(function (newIdx, oldIdx) {
	            var piePiece = oldData.getItemGraphicEl(oldIdx);
	
	            piePiece.updateData(data, newIdx);
	
	            piePiece.off('click');
	            selectedMode && piePiece.on('click', onSectorClick);
	            group.add(piePiece);
	            data.setItemGraphicEl(newIdx, piePiece);
	        }).remove(function (idx) {
	            var piePiece = oldData.getItemGraphicEl(idx);
	            group.remove(piePiece);
	        }).execute();
	
	        if (hasAnimation && isFirstRender && data.count() > 0) {
	            var shape = data.getItemLayout(0);
	            var r = Math.max(api.getWidth(), api.getHeight()) / 2;
	
	            var removeClipPath = zrUtil.bind(group.removeClipPath, group);
	            group.setClipPath(this._createClipPath(shape.cx, shape.cy, r, shape.startAngle, shape.clockwise, removeClipPath, seriesModel));
	        }
	
	        this._data = data;
	    },
	
	    _createClipPath: function _createClipPath(cx, cy, r, startAngle, clockwise, cb, seriesModel) {
	        var clipPath = new graphic.Sector({
	            shape: {
	                cx: cx,
	                cy: cy,
	                r0: 0,
	                r: r,
	                startAngle: startAngle,
	                endAngle: startAngle,
	                clockwise: clockwise
	            }
	        });
	
	        graphic.initProps(clipPath, {
	            shape: {
	                endAngle: startAngle + (clockwise ? 1 : -1) * Math.PI * 2
	            }
	        }, seriesModel, cb);
	
	        return clipPath;
	    }
	});
	
	module.exports = Pie;

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	var zrUtil = __webpack_require__(224);
	module.exports = function (seriesType, actionInfos) {
	    zrUtil.each(actionInfos, function (actionInfo) {
	        actionInfo.update = 'updateView';
	        /**
	         * @payload
	         * @property {string} seriesName
	         * @property {string} name
	         */
	        echarts.registerAction(actionInfo, function (payload, ecModel) {
	            var selected = {};
	            ecModel.eachComponent({ mainType: 'series', subType: seriesType, query: payload }, function (seriesModel) {
	                if (seriesModel[actionInfo.method]) {
	                    seriesModel[actionInfo.method](payload.name);
	                }
	                var data = seriesModel.getData();
	                // Create selected map
	                data.each(function (idx) {
	                    var name = data.getName(idx);
	                    selected[name] = seriesModel.isSelected(name) || false;
	                });
	            });
	            return {
	                name: payload.name,
	                selected: selected
	            };
	        });
	    });
	};

/***/ },
/* 358 */
/***/ function(module, exports) {

	'use strict';
	
	// Pick color from palette for each data item
	
	module.exports = function (seriesType, ecModel) {
	    var globalColorList = ecModel.get('color');
	    var offset = 0;
	    ecModel.eachRawSeriesByType(seriesType, function (seriesModel) {
	        var colorList = seriesModel.get('color', true);
	        var dataAll = seriesModel.getRawData();
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            var data = seriesModel.getData();
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var rawIdx = data.getRawIndex(idx);
	                // If series.itemStyle.normal.color is a function. itemVisual may be encoded
	                var singleDataColor = data.getItemVisual(idx, 'color', true);
	                if (!singleDataColor) {
	                    var paletteColor = colorList ? colorList[rawIdx % colorList.length] : globalColorList[(rawIdx + offset) % globalColorList.length];
	                    var color = itemModel.get('itemStyle.normal.color') || paletteColor;
	                    // Legend may use the visual info in data before processed
	                    dataAll.setItemVisual(rawIdx, 'color', color);
	                    data.setItemVisual(idx, 'color', color);
	                } else {
	                    // Set data all color for legend
	                    dataAll.setItemVisual(rawIdx, 'color', singleDataColor);
	                }
	            });
	        }
	        offset += dataAll.count();
	    });
	};

/***/ },
/* 359 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// TODO minAngle
	
	var numberUtil = __webpack_require__(228);
	var parsePercent = numberUtil.parsePercent;
	var labelLayout = __webpack_require__(360);
	var zrUtil = __webpack_require__(224);
	
	var PI2 = Math.PI * 2;
	var RADIAN = Math.PI / 180;
	
	module.exports = function (seriesType, ecModel, api) {
	    ecModel.eachSeriesByType(seriesType, function (seriesModel) {
	        var center = seriesModel.get('center');
	        var radius = seriesModel.get('radius');
	
	        if (!zrUtil.isArray(radius)) {
	            radius = [0, radius];
	        }
	        if (!zrUtil.isArray(center)) {
	            center = [center, center];
	        }
	
	        var width = api.getWidth();
	        var height = api.getHeight();
	        var size = Math.min(width, height);
	        var cx = parsePercent(center[0], width);
	        var cy = parsePercent(center[1], height);
	        var r0 = parsePercent(radius[0], size / 2);
	        var r = parsePercent(radius[1], size / 2);
	
	        var data = seriesModel.getData();
	
	        var startAngle = -seriesModel.get('startAngle') * RADIAN;
	
	        var minAngle = seriesModel.get('minAngle') * RADIAN;
	
	        var sum = data.getSum('value');
	        // Sum may be 0
	        var unitRadian = Math.PI / (sum || data.count()) * 2;
	
	        var clockwise = seriesModel.get('clockwise');
	
	        var roseType = seriesModel.get('roseType');
	
	        // [0...max]
	        var extent = data.getDataExtent('value');
	        extent[0] = 0;
	
	        // In the case some sector angle is smaller than minAngle
	        var restAngle = PI2;
	        var valueSumLargerThanMinAngle = 0;
	
	        var currentAngle = startAngle;
	
	        var dir = clockwise ? 1 : -1;
	        data.each('value', function (value, idx) {
	            var angle;
	            // FIXME 兼容 2.0 但是 roseType 是 area 的时候才是这样？
	            if (roseType !== 'area') {
	                angle = sum === 0 ? unitRadian : value * unitRadian;
	            } else {
	                angle = PI2 / (data.count() || 1);
	            }
	
	            if (angle < minAngle) {
	                angle = minAngle;
	                restAngle -= minAngle;
	            } else {
	                valueSumLargerThanMinAngle += value;
	            }
	
	            var endAngle = currentAngle + dir * angle;
	            data.setItemLayout(idx, {
	                angle: angle,
	                startAngle: currentAngle,
	                endAngle: endAngle,
	                clockwise: clockwise,
	                cx: cx,
	                cy: cy,
	                r0: r0,
	                r: roseType ? numberUtil.linearMap(value, extent, [r0, r]) : r
	            });
	
	            currentAngle = endAngle;
	        }, true);
	
	        // Some sector is constrained by minAngle
	        // Rest sectors needs recalculate angle
	        if (restAngle < PI2) {
	            // Average the angle if rest angle is not enough after all angles is
	            // Constrained by minAngle
	            if (restAngle <= 1e-3) {
	                var angle = PI2 / data.count();
	                data.each(function (idx) {
	                    var layout = data.getItemLayout(idx);
	                    layout.startAngle = startAngle + dir * idx * angle;
	                    layout.endAngle = startAngle + dir * (idx + 1) * angle;
	                });
	            } else {
	                unitRadian = restAngle / valueSumLargerThanMinAngle;
	                currentAngle = startAngle;
	                data.each('value', function (value, idx) {
	                    var layout = data.getItemLayout(idx);
	                    var angle = layout.angle === minAngle ? minAngle : value * unitRadian;
	                    layout.startAngle = currentAngle;
	                    layout.endAngle = currentAngle + dir * angle;
	                    currentAngle += angle;
	                });
	            }
	        }
	
	        labelLayout(seriesModel, r, width, height);
	    });
	};

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// FIXME emphasis label position is not same with normal label position
	
	var textContain = __webpack_require__(235);
	
	function adjustSingleSide(list, cx, cy, r, dir, viewWidth, viewHeight) {
	    list.sort(function (a, b) {
	        return a.y - b.y;
	    });
	
	    // 压
	    function shiftDown(start, end, delta, dir) {
	        for (var j = start; j < end; j++) {
	            list[j].y += delta;
	            if (j > start && j + 1 < end && list[j + 1].y > list[j].y + list[j].height) {
	                shiftUp(j, delta / 2);
	                return;
	            }
	        }
	
	        shiftUp(end - 1, delta / 2);
	    }
	
	    // 弹
	    function shiftUp(end, delta) {
	        for (var j = end; j >= 0; j--) {
	            list[j].y -= delta;
	            if (j > 0 && list[j].y > list[j - 1].y + list[j - 1].height) {
	                break;
	            }
	        }
	    }
	
	    // function changeX(list, isDownList, cx, cy, r, dir) {
	    //     var deltaX;
	    //     var deltaY;
	    //     var length;
	    //     var lastDeltaX = dir > 0
	    //         ? isDownList                // 右侧
	    //             ? Number.MAX_VALUE      // 下
	    //             : 0                     // 上
	    //         : isDownList                // 左侧
	    //             ? Number.MAX_VALUE      // 下
	    //             : 0;                    // 上
	
	    //     for (var i = 0, l = list.length; i < l; i++) {
	    //         deltaY = Math.abs(list[i].y - cy);
	    //         length = list[i].length;
	    //         deltaX = (deltaY < r + length)
	    //             ? Math.sqrt(
	    //                   (r + length + 20) * (r + length + 20)
	    //                   - Math.pow(list[i].y - cy, 2)
	    //               )
	    //             : Math.abs(
	    //                   list[i].x - cx
	    //               );
	    //         if (isDownList && deltaX >= lastDeltaX) {
	    //             // 右下，左下
	    //             deltaX = lastDeltaX - 10;
	    //         }
	    //         if (!isDownList && deltaX <= lastDeltaX) {
	    //             // 右上，左上
	    //             deltaX = lastDeltaX + 10;
	    //         }
	
	    //         list[i].x = cx + deltaX * dir;
	    //         lastDeltaX = deltaX;
	    //     }
	    // }
	
	    var lastY = 0;
	    var delta;
	    var len = list.length;
	    var upList = [];
	    var downList = [];
	    for (var i = 0; i < len; i++) {
	        delta = list[i].y - lastY;
	        if (delta < 0) {
	            shiftDown(i, len, -delta, dir);
	        }
	        lastY = list[i].y + list[i].height;
	    }
	    if (viewHeight - lastY < 0) {
	        shiftUp(len - 1, lastY - viewHeight);
	    }
	    for (var i = 0; i < len; i++) {
	        if (list[i].y >= cy) {
	            downList.push(list[i]);
	        } else {
	            upList.push(list[i]);
	        }
	    }
	    // changeX(downList, true, cx, cy, r, dir);
	    // changeX(upList, false, cx, cy, r, dir);
	}
	
	function avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight) {
	    var leftList = [];
	    var rightList = [];
	    for (var i = 0; i < labelLayoutList.length; i++) {
	        if (labelLayoutList[i].x < cx) {
	            leftList.push(labelLayoutList[i]);
	        } else {
	            rightList.push(labelLayoutList[i]);
	        }
	    }
	
	    adjustSingleSide(leftList, cx, cy, r, -1, viewWidth, viewHeight);
	    adjustSingleSide(rightList, cx, cy, r, 1, viewWidth, viewHeight);
	
	    for (var i = 0; i < labelLayoutList.length; i++) {
	        var linePoints = labelLayoutList[i].linePoints;
	        if (linePoints) {
	            if (labelLayoutList[i].x < cx) {
	                linePoints[2][0] = labelLayoutList[i].x + 3;
	            } else {
	                linePoints[2][0] = labelLayoutList[i].x - 3;
	            }
	            linePoints[1][1] = linePoints[2][1] = labelLayoutList[i].y;
	        }
	    }
	}
	
	module.exports = function (seriesModel, r, viewWidth, viewHeight) {
	    var data = seriesModel.getData();
	    var labelLayoutList = [];
	    var cx;
	    var cy;
	    var hasLabelRotate = false;
	
	    data.each(function (idx) {
	        var layout = data.getItemLayout(idx);
	
	        var itemModel = data.getItemModel(idx);
	        var labelModel = itemModel.getModel('label.normal');
	        // Use position in normal or emphasis
	        var labelPosition = labelModel.get('position') || itemModel.get('label.emphasis.position');
	
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	        var labelLineLen = labelLineModel.get('length');
	        var labelLineLen2 = labelLineModel.get('length2');
	
	        var midAngle = (layout.startAngle + layout.endAngle) / 2;
	        var dx = Math.cos(midAngle);
	        var dy = Math.sin(midAngle);
	
	        var textX;
	        var textY;
	        var linePoints;
	        var textAlign;
	
	        cx = layout.cx;
	        cy = layout.cy;
	
	        if (labelPosition === 'center') {
	            textX = layout.cx;
	            textY = layout.cy;
	            textAlign = 'center';
	        } else {
	            var isLabelInside = labelPosition === 'inside' || labelPosition === 'inner';
	            var x1 = (isLabelInside ? layout.r / 2 * dx : layout.r * dx) + cx;
	            var y1 = (isLabelInside ? layout.r / 2 * dy : layout.r * dy) + cy;
	
	            // For roseType
	            labelLineLen += r - layout.r;
	
	            textX = x1 + dx * 3;
	            textY = y1 + dy * 3;
	
	            if (!isLabelInside) {
	                var x2 = x1 + dx * labelLineLen;
	                var y2 = y1 + dy * labelLineLen;
	                var x3 = x2 + (dx < 0 ? -1 : 1) * labelLineLen2;
	                var y3 = y2;
	
	                textX = x3 + (dx < 0 ? -5 : 5);
	                textY = y3;
	                linePoints = [[x1, y1], [x2, y2], [x3, y3]];
	            }
	
	            textAlign = isLabelInside ? 'center' : dx > 0 ? 'left' : 'right';
	        }
	        var font = labelModel.getModel('textStyle').getFont();
	
	        var labelRotate = labelModel.get('rotate') ? dx < 0 ? -midAngle + Math.PI : -midAngle : 0;
	        var text = seriesModel.getFormattedLabel(idx, 'normal') || data.getName(idx);
	        var textRect = textContain.getBoundingRect(text, font, textAlign, 'top');
	        hasLabelRotate = !!labelRotate;
	        layout.label = {
	            x: textX,
	            y: textY,
	            height: textRect.height,
	            length: labelLineLen,
	            length2: labelLineLen2,
	            linePoints: linePoints,
	            textAlign: textAlign,
	            verticalAlign: 'middle',
	            font: font,
	            rotation: labelRotate
	        };
	
	        labelLayoutList.push(layout.label);
	    });
	    if (!hasLabelRotate && seriesModel.get('avoidLabelOverlap')) {
	        avoidOverlap(labelLayoutList, cx, cy, r, viewWidth, viewHeight);
	    }
	};

/***/ },
/* 361 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (seriesType, ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (!legendModels || !legendModels.length) {
	        return;
	    }
	    ecModel.eachSeriesByType(seriesType, function (series) {
	        var data = series.getData();
	        data.filterSelf(function (idx) {
	            var name = data.getName(idx);
	            // If in any legend component the status is not selected.
	            for (var i = 0; i < legendModels.length; i++) {
	                if (!legendModels[i].isSelected(name)) {
	                    return false;
	                }
	            }
	            return true;
	        }, this);
	    }, this);
	};

/***/ },
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	__webpack_require__(363);
	__webpack_require__(364);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(324), 'scatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(325), 'scatter'));
	
	// In case developer forget to include grid component
	__webpack_require__(327);

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createListFromArray = __webpack_require__(314);
	var SeriesModel = __webpack_require__(248);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.scatter',
	
	    dependencies: ['grid', 'polar'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var list = createListFromArray(option.data, this, ecModel);
	        return list;
	    },
	
	    defaultOption: {
	        coordinateSystem: 'cartesian2d',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        // Polar coordinate system
	        polarIndex: 0,
	
	        // Geo coordinate system
	        geoIndex: 0,
	
	        // symbol: null,        // 图形类型
	        symbolSize: 10, // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	        // symbolRotate: null,  // 图形旋转控制
	
	        large: false,
	        // Available when large is true
	        largeThreshold: 2000,
	
	        // label: {
	        // normal: {
	        // show: false
	        // distance: 5,
	        // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	        // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	        //           'inside'|'left'|'right'|'top'|'bottom'
	        // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	        //     }
	        // },
	        itemStyle: {
	            normal: {
	                opacity: 0.8
	                // color: 各异
	            }
	        }
	    }
	});

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SymbolDraw = __webpack_require__(319);
	var LargeSymbolDraw = __webpack_require__(365);
	
	__webpack_require__(222).extendChartView({
	
	    type: 'scatter',
	
	    init: function init() {
	        this._normalSymbolDraw = new SymbolDraw();
	        this._largeSymbolDraw = new LargeSymbolDraw();
	    },
	
	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var largeSymbolDraw = this._largeSymbolDraw;
	        var normalSymbolDraw = this._normalSymbolDraw;
	        var group = this.group;
	
	        var symbolDraw = seriesModel.get('large') && data.count() > seriesModel.get('largeThreshold') ? largeSymbolDraw : normalSymbolDraw;
	
	        this._symbolDraw = symbolDraw;
	        symbolDraw.updateData(data);
	        group.add(symbolDraw.group);
	
	        group.remove(symbolDraw === largeSymbolDraw ? normalSymbolDraw.group : largeSymbolDraw.group);
	    },
	
	    updateLayout: function updateLayout(seriesModel) {
	        this._symbolDraw.updateLayout(seriesModel);
	    },
	
	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove(api, true);
	    }
	});

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var symbolUtil = __webpack_require__(321);
	var zrUtil = __webpack_require__(224);
	
	var LargeSymbolPath = graphic.extendShape({
	    shape: {
	        points: null,
	        sizes: null
	    },
	
	    symbolProxy: null,
	
	    buildPath: function buildPath(path, shape) {
	        var points = shape.points;
	        var sizes = shape.sizes;
	
	        var symbolProxy = this.symbolProxy;
	        var symbolProxyShape = symbolProxy.shape;
	        for (var i = 0; i < points.length; i++) {
	            var pt = points[i];
	            var size = sizes[i];
	            if (size[0] < 4) {
	                // Optimize for small symbol
	                path.rect(pt[0] - size[0] / 2, pt[1] - size[1] / 2, size[0], size[1]);
	            } else {
	                symbolProxyShape.x = pt[0] - size[0] / 2;
	                symbolProxyShape.y = pt[1] - size[1] / 2;
	                symbolProxyShape.width = size[0];
	                symbolProxyShape.height = size[1];
	
	                symbolProxy.buildPath(path, symbolProxyShape);
	            }
	        }
	    }
	});
	
	function LargeSymbolDraw() {
	    this.group = new graphic.Group();
	
	    this._symbolEl = new LargeSymbolPath({
	        silent: true
	    });
	}
	
	var largeSymbolProto = LargeSymbolDraw.prototype;
	
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */
	largeSymbolProto.updateData = function (data) {
	    this.group.removeAll();
	
	    var symbolEl = this._symbolEl;
	
	    var seriesModel = data.hostModel;
	
	    symbolEl.setShape({
	        points: data.mapArray(data.getItemLayout),
	        sizes: data.mapArray(function (idx) {
	            var size = data.getItemVisual(idx, 'symbolSize');
	            if (!zrUtil.isArray(size)) {
	                size = [size, size];
	            }
	            return size;
	        })
	    });
	
	    // Create symbolProxy to build path for each data
	    symbolEl.symbolProxy = symbolUtil.createSymbol(data.getVisual('symbol'), 0, 0, 0, 0);
	    // Use symbolProxy setColor method
	    symbolEl.setColor = symbolEl.symbolProxy.setColor;
	
	    symbolEl.setStyle(seriesModel.getModel('itemStyle.normal').getItemStyle(['color']));
	
	    var visualColor = data.getVisual('color');
	    if (visualColor) {
	        symbolEl.setColor(visualColor);
	    }
	
	    // Add back
	    this.group.add(this._symbolEl);
	};
	
	largeSymbolProto.updateLayout = function (seriesModel) {
	    var data = seriesModel.getData();
	    this._symbolEl.setShape({
	        points: data.mapArray(data.getItemLayout)
	    });
	};
	
	largeSymbolProto.remove = function () {
	    this.group.removeAll();
	};
	
	module.exports = LargeSymbolDraw;

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	// Must use radar component
	__webpack_require__(367);
	
	__webpack_require__(372);
	__webpack_require__(373);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(358), 'radar'));
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(324), 'radar', 'circle', null));
	echarts.registerLayout(__webpack_require__(374));
	
	echarts.registerProcessor('filter', zrUtil.curry(__webpack_require__(361), 'radar'));
	
	echarts.registerPreprocessor(__webpack_require__(375));

/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(368);
	__webpack_require__(370);
	
	__webpack_require__(371);

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// TODO clockwise
	
	var zrUtil = __webpack_require__(224);
	var IndicatorAxis = __webpack_require__(369);
	var IntervalScale = __webpack_require__(332);
	var numberUtil = __webpack_require__(228);
	var axisHelper = __webpack_require__(329);
	
	function Radar(radarModel, ecModel, api) {
	
	    this._model = radarModel;
	    /**
	     * Radar dimensions
	     * @type {Array.<string>}
	     */
	    this.dimensions = [];
	
	    this._indicatorAxes = zrUtil.map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {
	        var dim = 'indicator_' + idx;
	        var indicatorAxis = new IndicatorAxis(dim, new IntervalScale());
	        indicatorAxis.name = indicatorModel.get('name');
	        // Inject model and axis
	        indicatorAxis.model = indicatorModel;
	        indicatorModel.axis = indicatorAxis;
	        this.dimensions.push(dim);
	        return indicatorAxis;
	    }, this);
	
	    this.resize(radarModel, api);
	
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.cx;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.cy;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.r;
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.startAngle;
	}
	
	Radar.prototype.getIndicatorAxes = function () {
	    return this._indicatorAxes;
	};
	
	Radar.prototype.dataToPoint = function (value, indicatorIndex) {
	    var indicatorAxis = this._indicatorAxes[indicatorIndex];
	
	    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);
	};
	
	Radar.prototype.coordToPoint = function (coord, indicatorIndex) {
	    var indicatorAxis = this._indicatorAxes[indicatorIndex];
	    var angle = indicatorAxis.angle;
	    var x = this.cx + coord * Math.cos(angle);
	    var y = this.cy - coord * Math.sin(angle);
	    return [x, y];
	};
	
	Radar.prototype.pointToData = function (pt) {
	    var dx = pt[0] - this.cx;
	    var dy = pt[1] - this.cy;
	    var radius = Math.sqrt(dx * dx + dy * dy);
	    dx /= radius;
	    dy /= radius;
	
	    var radian = Math.atan2(-dy, dx);
	
	    // Find the closest angle
	    // FIXME index can calculated directly
	    var minRadianDiff = Infinity;
	    var closestAxis;
	    var closestAxisIdx = -1;
	    for (var i = 0; i < this._indicatorAxes.length; i++) {
	        var indicatorAxis = this._indicatorAxes[i];
	        var diff = Math.abs(radian - indicatorAxis.angle);
	        if (diff < minRadianDiff) {
	            closestAxis = indicatorAxis;
	            closestAxisIdx = i;
	            minRadianDiff = diff;
	        }
	    }
	
	    return [closestAxisIdx, +(closestAxis && closestAxis.coodToData(radius))];
	};
	
	Radar.prototype.resize = function (radarModel, api) {
	    var center = radarModel.get('center');
	    var viewWidth = api.getWidth();
	    var viewHeight = api.getHeight();
	    var viewSize = Math.min(viewWidth, viewHeight) / 2;
	    this.cx = numberUtil.parsePercent(center[0], viewWidth);
	    this.cy = numberUtil.parsePercent(center[1], viewHeight);
	
	    this.startAngle = radarModel.get('startAngle') * Math.PI / 180;
	
	    this.r = numberUtil.parsePercent(radarModel.get('radius'), viewSize);
	
	    zrUtil.each(this._indicatorAxes, function (indicatorAxis, idx) {
	        indicatorAxis.setExtent(0, this.r);
	        var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length;
	        // Normalize to [-PI, PI]
	        angle = Math.atan2(Math.sin(angle), Math.cos(angle));
	        indicatorAxis.angle = angle;
	    }, this);
	};
	
	Radar.prototype.update = function (ecModel, api) {
	    var indicatorAxes = this._indicatorAxes;
	    var radarModel = this._model;
	    zrUtil.each(indicatorAxes, function (indicatorAxis) {
	        indicatorAxis.scale.setExtent(Infinity, -Infinity);
	    });
	    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {
	        if (radarSeries.get('coordinateSystem') !== 'radar' || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {
	            return;
	        }
	        var data = radarSeries.getData();
	        zrUtil.each(indicatorAxes, function (indicatorAxis) {
	            indicatorAxis.scale.unionExtent(data.getDataExtent(indicatorAxis.dim));
	        });
	    }, this);
	
	    var splitNumber = radarModel.get('splitNumber');
	
	    function increaseInterval(interval) {
	        var exp10 = Math.pow(10, Math.floor(Math.log(interval) / Math.LN10));
	        // Increase interval
	        var f = interval / exp10;
	        if (f === 2) {
	            f = 5;
	        } else {
	            // f is 2 or 5
	            f *= 2;
	        }
	        return f * exp10;
	    }
	    // Force all the axis fixing the maxSplitNumber.
	    zrUtil.each(indicatorAxes, function (indicatorAxis, idx) {
	        var rawExtent = axisHelper.getScaleExtent(indicatorAxis, indicatorAxis.model);
	        axisHelper.niceScaleExtent(indicatorAxis, indicatorAxis.model);
	
	        var axisModel = indicatorAxis.model;
	        var scale = indicatorAxis.scale;
	        var fixedMin = axisModel.get('min');
	        var fixedMax = axisModel.get('max');
	        var interval = scale.getInterval();
	
	        if (fixedMin != null && fixedMax != null) {
	            // User set min, max, divide to get new interval
	            // FIXME precision
	            scale.setInterval((fixedMax - fixedMin) / splitNumber);
	        } else if (fixedMin != null) {
	            var max;
	            // User set min, expand extent on the other side
	            do {
	                max = fixedMin + interval * splitNumber;
	                scale.setExtent(+fixedMin, max);
	                // Interval must been set after extent
	                // FIXME
	                scale.setInterval(interval);
	
	                interval = increaseInterval(interval);
	            } while (max < rawExtent[1] && isFinite(max) && isFinite(rawExtent[1]));
	        } else if (fixedMax != null) {
	            var min;
	            // User set min, expand extent on the other side
	            do {
	                min = fixedMax - interval * splitNumber;
	                scale.setExtent(min, +fixedMax);
	                scale.setInterval(interval);
	                interval = increaseInterval(interval);
	            } while (min > rawExtent[0] && isFinite(min) && isFinite(rawExtent[0]));
	        } else {
	            var nicedSplitNumber = scale.getTicks().length - 1;
	            if (nicedSplitNumber > splitNumber) {
	                interval = increaseInterval(interval);
	            }
	            // PENDING
	            var center = Math.round((rawExtent[0] + rawExtent[1]) / 2 / interval) * interval;
	            var halfSplitNumber = Math.round(splitNumber / 2);
	            scale.setExtent(numberUtil.round(center - halfSplitNumber * interval), numberUtil.round(center + (splitNumber - halfSplitNumber) * interval));
	            scale.setInterval(interval);
	        }
	    });
	};
	
	/**
	 * Radar dimensions is based on the data
	 * @type {Array}
	 */
	Radar.dimensions = [];
	
	Radar.create = function (ecModel, api) {
	    var radarList = [];
	    ecModel.eachComponent('radar', function (radarModel) {
	        var radar = new Radar(radarModel, ecModel, api);
	        radarList.push(radar);
	        radarModel.coordinateSystem = radar;
	    });
	    ecModel.eachSeriesByType('radar', function (radarSeries) {
	        if (radarSeries.get('coordinateSystem') === 'radar') {
	            // Inject coordinate system
	            radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];
	        }
	    });
	    return radarList;
	};
	
	__webpack_require__(246).register('radar', Radar);
	module.exports = Radar;

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	
	function IndicatorAxis(dim, scale, radiusExtent) {
	  Axis.call(this, dim, scale, radiusExtent);
	
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = 'value';
	
	  this.angle = 0;
	
	  /**
	   * Indicator name
	   * @type {string}
	   */
	  this.name = '';
	  /**
	   * @type {module:echarts/model/Model}
	   */
	  this.model;
	}
	
	zrUtil.inherits(IndicatorAxis, Axis);
	
	module.exports = IndicatorAxis;

/***/ },
/* 370 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var axisDefault = __webpack_require__(343);
	var valueAxisDefault = axisDefault.valueAxis;
	var Model = __webpack_require__(229);
	var zrUtil = __webpack_require__(224);
	
	var axisModelCommonMixin = __webpack_require__(344);
	
	function defaultsShow(opt, show) {
	    return zrUtil.defaults({
	        show: show
	    }, opt);
	}
	
	var RadarModel = __webpack_require__(222).extendComponentModel({
	
	    type: 'radar',
	
	    optionUpdated: function optionUpdated() {
	        var boundaryGap = this.get('boundaryGap');
	        var splitNumber = this.get('splitNumber');
	        var scale = this.get('scale');
	        var axisLine = this.get('axisLine');
	        var axisTick = this.get('axisTick');
	        var axisLabel = this.get('axisLabel');
	        var nameTextStyle = this.get('name.textStyle');
	        var showName = this.get('name.show');
	        var nameFormatter = this.get('name.formatter');
	        var nameGap = this.get('nameGap');
	        var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {
	            // PENDING
	            if (indicatorOpt.max != null && indicatorOpt.max > 0) {
	                indicatorOpt.min = 0;
	            } else if (indicatorOpt.min != null && indicatorOpt.min < 0) {
	                indicatorOpt.max = 0;
	            }
	            // Use same configuration
	            indicatorOpt = zrUtil.extend({
	                boundaryGap: boundaryGap,
	                splitNumber: splitNumber,
	                scale: scale,
	                axisLine: axisLine,
	                axisTick: axisTick,
	                axisLabel: axisLabel,
	                // Competitable with 2 and use text
	                name: indicatorOpt.text,
	                nameLocation: 'end',
	                nameGap: nameGap,
	                // min: 0,
	                nameTextStyle: nameTextStyle
	            }, indicatorOpt);
	            if (!showName) {
	                indicatorOpt.name = '';
	            }
	            if (typeof nameFormatter === 'string') {
	                indicatorOpt.name = nameFormatter.replace('{value}', indicatorOpt.name);
	            } else if (typeof nameFormatter === 'function') {
	                indicatorOpt.name = nameFormatter(indicatorOpt.name, indicatorOpt);
	            }
	            return zrUtil.extend(new Model(indicatorOpt, null, this.ecModel), axisModelCommonMixin);
	        }, this);
	        this.getIndicatorModels = function () {
	            return indicatorModels;
	        };
	    },
	
	    defaultOption: {
	
	        zlevel: 0,
	
	        z: 0,
	
	        center: ['50%', '50%'],
	
	        radius: '75%',
	
	        startAngle: 90,
	
	        name: {
	            show: true
	            // formatter: null
	            // textStyle: {}
	        },
	
	        boundaryGap: [0, 0],
	
	        splitNumber: 5,
	
	        nameGap: 15,
	
	        scale: false,
	
	        // Polygon or circle
	        shape: 'polygon',
	
	        axisLine: zrUtil.merge({
	            lineStyle: {
	                color: '#bbb'
	            }
	        }, valueAxisDefault.axisLine),
	        axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),
	        axisTick: defaultsShow(valueAxisDefault.axisTick, false),
	        splitLine: defaultsShow(valueAxisDefault.splitLine, true),
	        splitArea: defaultsShow(valueAxisDefault.splitArea, true),
	
	        // {text, min, max}
	        indicator: []
	    }
	});
	
	module.exports = RadarModel;

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var AxisBuilder = __webpack_require__(347);
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	
	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	
	module.exports = __webpack_require__(222).extendComponentView({
	
	    type: 'radar',
	
	    render: function render(radarModel, ecModel, api) {
	        var group = this.group;
	        group.removeAll();
	
	        this._buildAxes(radarModel);
	        this._buildSplitLineAndArea(radarModel);
	    },
	
	    _buildAxes: function _buildAxes(radarModel) {
	        var radar = radarModel.coordinateSystem;
	        var indicatorAxes = radar.getIndicatorAxes();
	        var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {
	            var axisBuilder = new AxisBuilder(indicatorAxis.model, {
	                position: [radar.cx, radar.cy],
	                rotation: indicatorAxis.angle,
	                labelDirection: -1,
	                tickDirection: -1,
	                nameDirection: 1
	            });
	            return axisBuilder;
	        });
	
	        zrUtil.each(axisBuilders, function (axisBuilder) {
	            zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	            this.group.add(axisBuilder.getGroup());
	        }, this);
	    },
	
	    _buildSplitLineAndArea: function _buildSplitLineAndArea(radarModel) {
	        var radar = radarModel.coordinateSystem;
	        var splitNumber = radarModel.get('splitNumber');
	        var indicatorAxes = radar.getIndicatorAxes();
	        if (!indicatorAxes.length) {
	            return;
	        }
	        var shape = radarModel.get('shape');
	        var splitLineModel = radarModel.getModel('splitLine');
	        var splitAreaModel = radarModel.getModel('splitArea');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	
	        var showSplitLine = splitLineModel.get('show');
	        var showSplitArea = splitAreaModel.get('show');
	        var splitLineColors = lineStyleModel.get('color');
	        var splitAreaColors = areaStyleModel.get('color');
	
	        splitLineColors = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];
	        splitAreaColors = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];
	
	        var splitLines = [];
	        var splitAreas = [];
	
	        function getColorIndex(areaOrLine, areaOrLineColorList, idx) {
	            var colorIndex = idx % areaOrLineColorList.length;
	            areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];
	            return colorIndex;
	        }
	
	        if (shape === 'circle') {
	            var ticksRadius = indicatorAxes[0].getTicksCoords();
	            var cx = radar.cx;
	            var cy = radar.cy;
	            for (var i = 0; i < ticksRadius.length; i++) {
	                if (showSplitLine) {
	                    var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                    splitLines[colorIndex].push(new graphic.Circle({
	                        shape: {
	                            cx: cx,
	                            cy: cy,
	                            r: ticksRadius[i]
	                        }
	                    }));
	                }
	                if (showSplitArea && i < ticksRadius.length - 1) {
	                    var colorIndex = getColorIndex(splitAreas, splitAreaColors, i);
	                    splitAreas[colorIndex].push(new graphic.Ring({
	                        shape: {
	                            cx: cx,
	                            cy: cy,
	                            r0: ticksRadius[i],
	                            r: ticksRadius[i + 1]
	                        }
	                    }));
	                }
	            }
	        }
	        // Polyyon
	        else {
	                var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {
	                    var ticksCoords = indicatorAxis.getTicksCoords();
	                    return zrUtil.map(ticksCoords, function (tickCoord) {
	                        return radar.coordToPoint(tickCoord, idx);
	                    });
	                });
	
	                var prevPoints = [];
	                for (var i = 0; i <= splitNumber; i++) {
	                    var points = [];
	                    for (var j = 0; j < indicatorAxes.length; j++) {
	                        points.push(axesTicksPoints[j][i]);
	                    }
	                    // Close
	                    points.push(points[0].slice());
	                    if (showSplitLine) {
	                        var colorIndex = getColorIndex(splitLines, splitLineColors, i);
	                        splitLines[colorIndex].push(new graphic.Polyline({
	                            shape: {
	                                points: points
	                            }
	                        }));
	                    }
	                    if (showSplitArea && prevPoints) {
	                        var colorIndex = getColorIndex(splitAreas, splitAreaColors, i - 1);
	                        splitAreas[colorIndex].push(new graphic.Polygon({
	                            shape: {
	                                points: points.concat(prevPoints)
	                            }
	                        }));
	                    }
	                    prevPoints = points.slice().reverse();
	                }
	            }
	
	        var lineStyle = lineStyleModel.getLineStyle();
	        var areaStyle = areaStyleModel.getAreaStyle();
	        // Add splitArea before splitLine
	        zrUtil.each(splitAreas, function (splitAreas, idx) {
	            this.group.add(graphic.mergePath(splitAreas, {
	                style: zrUtil.defaults({
	                    stroke: 'none',
	                    fill: splitAreaColors[idx % splitAreaColors.length]
	                }, areaStyle),
	                silent: true
	            }));
	        }, this);
	
	        zrUtil.each(splitLines, function (splitLines, idx) {
	            this.group.add(graphic.mergePath(splitLines, {
	                style: zrUtil.defaults({
	                    fill: 'none',
	                    stroke: splitLineColors[idx % splitLineColors.length]
	                }, lineStyle),
	                silent: true
	            }));
	        }, this);
	    }
	});

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var List = __webpack_require__(315);
	var completeDimensions = __webpack_require__(317);
	var zrUtil = __webpack_require__(224);
	var formatUtil = __webpack_require__(227);
	
	var RadarSeries = SeriesModel.extend({
	
	    type: 'series.radar',
	
	    dependencies: ['radar'],
	
	    // Overwrite
	    init: function init(option) {
	        RadarSeries.superApply(this, 'init', arguments);
	
	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this._dataBeforeProcessed;
	        };
	    },
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var data = option.data || [];
	        var dimensions = completeDimensions([], data, [], 'indicator_');
	        var list = new List(dimensions, this);
	        list.initData(data);
	        return list;
	    },
	
	    formatTooltip: function formatTooltip(dataIndex) {
	        var value = this.getRawValue(dataIndex);
	        var coordSys = this.coordinateSystem;
	        var indicatorAxes = coordSys.getIndicatorAxes();
	        return this._data.getName(dataIndex) + '<br />' + zrUtil.map(indicatorAxes, function (axis, idx) {
	            return axis.name + ' : ' + value[idx];
	        }).join('<br />');
	    },
	
	    getFormattedLabel: function getFormattedLabel(dataIndex, status, formatter, indicatorIndex) {
	        status = status || 'normal';
	        var data = this.getData();
	        var itemModel = data.getItemModel(dataIndex);
	
	        var params = this.getDataParams(dataIndex);
	        if (formatter == null) {
	            formatter = itemModel.get(['label', status, 'formatter']);
	        }
	        // Get value of specified indicator
	        params.value = params.value[indicatorIndex || 0];
	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        } else if (typeof formatter === 'string') {
	            return formatUtil.formatTpl(formatter, params);
	        }
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        coordinateSystem: 'radar',
	        legendHoverLink: true,
	        radarIndex: 0,
	        lineStyle: {
	            normal: {
	                width: 2,
	                type: 'solid'
	            }
	        },
	        label: {
	            normal: {
	                position: 'top'
	            }
	        },
	        // areaStyle: {
	        // },
	        // itemStyle: {}
	        symbol: 'emptyCircle',
	        symbolSize: 4
	        // symbolRotate: null
	    }
	});
	
	module.exports = RadarSeries;

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	var symbolUtil = __webpack_require__(321);
	
	function normalizeSymbolSize(symbolSize) {
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [+symbolSize, +symbolSize];
	    }
	    return symbolSize;
	}
	module.exports = __webpack_require__(222).extendChartView({
	    type: 'radar',
	
	    render: function render(seriesModel, ecModel, api) {
	        var polar = seriesModel.coordinateSystem;
	        var group = this.group;
	
	        var data = seriesModel.getData();
	        var oldData = this._data;
	
	        function createSymbol(data, idx) {
	            var symbolType = data.getItemVisual(idx, 'symbol') || 'circle';
	            var color = data.getItemVisual(idx, 'color');
	            if (symbolType === 'none') {
	                return;
	            }
	            var symbolPath = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	            symbolPath.attr({
	                style: {
	                    strokeNoScale: true
	                },
	                z2: 100,
	                scale: normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'))
	            });
	            return symbolPath;
	        }
	
	        function updateSymbols(oldPoints, newPoints, symbolGroup, data, idx, isInit) {
	            // Simply rerender all
	            symbolGroup.removeAll();
	            for (var i = 0; i < newPoints.length - 1; i++) {
	                var symbolPath = createSymbol(data, idx);
	                if (symbolPath) {
	                    symbolPath.__dimIdx = i;
	                    if (oldPoints[i]) {
	                        symbolPath.attr('position', oldPoints[i]);
	                        graphic[isInit ? 'initProps' : 'updateProps'](symbolPath, {
	                            position: newPoints[i]
	                        }, seriesModel);
	                    } else {
	                        symbolPath.attr('position', newPoints[i]);
	                    }
	                    symbolGroup.add(symbolPath);
	                }
	            }
	        }
	
	        function getInitialPoints(points) {
	            return zrUtil.map(points, function (pt) {
	                return [polar.cx, polar.cy];
	            });
	        }
	        data.diff(oldData).add(function (idx) {
	            var points = data.getItemLayout(idx);
	            if (!points) {
	                return;
	            }
	            var polygon = new graphic.Polygon();
	            var polyline = new graphic.Polyline();
	            var target = {
	                shape: {
	                    points: points
	                }
	            };
	            polygon.shape.points = getInitialPoints(points);
	            polyline.shape.points = getInitialPoints(points);
	            graphic.initProps(polygon, target, seriesModel);
	            graphic.initProps(polyline, target, seriesModel);
	
	            var itemGroup = new graphic.Group();
	            var symbolGroup = new graphic.Group();
	            itemGroup.add(polyline);
	            itemGroup.add(polygon);
	            itemGroup.add(symbolGroup);
	
	            updateSymbols(polyline.shape.points, points, symbolGroup, data, idx, true);
	
	            data.setItemGraphicEl(idx, itemGroup);
	        }).update(function (newIdx, oldIdx) {
	            var itemGroup = oldData.getItemGraphicEl(oldIdx);
	            var polyline = itemGroup.childAt(0);
	            var polygon = itemGroup.childAt(1);
	            var symbolGroup = itemGroup.childAt(2);
	            var target = {
	                shape: {
	                    points: data.getItemLayout(newIdx)
	                }
	            };
	            if (!target.shape.points) {
	                return;
	            }
	            updateSymbols(polyline.shape.points, target.shape.points, symbolGroup, data, newIdx, false);
	
	            graphic.updateProps(polyline, target, seriesModel);
	            graphic.updateProps(polygon, target, seriesModel);
	
	            data.setItemGraphicEl(newIdx, itemGroup);
	        }).remove(function (idx) {
	            group.remove(oldData.getItemGraphicEl(idx));
	        }).execute();
	
	        data.eachItemGraphicEl(function (itemGroup, idx) {
	            var itemModel = data.getItemModel(idx);
	            var polyline = itemGroup.childAt(0);
	            var polygon = itemGroup.childAt(1);
	            var symbolGroup = itemGroup.childAt(2);
	            var color = data.getItemVisual(idx, 'color');
	
	            group.add(itemGroup);
	
	            polyline.setStyle(zrUtil.extend(itemModel.getModel('lineStyle.normal').getLineStyle(), {
	                stroke: color
	            }));
	            polyline.hoverStyle = itemModel.getModel('lineStyle.emphasis').getLineStyle();
	
	            var areaStyleModel = itemModel.getModel('areaStyle.normal');
	            var hoverAreaStyleModel = itemModel.getModel('areaStyle.emphasis');
	            var polygonIgnore = areaStyleModel.isEmpty() && areaStyleModel.parentModel.isEmpty();
	            var hoverPolygonIgnore = hoverAreaStyleModel.isEmpty() && hoverAreaStyleModel.parentModel.isEmpty();
	
	            hoverPolygonIgnore = hoverPolygonIgnore && polygonIgnore;
	            polygon.ignore = polygonIgnore;
	
	            polygon.setStyle(zrUtil.defaults(areaStyleModel.getAreaStyle(), {
	                fill: color,
	                opacity: 0.7
	            }));
	            polygon.hoverStyle = hoverAreaStyleModel.getAreaStyle();
	
	            var itemStyle = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	            var itemHoverStyle = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	            var labelModel = itemModel.getModel('label.normal');
	            var labelHoverModel = itemModel.getModel('label.emphasis');
	            symbolGroup.eachChild(function (symbolPath) {
	                symbolPath.setStyle(itemStyle);
	                symbolPath.hoverStyle = zrUtil.clone(itemHoverStyle);
	
	                var defaultText = data.get(data.dimensions[symbolPath.__dimIdx], idx);
	                graphic.setText(symbolPath.style, labelModel, color);
	                symbolPath.setStyle({
	                    text: labelModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal', null, symbolPath.__dimIdx), defaultText) : ''
	                });
	
	                graphic.setText(symbolPath.hoverStyle, labelHoverModel, color);
	                symbolPath.hoverStyle.text = labelHoverModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis', null, symbolPath.__dimIdx), defaultText) : '';
	            });
	
	            function onEmphasis() {
	                polygon.attr('ignore', hoverPolygonIgnore);
	            }
	
	            function onNormal() {
	                polygon.attr('ignore', polygonIgnore);
	            }
	
	            itemGroup.off('mouseover').off('mouseout').off('normal').off('emphasis');
	            itemGroup.on('emphasis', onEmphasis).on('mouseover', onEmphasis).on('normal', onNormal).on('mouseout', onNormal);
	
	            graphic.setHoverStyle(itemGroup);
	        });
	
	        this._data = data;
	    },
	
	    remove: function remove() {
	        this.group.removeAll();
	        this._data = null;
	    }
	});

/***/ },
/* 374 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('radar', function (seriesModel) {
	        var data = seriesModel.getData();
	        var points = [];
	        var coordSys = seriesModel.coordinateSystem;
	        if (!coordSys) {
	            return;
	        }
	
	        function pointsConverter(val, idx) {
	            points[idx] = points[idx] || [];
	            points[idx][i] = coordSys.dataToPoint(val, i);
	        }
	        for (var i = 0; i < coordSys.getIndicatorAxes().length; i++) {
	            var dim = data.dimensions[i];
	            data.each(dim, pointsConverter);
	        }
	
	        data.each(function (idx) {
	            // Close polygon
	            points[idx][0] && points[idx].push(points[idx][0].slice());
	            data.setItemLayout(idx, points[idx]);
	        });
	    });
	};

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Backward compat for radar chart in 2
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (option) {
	    var polarOptArr = option.polar;
	    if (polarOptArr) {
	        if (!zrUtil.isArray(polarOptArr)) {
	            polarOptArr = [polarOptArr];
	        }
	        var polarNotRadar = [];
	        zrUtil.each(polarOptArr, function (polarOpt, idx) {
	            if (polarOpt.indicator) {
	                if (polarOpt.type && !polarOpt.shape) {
	                    polarOpt.shape = polarOpt.type;
	                }
	                option.radar = option.radar || [];
	                if (!zrUtil.isArray(option.radar)) {
	                    option.radar = [option.radar];
	                }
	                option.radar.push(polarOpt);
	            } else {
	                polarNotRadar.push(polarOpt);
	            }
	        });
	        option.polar = polarNotRadar;
	    }
	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt.type === 'radar' && seriesOpt.polarIndex) {
	            seriesOpt.radarIndex = seriesOpt.polarIndex;
	        }
	    });
	};

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(377);
	
	__webpack_require__(378);
	
	__webpack_require__(382);
	
	__webpack_require__(384);
	
	echarts.registerLayout(__webpack_require__(394));
	
	echarts.registerVisualCoding('chart', __webpack_require__(395));
	
	echarts.registerProcessor('statistic', __webpack_require__(396));
	
	echarts.registerPreprocessor(__webpack_require__(397));
	
	__webpack_require__(357)('map', [{
	    type: 'mapToggleSelect',
	    event: 'mapselectchanged',
	    method: 'toggleSelected'
	}, {
	    type: 'mapSelect',
	    event: 'mapselected',
	    method: 'select'
	}, {
	    type: 'mapUnSelect',
	    event: 'mapunselected',
	    method: 'unSelect'
	}]);

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var echarts = __webpack_require__(222);
	var SeriesModel = __webpack_require__(248);
	var zrUtil = __webpack_require__(224);
	var completeDimensions = __webpack_require__(317);
	
	var formatUtil = __webpack_require__(227);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;
	
	var dataSelectableMixin = __webpack_require__(355);
	
	function fillData(dataOpt, geoJson) {
	    var dataNameMap = {};
	    var features = geoJson.features;
	    for (var i = 0; i < dataOpt.length; i++) {
	        dataNameMap[dataOpt[i].name] = dataOpt[i];
	    }
	
	    for (var i = 0; i < features.length; i++) {
	        var name = features[i].properties.name;
	        if (!dataNameMap[name]) {
	            dataOpt.push({
	                value: NaN,
	                name: name
	            });
	        }
	    }
	    return dataOpt;
	}
	
	var MapSeries = SeriesModel.extend({
	
	    type: 'series.map',
	
	    /**
	     * Only first map series of same mapType will drawMap
	     * @type {boolean}
	     */
	    needsDrawMap: false,
	
	    /**
	     * Group of all map series with same mapType
	     * @type {boolean}
	     */
	    seriesGroup: [],
	
	    init: function init(option) {
	
	        option = this._fillOption(option);
	        this.option = option;
	
	        MapSeries.superApply(this, 'init', arguments);
	
	        this.updateSelectedMap();
	    },
	
	    getInitialData: function getInitialData(option) {
	        var dimensions = completeDimensions(['value'], option.data || []);
	
	        var list = new List(dimensions, this);
	
	        list.initData(option.data);
	
	        return list;
	    },
	
	    mergeOption: function mergeOption(newOption) {
	        newOption = this._fillOption(newOption);
	
	        MapSeries.superCall(this, 'mergeOption', newOption);
	
	        this.updateSelectedMap();
	    },
	
	    _fillOption: function _fillOption(option) {
	        // Shallow clone
	        option = zrUtil.extend({}, option);
	
	        var map = echarts.getMap(option.mapType);
	        var geoJson = map && map.geoJson;
	        geoJson && option.data && (option.data = fillData(option.data, geoJson));
	
	        return option;
	    },
	
	    /**
	     * @param {number} zoom
	     */
	    setRoamZoom: function setRoamZoom(zoom) {
	        var roamDetail = this.option.roamDetail;
	        roamDetail && (roamDetail.zoom = zoom);
	    },
	
	    /**
	     * @param {number} x
	     * @param {number} y
	     */
	    setRoamPan: function setRoamPan(x, y) {
	        var roamDetail = this.option.roamDetail;
	        if (roamDetail) {
	            roamDetail.x = x;
	            roamDetail.y = y;
	        }
	    },
	
	    getRawValue: function getRawValue(dataIndex) {
	        // Use value stored in data instead because it is calculated from multiple series
	        // FIXME Provide all value of multiple series ?
	        return this._data.get('value', dataIndex);
	    },
	
	    /**
	     * Map tooltip formatter
	     *
	     * @param {number} dataIndex
	     */
	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this._data;
	        var formattedValue = addCommas(this.getRawValue(dataIndex));
	        var name = data.getName(dataIndex);
	
	        var seriesGroup = this.seriesGroup;
	        var seriesNames = [];
	        for (var i = 0; i < seriesGroup.length; i++) {
	            if (!isNaN(seriesGroup[i].getRawValue(dataIndex))) {
	                seriesNames.push(encodeHTML(seriesGroup[i].name));
	            }
	        }
	
	        return seriesNames.join(', ') + '<br />' + name + ' : ' + formattedValue;
	    },
	
	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 2,
	        coordinateSystem: 'geo',
	        // 各省的 map 暂时都用中文
	        map: 'china',
	
	        // 'center' | 'left' | 'right' | 'x%' | {number}
	        left: 'center',
	        // 'center' | 'top' | 'bottom' | 'x%' | {number}
	        top: 'center',
	        // right
	        // bottom
	        // width:
	        // height   // 自适应
	
	        // 数值合并方式，默认加和，可选为：
	        // 'sum' | 'average' | 'max' | 'min'
	        // mapValueCalculation: 'sum',
	        // 地图数值计算结果小数精度
	        // mapValuePrecision: 0,
	        // 显示图例颜色标识（系列标识的小圆点），图例开启时有效
	        showLegendSymbol: true,
	        // 选择模式，默认关闭，可选single，multiple
	        // selectedMode: false,
	        dataRangeHoverLink: true,
	        // 是否开启缩放及漫游模式
	        // roam: false,
	
	        // 在 roam 开启的时候使用
	        roamDetail: {
	            x: 0,
	            y: 0,
	            zoom: 1
	        },
	
	        label: {
	            normal: {
	                show: false,
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {
	                show: false,
	                textStyle: {
	                    color: '#000'
	                }
	            }
	        },
	        // scaleLimit: null,
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderWidth: 0.5,
	                borderColor: '#444',
	                areaColor: '#eee'
	            },
	            // 也是选中样式
	            emphasis: {
	                areaColor: 'rgba(255,215, 0, 0.8)'
	            }
	        }
	    }
	});
	
	zrUtil.mixin(MapSeries, dataSelectableMixin);
	
	module.exports = MapSeries;

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// var zrUtil = require('zrender/lib/core/util');
	var graphic = __webpack_require__(263);
	
	var MapDraw = __webpack_require__(379);
	
	__webpack_require__(222).extendChartView({
	
	    type: 'map',
	
	    render: function render(mapModel, ecModel, api, payload) {
	        // Not render if it is an toggleSelect action from self
	        if (payload && payload.type === 'mapToggleSelect' && payload.from === this.uid) {
	            return;
	        }
	
	        var group = this.group;
	        group.removeAll();
	        // Not update map if it is an roam action from self
	        if (!(payload && payload.type === 'geoRoam' && payload.component === 'series' && payload.name === mapModel.name)) {
	
	            if (mapModel.needsDrawMap) {
	                var mapDraw = this._mapDraw || new MapDraw(api, true);
	                group.add(mapDraw.group);
	
	                mapDraw.draw(mapModel, ecModel, api, this);
	
	                this._mapDraw = mapDraw;
	            } else {
	                // Remove drawed map
	                this._mapDraw && this._mapDraw.remove();
	                this._mapDraw = null;
	            }
	        } else {
	            var mapDraw = this._mapDraw;
	            mapDraw && group.add(mapDraw.group);
	        }
	
	        mapModel.get('showLegendSymbol') && ecModel.getComponent('legend') && this._renderSymbols(mapModel, ecModel, api);
	    },
	
	    remove: function remove() {
	        this._mapDraw && this._mapDraw.remove();
	        this._mapDraw = null;
	        this.group.removeAll();
	    },
	
	    _renderSymbols: function _renderSymbols(mapModel, ecModel, api) {
	        var data = mapModel.getData();
	        var group = this.group;
	
	        data.each('value', function (value, idx) {
	            if (isNaN(value)) {
	                return;
	            }
	
	            var layout = data.getItemLayout(idx);
	
	            if (!layout || !layout.point) {
	                // Not exists in map
	                return;
	            }
	
	            var point = layout.point;
	            var offset = layout.offset;
	
	            var circle = new graphic.Circle({
	                style: {
	                    fill: data.getVisual('color')
	                },
	                shape: {
	                    cx: point[0] + offset * 9,
	                    cy: point[1],
	                    r: 3
	                },
	                silent: true,
	                z2: 10
	            });
	
	            // First data on the same region
	            if (!offset) {
	                var labelText = data.getName(idx);
	
	                var itemModel = data.getItemModel(idx);
	                var labelModel = itemModel.getModel('label.normal');
	                var hoverLabelModel = itemModel.getModel('label.emphasis');
	
	                var textStyleModel = labelModel.getModel('textStyle');
	                var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');
	
	                var polygonGroups = data.getItemGraphicEl(idx);
	                circle.setStyle({
	                    textPosition: 'bottom'
	                });
	
	                var onEmphasis = function onEmphasis() {
	                    circle.setStyle({
	                        text: hoverLabelModel.get('show') ? labelText : '',
	                        textFill: hoverTextStyleModel.getTextColor(),
	                        textFont: hoverTextStyleModel.getFont()
	                    });
	                };
	
	                var onNormal = function onNormal() {
	                    circle.setStyle({
	                        text: labelModel.get('show') ? labelText : '',
	                        textFill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont()
	                    });
	                };
	
	                polygonGroups.on('mouseover', onEmphasis).on('mouseout', onNormal).on('emphasis', onEmphasis).on('normal', onNormal);
	
	                onNormal();
	            }
	
	            group.add(circle);
	        });
	    }
	});

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/component/helper/MapDraw
	 */
	
	var RoamController = __webpack_require__(380);
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	
	function getFixedItemStyle(model, scale) {
	    var itemStyle = model.getItemStyle();
	    var areaColor = model.get('areaColor');
	    if (areaColor) {
	        itemStyle.fill = areaColor;
	    }
	
	    return itemStyle;
	}
	
	function updateMapSelectHandler(mapOrGeoModel, data, group, api, fromView) {
	    group.off('click');
	    mapOrGeoModel.get('selectedMode') && group.on('click', function (e) {
	        var dataIndex = e.target.dataIndex;
	        if (dataIndex != null) {
	            var name = data.getName(dataIndex);
	
	            api.dispatchAction({
	                type: 'mapToggleSelect',
	                seriesIndex: mapOrGeoModel.seriesIndex,
	                name: name,
	                from: fromView.uid
	            });
	
	            updateMapSelected(mapOrGeoModel, data, api);
	        }
	    });
	}
	
	function updateMapSelected(mapOrGeoModel, data) {
	    data.eachItemGraphicEl(function (el, idx) {
	        var name = data.getName(idx);
	        el.trigger(mapOrGeoModel.isSelected(name) ? 'emphasis' : 'normal');
	    });
	}
	
	/**
	 * @alias module:echarts/component/helper/MapDraw
	 * @param {module:echarts/ExtensionAPI} api
	 * @param {boolean} updateGroup
	 */
	function MapDraw(api, updateGroup) {
	
	    var group = new graphic.Group();
	
	    /**
	     * @type {module:echarts/component/helper/RoamController}
	     * @private
	     */
	    this._controller = new RoamController(api.getZr(), updateGroup ? group : null, null);
	
	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = group;
	
	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._updateGroup = updateGroup;
	}
	
	MapDraw.prototype = {
	
	    constructor: MapDraw,
	
	    draw: function draw(mapOrGeoModel, ecModel, api, fromView) {
	
	        // geoModel has no data
	        var data = mapOrGeoModel.getData && mapOrGeoModel.getData();
	
	        var geo = mapOrGeoModel.coordinateSystem;
	
	        var group = this.group;
	        group.removeAll();
	
	        var scale = geo.scale;
	        group.position = geo.position.slice();
	        group.scale = scale.slice();
	
	        var itemStyleModel;
	        var hoverItemStyleModel;
	        var itemStyle;
	        var hoverItemStyle;
	
	        var labelModel;
	        var hoverLabelModel;
	
	        var itemStyleAccessPath = ['itemStyle', 'normal'];
	        var hoverItemStyleAccessPath = ['itemStyle', 'emphasis'];
	        var labelAccessPath = ['label', 'normal'];
	        var hoverLabelAccessPath = ['label', 'emphasis'];
	        if (!data) {
	            itemStyleModel = mapOrGeoModel.getModel(itemStyleAccessPath);
	            hoverItemStyleModel = mapOrGeoModel.getModel(hoverItemStyleAccessPath);
	
	            itemStyle = getFixedItemStyle(itemStyleModel, scale);
	            hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);
	
	            labelModel = mapOrGeoModel.getModel(labelAccessPath);
	            hoverLabelModel = mapOrGeoModel.getModel(hoverLabelAccessPath);
	        }
	
	        zrUtil.each(geo.regions, function (region) {
	
	            var regionGroup = new graphic.Group();
	            var dataIdx;
	            // Use the itemStyle in data if has data
	            if (data) {
	                // FIXME If dataIdx < 0
	                dataIdx = data.indexOfName(region.name);
	                var itemModel = data.getItemModel(dataIdx);
	
	                // Only visual color of each item will be used. It can be encoded by dataRange
	                // But visual color of series is used in symbol drawing
	                //
	                // Visual color for each series is for the symbol draw
	                var visualColor = data.getItemVisual(dataIdx, 'color', true);
	
	                itemStyleModel = itemModel.getModel(itemStyleAccessPath);
	                hoverItemStyleModel = itemModel.getModel(hoverItemStyleAccessPath);
	
	                itemStyle = getFixedItemStyle(itemStyleModel, scale);
	                hoverItemStyle = getFixedItemStyle(hoverItemStyleModel, scale);
	
	                labelModel = itemModel.getModel(labelAccessPath);
	                hoverLabelModel = itemModel.getModel(hoverLabelAccessPath);
	
	                if (visualColor) {
	                    itemStyle.fill = visualColor;
	                }
	            }
	            var textStyleModel = labelModel.getModel('textStyle');
	            var hoverTextStyleModel = hoverLabelModel.getModel('textStyle');
	
	            zrUtil.each(region.contours, function (contour) {
	
	                var polygon = new graphic.Polygon({
	                    shape: {
	                        points: contour
	                    },
	                    style: {
	                        strokeNoScale: true
	                    },
	                    culling: true
	                });
	
	                polygon.setStyle(itemStyle);
	
	                regionGroup.add(polygon);
	            });
	
	            // Label
	            var showLabel = labelModel.get('show');
	            var hoverShowLabel = hoverLabelModel.get('show');
	
	            var isDataNaN = data && isNaN(data.get('value', dataIdx));
	            var itemLayout = data && data.getItemLayout(dataIdx);
	            // In the following cases label will be drawn
	            // 1. In map series and data value is NaN
	            // 2. In geo component
	            // 4. Region has no series legendSymbol, which will be add a showLabel flag in mapSymbolLayout
	            if (!data || isDataNaN && (showLabel || hoverShowLabel) || itemLayout && itemLayout.showLabel) {
	                var query = data ? dataIdx : region.name;
	                var formattedStr = mapOrGeoModel.getFormattedLabel(query, 'normal');
	                var hoverFormattedStr = mapOrGeoModel.getFormattedLabel(query, 'emphasis');
	                var text = new graphic.Text({
	                    style: {
	                        text: showLabel ? formattedStr || region.name : '',
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textAlign: 'center',
	                        textVerticalAlign: 'middle'
	                    },
	                    hoverStyle: {
	                        text: hoverShowLabel ? hoverFormattedStr || region.name : '',
	                        fill: hoverTextStyleModel.getTextColor(),
	                        textFont: hoverTextStyleModel.getFont()
	                    },
	                    position: region.center.slice(),
	                    scale: [1 / scale[0], 1 / scale[1]],
	                    z2: 10,
	                    silent: true
	                });
	
	                regionGroup.add(text);
	            }
	
	            // setItemGraphicEl, setHoverStyle after all polygons and labels
	            // are added to the rigionGroup
	            data && data.setItemGraphicEl(dataIdx, regionGroup);
	
	            graphic.setHoverStyle(regionGroup, hoverItemStyle);
	
	            group.add(regionGroup);
	        });
	
	        this._updateController(mapOrGeoModel, ecModel, api);
	
	        data && updateMapSelectHandler(mapOrGeoModel, data, group, api, fromView);
	
	        data && updateMapSelected(mapOrGeoModel, data);
	    },
	
	    remove: function remove() {
	        this.group.removeAll();
	        this._controller.dispose();
	    },
	
	    _updateController: function _updateController(mapOrGeoModel, ecModel, api) {
	        var geo = mapOrGeoModel.coordinateSystem;
	        var controller = this._controller;
	        // roamType is will be set default true if it is null
	        controller.enable(mapOrGeoModel.get('roam') || false);
	        // FIXME mainType, subType 作为 component 的属性？
	        var mainType = mapOrGeoModel.type.split('.')[0];
	        controller.off('pan').on('pan', function (dx, dy) {
	            api.dispatchAction({
	                type: 'geoRoam',
	                component: mainType,
	                name: mapOrGeoModel.name,
	                dx: dx,
	                dy: dy
	            });
	        });
	        controller.off('zoom').on('zoom', function (zoom, mouseX, mouseY) {
	            api.dispatchAction({
	                type: 'geoRoam',
	                component: mainType,
	                name: mapOrGeoModel.name,
	                zoom: zoom,
	                originX: mouseX,
	                originY: mouseY
	            });
	
	            if (this._updateGroup) {
	                var group = this.group;
	                var scale = group.scale;
	                group.traverse(function (el) {
	                    if (el.type === 'text') {
	                        el.attr('scale', [1 / scale[0], 1 / scale[1]]);
	                    }
	                });
	            }
	        }, this);
	
	        controller.rect = geo.getViewRect();
	    }
	};
	
	module.exports = MapDraw;

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/component/helper/RoamController
	 */
	
	var Eventful = __webpack_require__(253);
	var zrUtil = __webpack_require__(224);
	var eventTool = __webpack_require__(301);
	var interactionMutex = __webpack_require__(381);
	
	function mousedown(e) {
	    if (e.target && e.target.draggable) {
	        return;
	    }
	
	    var x = e.offsetX;
	    var y = e.offsetY;
	    var rect = this.rect;
	    if (rect && rect.contain(x, y)) {
	        this._x = x;
	        this._y = y;
	        this._dragging = true;
	    }
	}
	
	function mousemove(e) {
	    if (!this._dragging) {
	        return;
	    }
	
	    eventTool.stop(e.event);
	
	    if (e.gestureEvent !== 'pinch') {
	
	        if (interactionMutex.isTaken('globalPan', this._zr)) {
	            return;
	        }
	
	        var x = e.offsetX;
	        var y = e.offsetY;
	
	        var dx = x - this._x;
	        var dy = y - this._y;
	
	        this._x = x;
	        this._y = y;
	
	        var target = this.target;
	
	        if (target) {
	            var pos = target.position;
	            pos[0] += dx;
	            pos[1] += dy;
	            target.dirty();
	        }
	
	        eventTool.stop(e.event);
	        this.trigger('pan', dx, dy);
	    }
	}
	
	function mouseup(e) {
	    this._dragging = false;
	}
	
	function mousewheel(e) {
	    eventTool.stop(e.event);
	    // Convenience:
	    // Mac and VM Windows on Mac: scroll up: zoom out.
	    // Windows: scroll up: zoom in.
	    var zoomDelta = e.wheelDelta > 0 ? 1.1 : 1 / 1.1;
	    zoom.call(this, e, zoomDelta, e.offsetX, e.offsetY);
	}
	
	function pinch(e) {
	    if (interactionMutex.isTaken('globalPan', this._zr)) {
	        return;
	    }
	
	    eventTool.stop(e.event);
	    var zoomDelta = e.pinchScale > 1 ? 1.1 : 1 / 1.1;
	    zoom.call(this, e, zoomDelta, e.pinchX, e.pinchY);
	}
	
	function zoom(e, zoomDelta, zoomX, zoomY) {
	    var rect = this.rect;
	
	    if (rect && rect.contain(zoomX, zoomY)) {
	
	        var target = this.target;
	
	        if (target) {
	            var pos = target.position;
	            var scale = target.scale;
	
	            var newZoom = this._zoom = this._zoom || 1;
	            newZoom *= zoomDelta;
	            // newZoom = Math.max(
	            //     Math.min(target.maxZoom, newZoom),
	            //     target.minZoom
	            // );
	            var zoomScale = newZoom / this._zoom;
	            this._zoom = newZoom;
	            // Keep the mouse center when scaling
	            pos[0] -= (zoomX - pos[0]) * (zoomScale - 1);
	            pos[1] -= (zoomY - pos[1]) * (zoomScale - 1);
	            scale[0] *= zoomScale;
	            scale[1] *= zoomScale;
	
	            target.dirty();
	        }
	
	        this.trigger('zoom', zoomDelta, zoomX, zoomY);
	    }
	}
	
	/**
	 * @alias module:echarts/component/helper/RoamController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 *
	 * @param {module:zrender/zrender~ZRender} zr
	 * @param {module:zrender/Element} target
	 * @param {module:zrender/core/BoundingRect} rect
	 */
	function RoamController(zr, target, rect) {
	
	    /**
	     * @type {module:zrender/Element}
	     */
	    this.target = target;
	
	    /**
	     * @type {module:zrender/core/BoundingRect}
	     */
	    this.rect = rect;
	
	    /**
	     * @type {module:zrender}
	     */
	    this._zr = zr;
	
	    // Avoid two roamController bind the same handler
	    var bind = zrUtil.bind;
	    var mousedownHandler = bind(mousedown, this);
	    var mousemoveHandler = bind(mousemove, this);
	    var mouseupHandler = bind(mouseup, this);
	    var mousewheelHandler = bind(mousewheel, this);
	    var pinchHandler = bind(pinch, this);
	
	    Eventful.call(this);
	
	    /**
	     * Notice: only enable needed types. For example, if 'zoom'
	     * is not needed, 'zoom' should not be enabled, otherwise
	     * default mousewheel behaviour (scroll page) will be disabled.
	     *
	     * @param  {boolean|string} [controlType=true] Specify the control type,
	     *                          which can be null/undefined or true/false
	     *                          or 'pan/move' or 'zoom'/'scale'
	     */
	    this.enable = function (controlType) {
	        // Disable previous first
	        this.disable();
	
	        if (controlType == null) {
	            controlType = true;
	        }
	
	        if (controlType === true || controlType === 'move' || controlType === 'pan') {
	            zr.on('mousedown', mousedownHandler);
	            zr.on('mousemove', mousemoveHandler);
	            zr.on('mouseup', mouseupHandler);
	        }
	        if (controlType === true || controlType === 'scale' || controlType === 'zoom') {
	            zr.on('mousewheel', mousewheelHandler);
	            zr.on('pinch', pinchHandler);
	        }
	    };
	
	    this.disable = function () {
	        zr.off('mousedown', mousedownHandler);
	        zr.off('mousemove', mousemoveHandler);
	        zr.off('mouseup', mouseupHandler);
	        zr.off('mousewheel', mousewheelHandler);
	        zr.off('pinch', pinchHandler);
	    };
	
	    this.dispose = this.disable;
	
	    this.isDragging = function () {
	        return this._dragging;
	    };
	
	    this.isPinching = function () {
	        return this._pinching;
	    };
	}
	
	zrUtil.mixin(RoamController, Eventful);
	
	module.exports = RoamController;

/***/ },
/* 381 */
/***/ function(module, exports) {

	'use strict';
	
	var ATTR = '\0_ec_interaction_mutex';
	
	var interactionMutex = {
	
	    take: function take(key, zr) {
	        getStore(zr)[key] = true;
	    },
	
	    release: function release(key, zr) {
	        getStore(zr)[key] = false;
	    },
	
	    isTaken: function isTaken(key, zr) {
	        return !!getStore(zr)[key];
	    }
	};
	
	function getStore(zr) {
	    return zr[ATTR] || (zr[ATTR] = {});
	}
	
	module.exports = interactionMutex;

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var roamHelper = __webpack_require__(383);
	
	var echarts = __webpack_require__(222);
	var actionInfo = {
	    type: 'geoRoam',
	    event: 'geoRoam',
	    update: 'updateLayout'
	};
	
	/**
	 * @payload
	 * @property {string} [component=series]
	 * @property {string} name Component name
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	    var componentType = payload.component || 'series';
	
	    ecModel.eachComponent(componentType, function (componentModel) {
	        if (componentModel.name === payload.name) {
	            var geo = componentModel.coordinateSystem;
	            if (geo.type !== 'geo') {
	                return;
	            }
	
	            var roamDetailModel = componentModel.getModel('roamDetail');
	            var res = roamHelper.calcPanAndZoom(roamDetailModel, payload);
	
	            componentModel.setRoamPan && componentModel.setRoamPan(res.x, res.y);
	
	            componentModel.setRoamZoom && componentModel.setRoamZoom(res.zoom);
	
	            geo && geo.setPan(res.x, res.y);
	            geo && geo.setZoom(res.zoom);
	
	            // All map series with same `map` use the same geo coordinate system
	            // So the roamDetail must be in sync. Include the series not selected by legend
	            if (componentType === 'series') {
	                zrUtil.each(componentModel.seriesGroup, function (seriesModel) {
	                    seriesModel.setRoamPan(res.x, res.y);
	                    seriesModel.setRoamZoom(res.zoom);
	                });
	            }
	        }
	    });
	});

/***/ },
/* 383 */
/***/ function(module, exports) {

	'use strict';
	
	var roamHelper = {};
	
	/**
	 * Calculate pan and zoom which from roamDetail model
	 * @param  {module:echarts/model/Model} roamDetailModel
	 * @param  {Object} payload
	 */
	roamHelper.calcPanAndZoom = function (roamDetailModel, payload) {
	    var dx = payload.dx;
	    var dy = payload.dy;
	    var zoom = payload.zoom;
	
	    var panX = roamDetailModel.get('x') || 0;
	    var panY = roamDetailModel.get('y') || 0;
	
	    var previousZoom = roamDetailModel.get('zoom') || 1;
	
	    if (dx != null && dy != null) {
	        panX += dx;
	        panY += dy;
	    }
	    if (zoom != null) {
	        var fixX = (payload.originX - panX) * (zoom - 1);
	        var fixY = (payload.originY - panY) * (zoom - 1);
	
	        panX -= fixX;
	        panY -= fixY;
	    }
	
	    return {
	        x: panX,
	        y: panY,
	        zoom: (zoom || 1) * previousZoom
	    };
	};
	
	module.exports = roamHelper;

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(385);
	
	var Geo = __webpack_require__(386);
	
	var layout = __webpack_require__(242);
	var zrUtil = __webpack_require__(224);
	
	var mapDataStores = {};
	
	/**
	 * Resize method bound to the geo
	 * @param {module:echarts/coord/geo/GeoModel|module:echarts/chart/map/MapModel} geoModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizeGeo(geoModel, api) {
	    var rect = this.getBoundingRect();
	
	    var boxLayoutOption = geoModel.getBoxLayoutParams();
	    // 0.75 rate
	    boxLayoutOption.aspect = rect.width / rect.height * 0.75;
	
	    var viewRect = layout.getLayoutRect(boxLayoutOption, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	
	    this.setViewRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
	
	    var roamDetailModel = geoModel.getModel('roamDetail');
	
	    var panX = roamDetailModel.get('x') || 0;
	    var panY = roamDetailModel.get('y') || 0;
	    var zoom = roamDetailModel.get('zoom') || 1;
	
	    this.setPan(panX, panY);
	    this.setZoom(zoom);
	}
	
	/**
	 * @param {module:echarts/coord/Geo} geo
	 * @param {module:echarts/model/Model} model
	 * @inner
	 */
	function setGeoCoords(geo, model) {
	    zrUtil.each(model.get('geoCoord'), function (geoCoord, name) {
	        geo.addGeoCoord(name, geoCoord);
	    });
	}
	
	function mapNotExistsError(name) {
	    console.error('Map ' + name + ' not exists');
	}
	
	var geoCreator = {
	
	    // For deciding which dimensions to use when creating list data
	    dimensions: Geo.prototype.dimensions,
	
	    create: function create(ecModel, api) {
	        var geoList = [];
	
	        // FIXME Create each time may be slow
	        ecModel.eachComponent('geo', function (geoModel, idx) {
	            var name = geoModel.get('map');
	            var mapData = mapDataStores[name];
	            if (!mapData) {
	                mapNotExistsError(name);
	            }
	            var geo = new Geo(name + idx, name, mapData && mapData.geoJson, mapData && mapData.specialAreas, geoModel.get('nameMap'));
	            geoList.push(geo);
	
	            setGeoCoords(geo, geoModel);
	
	            geoModel.coordinateSystem = geo;
	            geo.model = geoModel;
	
	            // Inject resize method
	            geo.resize = resizeGeo;
	
	            geo.resize(geoModel, api);
	        });
	
	        ecModel.eachSeries(function (seriesModel) {
	            var coordSys = seriesModel.get('coordinateSystem');
	            if (coordSys === 'geo') {
	                var geoIndex = seriesModel.get('geoIndex') || 0;
	                seriesModel.coordinateSystem = geoList[geoIndex];
	            }
	        });
	
	        // If has map series
	        var mapModelGroupBySeries = {};
	
	        ecModel.eachSeriesByType('map', function (seriesModel) {
	            var mapType = seriesModel.get('map');
	
	            mapModelGroupBySeries[mapType] = mapModelGroupBySeries[mapType] || [];
	
	            mapModelGroupBySeries[mapType].push(seriesModel);
	        });
	
	        zrUtil.each(mapModelGroupBySeries, function (mapSeries, mapType) {
	            var mapData = mapDataStores[mapType];
	            if (!mapData) {
	                mapNotExistsError(name);
	            }
	
	            var nameMapList = zrUtil.map(mapSeries, function (singleMapSeries) {
	                return singleMapSeries.get('nameMap');
	            });
	            var geo = new Geo(mapType, mapType, mapData && mapData.geoJson, mapData && mapData.specialAreas, zrUtil.mergeAll(nameMapList));
	            geoList.push(geo);
	
	            // Inject resize method
	            geo.resize = resizeGeo;
	
	            geo.resize(mapSeries[0], api);
	
	            zrUtil.each(mapSeries, function (singleMapSeries) {
	                singleMapSeries.coordinateSystem = geo;
	
	                setGeoCoords(geo, singleMapSeries);
	            });
	        });
	
	        return geoList;
	    },
	
	    /**
	     * @param {string} mapName
	     * @param {Object|string} geoJson
	     * @param {Object} [specialAreas]
	     *
	     * @example
	     *     $.get('USA.json', function (geoJson) {
	     *         echarts.registerMap('USA', geoJson);
	     *         // Or
	     *         echarts.registerMap('USA', {
	     *             geoJson: geoJson,
	     *             specialAreas: {}
	     *         })
	     *     });
	     */
	    registerMap: function registerMap(mapName, geoJson, specialAreas) {
	        if (geoJson.geoJson && !geoJson.features) {
	            specialAreas = geoJson.specialAreas;
	            geoJson = geoJson.geoJson;
	        }
	        if (typeof geoJson === 'string') {
	            geoJson = typeof JSON !== 'undefined' && JSON.parse ? JSON.parse(geoJson) : new Function('return (' + geoJson + ');')();
	        }
	        mapDataStores[mapName] = {
	            geoJson: geoJson,
	            specialAreas: specialAreas
	        };
	    },
	
	    /**
	     * @param {string} mapName
	     * @return {Object}
	     */
	    getMap: function getMap(mapName) {
	        return mapDataStores[mapName];
	    }
	};
	
	// Inject methods into echarts
	var echarts = __webpack_require__(222);
	
	echarts.registerMap = geoCreator.registerMap;
	
	echarts.getMap = geoCreator.getMap;
	
	// TODO
	echarts.loadMap = function () {};
	
	echarts.registerCoordinateSystem('geo', geoCreator);

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var modelUtil = __webpack_require__(226);
	var ComponentModel = __webpack_require__(240);
	
	ComponentModel.extend({
	
	    type: 'geo',
	
	    /**
	     * @type {module:echarts/coord/geo/Geo}
	     */
	    coordinateSystem: null,
	
	    init: function init(option) {
	        ComponentModel.prototype.init.apply(this, arguments);
	
	        // Default label emphasis `position` and `show`
	        modelUtil.defaultEmphasis(option.label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	    },
	
	    defaultOption: {
	
	        zlevel: 0,
	
	        z: 0,
	
	        show: true,
	
	        left: 'center',
	
	        top: 'center',
	
	        // 自适应
	        // width:,
	        // height:,
	        // right
	        // bottom
	
	        // Map type
	        map: '',
	
	        // 在 roam 开启的时候使用
	        roamDetail: {
	            x: 0,
	            y: 0,
	            zoom: 1
	        },
	
	        label: {
	            normal: {
	                show: false,
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {
	                show: true,
	                textStyle: {
	                    color: 'rgb(100,0,0)'
	                }
	            }
	        },
	
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderWidth: 0.5,
	                borderColor: '#444',
	                color: '#eee'
	            },
	            emphasis: { // 也是选中样式
	                color: 'rgba(255,215,0,0.8)'
	            }
	        }
	    },
	
	    /**
	     * Format label
	     * @param {string} name Region name
	     * @param {string} [status='normal'] 'normal' or 'emphasis'
	     * @return {string}
	     */
	    getFormattedLabel: function getFormattedLabel(name, status) {
	        var formatter = this.get('label.' + status + '.formatter');
	        var params = {
	            name: name
	        };
	        if (typeof formatter === 'function') {
	            params.status = status;
	            return formatter(params);
	        } else if (typeof formatter === 'string') {
	            return formatter.replace('{a}', params.seriesName);
	        }
	    },
	
	    setRoamZoom: function setRoamZoom(zoom) {
	        var roamDetail = this.option.roamDetail;
	        roamDetail && (roamDetail.zoom = zoom);
	    },
	
	    setRoamPan: function setRoamPan(x, y) {
	        var roamDetail = this.option.roamDetail;
	        if (roamDetail) {
	            roamDetail.x = x;
	            roamDetail.y = y;
	        }
	    }
	});

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var parseGeoJson = __webpack_require__(387);
	
	var zrUtil = __webpack_require__(224);
	
	var BoundingRect = __webpack_require__(236);
	
	var View = __webpack_require__(390);
	
	// Geo fix functions
	var geoFixFuncs = [__webpack_require__(391), __webpack_require__(392), __webpack_require__(393)];
	
	/**
	 * [Geo description]
	 * @param {string} name Geo name
	 * @param {string} map Map type
	 * @param {Object} geoJson
	 * @param {Object} [specialAreas]
	 *        Specify the positioned areas by left, top, width, height
	 * @param {Object.<string, string>} [nameMap]
	 *        Specify name alias
	 */
	function Geo(name, map, geoJson, specialAreas, nameMap) {
	
	    View.call(this, name);
	
	    /**
	     * Map type
	     * @type {string}
	     */
	    this.map = map;
	
	    this._nameCoordMap = {};
	
	    this.loadGeoJson(geoJson, specialAreas, nameMap);
	}
	
	Geo.prototype = {
	
	    constructor: Geo,
	
	    type: 'geo',
	
	    /**
	     * @param {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['lng', 'lat'],
	
	    /**
	     * @param {Object} geoJson
	     * @param {Object} [specialAreas]
	     *        Specify the positioned areas by left, top, width, height
	     * @param {Object.<string, string>} [nameMap]
	     *        Specify name alias
	     */
	    loadGeoJson: function loadGeoJson(geoJson, specialAreas, nameMap) {
	        // https://jsperf.com/try-catch-performance-overhead
	        try {
	            this.regions = geoJson ? parseGeoJson(geoJson) : [];
	        } catch (e) {
	            throw 'Invalid geoJson format\n' + e;
	        }
	        specialAreas = specialAreas || {};
	        nameMap = nameMap || {};
	        var regions = this.regions;
	        var regionsMap = {};
	        for (var i = 0; i < regions.length; i++) {
	            var regionName = regions[i].name;
	            // Try use the alias in nameMap
	            regionName = nameMap[regionName] || regionName;
	            regions[i].name = regionName;
	
	            regionsMap[regionName] = regions[i];
	            // Add geoJson
	            this.addGeoCoord(regionName, regions[i].center);
	
	            // Some area like Alaska in USA map needs to be tansformed
	            // to look better
	            var specialArea = specialAreas[regionName];
	            if (specialArea) {
	                regions[i].transformTo(specialArea.left, specialArea.top, specialArea.width, specialArea.height);
	            }
	        }
	
	        this._regionsMap = regionsMap;
	
	        this._rect = null;
	
	        zrUtil.each(geoFixFuncs, function (fixFunc) {
	            fixFunc(this);
	        }, this);
	    },
	
	    // Overwrite
	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();
	
	        rect = rect.clone();
	        // Longitute is inverted
	        rect.y = -rect.y - rect.height;
	
	        var viewTransform = this._viewTransform;
	
	        viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));
	
	        viewTransform.decomposeTransform();
	
	        var scale = viewTransform.scale;
	        scale[1] = -scale[1];
	
	        viewTransform.updateTransform();
	
	        this._updateTransform();
	    },
	
	    /**
	     * @param {string} name
	     * @return {module:echarts/coord/geo/Region}
	     */
	    getRegion: function getRegion(name) {
	        return this._regionsMap[name];
	    },
	
	    /**
	     * Add geoCoord for indexing by name
	     * @param {string} name
	     * @param {Array.<number>} geoCoord
	     */
	    addGeoCoord: function addGeoCoord(name, geoCoord) {
	        this._nameCoordMap[name] = geoCoord;
	    },
	
	    /**
	     * Get geoCoord by name
	     * @param {string} name
	     * @return {Array.<number>}
	     */
	    getGeoCoord: function getGeoCoord(name) {
	        return this._nameCoordMap[name];
	    },
	
	    // Overwrite
	    getBoundingRect: function getBoundingRect() {
	        if (this._rect) {
	            return this._rect;
	        }
	        var rect;
	
	        var regions = this.regions;
	        for (var i = 0; i < regions.length; i++) {
	            var regionRect = regions[i].getBoundingRect();
	            rect = rect || regionRect.clone();
	            rect.union(regionRect);
	        }
	        // FIXME Always return new ?
	        return this._rect = rect || new BoundingRect(0, 0, 0, 0);
	    },
	
	    /**
	     * Convert series data to a list of points
	     * @param {module:echarts/data/List} data
	     * @param {boolean} stack
	     * @return {Array}
	     *  Return list of points. For example:
	     *  `[[10, 10], [20, 20], [30, 30]]`
	     */
	    dataToPoints: function dataToPoints(data) {
	        var item = [];
	        return data.mapArray(['lng', 'lat'], function (lon, lat) {
	            item[0] = lon;
	            item[1] = lat;
	            return this.dataToPoint(item);
	        }, this);
	    },
	
	    // Overwrite
	    /**
	     * @param {string|Array.<number>} data
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data) {
	        if (typeof data === 'string') {
	            // Map area name to geoCoord
	            data = this.getGeoCoord(data);
	        }
	        if (data) {
	            return View.prototype.dataToPoint.call(this, data);
	        }
	    }
	};
	
	zrUtil.mixin(Geo, View);
	
	module.exports = Geo;

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Parse and decode geo json
	 * @module echarts/coord/geo/parseGeoJson
	 */
	
	var zrUtil = __webpack_require__(224);
	
	var Region = __webpack_require__(388);
	
	function decode(json) {
	    if (!json.UTF8Encoding) {
	        return json;
	    }
	    var features = json.features;
	
	    for (var f = 0; f < features.length; f++) {
	        var feature = features[f];
	        var geometry = feature.geometry;
	        var coordinates = geometry.coordinates;
	        var encodeOffsets = geometry.encodeOffsets;
	
	        for (var c = 0; c < coordinates.length; c++) {
	            var coordinate = coordinates[c];
	
	            if (geometry.type === 'Polygon') {
	                coordinates[c] = decodePolygon(coordinate, encodeOffsets[c]);
	            } else if (geometry.type === 'MultiPolygon') {
	                for (var c2 = 0; c2 < coordinate.length; c2++) {
	                    var polygon = coordinate[c2];
	                    coordinate[c2] = decodePolygon(polygon, encodeOffsets[c][c2]);
	                }
	            }
	        }
	    }
	    // Has been decoded
	    json.UTF8Encoding = false;
	    return json;
	}
	
	function decodePolygon(coordinate, encodeOffsets) {
	    var result = [];
	    var prevX = encodeOffsets[0];
	    var prevY = encodeOffsets[1];
	
	    for (var i = 0; i < coordinate.length; i += 2) {
	        var x = coordinate.charCodeAt(i) - 64;
	        var y = coordinate.charCodeAt(i + 1) - 64;
	        // ZigZag decoding
	        x = x >> 1 ^ -(x & 1);
	        y = y >> 1 ^ -(y & 1);
	        // Delta deocding
	        x += prevX;
	        y += prevY;
	
	        prevX = x;
	        prevY = y;
	        // Dequantize
	        result.push([x / 1024, y / 1024]);
	    }
	
	    return result;
	}
	
	/**
	 * @inner
	 */
	function flattern2D(array) {
	    var ret = [];
	    for (var i = 0; i < array.length; i++) {
	        for (var k = 0; k < array[i].length; k++) {
	            ret.push(array[i][k]);
	        }
	    }
	    return ret;
	}
	
	/**
	 * @alias module:echarts/coord/geo/parseGeoJson
	 * @param {Object} geoJson
	 * @return {module:zrender/container/Group}
	 */
	module.exports = function (geoJson) {
	
	    decode(geoJson);
	
	    return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {
	        // Output of mapshaper may have geometry null
	        return featureObj.geometry && featureObj.properties;
	    }), function (featureObj) {
	        var properties = featureObj.properties;
	        var geometry = featureObj.geometry;
	
	        var coordinates = geometry.coordinates;
	
	        if (geometry.type === 'MultiPolygon') {
	            coordinates = flattern2D(coordinates);
	        }
	
	        return new Region(properties.name, coordinates, properties.cp);
	    });
	};

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/coord/geo/Region
	 */
	
	var polygonContain = __webpack_require__(389);
	
	var BoundingRect = __webpack_require__(236);
	
	var bbox = __webpack_require__(271);
	var vec2 = __webpack_require__(237);
	
	/**
	 * @param {string} name
	 * @param {Array} contours
	 * @param {Array.<number>} cp
	 */
	function Region(name, contours, cp) {
	
	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.name = name;
	
	    /**
	     * @type {Array.<Array>}
	     * @readOnly
	     */
	    this.contours = contours;
	
	    if (!cp) {
	        var rect = this.getBoundingRect();
	        cp = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	    } else {
	        cp = [cp[0], cp[1]];
	    }
	    /**
	     * @type {Array.<number>}
	     */
	    this.center = cp;
	}
	
	Region.prototype = {
	
	    constructor: Region,
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getBoundingRect: function getBoundingRect() {
	        var rect = this._rect;
	        if (rect) {
	            return rect;
	        }
	
	        var MAX_NUMBER = Number.MAX_VALUE;
	        var min = [MAX_NUMBER, MAX_NUMBER];
	        var max = [-MAX_NUMBER, -MAX_NUMBER];
	        var min2 = [];
	        var max2 = [];
	        var contours = this.contours;
	        for (var i = 0; i < contours.length; i++) {
	            bbox.fromPoints(contours[i], min2, max2);
	            vec2.min(min, min, min2);
	            vec2.max(max, max, max2);
	        }
	        // No data
	        if (i === 0) {
	            min[0] = min[1] = max[0] = max[1] = 0;
	        }
	
	        return this._rect = new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);
	    },
	
	    /**
	     * @param {<Array.<number>} coord
	     * @return {boolean}
	     */
	    contain: function contain(coord) {
	        var rect = this.getBoundingRect();
	        var contours = this.contours;
	        if (rect.contain(coord[0], coord[1])) {
	            for (var i = 0, len = contours.length; i < len; i++) {
	                if (polygonContain.contain(contours[i], coord[0], coord[1])) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },
	
	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();
	        var aspect = rect.width / rect.height;
	        if (!width) {
	            width = aspect * height;
	        } else if (!height) {
	            height = width / aspect;
	        }
	        var target = new BoundingRect(x, y, width, height);
	        var transform = rect.calculateTransform(target);
	        var contours = this.contours;
	        for (var i = 0; i < contours.length; i++) {
	            for (var p = 0; p < contours[i].length; p++) {
	                vec2.applyTransform(contours[i][p], contours[i][p], transform);
	            }
	        }
	        rect = this._rect;
	        rect.copy(target);
	        // Update center
	        this.center = [rect.x + rect.width / 2, rect.y + rect.height / 2];
	    }
	};
	
	module.exports = Region;

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var windingLine = __webpack_require__(278);
	
	var EPSILON = 1e-8;
	
	function isAroundEqual(a, b) {
	    return Math.abs(a - b) < EPSILON;
	}
	
	function contain(points, x, y) {
	    var w = 0;
	    var p = points[0];
	
	    if (!p) {
	        return false;
	    }
	
	    for (var i = 1; i < points.length; i++) {
	        var p2 = points[i];
	        w += windingLine(p[0], p[1], p2[0], p2[1], x, y);
	        p = p2;
	    }
	
	    // Close polygon
	    var p0 = points[0];
	    if (!isAroundEqual(p[0], p0[0]) || !isAroundEqual(p[1], p0[1])) {
	        w += windingLine(p[0], p[1], p0[0], p0[1], x, y);
	    }
	
	    return w !== 0;
	}
	
	module.exports = {
	    contain: contain
	};

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Simple view coordinate system
	 * Mapping given x, y to transformd view x, y
	 */
	
	var vector = __webpack_require__(237);
	var matrix = __webpack_require__(238);
	
	var Transformable = __webpack_require__(254);
	var zrUtil = __webpack_require__(224);
	
	var BoundingRect = __webpack_require__(236);
	
	var v2ApplyTransform = vector.applyTransform;
	
	// Dummy transform node
	function TransformDummy() {
	    Transformable.call(this);
	}
	zrUtil.mixin(TransformDummy, Transformable);
	
	function View(name) {
	    /**
	     * @type {string}
	     */
	    this.name = name;
	
	    Transformable.call(this);
	
	    this._roamTransform = new TransformDummy();
	
	    this._viewTransform = new TransformDummy();
	}
	
	View.prototype = {
	
	    constructor: View,
	
	    type: 'view',
	
	    /**
	     * @param {Array.<string>}
	     * @readOnly
	     */
	    dimensions: ['x', 'y'],
	
	    /**
	     * Set bounding rect
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */
	
	    // PENDING to getRect
	    setBoundingRect: function setBoundingRect(x, y, width, height) {
	        this._rect = new BoundingRect(x, y, width, height);
	        return this._rect;
	    },
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    // PENDING to getRect
	    getBoundingRect: function getBoundingRect() {
	        return this._rect;
	    },
	
	    /**
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */
	    setViewRect: function setViewRect(x, y, width, height) {
	        this.transformTo(x, y, width, height);
	        this._viewRect = new BoundingRect(x, y, width, height);
	    },
	
	    /**
	     * Transformed to particular position and size
	     * @param {number} x
	     * @param {number} y
	     * @param {number} width
	     * @param {number} height
	     */
	    transformTo: function transformTo(x, y, width, height) {
	        var rect = this.getBoundingRect();
	        var viewTransform = this._viewTransform;
	
	        viewTransform.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));
	
	        viewTransform.decomposeTransform();
	
	        this._updateTransform();
	    },
	
	    /**
	     * @param {number} x
	     * @param {number} y
	     */
	    setPan: function setPan(x, y) {
	
	        this._roamTransform.position = [x, y];
	
	        this._updateTransform();
	    },
	
	    /**
	     * @param {number} zoom
	     */
	    setZoom: function setZoom(zoom) {
	        this._roamTransform.scale = [zoom, zoom];
	
	        this._updateTransform();
	    },
	
	    /**
	     * @return {Array.<number}
	     */
	    getRoamTransform: function getRoamTransform() {
	        return this._roamTransform.transform;
	    },
	
	    /**
	     * Update transform from roam and mapLocation
	     * @private
	     */
	    _updateTransform: function _updateTransform() {
	        var roamTransform = this._roamTransform;
	        var viewTransform = this._viewTransform;
	        // var scale = this.scale;
	
	        viewTransform.parent = roamTransform;
	        roamTransform.updateTransform();
	        viewTransform.updateTransform();
	
	        viewTransform.transform && matrix.copy(this.transform || (this.transform = []), viewTransform.transform);
	
	        this.decomposeTransform();
	    },
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getViewRect: function getViewRect() {
	        return this._viewRect;
	    },
	
	    /**
	     * Convert a single (lon, lat) data item to (x, y) point.
	     * @param {Array.<number>} data
	     * @return {Array.<number>}
	     */
	    dataToPoint: function dataToPoint(data) {
	        var transform = this.transform;
	        return transform ? v2ApplyTransform([], data, transform) : [data[0], data[1]];
	    },
	
	    /**
	     * Convert a (x, y) point to (lon, lat) data
	     * @param {Array.<number>} point
	     * @return {Array.<number>}
	     */
	    pointToData: function pointToData(point) {
	        var invTransform = this.invTransform;
	        return invTransform ? v2ApplyTransform([], point, invTransform) : [point[0], point[1]];
	    }
	
	    /**
	     * @return {number}
	     */
	    // getScalarScale: function () {
	    //     // Use determinant square root of transform to mutiply scalar
	    //     var m = this.transform;
	    //     var det = Math.sqrt(Math.abs(m[0] * m[3] - m[2] * m[1]));
	    //     return det;
	    // }
	};
	
	zrUtil.mixin(View, Transformable);
	
	module.exports = View;

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Fix for 南海诸岛
	
	var Region = __webpack_require__(388);
	
	var geoCoord = [126, 25];
	
	var points = [[[0, 3.5], [7, 11.2], [15, 11.9], [30, 7], [42, 0.7], [52, 0.7], [56, 7.7], [59, 0.7], [64, 0.7], [64, 0], [5, 0], [0, 3.5]], [[13, 16.1], [19, 14.7], [16, 21.7], [11, 23.1], [13, 16.1]], [[12, 32.2], [14, 38.5], [15, 38.5], [13, 32.2], [12, 32.2]], [[16, 47.6], [12, 53.2], [13, 53.2], [18, 47.6], [16, 47.6]], [[6, 64.4], [8, 70], [9, 70], [8, 64.4], [6, 64.4]], [[23, 82.6], [29, 79.8], [30, 79.8], [25, 82.6], [23, 82.6]], [[37, 70.7], [43, 62.3], [44, 62.3], [39, 70.7], [37, 70.7]], [[48, 51.1], [51, 45.5], [53, 45.5], [50, 51.1], [48, 51.1]], [[51, 35], [51, 28.7], [53, 28.7], [53, 35], [51, 35]], [[52, 22.4], [55, 17.5], [56, 17.5], [53, 22.4], [52, 22.4]], [[58, 12.6], [62, 7], [63, 7], [60, 12.6], [58, 12.6]], [[0, 3.5], [0, 93.1], [64, 93.1], [64, 0], [63, 0], [63, 92.4], [1, 92.4], [1, 3.5], [0, 3.5]]];
	for (var i = 0; i < points.length; i++) {
	    for (var k = 0; k < points[i].length; k++) {
	        points[i][k][0] /= 10.5;
	        points[i][k][1] /= -10.5 / 0.75;
	
	        points[i][k][0] += geoCoord[0];
	        points[i][k][1] += geoCoord[1];
	    }
	}
	module.exports = function (geo) {
	    if (geo.map === 'china') {
	        geo.regions.push(new Region('南海诸岛', points, geoCoord));
	    }
	};

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var coordsOffsetMap = {
	    '南海诸岛': [32, 80],
	    // 全国
	    '广东': [0, -10],
	    '香港': [10, 5],
	    '澳门': [-10, 10],
	    //'北京': [-10, 0],
	    '天津': [5, 5]
	};
	
	module.exports = function (geo) {
	    zrUtil.each(geo.regions, function (region) {
	        var coordFix = coordsOffsetMap[region.name];
	        if (coordFix) {
	            var cp = region.center;
	            cp[0] += coordFix[0] / 10.5;
	            cp[1] += -coordFix[1] / (10.5 / 0.75);
	        }
	    });
	};

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	var geoCoordMap = {
	    'Russia': [100, 60],
	    'United States of America': [-99, 38]
	};
	
	module.exports = function (geo) {
	    zrUtil.each(geo.regions, function (region) {
	        var geoCoord = geoCoordMap[region.name];
	        if (geoCoord) {
	            var cp = region.center;
	            cp[0] = geoCoord[0];
	            cp[1] = geoCoord[1];
	        }
	    });
	};

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (ecModel) {
	
	    var processedMapType = {};
	
	    ecModel.eachSeriesByType('map', function (mapSeries) {
	        var mapType = mapSeries.get('mapType');
	        if (processedMapType[mapType]) {
	            return;
	        }
	
	        var mapSymbolOffsets = {};
	
	        zrUtil.each(mapSeries.seriesGroup, function (subMapSeries) {
	            var geo = subMapSeries.coordinateSystem;
	            var data = subMapSeries.getData();
	            if (subMapSeries.get('showLegendSymbol') && ecModel.getComponent('legend')) {
	                data.each('value', function (value, idx) {
	                    var name = data.getName(idx);
	                    var region = geo.getRegion(name);
	
	                    // No region or no value
	                    // In MapSeries data regions will be filled with NaN
	                    // If they are not in the series.data array.
	                    // So here must validate if value is NaN
	                    if (!region || isNaN(value)) {
	                        return;
	                    }
	
	                    var offset = mapSymbolOffsets[name] || 0;
	
	                    var point = geo.dataToPoint(region.center);
	
	                    mapSymbolOffsets[name] = offset + 1;
	
	                    data.setItemLayout(idx, {
	                        point: point,
	                        offset: offset
	                    });
	                });
	            }
	        });
	
	        // Show label of those region not has legendSymbol(which is offset 0)
	        var data = mapSeries.getData();
	        data.each(function (idx) {
	            var name = data.getName(idx);
	            var layout = data.getItemLayout(idx) || {};
	            layout.showLabel = !mapSymbolOffsets[name];
	            data.setItemLayout(idx, layout);
	        });
	
	        processedMapType[mapType] = true;
	    });
	};

/***/ },
/* 395 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('map', function (seriesModel) {
	        var colorList = seriesModel.get('color');
	        var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	
	        var areaColor = itemStyleModel.get('areaColor');
	        var color = itemStyleModel.get('color') || colorList[seriesModel.seriesIndex % colorList.length];
	
	        seriesModel.getData().setVisual({
	            'areaColor': areaColor,
	            'color': color
	        });
	    });
	};

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	// FIXME 公用？
	/**
	 * @param {Array.<module:echarts/data/List>} datas
	 * @param {string} statisticsType 'average' 'sum'
	 * @inner
	 */
	function dataStatistics(datas, statisticsType) {
	    var dataNameMap = {};
	    var dims = ['value'];
	
	    for (var i = 0; i < datas.length; i++) {
	        datas[i].each(dims, function (value, idx) {
	            var name = datas[i].getName(idx);
	            dataNameMap[name] = dataNameMap[name] || [];
	            if (!isNaN(value)) {
	                dataNameMap[name].push(value);
	            }
	        });
	    }
	
	    return datas[0].map(dims, function (value, idx) {
	        var name = datas[0].getName(idx);
	        var sum = 0;
	        var min = Infinity;
	        var max = -Infinity;
	        var len = dataNameMap[name].length;
	        for (var i = 0; i < len; i++) {
	            min = Math.min(min, dataNameMap[name][i]);
	            max = Math.max(max, dataNameMap[name][i]);
	            sum += dataNameMap[name][i];
	        }
	        var result;
	        if (statisticsType === 'min') {
	            result = min;
	        } else if (statisticsType === 'max') {
	            result = max;
	        } else if (statisticsType === 'average') {
	            result = sum / len;
	        } else {
	            result = sum;
	        }
	        return len === 0 ? NaN : result;
	    });
	}
	
	module.exports = function (ecModel) {
	    var seriesGroupByMapType = {};
	    ecModel.eachSeriesByType('map', function (seriesModel) {
	        var mapType = seriesModel.get('map');
	        seriesGroupByMapType[mapType] = seriesGroupByMapType[mapType] || [];
	        seriesGroupByMapType[mapType].push(seriesModel);
	    });
	
	    zrUtil.each(seriesGroupByMapType, function (seriesList, mapType) {
	        var data = dataStatistics(zrUtil.map(seriesList, function (seriesModel) {
	            return seriesModel.getData();
	        }), seriesList[0].get('mapValueCalculation'));
	
	        seriesList[0].seriesGroup = [];
	
	        seriesList[0].setData(data);
	
	        // FIXME Put where?
	        for (var i = 0; i < seriesList.length; i++) {
	            seriesList[i].seriesGroup = seriesList;
	            seriesList[i].needsDrawMap = i === 0;
	        }
	    });
	};

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var geoProps = ['x', 'y', 'x2', 'y2', 'width', 'height', 'map', 'roam', 'roamDetail', 'label', 'itemStyle'];
	
	var geoCoordsMap = {};
	
	function createGeoFromMap(mapSeriesOpt) {
	    var geoOpt = {};
	    zrUtil.each(geoProps, function (propName) {
	        if (mapSeriesOpt[propName] != null) {
	            geoOpt[propName] = mapSeriesOpt[propName];
	        }
	    });
	    return geoOpt;
	}
	module.exports = function (option) {
	    // Save geoCoord
	    var mapSeries = [];
	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt.type === 'map') {
	            mapSeries.push(seriesOpt);
	        }
	        zrUtil.extend(geoCoordsMap, seriesOpt.geoCoord);
	    });
	
	    var newCreatedGeoOptMap = {};
	    zrUtil.each(mapSeries, function (seriesOpt) {
	        seriesOpt.map = seriesOpt.map || seriesOpt.mapType;
	        // Put x, y, width, height, x2, y2 in the top level
	        zrUtil.defaults(seriesOpt, seriesOpt.mapLocation);
	        if (seriesOpt.markPoint) {
	            var markPoint = seriesOpt.markPoint;
	            // Convert name or geoCoord in markPoint to lng and lat
	            // For example
	            // { name: 'xxx', value: 10} Or
	            // { geoCoord: [lng, lat], value: 10} to
	            // { name: 'xxx', value: [lng, lat, 10]}
	            markPoint.data = zrUtil.map(markPoint.data, function (dataOpt) {
	                if (!zrUtil.isArray(dataOpt.value)) {
	                    var geoCoord;
	                    if (dataOpt.geoCoord) {
	                        geoCoord = dataOpt.geoCoord;
	                    } else if (dataOpt.name) {
	                        geoCoord = geoCoordsMap[dataOpt.name];
	                    }
	                    var newValue = geoCoord ? [geoCoord[0], geoCoord[1]] : [NaN, NaN];
	                    if (dataOpt.value != null) {
	                        newValue.push(dataOpt.value);
	                    }
	                    dataOpt.value = newValue;
	                }
	                return dataOpt;
	            });
	            // Convert map series which only has markPoint without data to scatter series
	            // FIXME
	            if (!(seriesOpt.data && seriesOpt.data.length)) {
	                if (!option.geo) {
	                    option.geo = [];
	                }
	
	                // Use same geo if multiple map series has same map type
	                var geoOpt = newCreatedGeoOptMap[seriesOpt.map];
	                if (!geoOpt) {
	                    geoOpt = newCreatedGeoOptMap[seriesOpt.map] = createGeoFromMap(seriesOpt);
	                    option.geo.push(geoOpt);
	                }
	
	                var scatterSeries = seriesOpt.markPoint;
	                scatterSeries.type = option.effect && option.effect.show ? 'effectScatter' : 'scatter';
	                scatterSeries.coordinateSystem = 'geo';
	                scatterSeries.geoIndex = zrUtil.indexOf(option.geo, geoOpt);
	                scatterSeries.name = seriesOpt.name;
	
	                option.series.splice(zrUtil.indexOf(option.series, seriesOpt), 1, scatterSeries);
	            }
	        }
	    });
	};

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(399);
	__webpack_require__(402);
	__webpack_require__(406);
	
	echarts.registerVisualCoding('chart', __webpack_require__(407));
	
	echarts.registerLayout(__webpack_require__(409));

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var Tree = __webpack_require__(400);
	var zrUtil = __webpack_require__(224);
	var Model = __webpack_require__(229);
	var formatUtil = __webpack_require__(227);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.treemap',
	
	    dependencies: ['grid', 'polar'],
	
	    defaultOption: {
	        // center: ['50%', '50%'],             // not supported in ec3.
	        // size: ['80%', '80%'],               // deprecated, compatible with ec2.
	        left: 'center',
	        top: 'middle',
	        right: null,
	        bottom: null,
	        width: '80%',
	        height: '80%',
	        sort: true, // Can be null or false or true
	        // (order by desc default, asc not supported yet (strange effect))
	        clipWindow: 'origin', // 缩放时窗口大小。'origin' or 'fullscreen'
	        squareRatio: 0.5 * (1 + Math.sqrt(5)), // golden ratio
	        root: null, // default: tree root. This feature doesnt work unless node have id.
	        visualDimension: 0, // Can be 0, 1, 2, 3.
	        zoomToNodeRatio: 0.32 * 0.32, // zoom to node时 node占可视区域的面积比例。
	        roam: true, // true, false, 'scale' or 'zoom', 'move'
	        nodeClick: 'zoomToNode', // 'zoomToNode', 'link', false
	        animation: true,
	        animationDurationUpdate: 1500,
	        animationEasing: 'quinticInOut',
	        breadcrumb: {
	            show: true,
	            height: 22,
	            left: 'center',
	            top: 'bottom',
	            // right
	            // bottom
	            emptyItemWidth: 25, // 空节点宽度
	            itemStyle: {
	                normal: {
	                    color: 'rgba(0,0,0,0.7)', //'#5793f3',
	                    borderColor: 'rgba(255,255,255,0.7)',
	                    borderWidth: 1,
	                    shadowColor: 'rgba(150,150,150,1)',
	                    shadowBlur: 3,
	                    shadowOffsetX: 0,
	                    shadowOffsetY: 0,
	                    textStyle: {
	                        color: '#fff'
	                    }
	                },
	                emphasis: {
	                    textStyle: {}
	                }
	            }
	        },
	        label: {
	            normal: {
	                show: true,
	                position: ['50%', '50%'], // 可以是 5 '5%' 'insideTopLeft', ...
	                textStyle: {
	                    align: 'center',
	                    baseline: 'middle',
	                    color: '#fff',
	                    ellipsis: true
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                color: null, // 各异 如不需，可设为'none'
	                colorAlpha: null, // 默认不设置 如不需，可设为'none'
	                colorSaturation: null, // 默认不设置 如不需，可设为'none'
	                borderWidth: 0,
	                gapWidth: 0,
	                borderColor: '#fff',
	                borderColorSaturation: null // 如果设置，则borderColor的设置无效，而是取当前节点计算出的颜色，再经由borderColorSaturation处理。
	            },
	            emphasis: {}
	        },
	        color: 'none', // 为数组，表示同一level的color 选取列表。默认空，在level[0].color中取系统color列表。
	        colorAlpha: null, // 为数组，表示同一level的color alpha 选取范围。
	        colorSaturation: null, // 为数组，表示同一level的color alpha 选取范围。
	        colorMappingBy: 'index', // 'value' or 'index' or 'id'.
	        visibleMin: 10, // If area less than this threshold (unit: pixel^2), node will not be rendered.
	        // Only works when sort is 'asc' or 'desc'.
	        childrenVisibleMin: null, // If area of a node less than this threshold (unit: pixel^2),
	        // grandchildren will not show.
	        // Why grandchildren? If not grandchildren but children,
	        // some siblings show children and some not,
	        // the appearance may be mess and not consistent,
	        levels: [] // Each item: {
	        //     visibleMin, itemStyle, visualDimension, label
	        // }
	        // data: {
	        //      value: [],
	        //      children: [],
	        //      link: 'http://xxx.xxx.xxx',
	        //      target: 'blank' or 'self'
	        // }
	    },
	
	    /**
	     * @override
	     */
	    getInitialData: function getInitialData(option, ecModel) {
	        var data = option.data || [];
	        var rootName = option.name;
	        rootName == null && (rootName = option.name);
	
	        // Create a virtual root.
	        var root = { name: rootName, children: option.data };
	        var value0 = (data[0] || {}).value;
	
	        completeTreeValue(root, zrUtil.isArray(value0) ? value0.length : -1);
	
	        // FIXME
	        // sereis.mergeOption 的 getInitData是否放在merge后，从而能直接获取merege后的结果而非手动判断。
	        var levels = option.levels || [];
	
	        levels = option.levels = setDefault(levels, ecModel);
	
	        // Make sure always a new tree is created when setOption,
	        // in TreemapView, we check whether oldTree === newTree
	        // to choose mappings approach among old shapes and new shapes.
	        return Tree.createTree(root, this, levels).data;
	    },
	
	    /**
	     * @public
	     */
	    getViewRoot: function getViewRoot() {
	        var optionRoot = this.option.root;
	        var treeRoot = this.getData().tree.root;
	        return optionRoot && treeRoot.getNodeById(optionRoot) || treeRoot;
	    },
	
	    /**
	     * @override
	     * @param {number} dataIndex
	     * @param {boolean} [mutipleSeries=false]
	     */
	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this.getData();
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? addCommas(value[0]) : addCommas(value);
	        var name = data.getName(dataIndex);
	
	        return encodeHTML(name) + ': ' + formattedValue;
	    },
	
	    /**
	     * Add tree path to tooltip param
	     *
	     * @override
	     * @param {number} dataIndex
	     * @return {Object}
	     */
	    getDataParams: function getDataParams(dataIndex) {
	        var params = SeriesModel.prototype.getDataParams.apply(this, arguments);
	
	        var data = this.getData();
	        var node = data.tree.getNodeByDataIndex(dataIndex);
	        var treePathInfo = params.treePathInfo = [];
	
	        while (node) {
	            var nodeDataIndex = node.dataIndex;
	            treePathInfo.push({
	                name: node.name,
	                dataIndex: nodeDataIndex,
	                value: this.getRawValue(nodeDataIndex)
	            });
	            node = node.parentNode;
	        }
	
	        treePathInfo.reverse();
	
	        return params;
	    },
	
	    /**
	     * @public
	     * @param {Object} layoutInfo {
	     *                                x: containerGroup x
	     *                                y: containerGroup y
	     *                                width: containerGroup width
	     *                                height: containerGroup height
	     *                            }
	     */
	    setLayoutInfo: function setLayoutInfo(layoutInfo) {
	        /**
	         * @readOnly
	         * @type {Object}
	         */
	        this.layoutInfo = this.layoutInfo || {};
	        zrUtil.extend(this.layoutInfo, layoutInfo);
	    },
	
	    /**
	     * @param  {string} id
	     * @return {number} index
	     */
	    mapIdToIndex: function mapIdToIndex(id) {
	        // A feature is implemented:
	        // index is monotone increasing with the sequence of
	        // input id at the first time.
	        // This feature can make sure that each data item and its
	        // mapped color have the same index between data list and
	        // color list at the beginning, which is useful for user
	        // to adjust data-color mapping.
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        var idIndexMap = this._idIndexMap;
	
	        if (!idIndexMap) {
	            idIndexMap = this._idIndexMap = {};
	            /**
	             * @private
	             * @type {number}
	             */
	            this._idIndexMapCount = 0;
	        }
	
	        var index = idIndexMap[id];
	        if (index == null) {
	            idIndexMap[id] = index = this._idIndexMapCount++;
	        }
	
	        return index;
	    }
	});
	
	/**
	 * @param {Object} dataNode
	 */
	function completeTreeValue(dataNode, arrValueLength) {
	    // Postorder travel tree.
	    // If value of none-leaf node is not set,
	    // calculate it by suming up the value of all children.
	    var sum = 0;
	
	    zrUtil.each(dataNode.children, function (child) {
	
	        completeTreeValue(child, arrValueLength);
	
	        var childValue = child.value;
	        zrUtil.isArray(childValue) && (childValue = childValue[0]);
	
	        sum += childValue;
	    });
	
	    var thisValue = dataNode.value;
	
	    if (arrValueLength >= 0) {
	        if (!zrUtil.isArray(thisValue)) {
	            dataNode.value = new Array(arrValueLength);
	        } else {
	            thisValue = thisValue[0];
	        }
	    }
	
	    if (thisValue == null || isNaN(thisValue)) {
	        thisValue = sum;
	    }
	    // Value should not less than 0.
	    if (thisValue < 0) {
	        thisValue = 0;
	    }
	
	    arrValueLength >= 0 ? dataNode.value[0] = thisValue : dataNode.value = thisValue;
	}
	
	/**
	 * set default to level configuration
	 */
	function setDefault(levels, ecModel) {
	    var globalColorList = ecModel.get('color');
	
	    if (!globalColorList) {
	        return;
	    }
	
	    levels = levels || [];
	    var hasColorDefine;
	    zrUtil.each(levels, function (levelDefine) {
	        var model = new Model(levelDefine);
	        var modelColor = model.get('color');
	        if (model.get('itemStyle.normal.color') || modelColor && modelColor !== 'none') {
	            hasColorDefine = true;
	        }
	    });
	
	    if (!hasColorDefine) {
	        var level0 = levels[0] || (levels[0] = {});
	        level0.color = globalColorList.slice();
	    }
	
	    return levels;
	}

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Tree data structure
	 *
	 * @module echarts/data/Tree
	 */
	
	var zrUtil = __webpack_require__(224);
	var Model = __webpack_require__(229);
	var List = __webpack_require__(315);
	var linkListHelper = __webpack_require__(401);
	var completeDimensions = __webpack_require__(317);
	
	/**
	 * @constructor module:echarts/data/Tree~TreeNode
	 * @param {string} name
	 * @param {number} [dataIndex=-1]
	 * @param {module:echarts/data/Tree} hostTree
	 */
	var TreeNode = function TreeNode(name, dataIndex, hostTree) {
	    /**
	     * @type {string}
	     */
	    this.name = name || '';
	
	    /**
	     * Depth of node
	     *
	     * @type {number}
	     * @readOnly
	     */
	    this.depth = 0;
	
	    /**
	     * Height of the subtree rooted at this node.
	     * @type {number}
	     * @readOnly
	     */
	    this.height = 0;
	
	    /**
	     * @type {module:echarts/data/Tree~TreeNode}
	     * @readOnly
	     */
	    this.parentNode = null;
	
	    /**
	     * Reference to list item.
	     * Do not persistent dataIndex outside,
	     * besause it may be changed by list.
	     * If dataIndex -1,
	     * this node is logical deleted (filtered) in list.
	     *
	     * @type {Object}
	     * @readOnly
	     */
	    this.dataIndex = dataIndex == null ? -1 : dataIndex;
	
	    /**
	     * @type {Array.<module:echarts/data/Tree~TreeNode>}
	     * @readOnly
	     */
	    this.children = [];
	
	    /**
	     * @type {Array.<module:echarts/data/Tree~TreeNode>}
	     * @pubilc
	     */
	    this.viewChildren = [];
	
	    /**
	     * @type {moduel:echarts/data/Tree}
	     * @readOnly
	     */
	    this.hostTree = hostTree;
	};
	
	TreeNode.prototype = {
	
	    constructor: TreeNode,
	
	    /**
	     * The node is removed.
	     * @return {boolean} is removed.
	     */
	    isRemoved: function isRemoved() {
	        return this.dataIndex < 0;
	    },
	
	    /**
	     * Travel this subtree (include this node).
	     * Usage:
	     *    node.eachNode(function () { ... }); // preorder
	     *    node.eachNode('preorder', function () { ... }); // preorder
	     *    node.eachNode('postorder', function () { ... }); // postorder
	     *    node.eachNode(
	     *        {order: 'postorder', attr: 'viewChildren'},
	     *        function () { ... }
	     *    ); // postorder
	     *
	     * @param {(Object|string)} options If string, means order.
	     * @param {string=} options.order 'preorder' or 'postorder'
	     * @param {string=} options.attr 'children' or 'viewChildren'
	     * @param {Function} cb If in preorder and return false,
	     *                      its subtree will not be visited.
	     * @param {Object} [context]
	     */
	    eachNode: function eachNode(options, cb, context) {
	        if (typeof options === 'function') {
	            context = cb;
	            cb = options;
	            options = null;
	        }
	
	        options = options || {};
	        if (zrUtil.isString(options)) {
	            options = { order: options };
	        }
	
	        var order = options.order || 'preorder';
	        var children = this[options.attr || 'children'];
	
	        var suppressVisitSub;
	        order === 'preorder' && (suppressVisitSub = cb.call(context, this));
	
	        for (var i = 0; !suppressVisitSub && i < children.length; i++) {
	            children[i].eachNode(options, cb, context);
	        }
	
	        order === 'postorder' && cb.call(context, this);
	    },
	
	    /**
	     * Update depth and height of this subtree.
	     *
	     * @param  {number} depth
	     */
	    updateDepthAndHeight: function updateDepthAndHeight(depth) {
	        var height = 0;
	        this.depth = depth;
	        for (var i = 0; i < this.children.length; i++) {
	            var child = this.children[i];
	            child.updateDepthAndHeight(depth + 1);
	            if (child.height > height) {
	                height = child.height;
	            }
	        }
	        this.height = height + 1;
	    },
	
	    /**
	     * @param  {string} id
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeById: function getNodeById(id) {
	        if (this.getId() === id) {
	            return this;
	        }
	        for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	            var res = children[i].getNodeById(id);
	            if (res) {
	                return res;
	            }
	        }
	    },
	
	    /**
	     * @param {module:echarts/data/Tree~TreeNode} node
	     * @return {boolean}
	     */
	    contains: function contains(node) {
	        if (node === this) {
	            return true;
	        }
	        for (var i = 0, children = this.children, len = children.length; i < len; i++) {
	            var res = children[i].contains(node);
	            if (res) {
	                return res;
	            }
	        }
	    },
	
	    /**
	     * @param {boolean} includeSelf Default false.
	     * @return {Array.<module:echarts/data/Tree~TreeNode>} order: [root, child, grandchild, ...]
	     */
	    getAncestors: function getAncestors(includeSelf) {
	        var ancestors = [];
	        var node = includeSelf ? this : this.parentNode;
	        while (node) {
	            ancestors.push(node);
	            node = node.parentNode;
	        }
	        ancestors.reverse();
	        return ancestors;
	    },
	
	    /**
	     * @param {string|Array=} [dimension='value'] Default 'value'. can be 0, 1, 2, 3
	     * @return {number} Value.
	     */
	    getValue: function getValue(dimension) {
	        var data = this.hostTree.data;
	        return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	    },
	
	    /**
	     * @param {Object} layout
	     * @param {boolean=} [merge=false]
	     */
	    setLayout: function setLayout(layout, merge) {
	        this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);
	    },
	
	    /**
	     * @return {Object} layout
	     */
	    getLayout: function getLayout() {
	        return this.hostTree.data.getItemLayout(this.dataIndex);
	    },
	
	    /**
	     * @param {string} path
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var hostTree = this.hostTree;
	        var itemModel = hostTree.data.getItemModel(this.dataIndex);
	        var levelModel = this.getLevelModel();
	
	        return itemModel.getModel(path, (levelModel || hostTree.hostModel).getModel(path));
	    },
	
	    /**
	     * @return {module:echarts/model/Model}
	     */
	    getLevelModel: function getLevelModel() {
	        return (this.hostTree.levelModels || [])[this.depth];
	    },
	
	    /**
	     * @example
	     *  setItemVisual('color', color);
	     *  setItemVisual({
	     *      'color': color
	     *  });
	     */
	    setVisual: function setVisual(key, value) {
	        this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);
	    },
	
	    /**
	     * @public
	     */
	    getVisual: function getVisual(key, ignoreParent) {
	        return this.hostTree.data.getItemVisual(this.dataIndex, key, ignoreParent);
	    },
	
	    /**
	     * @public
	     * @return {number}
	     */
	    getRawIndex: function getRawIndex() {
	        return this.hostTree.data.getRawIndex(this.dataIndex);
	    },
	
	    /**
	     * @public
	     * @return {string}
	     */
	    getId: function getId() {
	        return this.hostTree.data.getId(this.dataIndex);
	    }
	};
	
	/**
	 * @constructor
	 * @alias module:echarts/data/Tree
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Array.<Object>} levelOptions
	 */
	function Tree(hostModel, levelOptions) {
	    /**
	     * @type {module:echarts/data/Tree~TreeNode}
	     * @readOnly
	     */
	    this.root;
	
	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.data;
	
	    /**
	     * Index of each item is the same as the raw index of coresponding list item.
	     * @private
	     * @type {Array.<module:echarts/data/Tree~TreeNode}
	     */
	    this._nodes = [];
	
	    /**
	     * @private
	     * @readOnly
	     * @type {module:echarts/model/Model}
	     */
	    this.hostModel = hostModel;
	
	    /**
	     * @private
	     * @readOnly
	     * @type {Array.<module:echarts/model/Model}
	     */
	    this.levelModels = zrUtil.map(levelOptions || [], function (levelDefine) {
	        return new Model(levelDefine, hostModel, hostModel.ecModel);
	    });
	}
	
	Tree.prototype = {
	
	    constructor: Tree,
	
	    type: 'tree',
	
	    /**
	     * Travel this subtree (include this node).
	     * Usage:
	     *    node.eachNode(function () { ... }); // preorder
	     *    node.eachNode('preorder', function () { ... }); // preorder
	     *    node.eachNode('postorder', function () { ... }); // postorder
	     *    node.eachNode(
	     *        {order: 'postorder', attr: 'viewChildren'},
	     *        function () { ... }
	     *    ); // postorder
	     *
	     * @param {(Object|string)} options If string, means order.
	     * @param {string=} options.order 'preorder' or 'postorder'
	     * @param {string=} options.attr 'children' or 'viewChildren'
	     * @param {Function} cb
	     * @param {Object}   [context]
	     */
	    eachNode: function eachNode(options, cb, context) {
	        this.root.eachNode(options, cb, context);
	    },
	
	    /**
	     * @param {number} dataIndex
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeByDataIndex: function getNodeByDataIndex(dataIndex) {
	        var rawIndex = this.data.getRawIndex(dataIndex);
	        return this._nodes[rawIndex];
	    },
	
	    /**
	     * @param {string} name
	     * @return {module:echarts/data/Tree~TreeNode}
	     */
	    getNodeByName: function getNodeByName(name) {
	        return this.root.getNodeByName(name);
	    },
	
	    /**
	     * Update item available by list,
	     * when list has been performed options like 'filterSelf' or 'map'.
	     */
	    update: function update() {
	        var data = this.data;
	        var nodes = this._nodes;
	
	        for (var i = 0, len = nodes.length; i < len; i++) {
	            nodes[i].dataIndex = -1;
	        }
	
	        for (var i = 0, len = data.count(); i < len; i++) {
	            nodes[data.getRawIndex(i)].dataIndex = i;
	        }
	    }
	};
	
	/**
	 * data node format:
	 * {
	 *     name: ...
	 *     value: ...
	 *     children: [
	 *         {
	 *             name: ...
	 *             value: ...
	 *             children: ...
	 *         },
	 *         ...
	 *     ]
	 * }
	 *
	 * @static
	 * @param {Objec} dataRoot Root node.
	 * @param {module:echarts/model/Model} hostModel
	 * @param {Array.<Object>} levelOptions
	 * @return module:echarts/data/Tree
	 */
	Tree.createTree = function (dataRoot, hostModel, levelOptions) {
	
	    var tree = new Tree(hostModel, levelOptions);
	    var listData = [];
	
	    buildHierarchy(dataRoot);
	
	    function buildHierarchy(dataNode, parentNode) {
	        listData.push(dataNode);
	
	        var node = new TreeNode(dataNode.name, listData.length - 1, tree);
	        parentNode ? addChild(node, parentNode) : tree.root = node;
	
	        var children = dataNode.children;
	        if (children) {
	            for (var i = 0; i < children.length; i++) {
	                buildHierarchy(children[i], node);
	            }
	        }
	    }
	
	    tree.root.updateDepthAndHeight(0);
	
	    var dimensions = completeDimensions([{ name: 'value' }], listData);
	    var list = new List(dimensions, hostModel);
	    list.initData(listData);
	
	    linkListHelper.linkToTree(list, tree);
	
	    return tree;
	};
	
	/**
	 * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,
	 * so this function is not ready and not necessary to be public.
	 *
	 * @param {(module:echarts/data/Tree~TreeNode|Object)} child
	 */
	function addChild(child, node) {
	    var children = node.children;
	    if (child.parentNode === node) {
	        return;
	    }
	
	    children.push(child);
	    child.parentNode = node;
	
	    node.hostTree._nodes.push(child);
	}
	
	module.exports = Tree;

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Link list to graph or tree
	 */
	
	var zrUtil = __webpack_require__(224);
	var arraySlice = Array.prototype.slice;
	
	// Caution:
	// In most case, only one of the list and its shallow clones (see list.cloneShallow)
	// can be active in echarts process. Considering heap memory consumption,
	// we do not clone tree or graph, but share them among list and its shallow clones.
	// But in some rare case, we have to keep old list (like do animation in chart). So
	// please take care that both the old list and the new list share the same tree/graph.
	
	function linkList(list, target, targetType) {
	    zrUtil.each(listProxyMethods, function (method, methodName) {
	        var originMethod = list[methodName];
	        list[methodName] = zrUtil.curry(method, originMethod, target, targetType);
	    });
	
	    list[targetType] = target;
	    target.data = list;
	
	    return list;
	}
	
	var listProxyMethods = {
	    cloneShallow: function cloneShallow(originMethod, target, targetType) {
	        var newList = originMethod.apply(this, arraySlice.call(arguments, 3));
	        return linkList(newList, target, targetType);
	    },
	    map: function map(originMethod, target, targetType) {
	        var newList = originMethod.apply(this, arraySlice.call(arguments, 3));
	        return linkList(newList, target, targetType);
	    },
	    filterSelf: function filterSelf(originMethod, target, targetType) {
	        var result = originMethod.apply(this, arraySlice.call(arguments, 3));
	        target.update();
	        return result;
	    }
	};
	
	module.exports = {
	    linkToGraph: function linkToGraph(list, graph) {
	        linkList(list, graph, 'graph');
	    },
	
	    linkToTree: function linkToTree(list, tree) {
	        linkList(list, tree, 'tree');
	    }
	};

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var DataDiffer = __webpack_require__(316);
	var helper = __webpack_require__(403);
	var Breadcrumb = __webpack_require__(404);
	var RoamController = __webpack_require__(380);
	var BoundingRect = __webpack_require__(236);
	var matrix = __webpack_require__(238);
	var animationUtil = __webpack_require__(405);
	var bind = zrUtil.bind;
	var Group = graphic.Group;
	var Rect = graphic.Rect;
	var each = zrUtil.each;
	
	var DRAG_THRESHOLD = 3;
	
	module.exports = __webpack_require__(222).extendChartView({
	
	    type: 'treemap',
	
	    /**
	     * @override
	     */
	    init: function init(o, api) {
	
	        /**
	         * @private
	         * @type {module:zrender/container/Group}
	         */
	        this._containerGroup;
	
	        /**
	         * @private
	         * @type {Object.<string, Array.<module:zrender/container/Group>>}
	         */
	        this._storage = createStorage();
	
	        /**
	         * @private
	         * @type {module:echarts/data/Tree}
	         */
	        this._oldTree;
	
	        /**
	         * @private
	         * @type {module:echarts/chart/treemap/Breadcrumb}
	         */
	        this._breadcrumb;
	
	        /**
	         * @private
	         * @type {module:echarts/component/helper/RoamController}
	         */
	        this._controller;
	
	        /**
	         * 'ready', 'animating'
	         * @private
	         */
	        this._state = 'ready';
	
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._mayClick;
	    },
	
	    /**
	     * @override
	     */
	    render: function render(seriesModel, ecModel, api, payload) {
	
	        var models = ecModel.findComponents({
	            mainType: 'series', subType: 'treemap', query: payload
	        });
	        if (zrUtil.indexOf(models, seriesModel) < 0) {
	            return;
	        }
	
	        this.seriesModel = seriesModel;
	        this.api = api;
	        this.ecModel = ecModel;
	
	        var payloadType = payload && payload.type;
	        var layoutInfo = seriesModel.layoutInfo;
	        var isInit = !this._oldTree;
	
	        var containerGroup = this._giveContainerGroup(layoutInfo);
	
	        var renderResult = this._doRender(containerGroup, seriesModel);
	
	        !isInit && (!payloadType || payloadType === 'treemapZoomToNode') ? this._doAnimation(containerGroup, renderResult, seriesModel) : renderResult.renderFinally();
	
	        this._resetController(api);
	
	        var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	        this._renderBreadcrumb(seriesModel, api, targetInfo);
	    },
	
	    /**
	     * @private
	     */
	    _giveContainerGroup: function _giveContainerGroup(layoutInfo) {
	        var containerGroup = this._containerGroup;
	        if (!containerGroup) {
	            // FIXME
	            // 加一层containerGroup是为了clip，但是现在clip功能并没有实现。
	            containerGroup = this._containerGroup = new Group();
	            this._initEvents(containerGroup);
	            this.group.add(containerGroup);
	        }
	        containerGroup.position = [layoutInfo.x, layoutInfo.y];
	
	        return containerGroup;
	    },
	
	    /**
	     * @private
	     */
	    _doRender: function _doRender(containerGroup, seriesModel) {
	        var thisTree = seriesModel.getData().tree;
	        var oldTree = this._oldTree;
	
	        // Clear last shape records.
	        var lastsForAnimation = createStorage();
	        var thisStorage = createStorage();
	        var oldStorage = this._storage;
	        var willInvisibleEls = [];
	        var willVisibleEls = [];
	        var willDeleteEls = [];
	        var renderNode = bind(this._renderNode, this, thisStorage, oldStorage, lastsForAnimation, willInvisibleEls, willVisibleEls);
	        var viewRoot = seriesModel.getViewRoot();
	
	        // Notice: when thisTree and oldTree are the same tree (see list.cloneShadow),
	        // the oldTree is actually losted, so we can not find all of the old graphic
	        // elements from tree. So we use this stragegy: make element storage, move
	        // from old storage to new storage, clear old storage.
	
	        dualTravel(thisTree.root ? [thisTree.root] : [], oldTree && oldTree.root ? [oldTree.root] : [], containerGroup, thisTree === oldTree || !oldTree, viewRoot === thisTree.root);
	
	        // Process all removing.
	        var willDeleteEls = clearStorage(oldStorage);
	
	        this._oldTree = thisTree;
	        this._storage = thisStorage;
	
	        return {
	            lastsForAnimation: lastsForAnimation,
	            willDeleteEls: willDeleteEls,
	            renderFinally: renderFinally
	        };
	
	        function dualTravel(thisViewChildren, oldViewChildren, parentGroup, sameTree, inView) {
	            // When 'render' is triggered by action,
	            // 'this' and 'old' may be the same tree,
	            // we use rawIndex in that case.
	            if (sameTree) {
	                oldViewChildren = thisViewChildren;
	                each(thisViewChildren, function (child, index) {
	                    !child.isRemoved() && processNode(index, index);
	                });
	            }
	            // Diff hierarchically (diff only in each subtree, but not whole).
	            // because, consistency of view is important.
	            else {
	                    new DataDiffer(oldViewChildren, thisViewChildren, getKey, getKey).add(processNode).update(processNode).remove(zrUtil.curry(processNode, null)).execute();
	                }
	
	            function getKey(node) {
	                // Identify by name or raw index.
	                return node.getId();
	            }
	
	            function processNode(newIndex, oldIndex) {
	                var thisNode = newIndex != null ? thisViewChildren[newIndex] : null;
	                var oldNode = oldIndex != null ? oldViewChildren[oldIndex] : null;
	
	                // Whether under viewRoot.
	                var subInView = inView || thisNode === viewRoot;
	                // If not under viewRoot, only remove.
	                if (!subInView) {
	                    thisNode = null;
	                }
	
	                var group = renderNode(thisNode, oldNode, parentGroup);
	
	                group && dualTravel(thisNode && thisNode.viewChildren || [], oldNode && oldNode.viewChildren || [], group, sameTree, subInView);
	            }
	        }
	
	        function clearStorage(storage) {
	            var willDeleteEls = createStorage();
	            storage && each(storage, function (store, storageName) {
	                var delEls = willDeleteEls[storageName];
	                each(store, function (el) {
	                    el && (delEls.push(el), el.__tmWillDelete = storageName);
	                });
	            });
	            return willDeleteEls;
	        }
	
	        function renderFinally() {
	            each(willDeleteEls, function (els) {
	                each(els, function (el) {
	                    el.parent && el.parent.remove(el);
	                });
	            });
	            // Theoritically there is no intersection between willInvisibleEls
	            // and willVisibleEls have, but we set visible after for robustness.
	            each(willInvisibleEls, function (el) {
	                el.invisible = true;
	                // Setting invisible is for optimizing, so no need to set dirty,
	                // just mark as invisible.
	            });
	            each(willVisibleEls, function (el) {
	                el.invisible = false;
	                el.__tmWillVisible = false;
	                el.dirty();
	            });
	        }
	    },
	
	    /**
	     * @private
	     */
	    _renderNode: function _renderNode(thisStorage, oldStorage, lastsForAnimation, willInvisibleEls, willVisibleEls, thisNode, oldNode, parentGroup) {
	        var thisRawIndex = thisNode && thisNode.getRawIndex();
	        var oldRawIndex = oldNode && oldNode.getRawIndex();
	
	        // Deleting things will performed finally. This method just find element from
	        // old storage, or create new element, set them to new storage, and set styles.
	        if (!thisNode) {
	            return;
	        }
	
	        var layout = thisNode.getLayout();
	        var thisWidth = layout.width;
	        var thisHeight = layout.height;
	        var invisible = layout.invisible;
	
	        // Node group
	        var group = giveGraphic('nodeGroup', Group);
	        if (!group) {
	            return;
	        }
	        parentGroup.add(group);
	        group.position = [layout.x, layout.y];
	        group.__tmNodeWidth = thisWidth;
	        group.__tmNodeHeight = thisHeight;
	
	        // Background
	        var bg = giveGraphic('background', Rect);
	        if (bg) {
	            bg.setShape({ x: 0, y: 0, width: thisWidth, height: thisHeight });
	            updateStyle(bg, { fill: thisNode.getVisual('borderColor', true) });
	            group.add(bg);
	        }
	
	        var thisViewChildren = thisNode.viewChildren;
	
	        // No children, render content.
	        if (!thisViewChildren || !thisViewChildren.length) {
	            var borderWidth = layout.borderWidth;
	            var content = giveGraphic('content', Rect);
	
	            if (content) {
	                var contentWidth = Math.max(thisWidth - 2 * borderWidth, 0);
	                var contentHeight = Math.max(thisHeight - 2 * borderWidth, 0);
	                var labelModel = thisNode.getModel('label.normal');
	                var textStyleModel = thisNode.getModel('label.normal.textStyle');
	                var text = thisNode.getModel().get('name');
	                var textRect = textStyleModel.getTextRect(text);
	                var showLabel = labelModel.get('show');
	
	                if (!showLabel || textRect.height > contentHeight) {
	                    text = '';
	                } else if (textRect.width > contentWidth) {
	                    text = textStyleModel.get('ellipsis') ? textStyleModel.ellipsis(text, contentWidth) : '';
	                }
	
	                // For tooltip.
	                content.dataIndex = thisNode.dataIndex;
	                content.seriesIndex = this.seriesModel.seriesIndex;
	
	                content.culling = true;
	                content.setShape({
	                    x: borderWidth,
	                    y: borderWidth,
	                    width: contentWidth,
	                    height: contentHeight
	                });
	                updateStyle(content, {
	                    fill: thisNode.getVisual('color', true),
	                    text: text,
	                    textPosition: labelModel.get('position'),
	                    textFill: textStyleModel.getTextColor(),
	                    textAlign: textStyleModel.get('align'),
	                    textVerticalAlign: textStyleModel.get('baseline'),
	                    textFont: textStyleModel.getFont()
	                });
	                group.add(content);
	            }
	        }
	
	        return group;
	
	        function giveGraphic(storageName, Ctor) {
	            var element = oldRawIndex != null && oldStorage[storageName][oldRawIndex];
	            var lasts = lastsForAnimation[storageName];
	
	            if (element) {
	                // Remove from oldStorage
	                oldStorage[storageName][oldRawIndex] = null;
	                prepareAnimationWhenHasOld(lasts, element, storageName);
	            }
	            // If invisible and no old element, do not create new element (for optimizing).
	            else if (!invisible) {
	                    element = new Ctor();
	                    prepareAnimationWhenNoOld(lasts, element, storageName);
	                }
	
	            // Set to thisStorage
	            return thisStorage[storageName][thisRawIndex] = element;
	        }
	
	        function prepareAnimationWhenHasOld(lasts, element, storageName) {
	            var lastCfg = lasts[thisRawIndex] = {};
	            lastCfg.old = storageName === 'nodeGroup' ? element.position.slice() : zrUtil.extend({}, element.shape);
	        }
	
	        // If a element is new, we need to find the animation start point carefully,
	        // otherwise it will looks strange when 'zoomToNode'.
	        function prepareAnimationWhenNoOld(lasts, element, storageName) {
	            // New background do not animate but delay show.
	            if (storageName === 'background') {
	                element.invisible = true;
	                element.__tmWillVisible = true;
	                willVisibleEls.push(element);
	            } else {
	                var parentNode = thisNode.parentNode;
	                var parentOldBg;
	                var parentOldX = 0;
	                var parentOldY = 0;
	                // For convenient, get old bounding rect from background.
	                if (parentNode && (parentOldBg = lastsForAnimation.background[parentNode.getRawIndex()])) {
	                    parentOldX = parentOldBg.old.width;
	                    parentOldY = parentOldBg.old.height;
	                }
	                // When no parent old shape found, its parent is new too,
	                // so we can just use {x:0, y:0}.
	                var lastCfg = lasts[thisRawIndex] = {};
	                lastCfg.old = storageName === 'nodeGroup' ? [parentOldX, parentOldY] : { x: parentOldX, y: parentOldY, width: 0, height: 0 };
	
	                // Fade in, user can be aware that these nodes are new.
	                lastCfg.fadein = storageName !== 'nodeGroup';
	            }
	        }
	
	        function updateStyle(element, style) {
	            if (!invisible) {
	                // If invisible, do not set visual, otherwise the element will
	                // change immediately before animation. We think it is OK to
	                // remain its origin color when moving out of the view window.
	                element.setStyle(style);
	                if (!element.__tmWillVisible) {
	                    element.invisible = false;
	                }
	            } else {
	                // Delay invisible setting utill animation finished,
	                // avoid element vanish suddenly before animation.
	                !element.invisible && willInvisibleEls.push(element);
	            }
	        }
	    },
	
	    /**
	     * @private
	     */
	    _doAnimation: function _doAnimation(containerGroup, renderResult, seriesModel) {
	        if (!seriesModel.get('animation')) {
	            return;
	        }
	
	        var duration = seriesModel.get('animationDurationUpdate');
	        var easing = seriesModel.get('animationEasing');
	
	        var animationWrap = animationUtil.createWrap();
	
	        // Make delete animations.
	        var viewRoot = this.seriesModel.getViewRoot();
	        var rootGroup = this._storage.nodeGroup[viewRoot.getRawIndex()];
	        rootGroup && rootGroup.traverse(function (el) {
	            var storageName;
	            if (el.invisible || !(storageName = el.__tmWillDelete)) {
	                return;
	            }
	            var targetX = 0;
	            var targetY = 0;
	            var parent = el.parent; // Always has parent, and parent is nodeGroup.
	            if (!parent.__tmWillDelete) {
	                // Let node animate to right-bottom corner, cooperating with fadeout,
	                // which is perfect for user understanding.
	                targetX = parent.__tmNodeWidth;
	                targetY = parent.__tmNodeHeight;
	            }
	            var target = storageName === 'nodeGroup' ? { position: [targetX, targetY], style: { opacity: 0 } } : { shape: { x: targetX, y: targetY, width: 0, height: 0 }, style: { opacity: 0 } };
	            animationWrap.add(el, target, duration, easing);
	        });
	
	        // Make other animations
	        each(this._storage, function (store, storageName) {
	            each(store, function (el, rawIndex) {
	                var last = renderResult.lastsForAnimation[storageName][rawIndex];
	                var target;
	
	                if (!last) {
	                    return;
	                }
	
	                if (storageName === 'nodeGroup') {
	                    target = { position: el.position.slice() };
	                    el.position = last.old;
	                } else {
	                    target = { shape: zrUtil.extend({}, el.shape) };
	                    el.setShape(last.old);
	
	                    if (last.fadein) {
	                        el.setStyle('opacity', 0);
	                        target.style = { opacity: 1 };
	                    }
	                    // When animation is stopped for succedent animation starting,
	                    // el.style.opacity might not be 1
	                    else if (el.style.opacity !== 1) {
	                            target.style = { opacity: 1 };
	                        }
	                }
	                animationWrap.add(el, target, duration, easing);
	            });
	        }, this);
	
	        this._state = 'animating';
	
	        animationWrap.done(bind(function () {
	            this._state = 'ready';
	            renderResult.renderFinally();
	        }, this)).start();
	    },
	
	    /**
	     * @private
	     */
	    _resetController: function _resetController(api) {
	        var controller = this._controller;
	
	        // Init controller.
	        if (!controller) {
	            controller = this._controller = new RoamController(api.getZr());
	            controller.enable(this.seriesModel.get('roam'));
	            controller.on('pan', bind(this._onPan, this));
	            controller.on('zoom', bind(this._onZoom, this));
	        }
	
	        controller.rect = new BoundingRect(0, 0, api.getWidth(), api.getHeight());
	    },
	
	    /**
	     * @private
	     */
	    _clearController: function _clearController() {
	        var controller = this._controller;
	        if (controller) {
	            controller.off('pan').off('zoom');
	            controller = null;
	        }
	    },
	
	    /**
	     * @private
	     */
	    _onPan: function _onPan(dx, dy) {
	        this._mayClick = false;
	
	        if (this._state !== 'animating' && (Math.abs(dx) > DRAG_THRESHOLD || Math.abs(dy) > DRAG_THRESHOLD)) {
	            // These param must not be cached.
	            var viewRoot = this.seriesModel.getViewRoot();
	
	            if (!viewRoot) {
	                return;
	            }
	
	            var rootLayout = viewRoot.getLayout();
	
	            if (!rootLayout) {
	                return;
	            }
	
	            this.api.dispatchAction({
	                type: 'treemapMove',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                rootRect: {
	                    x: rootLayout.x + dx, y: rootLayout.y + dy,
	                    width: rootLayout.width, height: rootLayout.height
	                }
	            });
	        }
	    },
	
	    /**
	     * @private
	     */
	    _onZoom: function _onZoom(scale, mouseX, mouseY) {
	        this._mayClick = false;
	
	        if (this._state !== 'animating') {
	            // These param must not be cached.
	            var viewRoot = this.seriesModel.getViewRoot();
	
	            if (!viewRoot) {
	                return;
	            }
	
	            var rootLayout = viewRoot.getLayout();
	
	            if (!rootLayout) {
	                return;
	            }
	
	            var rect = new BoundingRect(rootLayout.x, rootLayout.y, rootLayout.width, rootLayout.height);
	            var layoutInfo = this.seriesModel.layoutInfo;
	
	            // Transform mouse coord from global to containerGroup.
	            mouseX -= layoutInfo.x;
	            mouseY -= layoutInfo.y;
	
	            // Scale root bounding rect.
	            var m = matrix.create();
	            matrix.translate(m, m, [-mouseX, -mouseY]);
	            matrix.scale(m, m, [scale, scale]);
	            matrix.translate(m, m, [mouseX, mouseY]);
	
	            rect.applyTransform(m);
	
	            this.api.dispatchAction({
	                type: 'treemapRender',
	                from: this.uid,
	                seriesId: this.seriesModel.id,
	                rootRect: {
	                    x: rect.x, y: rect.y,
	                    width: rect.width, height: rect.height
	                }
	            });
	        }
	    },
	
	    /**
	     * @private
	     */
	    _initEvents: function _initEvents(containerGroup) {
	        // FIXME
	        // 不用click以及silent的原因是，animate时视图设置silent true来避免click生效，
	        // 但是animate中，按下鼠标，animate结束后（silent设回为false）松开鼠标，
	        // 还是会触发click，期望是不触发。
	
	        // Mousedown occurs when drag start, and mouseup occurs when drag end,
	        // click event should not be triggered in that case.
	
	        containerGroup.on('mousedown', function (e) {
	            this._state === 'ready' && (this._mayClick = true);
	        }, this);
	        containerGroup.on('mouseup', function (e) {
	            if (this._mayClick) {
	                this._mayClick = false;
	                this._state === 'ready' && onClick.call(this, e);
	            }
	        }, this);
	
	        function onClick(e) {
	            var nodeClick = this.seriesModel.get('nodeClick', true);
	
	            if (!nodeClick) {
	                return;
	            }
	
	            var targetInfo = this.findTarget(e.offsetX, e.offsetY);
	
	            if (targetInfo) {
	                if (nodeClick === 'zoomToNode') {
	                    this._zoomToNode(targetInfo);
	                } else if (nodeClick === 'link') {
	                    var node = targetInfo.node;
	                    var itemModel = node.hostTree.data.getItemModel(node.dataIndex);
	                    var link = itemModel.get('link', true);
	                    var linkTarget = itemModel.get('target', true) || 'blank';
	                    link && window.open(link, linkTarget);
	                }
	            }
	        }
	    },
	
	    /**
	     * @private
	     */
	    _renderBreadcrumb: function _renderBreadcrumb(seriesModel, api, targetInfo) {
	        if (!targetInfo) {
	            // Find breadcrumb tail on center of containerGroup.
	            targetInfo = this.findTarget(api.getWidth() / 2, api.getHeight() / 2);
	
	            if (!targetInfo) {
	                targetInfo = { node: seriesModel.getData().tree.root };
	            }
	        }
	
	        (this._breadcrumb || (this._breadcrumb = new Breadcrumb(this.group, bind(onSelect, this)))).render(seriesModel, api, targetInfo.node);
	
	        function onSelect(node) {
	            this._zoomToNode({ node: node });
	        }
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._clearController();
	        this._containerGroup && this._containerGroup.removeAll();
	        this._storage = createStorage();
	        this._state = 'ready';
	        this._breadcrumb && this._breadcrumb.remove();
	    },
	
	    dispose: function dispose() {
	        this._clearController();
	    },
	
	    /**
	     * @private
	     */
	    _zoomToNode: function _zoomToNode(targetInfo) {
	        this.api.dispatchAction({
	            type: 'treemapZoomToNode',
	            from: this.uid,
	            seriesId: this.seriesModel.id,
	            targetNode: targetInfo.node
	        });
	    },
	
	    /**
	     * @public
	     * @param {number} x Global coord x.
	     * @param {number} y Global coord y.
	     * @return {Object} info If not found, return undefined;
	     * @return {number} info.node Target node.
	     * @return {number} info.offsetX x refer to target node.
	     * @return {number} info.offsetY y refer to target node.
	     */
	    findTarget: function findTarget(x, y) {
	        var targetInfo;
	        var viewRoot = this.seriesModel.getViewRoot();
	
	        viewRoot.eachNode({ attr: 'viewChildren', order: 'preorder' }, function (node) {
	            var bgEl = this._storage.background[node.getRawIndex()];
	            // If invisible, there might be no element.
	            if (bgEl) {
	                var point = bgEl.transformCoordToLocal(x, y);
	                var shape = bgEl.shape;
	
	                // For performance consideration, dont use 'getBoundingRect'.
	                if (shape.x <= point[0] && point[0] <= shape.x + shape.width && shape.y <= point[1] && point[1] <= shape.y + shape.height) {
	                    targetInfo = { node: node, offsetX: point[0], offsetY: point[1] };
	                } else {
	                    return false; // Suppress visit subtree.
	                }
	            }
	        }, this);
	
	        return targetInfo;
	    }
	
	});
	
	function createStorage() {
	    return { nodeGroup: [], background: [], content: [] };
	}

/***/ },
/* 403 */
/***/ function(module, exports) {

	'use strict';
	
	var helper = {
	
	    retrieveTargetInfo: function retrieveTargetInfo(payload, seriesModel) {
	        if (!payload || payload.type !== 'treemapZoomToNode') {
	            return;
	        }
	
	        var root = seriesModel.getData().tree.root;
	        var targetNode = payload.targetNode;
	        if (targetNode && root.contains(targetNode)) {
	            return { node: targetNode };
	        }
	
	        var targetNodeId = payload.targetNodeId;
	        if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {
	            return { node: targetNode };
	        }
	
	        return null;
	    }
	
	};
	
	module.exports = helper;

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var layout = __webpack_require__(242);
	var zrUtil = __webpack_require__(224);
	
	var TEXT_PADDING = 8;
	var ITEM_GAP = 8;
	var ARRAY_LENGTH = 5;
	
	function Breadcrumb(containerGroup, onSelect) {
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this.group = new graphic.Group();
	
	    containerGroup.add(this.group);
	
	    /**
	     * @private
	     * @type {Function}
	     */
	    this._onSelect = onSelect || zrUtil.noop;
	}
	
	Breadcrumb.prototype = {
	
	    constructor: Breadcrumb,
	
	    render: function render(seriesModel, api, targetNode) {
	        var model = seriesModel.getModel('breadcrumb');
	        var thisGroup = this.group;
	
	        thisGroup.removeAll();
	
	        if (!model.get('show') || !targetNode) {
	            return;
	        }
	
	        var normalStyleModel = model.getModel('itemStyle.normal');
	        // var emphasisStyleModel = model.getModel('itemStyle.emphasis');
	        var textStyleModel = normalStyleModel.getModel('textStyle');
	
	        var layoutParam = {
	            pos: {
	                left: model.get('left'),
	                right: model.get('right'),
	                top: model.get('top'),
	                bottom: model.get('bottom')
	            },
	            box: {
	                width: api.getWidth(),
	                height: api.getHeight()
	            },
	            emptyItemWidth: model.get('emptyItemWidth'),
	            totalWidth: 0,
	            renderList: []
	        };
	
	        this._prepare(model, targetNode, layoutParam, textStyleModel);
	        this._renderContent(model, targetNode, layoutParam, normalStyleModel, textStyleModel);
	
	        layout.positionGroup(thisGroup, layoutParam.pos, layoutParam.box);
	    },
	
	    /**
	     * Prepare render list and total width
	     * @private
	     */
	    _prepare: function _prepare(model, targetNode, layoutParam, textStyleModel) {
	        for (var node = targetNode; node; node = node.parentNode) {
	            var text = node.getModel().get('name');
	            var textRect = textStyleModel.getTextRect(text);
	            var itemWidth = Math.max(textRect.width + TEXT_PADDING * 2, layoutParam.emptyItemWidth);
	            layoutParam.totalWidth += itemWidth + ITEM_GAP;
	            layoutParam.renderList.push({ node: node, text: text, width: itemWidth });
	        }
	    },
	
	    /**
	     * @private
	     */
	    _renderContent: function _renderContent(model, targetNode, layoutParam, normalStyleModel, textStyleModel) {
	        // Start rendering.
	        var lastX = 0;
	        var emptyItemWidth = layoutParam.emptyItemWidth;
	        var height = model.get('height');
	        var availableSize = layout.getAvailableSize(layoutParam.pos, layoutParam.box);
	        var totalWidth = layoutParam.totalWidth;
	        var renderList = layoutParam.renderList;
	
	        for (var i = renderList.length - 1; i >= 0; i--) {
	            var item = renderList[i];
	            var itemWidth = item.width;
	            var text = item.text;
	
	            // Hdie text and shorten width if necessary.
	            if (totalWidth > availableSize.width) {
	                totalWidth -= itemWidth - emptyItemWidth;
	                itemWidth = emptyItemWidth;
	                text = '';
	            }
	
	            this.group.add(new graphic.Polygon({
	                shape: {
	                    points: makeItemPoints(lastX, 0, itemWidth, height, i === renderList.length - 1, i === 0)
	                },
	                style: zrUtil.defaults(normalStyleModel.getItemStyle(), {
	                    lineJoin: 'bevel',
	                    text: text,
	                    textFill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                }),
	                onclick: zrUtil.bind(this._onSelect, this, item.node)
	            }));
	
	            lastX += itemWidth + ITEM_GAP;
	        }
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        this.group.removeAll();
	    }
	};
	
	function makeItemPoints(x, y, itemWidth, itemHeight, head, tail) {
	    var points = [[head ? x : x - ARRAY_LENGTH, y], [x + itemWidth, y], [x + itemWidth, y + itemHeight], [head ? x : x - ARRAY_LENGTH, y + itemHeight]];
	    !tail && points.splice(2, 0, [x + itemWidth + ARRAY_LENGTH, y + itemHeight / 2]);
	    !head && points.push([x, y + itemHeight / 2]);
	    return points;
	}
	
	module.exports = Breadcrumb;

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	/**
	 * @param {number} [time=500] Time in ms
	 * @param {string} [easing='linear']
	 * @param {number} [delay=0]
	 * @param {Function} [callback]
	 *
	 * @example
	 *  // Animate position
	 *  animation
	 *      .createWrap()
	 *      .add(el1, {position: [10, 10]})
	 *      .add(el2, {shape: {width: 500}, style: {fill: 'red'}}, 400)
	 *      .done(function () { // done })
	 *      .start('cubicOut');
	 */
	function createWrap() {
	
	    var storage = [];
	    var elExistsMap = {};
	    var doneCallback;
	
	    return {
	
	        /**
	         * Caution: a el can only be added once, otherwise 'done'
	         * might not be called. This method checks this (by el.id),
	         * suppresses adding and returns false when existing el found.
	         *
	         * @param {modele:zrender/Element} el
	         * @param {Object} target
	         * @param {number} [time=500]
	         * @param {number} [delay=0]
	         * @param {string} [easing='linear']
	         * @return {boolean} Whether adding succeeded.
	         *
	         * @example
	         *     add(el, target, time, delay, easing);
	         *     add(el, target, time, easing);
	         *     add(el, target, time);
	         *     add(el, target);
	         */
	        add: function add(el, target, time, delay, easing) {
	            if (zrUtil.isString(delay)) {
	                easing = delay;
	                delay = 0;
	            }
	
	            if (elExistsMap[el.id]) {
	                return false;
	            }
	            elExistsMap[el.id] = 1;
	
	            storage.push({ el: el, target: target, time: time, delay: delay, easing: easing });
	
	            return true;
	        },
	
	        /**
	         * Only execute when animation finished. Will not execute when any
	         * of 'stop' or 'stopAnimation' called.
	         *
	         * @param {Function} callback
	         */
	        done: function done(callback) {
	            doneCallback = callback;
	            return this;
	        },
	
	        /**
	         * Will stop exist animation firstly.
	         */
	        start: function start() {
	            var count = storage.length;
	
	            for (var i = 0, len = storage.length; i < len; i++) {
	                var item = storage[i];
	                item.el.animateTo(item.target, item.time, item.delay, item.easing, done);
	            }
	
	            return this;
	
	            function done() {
	                count--;
	                if (!count) {
	                    storage.length = 0;
	                    elExistsMap = {};
	                    doneCallback && doneCallback();
	                }
	            }
	        }
	    };
	}
	
	module.exports = { createWrap: createWrap };

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Treemap action
	 */
	
	var echarts = __webpack_require__(222);
	
	var noop = function noop() {};
	
	echarts.registerAction({ type: 'treemapZoomToNode', update: 'updateView' }, noop);
	echarts.registerAction({ type: 'treemapRender', update: 'updateView' }, noop);
	echarts.registerAction({ type: 'treemapMove', update: 'updateView' }, noop);

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var VisualMapping = __webpack_require__(408);
	var zrColor = __webpack_require__(259);
	var zrUtil = __webpack_require__(224);
	var isArray = zrUtil.isArray;
	
	var ITEM_STYLE_NORMAL = 'itemStyle.normal';
	
	module.exports = function (ecModel, payload) {
	
	    var condition = { mainType: 'series', subType: 'treemap', query: payload };
	    ecModel.eachComponent(condition, function (seriesModel) {
	
	        var tree = seriesModel.getData().tree;
	        var root = tree.root;
	        var seriesItemStyleModel = seriesModel.getModel(ITEM_STYLE_NORMAL);
	
	        if (root.isRemoved()) {
	            return;
	        }
	
	        var levelItemStyles = zrUtil.map(tree.levelModels, function (levelModel) {
	            return levelModel ? levelModel.get(ITEM_STYLE_NORMAL) : null;
	        });
	
	        travelTree(root, {}, levelItemStyles, seriesItemStyleModel, seriesModel.getViewRoot().getAncestors(), seriesModel);
	    });
	};
	
	function travelTree(node, designatedVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel) {
	    var nodeModel = node.getModel();
	    var nodeLayout = node.getLayout();
	
	    // Optimize
	    if (nodeLayout.invisible) {
	        return;
	    }
	
	    var nodeItemStyleModel = node.getModel(ITEM_STYLE_NORMAL);
	    var levelItemStyle = levelItemStyles[node.depth];
	    var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel);
	
	    // calculate border color
	    var borderColor = nodeItemStyleModel.get('borderColor');
	    var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');
	    var thisNodeColor;
	    if (borderColorSaturation != null) {
	        // For performance, do not always execute 'calculateColor'.
	        thisNodeColor = calculateColor(visuals, node);
	        borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);
	    }
	    node.setVisual('borderColor', borderColor);
	
	    var viewChildren = node.viewChildren;
	    if (!viewChildren || !viewChildren.length) {
	        thisNodeColor = calculateColor(visuals, node);
	        // Apply visual to this node.
	        node.setVisual('color', thisNodeColor);
	    } else {
	        var mapping = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren);
	        // Designate visual to children.
	        zrUtil.each(viewChildren, function (child, index) {
	            // If higher than viewRoot, only ancestors of viewRoot is needed to visit.
	            if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {
	                var childVisual = mapVisual(nodeModel, visuals, child, index, mapping, seriesModel);
	                travelTree(child, childVisual, levelItemStyles, seriesItemStyleModel, viewRootAncestors, seriesModel);
	            }
	        });
	    }
	}
	
	function buildVisuals(nodeItemStyleModel, designatedVisual, levelItemStyle, seriesItemStyleModel) {
	    var visuals = zrUtil.extend({}, designatedVisual);
	
	    zrUtil.each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {
	        // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel
	        var val = nodeItemStyleModel.get(visualName, true); // Ignore parent
	        val == null && levelItemStyle && (val = levelItemStyle[visualName]);
	        val == null && (val = designatedVisual[visualName]);
	        val == null && (val = seriesItemStyleModel.get(visualName));
	
	        val != null && (visuals[visualName] = val);
	    });
	
	    return visuals;
	}
	
	function calculateColor(visuals) {
	    var color = getValueVisualDefine(visuals, 'color');
	
	    if (color) {
	        var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');
	        var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');
	        if (colorSaturation) {
	            color = zrColor.modifyHSL(color, null, null, colorSaturation);
	        }
	        if (colorAlpha) {
	            color = zrColor.modifyAlpha(color, colorAlpha);
	        }
	
	        return color;
	    }
	}
	
	function calculateBorderColor(borderColorSaturation, thisNodeColor) {
	    return thisNodeColor != null ? zrColor.modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;
	}
	
	function getValueVisualDefine(visuals, name) {
	    var value = visuals[name];
	    if (value != null && value !== 'none') {
	        return value;
	    }
	}
	
	function buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {
	    if (!viewChildren || !viewChildren.length) {
	        return;
	    }
	
	    var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));
	
	    if (!rangeVisual) {
	        return;
	    }
	
	    var colorMappingBy = nodeModel.get('colorMappingBy');
	    var opt = {
	        type: rangeVisual.name,
	        dataExtent: nodeLayout.dataExtent,
	        visual: rangeVisual.range
	    };
	    if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {
	        opt.mappingMethod = 'category';
	        opt.loop = true;
	        // categories is ordinal, so do not set opt.categories.
	    } else {
	            opt.mappingMethod = 'linear';
	        }
	
	    var mapping = new VisualMapping(opt);
	    mapping.__drColorMappingBy = colorMappingBy;
	
	    return mapping;
	}
	
	// Notice: If we dont have the attribute 'colorRange', but only use
	// attribute 'color' to represent both concepts of 'colorRange' and 'color',
	// (It means 'colorRange' when 'color' is Array, means 'color' when not array),
	// this problem will be encountered:
	// If a level-1 node dont have children, and its siblings has children,
	// and colorRange is set on level-1, then the node can not be colored.
	// So we separate 'colorRange' and 'color' to different attributes.
	function getRangeVisual(nodeModel, name) {
	    // 'colorRange', 'colorARange', 'colorSRange'.
	    // If not exsits on this node, fetch from levels and series.
	    var range = nodeModel.get(name);
	    return isArray(range) && range.length ? { name: name, range: range } : null;
	}
	
	function mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {
	    var childVisuals = zrUtil.extend({}, visuals);
	
	    if (mapping) {
	        var mappingType = mapping.type;
	        var colorMappingBy = mappingType === 'color' && mapping.__drColorMappingBy;
	        var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));
	
	        childVisuals[mappingType] = mapping.mapValueToVisual(value);
	    }
	
	    return childVisuals;
	}

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Visual mapping.
	 */
	
	var zrUtil = __webpack_require__(224);
	var zrColor = __webpack_require__(259);
	var linearMap = __webpack_require__(228).linearMap;
	var each = zrUtil.each;
	var isObject = zrUtil.isObject;
	
	var CATEGORY_DEFAULT_VISUAL_INDEX = -1;
	
	function linearMapArray(val, domain, range, clamp) {
	    if (zrUtil.isArray(val)) {
	        return zrUtil.map(val, function (v) {
	            return linearMap(v, domain, range, clamp);
	        });
	    }
	    return linearMap(val, domain, range, clamp);
	}
	/**
	 * @param {Object} option
	 * @param {string} [option.type] See visualHandlers.
	 * @param {string} [option.mappingMethod] 'linear' or 'piecewise' or 'category'
	 * @param {Array.<number>=} [option.dataExtent] [minExtent, maxExtent],
	 *                                              required when mappingMethod is 'linear'
	 * @param {Array.<Object>=} [option.pieceList] [
	 *                                             {value: someValue},
	 *                                             {interval: [min1, max1], visual: {...}},
	 *                                             {interval: [min2, max2]}
	 *                                             ],
	 *                                            required when mappingMethod is 'piecewise'.
	 *                                            Visual for only each piece can be specified.
	 * @param {Array.<string|Object>=} [option.categories] ['cate1', 'cate2']
	 *                                            required when mappingMethod is 'category'.
	 *                                            If no option.categories, it represents
	 *                                            categories is [0, 1, 2, ...].
	 * @param {boolean} [option.loop=false] Whether loop mapping when mappingMethod is 'category'.
	 * @param {(Array|Object|*)} [option.visual]  Visual data.
	 *                                            when mappingMethod is 'category',
	 *                                            visual data can be array or object
	 *                                            (like: {cate1: '#222', none: '#fff'})
	 *                                            or primary types (which represents
	 *                                            defualt category visual), otherwise visual
	 *                                            can only be array.
	 *
	 */
	var VisualMapping = function VisualMapping(option) {
	    var mappingMethod = option.mappingMethod;
	    var visualType = option.type;
	
	    /**
	     * @readOnly
	     * @type {string}
	     */
	    this.type = visualType;
	
	    /**
	     * @readOnly
	     * @type {string}
	     */
	    this.mappingMethod = mappingMethod;
	
	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    var thisOption = this.option = zrUtil.clone(option);
	
	    /**
	     * @private
	     * @type {Function}
	     */
	    this._normalizeData = normalizers[mappingMethod];
	
	    /**
	     * @private
	     * @type {Function}
	     */
	    this._getSpecifiedVisual = zrUtil.bind(specifiedVisualGetters[mappingMethod], this, visualType);
	
	    zrUtil.extend(this, visualHandlers[visualType]);
	
	    if (mappingMethod === 'piecewise') {
	        preprocessForPiecewise(thisOption);
	    }
	    if (mappingMethod === 'category') {
	        preprocessForCategory(thisOption);
	    }
	};
	
	VisualMapping.prototype = {
	
	    constructor: VisualMapping,
	
	    applyVisual: null,
	
	    isValueActive: null,
	
	    mapValueToVisual: null,
	
	    getNormalizer: function getNormalizer() {
	        return zrUtil.bind(this._normalizeData, this);
	    }
	};
	
	var visualHandlers = VisualMapping.visualHandlers = {
	
	    color: {
	
	        applyVisual: defaultApplyColor,
	
	        /**
	         * Create a mapper function
	         * @return {Function}
	         */
	        getColorMapper: function getColorMapper() {
	            var visual = isCategory(this) ? this.option.visual : zrUtil.map(this.option.visual, zrColor.parse);
	            return zrUtil.bind(isCategory(this) ? function (value, isNormalized) {
	                !isNormalized && (value = this._normalizeData(value));
	                return getVisualForCategory(this, visual, value);
	            } : function (value, isNormalized, out) {
	                // If output rgb array
	                // which will be much faster and useful in pixel manipulation
	                var returnRGBArray = !!out;
	                !isNormalized && (value = this._normalizeData(value));
	                out = zrColor.fastMapToColor(value, visual, out);
	                return returnRGBArray ? out : zrUtil.stringify(out, 'rgba');
	            }, this);
	        },
	
	        // value:
	        // (1) {number}
	        // (2) {Array.<number>} Represents a interval, for colorStops.
	        // Return type:
	        // (1) {string} color value like '#444'
	        // (2) {Array.<Object>} colorStops,
	        // like [{color: '#fff', offset: 0}, {color: '#444', offset: 1}]
	        // where offset is between 0 and 1.
	        mapValueToVisual: function mapValueToVisual(value) {
	            var visual = this.option.visual;
	
	            if (zrUtil.isArray(value)) {
	                value = [this._normalizeData(value[0]), this._normalizeData(value[1])];
	
	                // For creating gradient color list.
	                return zrColor.mapIntervalToColor(value, visual);
	            } else {
	                var normalized = this._normalizeData(value);
	                var result = this._getSpecifiedVisual(value);
	
	                if (result == null) {
	                    result = isCategory(this) ? getVisualForCategory(this, visual, normalized) : zrColor.mapToColor(normalized, visual);
	                }
	
	                return result;
	            }
	        }
	    },
	
	    colorHue: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, value);
	    }),
	
	    colorSaturation: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, null, value);
	    }),
	
	    colorLightness: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyHSL(color, null, null, value);
	    }),
	
	    colorAlpha: makePartialColorVisualHandler(function (color, value) {
	        return zrColor.modifyAlpha(color, value);
	    }),
	
	    symbol: {
	        applyVisual: function applyVisual(value, getter, setter) {
	            var symbolCfg = this.mapValueToVisual(value);
	            if (zrUtil.isString(symbolCfg)) {
	                setter('symbol', symbolCfg);
	            } else if (isObject(symbolCfg)) {
	                for (var name in symbolCfg) {
	                    if (symbolCfg.hasOwnProperty(name)) {
	                        setter(name, symbolCfg[name]);
	                    }
	                }
	            }
	        },
	
	        mapValueToVisual: function mapValueToVisual(value) {
	            var normalized = this._normalizeData(value);
	            var result = this._getSpecifiedVisual(value);
	            var visual = this.option.visual;
	
	            if (result == null) {
	                result = isCategory(this) ? getVisualForCategory(this, visual, normalized) : arrayGetByNormalizedValue(visual, normalized) || {};
	            }
	
	            return result;
	        }
	    },
	
	    symbolSize: {
	        applyVisual: function applyVisual(value, getter, setter) {
	            setter('symbolSize', this.mapValueToVisual(value));
	        },
	
	        mapValueToVisual: function mapValueToVisual(value) {
	            var normalized = this._normalizeData(value);
	            var result = this._getSpecifiedVisual(value);
	            var visual = this.option.visual;
	
	            if (result == null) {
	                result = isCategory(this) ? getVisualForCategory(this, visual, normalized) : linearMapArray(normalized, [0, 1], visual, true);
	            }
	            return result;
	        }
	    }
	};
	
	function preprocessForPiecewise(thisOption) {
	    var pieceList = thisOption.pieceList;
	    thisOption.hasSpecialVisual = false;
	
	    zrUtil.each(pieceList, function (piece, index) {
	        piece.originIndex = index;
	        if (piece.visual) {
	            thisOption.hasSpecialVisual = true;
	        }
	    });
	}
	
	function preprocessForCategory(thisOption) {
	    // Hash categories.
	    var categories = thisOption.categories;
	    var visual = thisOption.visual;
	    var isVisualArray = zrUtil.isArray(visual);
	
	    if (!categories) {
	        if (!isVisualArray) {
	            // visual should be array when no categories.
	            throw new Error();
	        } else {
	            return;
	        }
	    }
	
	    var categoryMap = thisOption.categoryMap = {};
	    each(categories, function (cate, index) {
	        categoryMap[cate] = index;
	    });
	
	    // Process visual map input.
	    if (!isVisualArray) {
	        var visualArr = [];
	
	        if (zrUtil.isObject(visual)) {
	            each(visual, function (v, cate) {
	                var index = categoryMap[cate];
	                visualArr[index != null ? index : CATEGORY_DEFAULT_VISUAL_INDEX] = v;
	            });
	        } else {
	            // Is primary type, represents default visual.
	            visualArr[CATEGORY_DEFAULT_VISUAL_INDEX] = visual;
	        }
	
	        visual = thisOption.visual = visualArr;
	    }
	
	    // Remove categories that has no visual,
	    // then we can mapping them to CATEGORY_DEFAULT_VISUAL_INDEX.
	    for (var i = categories.length - 1; i >= 0; i--) {
	        if (visual[i] == null) {
	            delete categoryMap[categories[i]];
	            categories.pop();
	        }
	    }
	}
	
	function makePartialColorVisualHandler(applyValue) {
	    return {
	
	        applyVisual: function applyVisual(value, getter, setter) {
	            // color can be {string} or {Array.<Object>} (for gradient color stops)
	            var color = getter('color');
	            var isArrayValue = zrUtil.isArray(value);
	            value = isArrayValue ? [this.mapValueToVisual(value[0]), this.mapValueToVisual(value[1])] : this.mapValueToVisual(value);
	
	            if (zrUtil.isArray(color)) {
	                for (var i = 0, len = color.length; i < len; i++) {
	                    color[i].color = applyValue(color[i].color, isArrayValue ? value[i] : value);
	                }
	            } else {
	                // Must not be array value
	                setter('color', applyValue(color, value));
	            }
	        },
	
	        mapValueToVisual: function mapValueToVisual(value) {
	            var normalized = this._normalizeData(value);
	            var result = this._getSpecifiedVisual(value);
	            var visual = this.option.visual;
	
	            if (result == null) {
	                result = isCategory(this) ? getVisualForCategory(this, visual, normalized) : linearMapArray(normalized, [0, 1], visual, true);
	            }
	            return result;
	        }
	    };
	}
	
	function arrayGetByNormalizedValue(arr, normalized) {
	    return arr[Math.round(linearMapArray(normalized, [0, 1], [0, arr.length - 1], true))];
	}
	
	function defaultApplyColor(value, getter, setter) {
	    setter('color', this.mapValueToVisual(value));
	}
	
	function getVisualForCategory(me, visual, normalized) {
	    return visual[me.option.loop && normalized !== CATEGORY_DEFAULT_VISUAL_INDEX ? normalized % visual.length : normalized];
	}
	
	function isCategory(me) {
	    return me.option.mappingMethod === 'category';
	}
	
	var normalizers = {
	
	    linear: function linear(value) {
	        return linearMapArray(value, this.option.dataExtent, [0, 1], true);
	    },
	
	    piecewise: function piecewise(value) {
	        var pieceList = this.option.pieceList;
	        var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	        if (pieceIndex != null) {
	            return linearMapArray(pieceIndex, [0, pieceList.length - 1], [0, 1], true);
	        }
	    },
	
	    category: function category(value) {
	        var index = this.option.categories ? this.option.categoryMap[value] : value; // ordinal
	        return index == null ? CATEGORY_DEFAULT_VISUAL_INDEX : index;
	    }
	};
	
	// FIXME
	// refactor
	var specifiedVisualGetters = {
	
	    // Linear do not support this feature.
	    linear: zrUtil.noop,
	
	    piecewise: function piecewise(visualType, value) {
	        var thisOption = this.option;
	        var pieceList = thisOption.pieceList;
	        if (thisOption.hasSpecialVisual) {
	            var pieceIndex = VisualMapping.findPieceIndex(value, pieceList);
	            var piece = pieceList[pieceIndex];
	            if (piece && piece.visual) {
	                return piece.visual[visualType];
	            }
	        }
	    },
	
	    // Category do not need to support this feature.
	    // Visual can be set in visualMap.inRange or
	    // visualMap.outOfRange directly.
	    category: zrUtil.noop
	};
	
	/**
	 * @public
	 */
	VisualMapping.addVisualHandler = function (name, handler) {
	    visualHandlers[name] = handler;
	};
	
	/**
	 * @public
	 */
	VisualMapping.isValidType = function (visualType) {
	    return visualHandlers.hasOwnProperty(visualType);
	};
	
	/**
	 * Convinent method.
	 * Visual can be Object or Array or primary type.
	 *
	 * @public
	 */
	VisualMapping.eachVisual = function (visual, callback, context) {
	    if (zrUtil.isObject(visual)) {
	        zrUtil.each(visual, callback, context);
	    } else {
	        callback.call(context, visual);
	    }
	};
	
	VisualMapping.mapVisual = function (visual, callback, context) {
	    var isPrimary;
	    var newVisual = zrUtil.isArray(visual) ? [] : zrUtil.isObject(visual) ? {} : (isPrimary = true, null);
	
	    VisualMapping.eachVisual(visual, function (v, key) {
	        var newVal = callback.call(context, v, key);
	        isPrimary ? newVisual = newVal : newVisual[key] = newVal;
	    });
	    return newVisual;
	};
	
	/**
	 * 'color', 'colorSaturation', 'colorAlpha', ... are in the same visualCluster named 'color'.
	 * Other visuals are in the cluster named as the same as theirselves.
	 *
	 * @public
	 * @param {string} visualType
	 * @param {string} visualCluster
	 * @return {boolean}
	 */
	VisualMapping.isInVisualCluster = function (visualType, visualCluster) {
	    return visualCluster === 'color' ? !!(visualType && visualType.indexOf(visualCluster) === 0) : visualType === visualCluster;
	};
	
	/**
	 * @public
	 * @param {Object} obj
	 * @return {Oject} new object containers visual values.
	 *                 If no visuals, return null.
	 */
	VisualMapping.retrieveVisuals = function (obj) {
	    var ret = {};
	    var hasVisual;
	
	    obj && each(visualHandlers, function (h, visualType) {
	        if (obj.hasOwnProperty(visualType)) {
	            ret[visualType] = obj[visualType];
	            hasVisual = true;
	        }
	    });
	
	    return hasVisual ? ret : null;
	};
	
	/**
	 * Give order to visual types, considering colorSaturation, colorAlpha depends on color.
	 *
	 * @public
	 * @param {(Object|Array)} visualTypes If Object, like: {color: ..., colorSaturation: ...}
	 *                                     IF Array, like: ['color', 'symbol', 'colorSaturation']
	 * @return {Array.<string>} Sorted visual types.
	 */
	VisualMapping.prepareVisualTypes = function (visualTypes) {
	    if (isObject(visualTypes)) {
	        var types = [];
	        each(visualTypes, function (item, type) {
	            types.push(type);
	        });
	        visualTypes = types;
	    } else if (zrUtil.isArray(visualTypes)) {
	        visualTypes = visualTypes.slice();
	    } else {
	        return [];
	    }
	
	    visualTypes.sort(function (type1, type2) {
	        // color should be front of colorSaturation, colorAlpha, ...
	        // symbol and symbolSize do not matter.
	        return type2 === 'color' && type1 !== 'color' && type1.indexOf('color') === 0 ? 1 : -1;
	    });
	
	    return visualTypes;
	};
	
	/**
	 * @public {Array.<Object>} [{value: ..., interval: [min, max]}, ...]
	 * @return {number} index
	 */
	VisualMapping.findPieceIndex = function (value, pieceList) {
	    // value has high priority.
	    for (var i = 0, len = pieceList.length; i < len; i++) {
	        var piece = pieceList[i];
	        if (piece.value != null && piece.value === value) {
	            return i;
	        }
	    }
	
	    for (var i = 0, len = pieceList.length; i < len; i++) {
	        var piece = pieceList[i];
	        var interval = piece.interval;
	        if (interval) {
	            if (interval[0] === -Infinity) {
	                if (value < interval[1]) {
	                    return i;
	                }
	            } else if (interval[1] === Infinity) {
	                if (interval[0] < value) {
	                    return i;
	                }
	            } else if (piece.interval[0] <= value && value <= piece.interval[1]) {
	                return i;
	            }
	        }
	    }
	};
	
	module.exports = VisualMapping;

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var mathMax = Math.max;
	var mathMin = Math.min;
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var layout = __webpack_require__(242);
	var parsePercent = numberUtil.parsePercent;
	var retrieveValue = zrUtil.retrieve;
	var BoundingRect = __webpack_require__(236);
	var helper = __webpack_require__(403);
	
	/**
	 * @public
	 */
	function update(ecModel, api, payload) {
	    // Layout result in each node:
	    // {x, y, width, height, area, borderWidth}
	    var condition = { mainType: 'series', subType: 'treemap', query: payload };
	    ecModel.eachComponent(condition, function (seriesModel) {
	
	        var ecWidth = api.getWidth();
	        var ecHeight = api.getHeight();
	
	        var size = seriesModel.get('size') || []; // Compatible with ec2.
	        var containerWidth = parsePercent(retrieveValue(seriesModel.get('width'), size[0]), ecWidth);
	        var containerHeight = parsePercent(retrieveValue(seriesModel.get('height'), size[1]), ecHeight);
	
	        var layoutInfo = layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	
	        // Fetch payload info.
	        var payloadType = payload && payload.type;
	        var targetInfo = helper.retrieveTargetInfo(payload, seriesModel);
	        var rootRect = payloadType === 'treemapRender' || payloadType === 'treemapMove' ? payload.rootRect : null;
	        var viewRoot = seriesModel.getViewRoot();
	
	        if (payloadType !== 'treemapMove') {
	            var rootSize = payloadType === 'treemapZoomToNode' ? estimateRootSize(seriesModel, targetInfo, containerWidth, containerHeight) : rootRect ? [rootRect.width, rootRect.height] : [containerWidth, containerHeight];
	
	            var sort = seriesModel.get('sort');
	            if (sort && sort !== 'asc' && sort !== 'desc') {
	                sort = 'desc';
	            }
	            var options = {
	                squareRatio: seriesModel.get('squareRatio'),
	                sort: sort
	            };
	
	            viewRoot.setLayout({
	                x: 0, y: 0,
	                width: rootSize[0], height: rootSize[1],
	                area: rootSize[0] * rootSize[1]
	            });
	
	            squarify(viewRoot, options);
	        }
	
	        // Set root position
	        viewRoot.setLayout(calculateRootPosition(layoutInfo, rootRect, targetInfo), true);
	
	        seriesModel.setLayoutInfo(layoutInfo);
	
	        // Optimize
	        // FIXME
	        // 现在没有clip功能，暂时取ec高宽。
	        prunning(viewRoot, new BoundingRect(-layoutInfo.x, -layoutInfo.y, ecWidth, ecHeight));
	    });
	}
	
	/**
	 * Layout treemap with squarify algorithm.
	 * @see https://graphics.ethz.ch/teaching/scivis_common/Literature/squarifiedTreeMaps.pdf
	 * @see https://github.com/mbostock/d3/blob/master/src/layout/treemap.js
	 *
	 * @protected
	 * @param {module:echarts/data/Tree~TreeNode} node
	 * @param {Object} options
	 * @param {string} options.sort 'asc' or 'desc'
	 * @param {boolean} options.hideChildren
	 * @param {number} options.squareRatio
	 */
	function squarify(node, options) {
	    var width;
	    var height;
	
	    if (node.isRemoved()) {
	        return;
	    }
	
	    var thisLayout = node.getLayout();
	    width = thisLayout.width;
	    height = thisLayout.height;
	
	    // Considering border and gap
	    var itemStyleModel = node.getModel('itemStyle.normal');
	    var borderWidth = itemStyleModel.get('borderWidth');
	    var halfGapWidth = itemStyleModel.get('gapWidth') / 2;
	    var layoutOffset = borderWidth - halfGapWidth;
	    var nodeModel = node.getModel();
	
	    node.setLayout({ borderWidth: borderWidth }, true);
	
	    width = mathMax(width - 2 * layoutOffset, 0);
	    height = mathMax(height - 2 * layoutOffset, 0);
	
	    var totalArea = width * height;
	    var viewChildren = initChildren(node, nodeModel, totalArea, options);
	
	    if (!viewChildren.length) {
	        return;
	    }
	
	    var rect = { x: layoutOffset, y: layoutOffset, width: width, height: height };
	    var rowFixedLength = mathMin(width, height);
	    var best = Infinity; // the best row score so far
	    var row = [];
	    row.area = 0;
	
	    for (var i = 0, len = viewChildren.length; i < len;) {
	        var child = viewChildren[i];
	
	        row.push(child);
	        row.area += child.getLayout().area;
	        var score = worst(row, rowFixedLength, options.squareRatio);
	
	        // continue with this orientation
	        if (score <= best) {
	            i++;
	            best = score;
	        }
	        // abort, and try a different orientation
	        else {
	                row.area -= row.pop().getLayout().area;
	                position(row, rowFixedLength, rect, halfGapWidth, false);
	                rowFixedLength = mathMin(rect.width, rect.height);
	                row.length = row.area = 0;
	                best = Infinity;
	            }
	    }
	
	    if (row.length) {
	        position(row, rowFixedLength, rect, halfGapWidth, true);
	    }
	
	    // Update option carefully.
	    var hideChildren;
	    if (!options.hideChildren) {
	        var childrenVisibleMin = nodeModel.get('childrenVisibleMin');
	        if (childrenVisibleMin != null && totalArea < childrenVisibleMin) {
	            hideChildren = true;
	        }
	    }
	
	    for (var i = 0, len = viewChildren.length; i < len; i++) {
	        var childOption = zrUtil.extend({
	            hideChildren: hideChildren
	        }, options);
	
	        squarify(viewChildren[i], childOption);
	    }
	}
	
	/**
	 * Set area to each child, and calculate data extent for visual coding.
	 */
	function initChildren(node, nodeModel, totalArea, options) {
	    var viewChildren = node.children || [];
	    var orderBy = options.sort;
	    orderBy !== 'asc' && orderBy !== 'desc' && (orderBy = null);
	
	    if (options.hideChildren) {
	        return node.viewChildren = [];
	    }
	
	    // Sort children, order by desc.
	    viewChildren = zrUtil.filter(viewChildren, function (child) {
	        return !child.isRemoved();
	    });
	
	    sort(viewChildren, orderBy);
	
	    var info = statistic(nodeModel, viewChildren, orderBy);
	
	    if (info.sum === 0) {
	        return node.viewChildren = [];
	    }
	
	    info.sum = filterByThreshold(nodeModel, totalArea, info.sum, orderBy, viewChildren);
	
	    if (info.sum === 0) {
	        return node.viewChildren = [];
	    }
	
	    // Set area to each child.
	    for (var i = 0, len = viewChildren.length; i < len; i++) {
	        var area = viewChildren[i].getValue() / info.sum * totalArea;
	        // Do not use setLayout({...}, true), because it is needed to clear last layout.
	        viewChildren[i].setLayout({ area: area });
	    }
	
	    node.viewChildren = viewChildren;
	    node.setLayout({ dataExtent: info.dataExtent }, true);
	
	    return viewChildren;
	}
	
	/**
	 * Consider 'visibleMin'. Modify viewChildren and get new sum.
	 */
	function filterByThreshold(nodeModel, totalArea, sum, orderBy, orderedChildren) {
	
	    // visibleMin is not supported yet when no option.sort.
	    if (!orderBy) {
	        return sum;
	    }
	
	    var visibleMin = nodeModel.get('visibleMin');
	    var len = orderedChildren.length;
	    var deletePoint = len;
	
	    // Always travel from little value to big value.
	    for (var i = len - 1; i >= 0; i--) {
	        var value = orderedChildren[orderBy === 'asc' ? len - i - 1 : i].getValue();
	
	        if (value / sum * totalArea < visibleMin) {
	            deletePoint = i;
	            sum -= value;
	        }
	    }
	
	    orderBy === 'asc' ? orderedChildren.splice(0, len - deletePoint) : orderedChildren.splice(deletePoint, len - deletePoint);
	
	    return sum;
	}
	
	/**
	 * Sort
	 */
	function sort(viewChildren, orderBy) {
	    if (orderBy) {
	        viewChildren.sort(function (a, b) {
	            return orderBy === 'asc' ? a.getValue() - b.getValue() : b.getValue() - a.getValue();
	        });
	    }
	    return viewChildren;
	}
	
	/**
	 * Statistic
	 */
	function statistic(nodeModel, children, orderBy) {
	    // Calculate sum.
	    var sum = 0;
	    for (var i = 0, len = children.length; i < len; i++) {
	        sum += children[i].getValue();
	    }
	
	    // Statistic data extent for latter visual coding.
	    // Notice: data extent should be calculate based on raw children
	    // but not filtered view children, otherwise visual mapping will not
	    // be stable when zoom (where children is filtered by visibleMin).
	
	    var dimension = nodeModel.get('visualDimension');
	    var dataExtent;
	
	    // The same as area dimension.
	    if (!children || !children.length) {
	        dataExtent = [NaN, NaN];
	    } else if (dimension === 'value' && orderBy) {
	        dataExtent = [children[children.length - 1].getValue(), children[0].getValue()];
	        orderBy === 'asc' && dataExtent.reverse();
	    }
	    // Other dimension.
	    else {
	            var dataExtent = [Infinity, -Infinity];
	            zrUtil.each(children, function (child) {
	                var value = child.getValue(dimension);
	                value < dataExtent[0] && (dataExtent[0] = value);
	                value > dataExtent[1] && (dataExtent[1] = value);
	            });
	        }
	
	    return { sum: sum, dataExtent: dataExtent };
	}
	
	/**
	 * Computes the score for the specified row,
	 * as the worst aspect ratio.
	 */
	function worst(row, rowFixedLength, ratio) {
	    var areaMax = 0;
	    var areaMin = Infinity;
	
	    for (var i = 0, area, len = row.length; i < len; i++) {
	        area = row[i].getLayout().area;
	        if (area) {
	            area < areaMin && (areaMin = area);
	            area > areaMax && (areaMax = area);
	        }
	    }
	
	    var squareArea = row.area * row.area;
	    var f = rowFixedLength * rowFixedLength * ratio;
	
	    return squareArea ? mathMax(f * areaMax / squareArea, squareArea / (f * areaMin)) : Infinity;
	}
	
	/**
	 * Positions the specified row of nodes. Modifies `rect`.
	 */
	function position(row, rowFixedLength, rect, halfGapWidth, flush) {
	    // When rowFixedLength === rect.width,
	    // it is horizontal subdivision,
	    // rowFixedLength is the width of the subdivision,
	    // rowOtherLength is the height of the subdivision,
	    // and nodes will be positioned from left to right.
	
	    // wh[idx0WhenH] means: when horizontal,
	    //      wh[idx0WhenH] => wh[0] => 'width'.
	    //      xy[idx1WhenH] => xy[1] => 'y'.
	    var idx0WhenH = rowFixedLength === rect.width ? 0 : 1;
	    var idx1WhenH = 1 - idx0WhenH;
	    var xy = ['x', 'y'];
	    var wh = ['width', 'height'];
	
	    var last = rect[xy[idx0WhenH]];
	    var rowOtherLength = rowFixedLength ? row.area / rowFixedLength : 0;
	
	    if (flush || rowOtherLength > rect[wh[idx1WhenH]]) {
	        rowOtherLength = rect[wh[idx1WhenH]]; // over+underflow
	    }
	    for (var i = 0, rowLen = row.length; i < rowLen; i++) {
	        var node = row[i];
	        var nodeLayout = {};
	        var step = rowOtherLength ? node.getLayout().area / rowOtherLength : 0;
	
	        var wh1 = nodeLayout[wh[idx1WhenH]] = mathMax(rowOtherLength - 2 * halfGapWidth, 0);
	
	        // We use Math.max/min to avoid negative width/height when considering gap width.
	        var remain = rect[xy[idx0WhenH]] + rect[wh[idx0WhenH]] - last;
	        var modWH = i === rowLen - 1 || remain < step ? remain : step;
	        var wh0 = nodeLayout[wh[idx0WhenH]] = mathMax(modWH - 2 * halfGapWidth, 0);
	
	        nodeLayout[xy[idx1WhenH]] = rect[xy[idx1WhenH]] + mathMin(halfGapWidth, wh1 / 2);
	        nodeLayout[xy[idx0WhenH]] = last + mathMin(halfGapWidth, wh0 / 2);
	
	        last += modWH;
	        node.setLayout(nodeLayout, true);
	    }
	
	    rect[xy[idx1WhenH]] += rowOtherLength;
	    rect[wh[idx1WhenH]] -= rowOtherLength;
	}
	
	// Return [containerWidth, containerHeight] as defualt.
	function estimateRootSize(seriesModel, targetInfo, containerWidth, containerHeight) {
	    // If targetInfo.node exists, we zoom to the node,
	    // so estimate whold width and heigth by target node.
	    var currNode = (targetInfo || {}).node;
	    var defaultSize = [containerWidth, containerHeight];
	
	    if (!currNode || currNode === seriesModel.getViewRoot()) {
	        return defaultSize;
	    }
	
	    var parent;
	    var viewArea = containerWidth * containerHeight;
	    var area = viewArea * seriesModel.get('zoomToNodeRatio');
	
	    while (parent = currNode.parentNode) {
	        // jshint ignore:line
	        var sum = 0;
	        var siblings = parent.children;
	
	        for (var i = 0, len = siblings.length; i < len; i++) {
	            sum += siblings[i].getValue();
	        }
	        var currNodeValue = currNode.getValue();
	        if (currNodeValue === 0) {
	            return defaultSize;
	        }
	        area *= sum / currNodeValue;
	
	        var borderWidth = parent.getModel('itemStyle.normal').get('borderWidth');
	
	        if (isFinite(borderWidth)) {
	            // Considering border, suppose aspect ratio is 1.
	            area += 4 * borderWidth * borderWidth + 4 * borderWidth * Math.pow(area, 0.5);
	        }
	
	        area > numberUtil.MAX_SAFE_INTEGER && (area = numberUtil.MAX_SAFE_INTEGER);
	
	        currNode = parent;
	    }
	
	    area < viewArea && (area = viewArea);
	    var scale = Math.pow(area / viewArea, 0.5);
	
	    return [containerWidth * scale, containerHeight * scale];
	}
	
	// Root postion base on coord of containerGroup
	function calculateRootPosition(layoutInfo, rootRect, targetInfo) {
	    if (rootRect) {
	        return { x: rootRect.x, y: rootRect.y };
	    }
	
	    var defaultPosition = { x: 0, y: 0 };
	    if (!targetInfo) {
	        return defaultPosition;
	    }
	
	    // If targetInfo is fetched by 'retrieveTargetInfo',
	    // old tree and new tree are the same tree,
	    // so the node still exists and we can visit it.
	
	    var targetNode = targetInfo.node;
	    var layout = targetNode.getLayout();
	
	    if (!layout) {
	        return defaultPosition;
	    }
	
	    // Transform coord from local to container.
	    var targetCenter = [layout.width / 2, layout.height / 2];
	    var node = targetNode;
	    while (node) {
	        var nodeLayout = node.getLayout();
	        targetCenter[0] += nodeLayout.x;
	        targetCenter[1] += nodeLayout.y;
	        node = node.parentNode;
	    }
	
	    return {
	        x: layoutInfo.width / 2 - targetCenter[0],
	        y: layoutInfo.height / 2 - targetCenter[1]
	    };
	}
	
	// Mark invisible nodes for prunning when visual coding and rendering.
	// Prunning depends on layout and root position, so we have to do it after them.
	function prunning(node, clipRect) {
	    var nodeLayout = node.getLayout();
	
	    node.setLayout({ invisible: !clipRect.intersect(nodeLayout) }, true);
	
	    var viewChildren = node.viewChildren || [];
	    for (var i = 0, len = viewChildren.length; i < len; i++) {
	        // Transform to child coordinate.
	        var childClipRect = new BoundingRect(clipRect.x - nodeLayout.x, clipRect.y - nodeLayout.y, clipRect.width, clipRect.height);
	        prunning(viewChildren[i], childClipRect);
	    }
	}
	
	module.exports = update;

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	var zrUtil = __webpack_require__(224);
	
	__webpack_require__(411);
	__webpack_require__(414);
	
	__webpack_require__(418);
	
	echarts.registerProcessor('filter', __webpack_require__(419));
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(324), 'graph', 'circle', null));
	echarts.registerVisualCoding('chart', __webpack_require__(420));
	
	echarts.registerLayout(__webpack_require__(421));
	echarts.registerLayout(__webpack_require__(423));
	echarts.registerLayout(__webpack_require__(425));
	
	// Graph view coordinate system
	echarts.registerCoordinateSystem('graphView', {
	    create: __webpack_require__(427)
	});

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var zrUtil = __webpack_require__(224);
	
	var createGraphFromNodeEdge = __webpack_require__(412);
	
	var GraphSeries = __webpack_require__(222).extendSeriesModel({
	
	    type: 'series.graph',
	
	    init: function init(option) {
	        GraphSeries.superApply(this, 'init', arguments);
	
	        // Provide data for legend select
	        this.legendDataProvider = function () {
	            return this._categoriesData;
	        };
	
	        this._updateCategoriesData();
	    },
	
	    mergeOption: function mergeOption(option) {
	        GraphSeries.superApply(this, 'mergeOption', arguments);
	
	        this._updateCategoriesData();
	    },
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var edges = option.edges || option.links;
	        var nodes = option.data || option.nodes;
	        if (nodes && edges) {
	            var graph = createGraphFromNodeEdge(nodes, edges, this, true);
	            var list = graph.data;
	            var self = this;
	            // Overwrite list.getItemModel to
	            list.wrapMethod('getItemModel', function (model) {
	                var categoriesModels = self._categoriesModels;
	                var categoryIdx = model.getShallow('category');
	                var categoryModel = categoriesModels[categoryIdx];
	                if (categoryModel) {
	                    categoryModel.parentModel = model.parentModel;
	                    model.parentModel = categoryModel;
	                }
	                return model;
	            });
	            return list;
	        }
	    },
	
	    restoreData: function restoreData() {
	        GraphSeries.superApply(this, 'restoreData', arguments);
	        this.getGraph().restoreData();
	    },
	
	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    getGraph: function getGraph() {
	        return this.getData().graph;
	    },
	
	    /**
	     * @return {module:echarts/data/List}
	     */
	    getEdgeData: function getEdgeData() {
	        return this.getGraph().edgeData;
	    },
	
	    /**
	     * @return {module:echarts/data/List}
	     */
	    getCategoriesData: function getCategoriesData() {
	        return this._categoriesData;
	    },
	
	    _updateCategoriesData: function _updateCategoriesData() {
	        var categories = zrUtil.map(this.option.categories || [], function (category) {
	            // Data must has value
	            return category.value != null ? category : zrUtil.extend({
	                value: 0
	            }, category);
	        });
	        var categoriesData = new List(['value'], this);
	        categoriesData.initData(categories);
	
	        this._categoriesData = categoriesData;
	
	        this._categoriesModels = categoriesData.mapArray(function (idx) {
	            return categoriesData.getItemModel(idx, true);
	        });
	    },
	
	    /**
	     * @param {number} zoom
	     */
	    setRoamZoom: function setRoamZoom(zoom) {
	        var roamDetail = this.option.roamDetail;
	        roamDetail && (roamDetail.zoom = zoom);
	    },
	
	    /**
	     * @param {number} x
	     * @param {number} y
	     */
	    setRoamPan: function setRoamPan(x, y) {
	        var roamDetail = this.option.roamDetail;
	        if (roamDetail) {
	            roamDetail.x = x;
	            roamDetail.y = y;
	        }
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	
	        color: ['#61a0a8', '#d14a61', '#fd9c35', '#675bba', '#fec42c', '#dd4444', '#fd9c35', '#cd4870'],
	
	        coordinateSystem: 'view',
	
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	
	        layout: null,
	
	        // Configuration of force
	        force: {
	            initLayout: null,
	            repulsion: 50,
	            gravity: 0.1,
	            edgeLength: 30,
	
	            layoutAnimation: true
	        },
	
	        left: 'center',
	        top: 'center',
	        // right: null,
	        // bottom: null,
	        // width: '80%',
	        // height: '80%',
	
	        symbol: 'circle',
	        symbolSize: 10,
	
	        draggable: false,
	
	        roam: false,
	        roamDetail: {
	            x: 0,
	            y: 0,
	            zoom: 1
	        },
	
	        // Symbol size scale ratio in roam
	        nodeScaleRatio: 0.6,
	
	        // Line width scale ratio in roam
	        // edgeScaleRatio: 0.1,
	
	        // categories: [],
	
	        // data: []
	        // Or
	        // nodes: []
	        //
	        // links: []
	        // Or
	        // edges: []
	
	        label: {
	            normal: {
	                show: false
	            },
	            emphasis: {
	                show: true
	            }
	        },
	
	        itemStyle: {
	            normal: {},
	            emphasis: {}
	        },
	
	        lineStyle: {
	            normal: {
	                color: '#aaa',
	                width: 1,
	                curveness: 0,
	                opacity: 0.5
	            },
	            emphasis: {}
	        }
	    }
	});
	
	module.exports = GraphSeries;

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var Graph = __webpack_require__(413);
	var linkList = __webpack_require__(401);
	var completeDimensions = __webpack_require__(317);
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (nodes, edges, hostModel, directed) {
	    var graph = new Graph(directed);
	    for (var i = 0; i < nodes.length; i++) {
	        graph.addNode(zrUtil.retrieve(
	        // Id, name, dataIndex
	        nodes[i].id, nodes[i].name, i), i);
	    }
	
	    var linkNameList = [];
	    var validEdges = [];
	    for (var i = 0; i < edges.length; i++) {
	        var link = edges[i];
	        // addEdge may fail when source or target not exists
	        if (graph.addEdge(link.source, link.target, i)) {
	            validEdges.push(link);
	            linkNameList.push(zrUtil.retrieve(link.id, link.source + ' - ' + link.target));
	        }
	    }
	
	    // FIXME
	    var dimensionNames = completeDimensions(['value'], nodes);
	
	    var nodeData = new List(dimensionNames, hostModel);
	    var edgeData = new List(['value'], hostModel);
	
	    nodeData.initData(nodes);
	    edgeData.initData(validEdges, linkNameList);
	
	    graph.setEdgeData(edgeData);
	
	    linkList.linkToGraph(nodeData, graph);
	    // Update dataIndex of nodes and edges because invalid edge may be removed
	    graph.update();
	
	    return graph;
	};

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * Graph data structure
	 *
	 * @module echarts/data/Graph
	 * @author Yi Shen(https://www.github.com/pissang)
	 */
	
	var zrUtil = __webpack_require__(224);
	
	/**
	 * @alias module:echarts/data/Graph
	 * @constructor
	 * @param {boolean} directed
	 */
	var Graph = function Graph(directed) {
	    /**
	     * 是否是有向图
	     * @type {boolean}
	     * @private
	     */
	    this._directed = directed || false;
	
	    /**
	     * @type {Array.<module:echarts/data/Graph.Node>}
	     * @readOnly
	     */
	    this.nodes = [];
	
	    /**
	     * @type {Array.<module:echarts/data/Graph.Edge>}
	     * @readOnly
	     */
	    this.edges = [];
	
	    /**
	     * @type {Object.<string, module:echarts/data/Graph.Node>}
	     * @private
	     */
	    this._nodesMap = {};
	    /**
	     * @type {Object.<string, module:echarts/data/Graph.Edge>}
	     * @private
	     */
	    this._edgesMap = {};
	
	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.data;
	
	    /**
	     * @type {module:echarts/data/List}
	     * @readOnly
	     */
	    this.edgeData;
	};
	
	var graphProto = Graph.prototype;
	/**
	 * @type {string}
	 */
	graphProto.type = 'graph';
	
	/**
	 * If is directed graph
	 * @return {boolean}
	 */
	graphProto.isDirected = function () {
	    return this._directed;
	};
	
	/**
	 * Add a new node
	 * @param {string} id
	 * @param {number} [dataIndex]
	 */
	graphProto.addNode = function (id, dataIndex) {
	    var nodesMap = this._nodesMap;
	
	    if (nodesMap[id]) {
	        return;
	    }
	
	    var node = new Node(id, dataIndex);
	    node.hostGraph = this;
	
	    this.nodes.push(node);
	
	    nodesMap[id] = node;
	    return node;
	};
	
	/**
	 * Get node by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */
	graphProto.getNodeByIndex = function (dataIndex) {
	    var rawIdx = this.data.getRawIndex(dataIndex);
	    return this.nodes[rawIdx];
	};
	/**
	 * Get node by id
	 * @param  {string} id
	 * @return {module:echarts/data/Graph.Node}
	 */
	graphProto.getNodeById = function (id) {
	    return this._nodesMap[id];
	};
	
	/**
	 * Add a new edge
	 * @param {string|module:echarts/data/Graph.Node} n1
	 * @param {string|module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 * @return {module:echarts/data/Graph.Edge}
	 */
	graphProto.addEdge = function (n1, n2, dataIndex) {
	    var nodesMap = this._nodesMap;
	    var edgesMap = this._edgesMap;
	
	    if (!(n1 instanceof Node)) {
	        n1 = nodesMap[n1];
	    }
	    if (!(n2 instanceof Node)) {
	        n2 = nodesMap[n2];
	    }
	    if (!n1 || !n2) {
	        return;
	    }
	
	    var key = n1.id + '-' + n2.id;
	    // PENDING
	    if (edgesMap[key]) {
	        return;
	    }
	
	    var edge = new Edge(n1, n2, dataIndex);
	    edge.hostGraph = this;
	
	    if (this._directed) {
	        n1.outEdges.push(edge);
	        n2.inEdges.push(edge);
	    }
	    n1.edges.push(edge);
	    if (n1 !== n2) {
	        n2.edges.push(edge);
	    }
	
	    this.edges.push(edge);
	    edgesMap[key] = edge;
	
	    return edge;
	};
	
	/**
	 * Get edge by data index
	 * @param  {number} dataIndex
	 * @return {module:echarts/data/Graph~Node}
	 */
	graphProto.getEdgeByIndex = function (dataIndex) {
	    var rawIdx = this.edgeData.getRawIndex(dataIndex);
	    return this.edges[rawIdx];
	};
	/**
	 * Get edge by two linked nodes
	 * @param  {module:echarts/data/Graph.Node|string} n1
	 * @param  {module:echarts/data/Graph.Node|string} n2
	 * @return {module:echarts/data/Graph.Edge}
	 */
	graphProto.getEdge = function (n1, n2) {
	    if (n1 instanceof Node) {
	        n1 = n1.id;
	    }
	    if (n2 instanceof Node) {
	        n2 = n2.id;
	    }
	
	    var edgesMap = this._edgesMap;
	
	    if (this._directed) {
	        return edgesMap[n1 + '-' + n2];
	    } else {
	        return edgesMap[n1 + '-' + n2] || edgesMap[n2 + '-' + n1];
	    }
	};
	
	/**
	 * Iterate all nodes
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */
	graphProto.eachNode = function (cb, context) {
	    var nodes = this.nodes;
	    var len = nodes.length;
	    for (var i = 0; i < len; i++) {
	        if (nodes[i].dataIndex >= 0) {
	            cb.call(context, nodes[i], i);
	        }
	    }
	};
	
	/**
	 * Iterate all edges
	 * @param  {Function} cb
	 * @param  {*} [context]
	 */
	graphProto.eachEdge = function (cb, context) {
	    var edges = this.edges;
	    var len = edges.length;
	    for (var i = 0; i < len; i++) {
	        if (edges[i].dataIndex >= 0 && edges[i].node1.dataIndex >= 0 && edges[i].node2.dataIndex >= 0) {
	            cb.call(context, edges[i], i);
	        }
	    }
	};
	
	/**
	 * Breadth first traverse
	 * @param {Function} cb
	 * @param {module:echarts/data/Graph.Node} startNode
	 * @param {string} [direction='none'] 'none'|'in'|'out'
	 * @param {*} [context]
	 */
	graphProto.breadthFirstTraverse = function (cb, startNode, direction, context) {
	    if (!(startNode instanceof Node)) {
	        startNode = this._nodesMap[startNode];
	    }
	    if (!startNode) {
	        return;
	    }
	
	    var edgeType = direction === 'out' ? 'outEdges' : direction === 'in' ? 'inEdges' : 'edges';
	
	    for (var i = 0; i < this.nodes.length; i++) {
	        this.nodes[i].__visited = false;
	    }
	
	    if (cb.call(context, startNode, null)) {
	        return;
	    }
	
	    var queue = [startNode];
	    while (queue.length) {
	        var currentNode = queue.shift();
	        var edges = currentNode[edgeType];
	
	        for (var i = 0; i < edges.length; i++) {
	            var e = edges[i];
	            var otherNode = e.node1 === currentNode ? e.node2 : e.node1;
	            if (!otherNode.__visited) {
	                if (cb.call(otherNode, otherNode, currentNode)) {
	                    // Stop traversing
	                    return;
	                }
	                queue.push(otherNode);
	                otherNode.__visited = true;
	            }
	        }
	    }
	};
	
	// TODO
	// graphProto.depthFirstTraverse = function (
	//     cb, startNode, direction, context
	// ) {
	
	// };
	
	// Filter update
	graphProto.update = function () {
	    var data = this.data;
	    var edgeData = this.edgeData;
	    var nodes = this.nodes;
	    var edges = this.edges;
	
	    for (var i = 0, len = nodes.length; i < len; i++) {
	        nodes[i].dataIndex = -1;
	    }
	    for (var i = 0, len = data.count(); i < len; i++) {
	        nodes[data.getRawIndex(i)].dataIndex = i;
	    }
	
	    edgeData.filterSelf(function (idx) {
	        var edge = edges[edgeData.getRawIndex(idx)];
	        return edge.node1.dataIndex >= 0 && edge.node2.dataIndex >= 0;
	    });
	
	    // Update edge
	    for (var i = 0, len = edges.length; i < len; i++) {
	        edges[i].dataIndex = -1;
	    }
	    for (var i = 0, len = edgeData.count(); i < len; i++) {
	        edges[edgeData.getRawIndex(i)].dataIndex = i;
	    }
	};
	
	/**
	 * Set edge data
	 * @param {module:echarts/data/List} edgeData
	 */
	graphProto.setEdgeData = function (edgeData) {
	    this.edgeData = edgeData;
	    this._edgeDataSaved = edgeData.cloneShallow();
	};
	
	graphProto.restoreData = function () {
	    this.edgeData = this._edgeDataSaved.cloneShallow();
	};
	
	/**
	 * @return {module:echarts/data/Graph}
	 */
	graphProto.clone = function () {
	    var graph = new Graph(this._directed);
	    var nodes = this.nodes;
	    var edges = this.edges;
	    for (var i = 0; i < nodes.length; i++) {
	        graph.addNode(nodes[i].id, nodes[i].dataIndex);
	    }
	    for (var i = 0; i < edges.length; i++) {
	        var e = edges[i];
	        graph.addEdge(e.node1.id, e.node2.id, e.dataIndex);
	    }
	    return graph;
	};
	
	/**
	 * @alias module:echarts/data/Graph.Node
	 */
	function Node(id, dataIndex) {
	    /**
	    * @type {string}
	    */
	    this.id = id == null ? '' : id;
	
	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.inEdges = [];
	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.outEdges = [];
	    /**
	    * @type {Array.<module:echarts/data/Graph.Edge>}
	    */
	    this.edges = [];
	    /**
	     * @type {module:echarts/data/Graph}
	     */
	    this.hostGraph;
	
	    /**
	     * @type {number}
	     */
	    this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}
	
	Node.prototype = {
	
	    constructor: Node,
	
	    /**
	     * @return {number}
	     */
	    degree: function degree() {
	        return this.edges.length;
	    },
	
	    /**
	     * @return {number}
	     */
	    inDegree: function inDegree() {
	        return this.inEdges.length;
	    },
	
	    /**
	    * @return {number}
	    */
	    outDegree: function outDegree() {
	        return this.outEdges.length;
	    },
	
	    /**
	     * @param {string} [path]
	     * @return {module:echarts/model/Model}
	     */
	    getModel: function getModel(path) {
	        if (this.dataIndex < 0) {
	            return;
	        }
	        var graph = this.hostGraph;
	        var itemModel = graph.data.getItemModel(this.dataIndex);
	
	        return itemModel.getModel(path);
	    }
	};
	
	/**
	 * 图边
	 * @alias module:echarts/data/Graph.Edge
	 * @param {module:echarts/data/Graph.Node} n1
	 * @param {module:echarts/data/Graph.Node} n2
	 * @param {number} [dataIndex=-1]
	 */
	function Edge(n1, n2, dataIndex) {
	
	    /**
	     * 节点1，如果是有向图则为源节点
	     * @type {module:echarts/data/Graph.Node}
	     */
	    this.node1 = n1;
	
	    /**
	     * 节点2，如果是有向图则为目标节点
	     * @type {module:echarts/data/Graph.Node}
	     */
	    this.node2 = n2;
	
	    this.dataIndex = dataIndex == null ? -1 : dataIndex;
	}
	
	/**
	 * @param {string} [path]
	 * @return {module:echarts/model/Model}
	 */
	Edge.prototype.getModel = function (path) {
	    if (this.dataIndex < 0) {
	        return;
	    }
	    var graph = this.hostGraph;
	    var itemModel = graph.edgeData.getItemModel(this.dataIndex);
	
	    return itemModel.getModel(path);
	};
	
	var createGraphDataProxyMixin = function createGraphDataProxyMixin(hostName, dataName) {
	    return {
	        /**
	         * @param {string=} [dimension='value'] Default 'value'. can be 'a', 'b', 'c', 'd', 'e'.
	         * @return {number}
	         */
	        getValue: function getValue(dimension) {
	            var data = this[hostName][dataName];
	            return data.get(data.getDimension(dimension || 'value'), this.dataIndex);
	        },
	
	        /**
	         * @param {Object|string} key
	         * @param {*} [value]
	         */
	        setVisual: function setVisual(key, value) {
	            this.dataIndex >= 0 && this[hostName][dataName].setItemVisual(this.dataIndex, key, value);
	        },
	
	        /**
	         * @param {string} key
	         * @return {boolean}
	         */
	        getVisual: function getVisual(key, ignoreParent) {
	            return this[hostName][dataName].getItemVisual(this.dataIndex, key, ignoreParent);
	        },
	
	        /**
	         * @param {Object} layout
	         * @return {boolean} [merge=false]
	         */
	        setLayout: function setLayout(layout, merge) {
	            this.dataIndex >= 0 && this[hostName][dataName].setItemLayout(this.dataIndex, layout, merge);
	        },
	
	        /**
	         * @return {Object}
	         */
	        getLayout: function getLayout() {
	            return this[hostName][dataName].getItemLayout(this.dataIndex);
	        },
	
	        /**
	         * @return {module:zrender/Element}
	         */
	        getGraphicEl: function getGraphicEl() {
	            return this[hostName][dataName].getItemGraphicEl(this.dataIndex);
	        },
	
	        /**
	         * @return {number}
	         */
	        getRawIndex: function getRawIndex() {
	            return this[hostName][dataName].getRawIndex(this.dataIndex);
	        }
	    };
	};
	
	zrUtil.mixin(Node, createGraphDataProxyMixin('hostGraph', 'data'));
	zrUtil.mixin(Edge, createGraphDataProxyMixin('hostGraph', 'edgeData'));
	
	Graph.Node = Node;
	Graph.Edge = Edge;
	
	module.exports = Graph;

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SymbolDraw = __webpack_require__(319);
	var LineDraw = __webpack_require__(415);
	var RoamController = __webpack_require__(380);
	
	var modelUtil = __webpack_require__(226);
	var graphic = __webpack_require__(263);
	
	__webpack_require__(222).extendChartView({
	
	    type: 'graph',
	
	    init: function init(ecModel, api) {
	        var symbolDraw = new SymbolDraw();
	        var lineDraw = new LineDraw();
	        var group = this.group;
	
	        var controller = new RoamController(api.getZr(), group);
	
	        group.add(symbolDraw.group);
	        group.add(lineDraw.group);
	
	        this._symbolDraw = symbolDraw;
	        this._lineDraw = lineDraw;
	        this._controller = controller;
	
	        this._firstRender = true;
	    },
	
	    render: function render(seriesModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        // Only support view and geo coordinate system
	        if (coordSys.type !== 'geo' && coordSys.type !== 'view') {
	            return;
	        }
	
	        var data = seriesModel.getData();
	        this._model = seriesModel;
	
	        var symbolDraw = this._symbolDraw;
	        var lineDraw = this._lineDraw;
	
	        symbolDraw.updateData(data);
	
	        var edgeData = data.graph.edgeData;
	        var rawOption = seriesModel.option;
	        var formatModel = modelUtil.createDataFormatModel(seriesModel, edgeData, rawOption.edges || rawOption.links);
	        formatModel.formatTooltip = function (dataIndex) {
	            var params = this.getDataParams(dataIndex);
	            var rawDataOpt = params.data;
	            var html = rawDataOpt.source + ' > ' + rawDataOpt.target;
	            if (params.value) {
	                html += ':' + params.value;
	            }
	            return html;
	        };
	        lineDraw.updateData(edgeData, null, null);
	        edgeData.eachItemGraphicEl(function (el) {
	            el.traverse(function (child) {
	                child.hostModel = formatModel;
	            });
	        });
	
	        // Save the original lineWidth
	        data.graph.eachEdge(function (edge) {
	            edge.__lineWidth = edge.getModel('lineStyle.normal').get('width');
	        });
	
	        var group = this.group;
	        var groupNewProp = {
	            position: coordSys.position,
	            scale: coordSys.scale
	        };
	        if (this._firstRender) {
	            group.attr(groupNewProp);
	        } else {
	            graphic.updateProps(group, groupNewProp, seriesModel);
	        }
	
	        this._nodeScaleRatio = seriesModel.get('nodeScaleRatio');
	        // this._edgeScaleRatio = seriesModel.get('edgeScaleRatio');
	
	        this._updateNodeAndLinkScale();
	
	        this._updateController(seriesModel, coordSys, api);
	
	        clearTimeout(this._layoutTimeout);
	        var forceLayout = seriesModel.forceLayout;
	        var layoutAnimation = seriesModel.get('force.layoutAnimation');
	        if (forceLayout) {
	            this._startForceLayoutIteration(forceLayout, layoutAnimation);
	        }
	        // Update draggable
	        data.eachItemGraphicEl(function (el, idx) {
	            var draggable = data.getItemModel(idx).get('draggable');
	            if (draggable && forceLayout) {
	                el.on('drag', function () {
	                    forceLayout.warmUp();
	                    !this._layouting && this._startForceLayoutIteration(forceLayout, layoutAnimation);
	                    forceLayout.setFixed(idx);
	                    // Write position back to layout
	                    data.setItemLayout(idx, el.position);
	                }, this).on('dragend', function () {
	                    forceLayout.setUnfixed(idx);
	                }, this);
	            } else {
	                el.off('drag');
	            }
	            el.setDraggable(draggable);
	        }, this);
	
	        this._firstRender = false;
	    },
	
	    _startForceLayoutIteration: function _startForceLayoutIteration(forceLayout, layoutAnimation) {
	        var self = this;
	        (function step() {
	            forceLayout.step(function (stopped) {
	                self.updateLayout();
	                (self._layouting = !stopped) && (layoutAnimation ? self._layoutTimeout = setTimeout(step, 16) : step());
	            });
	        })();
	    },
	
	    _updateController: function _updateController(seriesModel, coordSys, api) {
	        var controller = this._controller;
	        controller.rect = coordSys.getViewRect();
	
	        controller.enable(seriesModel.get('roam'));
	
	        controller.off('pan').off('zoom').on('pan', function (dx, dy) {
	            api.dispatchAction({
	                seriesId: seriesModel.id,
	                type: 'graphRoam',
	                dx: dx,
	                dy: dy
	            });
	        }).on('zoom', function (zoom, mouseX, mouseY) {
	            api.dispatchAction({
	                seriesId: seriesModel.id,
	                type: 'graphRoam',
	                zoom: zoom,
	                originX: mouseX,
	                originY: mouseY
	            });
	        }).on('zoom', this._updateNodeAndLinkScale, this);
	    },
	
	    _updateNodeAndLinkScale: function _updateNodeAndLinkScale() {
	        var seriesModel = this._model;
	        var data = seriesModel.getData();
	
	        var group = this.group;
	        var nodeScaleRatio = this._nodeScaleRatio;
	        // var edgeScaleRatio = this._edgeScaleRatio;
	
	        // Assume scale aspect is 1
	        var groupScale = group.scale[0];
	
	        var nodeScale = (groupScale - 1) * nodeScaleRatio + 1;
	        // var edgeScale = (groupScale - 1) * edgeScaleRatio + 1;
	        var invScale = [nodeScale / groupScale, nodeScale / groupScale];
	
	        data.eachItemGraphicEl(function (el, idx) {
	            el.attr('scale', invScale);
	        });
	        // data.graph.eachEdge(function (edge) {
	        //     var lineGroup = edge.getGraphicEl();
	        //     // FIXME
	        //     lineGroup.childOfName('line').setStyle(
	        //         'lineWidth',
	        //         edge.__lineWidth * edgeScale / groupScale
	        //     );
	        // });
	    },
	
	    updateLayout: function updateLayout(seriesModel, ecModel) {
	        this._symbolDraw.updateLayout();
	        this._lineDraw.updateLayout();
	    },
	
	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove();
	        this._lineDraw && this._lineDraw.remove();
	    }
	});

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/LineDraw
	 */
	
	var graphic = __webpack_require__(263);
	var LineGroup = __webpack_require__(416);
	
	/**
	 * @alias module:echarts/component/marker/LineDraw
	 * @constructor
	 */
	function LineDraw(ctor) {
	    this._ctor = ctor || LineGroup;
	    this.group = new graphic.Group();
	}
	
	var lineDrawProto = LineDraw.prototype;
	
	/**
	 * @param {module:echarts/data/List} lineData
	 * @param {module:echarts/data/List} [fromData]
	 * @param {module:echarts/data/List} [toData]
	 */
	lineDrawProto.updateData = function (lineData, fromData, toData) {
	
	    var oldLineData = this._lineData;
	    var group = this.group;
	    var LineCtor = this._ctor;
	
	    lineData.diff(oldLineData).add(function (idx) {
	        var lineGroup = new LineCtor(lineData, fromData, toData, idx);
	
	        lineData.setItemGraphicEl(idx, lineGroup);
	
	        group.add(lineGroup);
	    }).update(function (newIdx, oldIdx) {
	        var lineGroup = oldLineData.getItemGraphicEl(oldIdx);
	        lineGroup.updateData(lineData, fromData, toData, newIdx);
	
	        lineData.setItemGraphicEl(newIdx, lineGroup);
	
	        group.add(lineGroup);
	    }).remove(function (idx) {
	        group.remove(oldLineData.getItemGraphicEl(idx));
	    }).execute();
	
	    this._lineData = lineData;
	    this._fromData = fromData;
	    this._toData = toData;
	};
	
	lineDrawProto.updateLayout = function () {
	    var lineData = this._lineData;
	    lineData.eachItemGraphicEl(function (el, idx) {
	        el.updateLayout(lineData, this._fromData, this._toData, idx);
	    }, this);
	};
	
	lineDrawProto.remove = function () {
	    this.group.removeAll();
	};
	
	module.exports = LineDraw;

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/Line
	 */
	
	var symbolUtil = __webpack_require__(321);
	var vector = __webpack_require__(237);
	var LinePath = __webpack_require__(417);
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	
	/**
	 * @inner
	 */
	function createSymbol(name, data, idx) {
	    var color = data.getItemVisual(idx, 'color');
	    var symbolType = data.getItemVisual(idx, 'symbol');
	    var symbolSize = data.getItemVisual(idx, 'symbolSize');
	
	    if (symbolType === 'none') {
	        return;
	    }
	
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [symbolSize, symbolSize];
	    }
	    var symbolPath = symbolUtil.createSymbol(symbolType, -symbolSize[0] / 2, -symbolSize[1] / 2, symbolSize[0], symbolSize[1], color);
	    symbolPath.name = name;
	
	    return symbolPath;
	}
	
	function createLine(points) {
	    var line = new LinePath({
	        name: 'line',
	        style: {
	            strokeNoScale: true
	        }
	    });
	    setLinePoints(line.shape, points);
	    return line;
	}
	
	function setLinePoints(targetShape, points) {
	    var p1 = points[0];
	    var p2 = points[1];
	    var cp1 = points[2];
	    targetShape.x1 = p1[0];
	    targetShape.y1 = p1[1];
	    targetShape.x2 = p2[0];
	    targetShape.y2 = p2[1];
	    targetShape.percent = 1;
	
	    if (cp1) {
	        targetShape.cpx1 = cp1[0];
	        targetShape.cpy1 = cp1[1];
	    }
	}
	
	function isSymbolArrow(symbol) {
	    return symbol.type === 'symbol' && symbol.shape.symbolType === 'arrow';
	}
	
	function updateSymbolBeforeLineUpdate() {
	    var lineGroup = this;
	    var line = lineGroup.childOfName('line');
	    // If line not changed
	    if (!this.__dirty && !line.__dirty) {
	        return;
	    }
	    var symbolFrom = lineGroup.childOfName('fromSymbol');
	    var symbolTo = lineGroup.childOfName('toSymbol');
	    var label = lineGroup.childOfName('label');
	    var fromPos = line.pointAt(0);
	    var toPos = line.pointAt(line.shape.percent);
	
	    var d = vector.sub([], toPos, fromPos);
	    vector.normalize(d, d);
	
	    if (symbolFrom) {
	        symbolFrom.attr('position', fromPos);
	        // Rotate the arrow
	        // FIXME Hard coded ?
	        if (isSymbolArrow(symbolFrom)) {
	            symbolFrom.attr('rotation', tangentRotation(toPos, fromPos));
	        }
	    }
	    if (symbolTo) {
	        symbolTo.attr('position', toPos);
	        if (isSymbolArrow(symbolTo)) {
	            symbolTo.attr('rotation', tangentRotation(fromPos, toPos));
	        }
	    }
	
	    label.attr('position', toPos);
	
	    var textPosition;
	    var textAlign;
	    var textVerticalAlign;
	    // End
	    if (label.__position === 'end') {
	        textPosition = [d[0] * 5 + toPos[0], d[1] * 5 + toPos[1]];
	        textAlign = d[0] > 0.8 ? 'left' : d[0] < -0.8 ? 'right' : 'center';
	        textVerticalAlign = d[1] > 0.8 ? 'top' : d[1] < -0.8 ? 'bottom' : 'middle';
	    }
	    // Start
	    else {
	            textPosition = [-d[0] * 5 + fromPos[0], -d[1] * 5 + fromPos[1]];
	            textAlign = d[0] > 0.8 ? 'right' : d[0] < -0.8 ? 'left' : 'center';
	            textVerticalAlign = d[1] > 0.8 ? 'bottom' : d[1] < -0.8 ? 'top' : 'middle';
	        }
	    label.attr({
	        style: {
	            // Use the user specified text align and baseline first
	            textVerticalAlign: label.__verticalAlign || textVerticalAlign,
	            textAlign: label.__textAlign || textAlign
	        },
	        position: textPosition
	    });
	}
	
	function tangentRotation(p1, p2) {
	    return -Math.PI / 2 - Math.atan2(p2[1] - p1[1], p2[0] - p1[0]);
	}
	
	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */
	function Line(lineData, fromData, toData, idx) {
	    graphic.Group.call(this);
	
	    this._createLine(lineData, fromData, toData, idx);
	}
	
	var lineProto = Line.prototype;
	
	// Update symbol position and rotation
	lineProto.beforeUpdate = updateSymbolBeforeLineUpdate;
	
	lineProto._createLine = function (lineData, fromData, toData, idx) {
	    var seriesModel = lineData.hostModel;
	    var linePoints = lineData.getItemLayout(idx);
	
	    var line = createLine(linePoints);
	    line.shape.percent = 0;
	    graphic.initProps(line, {
	        shape: {
	            percent: 1
	        }
	    }, seriesModel);
	
	    this.add(line);
	
	    var label = new graphic.Text({
	        name: 'label'
	    });
	    this.add(label);
	
	    if (fromData) {
	        var symbolFrom = createSymbol('fromSymbol', fromData, idx);
	        // symbols must added after line to make sure
	        // it will be updated after line#update.
	        // Or symbol position and rotation update in line#beforeUpdate will be one frame slow
	        this.add(symbolFrom);
	
	        this._fromSymbolType = fromData.getItemVisual(idx, 'symbol');
	    }
	    if (toData) {
	        var symbolTo = createSymbol('toSymbol', toData, idx);
	        this.add(symbolTo);
	
	        this._toSymbolType = toData.getItemVisual(idx, 'symbol');
	    }
	
	    this._updateCommonStl(lineData, fromData, toData, idx);
	};
	
	lineProto.updateData = function (lineData, fromData, toData, idx) {
	    var seriesModel = lineData.hostModel;
	
	    var line = this.childOfName('line');
	    var linePoints = lineData.getItemLayout(idx);
	    var target = {
	        shape: {}
	    };
	    setLinePoints(target.shape, linePoints);
	    graphic.updateProps(line, target, seriesModel);
	
	    // Symbol changed
	    if (fromData) {
	        var fromSymbolType = fromData.getItemVisual(idx, 'symbol');
	        if (this._fromSymbolType !== fromSymbolType) {
	            var symbolFrom = createSymbol('fromSymbol', fromData, idx);
	            this.remove(this.childOfName('fromSymbol'));
	            this.add(symbolFrom);
	        }
	        this._fromSymbolType = fromSymbolType;
	    }
	    if (toData) {
	        var toSymbolType = toData.getItemVisual(idx, 'symbol');
	        // Symbol changed
	        if (toSymbolType !== this._toSymbolType) {
	            var symbolTo = createSymbol('toSymbol', toData, idx);
	            this.remove(this.childOfName('toSymbol'));
	            this.add(symbolTo);
	        }
	        this._toSymbolType = toSymbolType;
	    }
	
	    this._updateCommonStl(lineData, fromData, toData, idx);
	};
	
	lineProto._updateCommonStl = function (lineData, fromData, toData, idx) {
	    var seriesModel = lineData.hostModel;
	
	    var line = this.childOfName('line');
	    var itemModel = lineData.getItemModel(idx);
	
	    var labelModel = itemModel.getModel('label.normal');
	    var textStyleModel = labelModel.getModel('textStyle');
	    var labelHoverModel = itemModel.getModel('label.emphasis');
	    var textStyleHoverModel = labelHoverModel.getModel('textStyle');
	
	    var defaultText = numberUtil.round(seriesModel.getRawValue(idx));
	    if (isNaN(defaultText)) {
	        // Use name
	        defaultText = lineData.getName(idx);
	    }
	    line.setStyle(zrUtil.extend({
	        stroke: lineData.getItemVisual(idx, 'color')
	    }, itemModel.getModel('lineStyle.normal').getLineStyle()));
	
	    var label = this.childOfName('label');
	    label.setStyle({
	        text: labelModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'normal'), defaultText) : '',
	        textFont: textStyleModel.getFont(),
	        fill: textStyleModel.getTextColor() || lineData.getItemVisual(idx, 'color')
	    });
	    label.hoverStyle = {
	        text: labelHoverModel.get('show') ? zrUtil.retrieve(seriesModel.getFormattedLabel(idx, 'emphasis'), defaultText) : '',
	        textFont: textStyleModel.getFont(),
	        fill: textStyleHoverModel.getTextColor()
	    };
	    label.__textAlign = textStyleModel.get('align');
	    label.__verticalAlign = textStyleModel.get('baseline');
	    label.__position = labelModel.get('position');
	
	    graphic.setHoverStyle(this, itemModel.getModel('lineStyle.emphasis').getLineStyle());
	};
	
	lineProto.updateLayout = function (lineData, fromData, toData, idx) {
	    var points = lineData.getItemLayout(idx);
	    var linePath = this.childOfName('line');
	    setLinePoints(linePath.shape, points);
	    linePath.dirty(true);
	    fromData && fromData.getItemGraphicEl(idx).attr('position', points[0]);
	    toData && toData.getItemGraphicEl(idx).attr('position', points[1]);
	};
	
	zrUtil.inherits(Line, graphic.Group);
	
	module.exports = Line;

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Line path for bezier and straight line draw
	 */
	
	var graphic = __webpack_require__(263);
	
	var straightLineProto = graphic.Line.prototype;
	var bezierCurveProto = graphic.BezierCurve.prototype;
	
	module.exports = graphic.extendShape({
	
	    type: 'ec-line',
	
	    style: {
	        stroke: '#000',
	        fill: null
	    },
	
	    shape: {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        percent: 1,
	        cpx1: null,
	        cpy1: null
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        (shape.cpx1 == null || shape.cpy1 == null ? straightLineProto : bezierCurveProto).buildPath(ctx, shape);
	    },
	
	    pointAt: function pointAt(t) {
	        var shape = this.shape;
	        return shape.cpx1 == null || shape.cpy1 == null ? straightLineProto.pointAt.call(this, t) : bezierCurveProto.pointAt.call(this, t);
	    }
	});

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	var roamHelper = __webpack_require__(383);
	
	var actionInfo = {
	    type: 'graphRoam',
	    event: 'graphRoam',
	    update: 'none'
	};
	
	/**
	 * @payload
	 * @property {string} name Series name
	 * @property {number} [dx]
	 * @property {number} [dy]
	 * @property {number} [zoom]
	 * @property {number} [originX]
	 * @property {number} [originY]
	 */
	
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	    ecModel.eachComponent({ mainType: 'series', query: payload }, function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	
	        var roamDetailModel = seriesModel.getModel('roamDetail');
	        var res = roamHelper.calcPanAndZoom(roamDetailModel, payload);
	
	        seriesModel.setRoamPan && seriesModel.setRoamPan(res.x, res.y);
	
	        seriesModel.setRoamZoom && seriesModel.setRoamZoom(res.zoom);
	
	        coordSys && coordSys.setPan(res.x, res.y);
	        coordSys && coordSys.setZoom(res.zoom);
	    });
	});

/***/ },
/* 419 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (!legendModels || !legendModels.length) {
	        return;
	    }
	    ecModel.eachSeriesByType('graph', function (graphSeries) {
	        var categoriesData = graphSeries.getCategoriesData();
	        var graph = graphSeries.getGraph();
	        var data = graph.data;
	
	        var categoryNames = categoriesData.mapArray(categoriesData.getName);
	
	        data.filterSelf(function (idx) {
	            var model = data.getItemModel(idx);
	            var category = model.getShallow('category');
	            if (category != null) {
	                if (typeof category === 'number') {
	                    category = categoryNames[category];
	                }
	                // If in any legend component the status is not selected.
	                for (var i = 0; i < legendModels.length; i++) {
	                    if (!legendModels[i].isSelected(category)) {
	                        return false;
	                    }
	                }
	            }
	            return true;
	        });
	    }, this);
	};

/***/ },
/* 420 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var colorList = seriesModel.get('color');
	        var categoriesData = seriesModel.getCategoriesData();
	        var data = seriesModel.getData();
	
	        var categoryNameIdxMap = {};
	
	        categoriesData.each(function (idx) {
	            categoryNameIdxMap[categoriesData.getName(idx)] = idx;
	
	            var itemModel = categoriesData.getItemModel(idx);
	            var rawIdx = categoriesData.getRawIndex(idx);
	            var color = itemModel.get('itemStyle.normal.color') || colorList[rawIdx % colorList.length];
	            categoriesData.setItemVisual(idx, 'color', color);
	        });
	
	        // Assign category color to visual
	        if (categoriesData.count()) {
	            data.each(function (idx) {
	                var model = data.getItemModel(idx);
	                var category = model.getShallow('category');
	                if (category != null) {
	                    if (typeof category === 'string') {
	                        category = categoryNameIdxMap[category];
	                    }
	                    data.setItemVisual(idx, 'color', categoriesData.getItemVisual(category, 'color'));
	                }
	            });
	        }
	    });
	};

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var simpleLayoutHelper = __webpack_require__(422);
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var layout = seriesModel.get('layout');
	        if (!layout || layout === 'none') {
	            simpleLayoutHelper(seriesModel);
	        }
	    });
	};

/***/ },
/* 422 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    if (coordSys && coordSys.type !== 'view') {
	        return;
	    }
	    var graph = seriesModel.getGraph();
	
	    graph.eachNode(function (node) {
	        var model = node.getModel();
	        node.setLayout([+model.get('x'), +model.get('y')]);
	    });
	
	    graph.eachEdge(function (edge) {
	        var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	        var p1 = edge.node1.getLayout();
	        var p2 = edge.node2.getLayout();
	        var cp1;
	        if (curveness > 0) {
	            cp1 = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness];
	        }
	        edge.setLayout([p1, p2, cp1]);
	    });
	};

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var circularLayoutHelper = __webpack_require__(424);
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        if (seriesModel.get('layout') === 'circular') {
	            circularLayoutHelper(seriesModel);
	        }
	    });
	};

/***/ },
/* 424 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    if (coordSys && coordSys.type !== 'view') {
	        return;
	    }
	
	    var rect = coordSys.getBoundingRect();
	
	    var nodeData = seriesModel.getData();
	    var graph = nodeData.graph;
	
	    var angle = 0;
	    var sum = nodeData.getSum('value');
	    var unitAngle = Math.PI * 2 / (sum || nodeData.count());
	
	    var cx = rect.width / 2 + rect.x;
	    var cy = rect.height / 2 + rect.y;
	
	    var r = Math.min(rect.width, rect.height) / 2;
	
	    graph.eachNode(function (node) {
	        var value = node.getValue('value');
	
	        angle += unitAngle * (sum ? value : 2) / 2;
	
	        node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);
	
	        angle += unitAngle * (sum ? value : 2) / 2;
	    });
	
	    graph.eachEdge(function (edge) {
	        var curveness = edge.getModel().get('lineStyle.normal.curveness') || 0;
	        var p1 = edge.node1.getLayout();
	        var p2 = edge.node2.getLayout();
	        var cp1;
	        if (curveness > 0) {
	            cp1 = [cx, cy];
	        }
	        edge.setLayout([p1, p2, cp1]);
	    });
	};

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var forceHelper = __webpack_require__(426);
	var numberUtil = __webpack_require__(228);
	var simpleLayoutHelper = __webpack_require__(422);
	var circularLayoutHelper = __webpack_require__(424);
	var vec2 = __webpack_require__(237);
	
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('graph', function (graphSeries) {
	        if (graphSeries.get('layout') === 'force') {
	            var preservedPoints = graphSeries.preservedPoints || {};
	            var graph = graphSeries.getGraph();
	            var nodeData = graph.data;
	            var edgeData = graph.edgeData;
	            var forceModel = graphSeries.getModel('force');
	            var initLayout = forceModel.get('initLayout');
	            if (graphSeries.preservedPoints) {
	                nodeData.each(function (idx) {
	                    var id = nodeData.getId(idx);
	                    nodeData.setItemLayout(idx, preservedPoints[id] || [NaN, NaN]);
	                });
	            } else if (!initLayout || initLayout === 'none') {
	                simpleLayoutHelper(graphSeries);
	            } else if (initLayout === 'circular') {
	                circularLayoutHelper(graphSeries);
	            }
	
	            var nodeDataExtent = nodeData.getDataExtent('value');
	            // var edgeDataExtent = edgeData.getDataExtent('value');
	            var repulsion = forceModel.get('repulsion');
	            var edgeLength = forceModel.get('edgeLength');
	            var nodes = nodeData.mapArray('value', function (value, idx) {
	                var point = nodeData.getItemLayout(idx);
	                // var w = numberUtil.linearMap(value, nodeDataExtent, [0, 50]);
	                var rep = numberUtil.linearMap(value, nodeDataExtent, [0, repulsion]) || repulsion / 2;
	                return {
	                    w: rep,
	                    rep: rep,
	                    p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point
	                };
	            });
	            var edges = edgeData.mapArray('value', function (value, idx) {
	                var edge = graph.getEdgeByIndex(idx);
	                // var w = numberUtil.linearMap(value, edgeDataExtent, [0, 100]);
	                return {
	                    n1: nodes[edge.node1.dataIndex],
	                    n2: nodes[edge.node2.dataIndex],
	                    d: edgeLength,
	                    curveness: edge.getModel().get('lineStyle.normal.curveness') || 0
	                };
	            });
	
	            var coordSys = graphSeries.coordinateSystem;
	            var rect = coordSys.getBoundingRect();
	            var forceInstance = forceHelper(nodes, edges, {
	                rect: rect,
	                gravity: forceModel.get('gravity')
	            });
	            var oldStep = forceInstance.step;
	            forceInstance.step = function (cb) {
	                for (var i = 0, l = nodes.length; i < l; i++) {
	                    if (nodes[i].fixed) {
	                        // Write back to layout instance
	                        vec2.copy(nodes[i].p, graph.getNodeByIndex(i).getLayout());
	                    }
	                }
	                oldStep(function (nodes, edges, stopped) {
	                    for (var i = 0, l = nodes.length; i < l; i++) {
	                        if (!nodes[i].fixed) {
	                            graph.getNodeByIndex(i).setLayout(nodes[i].p);
	                        }
	                        preservedPoints[nodeData.getId(i)] = nodes[i].p;
	                    }
	                    for (var i = 0, l = edges.length; i < l; i++) {
	                        var e = edges[i];
	                        var p1 = e.n1.p;
	                        var p2 = e.n2.p;
	                        var points = [p1, p2];
	                        if (e.curveness > 0) {
	                            points.push([(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness]);
	                        }
	                        graph.getEdgeByIndex(i).setLayout(points);
	                    }
	                    // Update layout
	
	                    cb && cb(stopped);
	                });
	            };
	            graphSeries.forceLayout = forceInstance;
	            graphSeries.preservedPoints = preservedPoints;
	
	            // Step to get the layout
	            forceInstance.step();
	        } else {
	            // Remove prev injected forceLayout instance
	            graphSeries.forceLayout = null;
	        }
	    });
	};

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var vec2 = __webpack_require__(237);
	var scaleAndAdd = vec2.scaleAndAdd;
	
	// function adjacentNode(n, e) {
	//     return e.n1 === n ? e.n2 : e.n1;
	// }
	
	module.exports = function (nodes, edges, opts) {
	    var rect = opts.rect;
	    var width = rect.width;
	    var height = rect.height;
	    var center = [rect.x + width / 2, rect.y + height / 2];
	    // var scale = opts.scale || 1;
	    var gravity = opts.gravity == null ? 0.1 : opts.gravity;
	
	    // for (var i = 0; i < edges.length; i++) {
	    //     var e = edges[i];
	    //     var n1 = e.n1;
	    //     var n2 = e.n2;
	    //     n1.edges = n1.edges || [];
	    //     n2.edges = n2.edges || [];
	    //     n1.edges.push(e);
	    //     n2.edges.push(e);
	    // }
	    // Init position
	    for (var i = 0; i < nodes.length; i++) {
	        var n = nodes[i];
	        if (!n.p) {
	            // Use the position from first adjecent node with defined position
	            // Or use a random position
	            // From d3
	            // if (n.edges) {
	            //     var j = -1;
	            //     while (++j < n.edges.length) {
	            //         var e = n.edges[j];
	            //         var other = adjacentNode(n, e);
	            //         if (other.p) {
	            //             n.p = vec2.clone(other.p);
	            //             break;
	            //         }
	            //     }
	            // }
	            // if (!n.p) {
	            n.p = vec2.create(width * (Math.random() - 0.5) + center[0], height * (Math.random() - 0.5) + center[1]);
	            // }
	        }
	        n.pp = vec2.clone(n.p);
	        n.edges = null;
	    }
	
	    // Formula in 'Graph Drawing by Force-directed Placement'
	    // var k = scale * Math.sqrt(width * height / nodes.length);
	    // var k2 = k * k;
	
	    var friction = 0.6;
	
	    return {
	        warmUp: function warmUp() {
	            friction = 0.5;
	        },
	
	        setFixed: function setFixed(idx) {
	            nodes[idx].fixed = true;
	        },
	
	        setUnfixed: function setUnfixed(idx) {
	            nodes[idx].fixed = false;
	        },
	
	        step: function step(cb) {
	            var v12 = [];
	            var nLen = nodes.length;
	            for (var i = 0; i < edges.length; i++) {
	                var e = edges[i];
	                var n1 = e.n1;
	                var n2 = e.n2;
	
	                vec2.sub(v12, n2.p, n1.p);
	                var d = vec2.len(v12) - e.d;
	                var w = n2.w / (n1.w + n2.w);
	                vec2.normalize(v12, v12);
	
	                !n1.fixed && scaleAndAdd(n1.p, n1.p, v12, w * d * friction);
	                !n2.fixed && scaleAndAdd(n2.p, n2.p, v12, -(1 - w) * d * friction);
	            }
	            // Gravity
	            for (var i = 0; i < nLen; i++) {
	                var n = nodes[i];
	                if (!n.fixed) {
	                    vec2.sub(v12, center, n.p);
	                    // var d = vec2.len(v12);
	                    // vec2.scale(v12, v12, 1 / d);
	                    // var gravityFactor = gravity;
	                    vec2.scaleAndAdd(n.p, n.p, v12, gravity * friction);
	                }
	            }
	
	            // Repulsive
	            // PENDING
	            for (var i = 0; i < nLen; i++) {
	                var n1 = nodes[i];
	                for (var j = i + 1; j < nLen; j++) {
	                    var n2 = nodes[j];
	                    vec2.sub(v12, n2.p, n1.p);
	                    var d = vec2.len(v12);
	                    if (d === 0) {
	                        // Random repulse
	                        vec2.set(v12, Math.random() - 0.5, Math.random() - 0.5);
	                        d = 1;
	                    }
	                    var repFact = (n1.rep + n2.rep) / d / d;
	                    !n1.fixed && scaleAndAdd(n1.pp, n1.pp, v12, repFact);
	                    !n2.fixed && scaleAndAdd(n2.pp, n2.pp, v12, -repFact);
	                }
	            }
	            var v = [];
	            for (var i = 0; i < nLen; i++) {
	                var n = nodes[i];
	                if (!n.fixed) {
	                    vec2.sub(v, n.p, n.pp);
	                    vec2.scaleAndAdd(n.p, n.p, v, friction);
	                    vec2.copy(n.pp, n.p);
	                }
	            }
	
	            friction = friction * 0.992;
	
	            cb && cb(nodes, edges, friction < 0.01);
	        }
	    };
	};

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// FIXME Where to create the simple view coordinate system
	var View = __webpack_require__(390);
	var layout = __webpack_require__(242);
	var bbox = __webpack_require__(271);
	
	function getViewRect(seriesModel, api, aspect) {
	    var option = seriesModel.getBoxLayoutParams();
	    option.aspect = aspect;
	    return layout.getLayoutRect(option, {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}
	
	module.exports = function (ecModel, api) {
	    var viewList = [];
	    ecModel.eachSeriesByType('graph', function (seriesModel) {
	        var coordSysType = seriesModel.get('coordinateSystem');
	        if (!coordSysType || coordSysType === 'view') {
	            var viewCoordSys = new View();
	            viewList.push(viewCoordSys);
	
	            var data = seriesModel.getData();
	            var positions = data.mapArray(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                return [+itemModel.get('x'), +itemModel.get('y')];
	            });
	
	            var min = [];
	            var max = [];
	
	            bbox.fromPoints(positions, min, max);
	
	            // FIXME If get view rect after data processed?
	            var viewRect = getViewRect(seriesModel, api, (max[0] - min[0]) / (max[1] - min[1]) || 1);
	            // Position may be NaN, use view rect instead
	            if (isNaN(min[0]) || isNaN(min[1])) {
	                min = [viewRect.x, viewRect.y];
	                max = [viewRect.x + viewRect.width, viewRect.y + viewRect.height];
	            }
	
	            var bbWidth = max[0] - min[0];
	            var bbHeight = max[1] - min[1];
	
	            var viewWidth = viewRect.width;
	            var viewHeight = viewRect.height;
	
	            viewCoordSys = seriesModel.coordinateSystem = new View();
	
	            viewCoordSys.setBoundingRect(min[0], min[1], bbWidth, bbHeight);
	            viewCoordSys.setViewRect(viewRect.x, viewRect.y, viewWidth, viewHeight);
	
	            // Update roam info
	            var roamDetailModel = seriesModel.getModel('roamDetail');
	            viewCoordSys.setPan(roamDetailModel.get('x') || 0, roamDetailModel.get('y') || 0);
	            viewCoordSys.setZoom(roamDetailModel.get('zoom') || 1);
	        }
	    });
	    return viewList;
	};

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(429);
	__webpack_require__(430);

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var SeriesModel = __webpack_require__(248);
	var zrUtil = __webpack_require__(224);
	
	var GaugeSeries = SeriesModel.extend({
	
	    type: 'series.gauge',
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var list = new List(['value'], this);
	        var dataOpt = option.data || [];
	        if (!zrUtil.isArray(dataOpt)) {
	            dataOpt = [dataOpt];
	        }
	        // Only use the first data item
	        list.initData(dataOpt);
	        return list;
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	        // 默认全局居中
	        center: ['50%', '50%'],
	        legendHoverLink: true,
	        radius: '75%',
	        startAngle: 225,
	        endAngle: -45,
	        clockwise: true,
	        // 最小值
	        min: 0,
	        // 最大值
	        max: 100,
	        // 分割段数，默认为10
	        splitNumber: 10,
	        // 坐标轴线
	        axisLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            lineStyle: { // 属性lineStyle控制线条样式
	                color: [[0.2, '#91c7ae'], [0.8, '#63869e'], [1, '#c23531']],
	                width: 30
	            }
	        },
	        // 分隔线
	        splitLine: {
	            // 默认显示，属性show控制显示与否
	            show: true,
	            // 属性length控制线长
	            length: 30,
	            // 属性lineStyle（详见lineStyle）控制线条样式
	            lineStyle: {
	                color: '#eee',
	                width: 2,
	                type: 'solid'
	            }
	        },
	        // 坐标轴小标记
	        axisTick: {
	            // 属性show控制显示与否，默认不显示
	            show: true,
	            // 每份split细分多少段
	            splitNumber: 5,
	            // 属性length控制线长
	            length: 8,
	            // 属性lineStyle控制线条样式
	            lineStyle: {
	                color: '#eee',
	                width: 1,
	                type: 'solid'
	            }
	        },
	        axisLabel: {
	            show: true,
	            // formatter: null,
	            textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                color: 'auto'
	            }
	        },
	        pointer: {
	            show: true,
	            length: '80%',
	            width: 8
	        },
	        itemStyle: {
	            normal: {
	                color: 'auto'
	            }
	        },
	        title: {
	            show: true,
	            // x, y，单位px
	            offsetCenter: [0, '-40%'],
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                color: '#333',
	                fontSize: 15
	            }
	        },
	        detail: {
	            show: true,
	            backgroundColor: 'rgba(0,0,0,0)',
	            borderWidth: 0,
	            borderColor: '#ccc',
	            width: 100,
	            height: 40,
	            // x, y，单位px
	            offsetCenter: [0, '40%'],
	            // formatter: null,
	            // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	            textStyle: {
	                color: 'auto',
	                fontSize: 30
	            }
	        }
	    }
	});
	
	module.exports = GaugeSeries;

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var PointerPath = __webpack_require__(431);
	
	var graphic = __webpack_require__(263);
	var numberUtil = __webpack_require__(228);
	var parsePercent = numberUtil.parsePercent;
	
	function parsePosition(seriesModel, api) {
	    var center = seriesModel.get('center');
	    var width = api.getWidth();
	    var height = api.getHeight();
	    var size = Math.min(width, height);
	    var cx = parsePercent(center[0], api.getWidth());
	    var cy = parsePercent(center[1], api.getHeight());
	    var r = parsePercent(seriesModel.get('radius'), size / 2);
	
	    return {
	        cx: cx,
	        cy: cy,
	        r: r
	    };
	}
	
	function formatLabel(label, labelFormatter) {
	    if (labelFormatter) {
	        if (typeof labelFormatter === 'string') {
	            label = labelFormatter.replace('{value}', label);
	        } else if (typeof labelFormatter === 'function') {
	            label = labelFormatter(label);
	        }
	    }
	
	    return label;
	}
	
	var PI2 = Math.PI * 2;
	
	var GaugeView = __webpack_require__(262).extend({
	
	    type: 'gauge',
	
	    render: function render(seriesModel, ecModel, api) {
	
	        this.group.removeAll();
	
	        var colorList = seriesModel.get('axisLine.lineStyle.color');
	        var posInfo = parsePosition(seriesModel, api);
	
	        this._renderMain(seriesModel, ecModel, api, colorList, posInfo);
	    },
	
	    _renderMain: function _renderMain(seriesModel, ecModel, api, colorList, posInfo) {
	        var group = this.group;
	
	        var axisLineModel = seriesModel.getModel('axisLine');
	        var lineStyleModel = axisLineModel.getModel('lineStyle');
	
	        var clockwise = seriesModel.get('clockwise');
	        var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;
	        var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;
	
	        var angleRangeSpan = (endAngle - startAngle) % PI2;
	
	        var prevEndAngle = startAngle;
	        var axisLineWidth = lineStyleModel.get('width');
	
	        for (var i = 0; i < colorList.length; i++) {
	            var endAngle = startAngle + angleRangeSpan * colorList[i][0];
	            var sector = new graphic.Sector({
	                shape: {
	                    startAngle: prevEndAngle,
	                    endAngle: endAngle,
	                    cx: posInfo.cx,
	                    cy: posInfo.cy,
	                    clockwise: clockwise,
	                    r0: posInfo.r - axisLineWidth,
	                    r: posInfo.r
	                },
	                silent: true
	            });
	
	            sector.setStyle({
	                fill: colorList[i][1]
	            });
	
	            sector.setStyle(lineStyleModel.getLineStyle(
	            // Because we use sector to simulate arc
	            // so the properties for stroking are useless
	            ['color', 'borderWidth', 'borderColor']));
	
	            group.add(sector);
	
	            prevEndAngle = endAngle;
	        }
	
	        var getColor = function getColor(percent) {
	            // Less than 0
	            if (percent <= 0) {
	                return colorList[0][1];
	            }
	            for (var i = 0; i < colorList.length; i++) {
	                if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {
	                    return colorList[i][1];
	                }
	            }
	            // More than 1
	            return colorList[i - 1][1];
	        };
	
	        if (!clockwise) {
	            var tmp = startAngle;
	            startAngle = endAngle;
	            endAngle = tmp;
	        }
	
	        this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);
	
	        this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise);
	
	        this._renderTitle(seriesModel, ecModel, api, getColor, posInfo);
	        this._renderDetail(seriesModel, ecModel, api, getColor, posInfo);
	    },
	
	    _renderTicks: function _renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
	        var group = this.group;
	        var cx = posInfo.cx;
	        var cy = posInfo.cy;
	        var r = posInfo.r;
	
	        var minVal = seriesModel.get('min');
	        var maxVal = seriesModel.get('max');
	
	        var splitLineModel = seriesModel.getModel('splitLine');
	        var tickModel = seriesModel.getModel('axisTick');
	        var labelModel = seriesModel.getModel('axisLabel');
	
	        var splitNumber = seriesModel.get('splitNumber');
	        var subSplitNumber = tickModel.get('splitNumber');
	
	        var splitLineLen = parsePercent(splitLineModel.get('length'), r);
	        var tickLen = parsePercent(tickModel.get('length'), r);
	
	        var angle = startAngle;
	        var step = (endAngle - startAngle) / splitNumber;
	        var subStep = step / subSplitNumber;
	
	        var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();
	        var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();
	        var textStyleModel = labelModel.getModel('textStyle');
	
	        for (var i = 0; i <= splitNumber; i++) {
	            var unitX = Math.cos(angle);
	            var unitY = Math.sin(angle);
	            // Split line
	            if (splitLineModel.get('show')) {
	                var splitLine = new graphic.Line({
	                    shape: {
	                        x1: unitX * r + cx,
	                        y1: unitY * r + cy,
	                        x2: unitX * (r - splitLineLen) + cx,
	                        y2: unitY * (r - splitLineLen) + cy
	                    },
	                    style: splitLineStyle,
	                    silent: true
	                });
	                if (splitLineStyle.stroke === 'auto') {
	                    splitLine.setStyle({
	                        stroke: getColor(i / splitNumber)
	                    });
	                }
	
	                group.add(splitLine);
	            }
	
	            // Label
	            if (labelModel.get('show')) {
	                var label = formatLabel(numberUtil.round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));
	
	                var text = new graphic.Text({
	                    style: {
	                        text: label,
	                        x: unitX * (r - splitLineLen - 5) + cx,
	                        y: unitY * (r - splitLineLen - 5) + cy,
	                        fill: textStyleModel.getTextColor(),
	                        textFont: textStyleModel.getFont(),
	                        textVerticalAlign: unitY < -0.4 ? 'top' : unitY > 0.4 ? 'bottom' : 'middle',
	                        textAlign: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'
	                    },
	                    silent: true
	                });
	                if (text.style.fill === 'auto') {
	                    text.setStyle({
	                        fill: getColor(i / splitNumber)
	                    });
	                }
	
	                group.add(text);
	            }
	
	            // Axis tick
	            if (tickModel.get('show') && i !== splitNumber) {
	                for (var j = 0; j <= subSplitNumber; j++) {
	                    var unitX = Math.cos(angle);
	                    var unitY = Math.sin(angle);
	                    var tickLine = new graphic.Line({
	                        shape: {
	                            x1: unitX * r + cx,
	                            y1: unitY * r + cy,
	                            x2: unitX * (r - tickLen) + cx,
	                            y2: unitY * (r - tickLen) + cy
	                        },
	                        silent: true,
	                        style: tickLineStyle
	                    });
	
	                    if (tickLineStyle.stroke === 'auto') {
	                        tickLine.setStyle({
	                            stroke: getColor((i + j / subSplitNumber) / splitNumber)
	                        });
	                    }
	
	                    group.add(tickLine);
	                    angle += subStep;
	                }
	                angle -= subStep;
	            } else {
	                angle += step;
	            }
	        }
	    },
	
	    _renderPointer: function _renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise) {
	        var linearMap = numberUtil.linearMap;
	        var valueExtent = [+seriesModel.get('min'), +seriesModel.get('max')];
	        var angleExtent = [startAngle, endAngle];
	
	        if (!clockwise) {
	            angleExtent = angleExtent.reverse();
	        }
	
	        var data = seriesModel.getData();
	        var oldData = this._data;
	
	        var group = this.group;
	
	        data.diff(oldData).add(function (idx) {
	            var pointer = new PointerPath({
	                shape: {
	                    angle: startAngle
	                }
	            });
	
	            graphic.updateProps(pointer, {
	                shape: {
	                    angle: linearMap(data.get('value', idx), valueExtent, angleExtent)
	                }
	            }, seriesModel);
	
	            group.add(pointer);
	            data.setItemGraphicEl(idx, pointer);
	        }).update(function (newIdx, oldIdx) {
	            var pointer = oldData.getItemGraphicEl(oldIdx);
	
	            graphic.updateProps(pointer, {
	                shape: {
	                    angle: linearMap(data.get('value', newIdx), valueExtent, angleExtent)
	                }
	            }, seriesModel);
	
	            group.add(pointer);
	            data.setItemGraphicEl(newIdx, pointer);
	        }).remove(function (idx) {
	            var pointer = oldData.getItemGraphicEl(idx);
	            group.remove(pointer);
	        }).execute();
	
	        data.eachItemGraphicEl(function (pointer, idx) {
	            var itemModel = data.getItemModel(idx);
	            var pointerModel = itemModel.getModel('pointer');
	
	            pointer.attr({
	                shape: {
	                    x: posInfo.cx,
	                    y: posInfo.cy,
	                    width: parsePercent(pointerModel.get('width'), posInfo.r),
	                    r: parsePercent(pointerModel.get('length'), posInfo.r)
	                },
	                style: itemModel.getModel('itemStyle.normal').getItemStyle()
	            });
	
	            if (pointer.style.fill === 'auto') {
	                pointer.setStyle('fill', getColor((data.get('value', idx) - valueExtent[0]) / (valueExtent[1] - valueExtent[0])));
	            }
	
	            graphic.setHoverStyle(pointer, itemModel.getModel('itemStyle.emphasis').getItemStyle());
	        });
	
	        this._data = data;
	    },
	
	    _renderTitle: function _renderTitle(seriesModel, ecModel, api, getColor, posInfo) {
	        var titleModel = seriesModel.getModel('title');
	        if (titleModel.get('show')) {
	            var textStyleModel = titleModel.getModel('textStyle');
	            var offsetCenter = titleModel.get('offsetCenter');
	            var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	            var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	            var text = new graphic.Text({
	                style: {
	                    x: x,
	                    y: y,
	                    // FIXME First data name ?
	                    text: seriesModel.getData().getName(0),
	                    fill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont(),
	                    textAlign: 'center',
	                    textVerticalAlign: 'middle'
	                }
	            });
	            this.group.add(text);
	        }
	    },
	
	    _renderDetail: function _renderDetail(seriesModel, ecModel, api, getColor, posInfo) {
	        var detailModel = seriesModel.getModel('detail');
	        var minVal = seriesModel.get('min');
	        var maxVal = seriesModel.get('max');
	        if (detailModel.get('show')) {
	            var textStyleModel = detailModel.getModel('textStyle');
	            var offsetCenter = detailModel.get('offsetCenter');
	            var x = posInfo.cx + parsePercent(offsetCenter[0], posInfo.r);
	            var y = posInfo.cy + parsePercent(offsetCenter[1], posInfo.r);
	            var width = parsePercent(detailModel.get('width'), posInfo.r);
	            var height = parsePercent(detailModel.get('height'), posInfo.r);
	            var value = seriesModel.getData().get('value', 0);
	            var rect = new graphic.Rect({
	                shape: {
	                    x: x - width / 2,
	                    y: y - height / 2,
	                    width: width,
	                    height: height
	                },
	                style: {
	                    text: formatLabel(
	                    // FIXME First data name ?
	                    value, detailModel.get('formatter')),
	                    fill: detailModel.get('backgroundColor'),
	                    textFill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                }
	            });
	            if (rect.style.textFill === 'auto') {
	                rect.setStyle('textFill', getColor((value - minVal) / (maxVal - minVal)));
	            }
	            rect.setStyle(detailModel.getItemStyle(['color']));
	            this.group.add(rect);
	        }
	    }
	});
	
	module.exports = GaugeView;

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(265).extend({
	
	    type: 'echartsGaugePointer',
	
	    shape: {
	        angle: 0,
	
	        width: 10,
	
	        r: 10,
	
	        x: 0,
	
	        y: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var mathCos = Math.cos;
	        var mathSin = Math.sin;
	
	        var r = shape.r;
	        var width = shape.width;
	        var angle = shape.angle;
	        var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);
	        var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);
	
	        angle = shape.angle - Math.PI / 2;
	        ctx.moveTo(x, y);
	        ctx.lineTo(shape.x + mathCos(angle) * width, shape.y + mathSin(angle) * width);
	        ctx.lineTo(shape.x + mathCos(shape.angle) * r, shape.y + mathSin(shape.angle) * r);
	        ctx.lineTo(shape.x - mathCos(angle) * width, shape.y - mathSin(angle) * width);
	        ctx.lineTo(x, y);
	        return;
	    }
	});

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	__webpack_require__(433);
	__webpack_require__(434);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(358), 'funnel'));
	echarts.registerLayout(__webpack_require__(435));
	
	echarts.registerProcessor('filter', zrUtil.curry(__webpack_require__(361), 'funnel'));

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var modelUtil = __webpack_require__(226);
	var completeDimensions = __webpack_require__(317);
	
	var FunnelSeries = __webpack_require__(222).extendSeriesModel({
	
	    type: 'series.funnel',
	
	    init: function init(option) {
	        FunnelSeries.superApply(this, 'init', arguments);
	
	        // Enable legend selection for each data item
	        // Use a function instead of direct access because data reference may changed
	        this.legendDataProvider = function () {
	            return this._dataBeforeProcessed;
	        };
	        // Extend labelLine emphasis
	        this._defaultLabelLine(option);
	    },
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var dimensions = completeDimensions(['value'], option.data);
	        var list = new List(dimensions, this);
	        list.initData(option.data);
	        return list;
	    },
	
	    _defaultLabelLine: function _defaultLabelLine(option) {
	        // Extend labelLine emphasis
	        modelUtil.defaultEmphasis(option.labelLine, ['show']);
	
	        var labelLineNormalOpt = option.labelLine.normal;
	        var labelLineEmphasisOpt = option.labelLine.emphasis;
	        // Not show label line if `label.normal.show = false`
	        labelLineNormalOpt.show = labelLineNormalOpt.show && option.label.normal.show;
	        labelLineEmphasisOpt.show = labelLineEmphasisOpt.show && option.label.emphasis.show;
	    },
	
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        legendHoverLink: true,
	        left: 80,
	        top: 60,
	        right: 80,
	        bottom: 60,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,
	
	        // 默认取数据最小最大值
	        // min: 0,
	        // max: 100,
	        minSize: '0%',
	        maxSize: '100%',
	        sort: 'descending', // 'ascending', 'descending'
	        gap: 0,
	        funnelAlign: 'center',
	        label: {
	            normal: {
	                show: true,
	                position: 'outer'
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            },
	            emphasis: {
	                show: true
	            }
	        },
	        labelLine: {
	            normal: {
	                show: true,
	                length: 20,
	                lineStyle: {
	                    // color: 各异,
	                    width: 1,
	                    type: 'solid'
	                }
	            },
	            emphasis: {}
	        },
	        itemStyle: {
	            normal: {
	                // color: 各异,
	                borderColor: '#fff',
	                borderWidth: 1
	            },
	            emphasis: {
	                // color: 各异,
	            }
	        }
	    }
	});
	
	module.exports = FunnelSeries;

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	
	/**
	 * Piece of pie including Sector, Label, LabelLine
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 */
	function FunnelPiece(data, idx) {
	
	    graphic.Group.call(this);
	
	    var polygon = new graphic.Polygon();
	    var labelLine = new graphic.Polyline();
	    var text = new graphic.Text();
	    this.add(polygon);
	    this.add(labelLine);
	    this.add(text);
	
	    this.updateData(data, idx, true);
	
	    // Hover to change label and labelLine
	    function onEmphasis() {
	        labelLine.ignore = labelLine.hoverIgnore;
	        text.ignore = text.hoverIgnore;
	    }
	    function onNormal() {
	        labelLine.ignore = labelLine.normalIgnore;
	        text.ignore = text.normalIgnore;
	    }
	    this.on('emphasis', onEmphasis).on('normal', onNormal).on('mouseover', onEmphasis).on('mouseout', onNormal);
	}
	
	var funnelPieceProto = FunnelPiece.prototype;
	
	function getLabelStyle(data, idx, state, labelModel) {
	    var textStyleModel = labelModel.getModel('textStyle');
	    var position = labelModel.get('position');
	    var isLabelInside = position === 'inside' || position === 'inner' || position === 'center';
	    return {
	        fill: textStyleModel.getTextColor() || (isLabelInside ? '#fff' : data.getItemVisual(idx, 'color')),
	        textFont: textStyleModel.getFont(),
	        text: zrUtil.retrieve(data.hostModel.getFormattedLabel(idx, state), data.getName(idx))
	    };
	}
	
	var opacityAccessPath = ['itemStyle', 'normal', 'opacity'];
	funnelPieceProto.updateData = function (data, idx, firstCreate) {
	
	    var polygon = this.childAt(0);
	
	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var opacity = data.getItemModel(idx).get(opacityAccessPath);
	    opacity = opacity == null ? 1 : opacity;
	    if (firstCreate) {
	        polygon.setShape({
	            points: layout.points
	        });
	        polygon.setStyle({ opacity: 0 });
	        graphic.updateProps(polygon, {
	            style: {
	                opacity: opacity
	            }
	        }, seriesModel);
	    } else {
	        graphic.initProps(polygon, {
	            shape: {
	                points: layout.points
	            }
	        }, seriesModel);
	    }
	
	    // Update common style
	    var itemStyleModel = itemModel.getModel('itemStyle');
	    var visualColor = data.getItemVisual(idx, 'color');
	
	    polygon.setStyle(zrUtil.defaults({
	        fill: visualColor
	    }, itemStyleModel.getModel('normal').getItemStyle()));
	    polygon.hoverStyle = itemStyleModel.getModel('emphasis').getItemStyle();
	
	    this._updateLabel(data, idx);
	
	    graphic.setHoverStyle(this);
	};
	
	funnelPieceProto._updateLabel = function (data, idx) {
	
	    var labelLine = this.childAt(1);
	    var labelText = this.childAt(2);
	
	    var seriesModel = data.hostModel;
	    var itemModel = data.getItemModel(idx);
	    var layout = data.getItemLayout(idx);
	    var labelLayout = layout.label;
	    var visualColor = data.getItemVisual(idx, 'color');
	
	    graphic.updateProps(labelLine, {
	        shape: {
	            points: labelLayout.linePoints || labelLayout.linePoints
	        }
	    }, seriesModel);
	
	    graphic.updateProps(labelText, {
	        style: {
	            x: labelLayout.x,
	            y: labelLayout.y
	        }
	    }, seriesModel);
	    labelText.attr({
	        style: {
	            textAlign: labelLayout.textAlign,
	            textVerticalAlign: labelLayout.verticalAlign,
	            textFont: labelLayout.font
	        },
	        rotation: labelLayout.rotation,
	        origin: [labelLayout.x, labelLayout.y],
	        z2: 10
	    });
	
	    var labelModel = itemModel.getModel('label.normal');
	    var labelHoverModel = itemModel.getModel('label.emphasis');
	    var labelLineModel = itemModel.getModel('labelLine.normal');
	    var labelLineHoverModel = itemModel.getModel('labelLine.emphasis');
	
	    labelText.setStyle(getLabelStyle(data, idx, 'normal', labelModel));
	
	    labelText.ignore = labelText.normalIgnore = !labelModel.get('show');
	    labelText.hoverIgnore = !labelHoverModel.get('show');
	
	    labelLine.ignore = labelLine.normalIgnore = !labelLineModel.get('show');
	    labelLine.hoverIgnore = !labelLineHoverModel.get('show');
	
	    // Default use item visual color
	    labelLine.setStyle({
	        stroke: visualColor
	    });
	    labelLine.setStyle(labelLineModel.getModel('lineStyle').getLineStyle());
	
	    labelText.hoverStyle = getLabelStyle(data, idx, 'emphasis', labelHoverModel);
	    labelLine.hoverStyle = labelLineHoverModel.getModel('lineStyle').getLineStyle();
	};
	
	zrUtil.inherits(FunnelPiece, graphic.Group);
	
	var Funnel = __webpack_require__(262).extend({
	
	    type: 'funnel',
	
	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var oldData = this._data;
	
	        var group = this.group;
	
	        data.diff(oldData).add(function (idx) {
	            var funnelPiece = new FunnelPiece(data, idx);
	
	            data.setItemGraphicEl(idx, funnelPiece);
	
	            group.add(funnelPiece);
	        }).update(function (newIdx, oldIdx) {
	            var piePiece = oldData.getItemGraphicEl(oldIdx);
	
	            piePiece.updateData(data, newIdx);
	
	            group.add(piePiece);
	            data.setItemGraphicEl(newIdx, piePiece);
	        }).remove(function (idx) {
	            var piePiece = oldData.getItemGraphicEl(idx);
	            group.remove(piePiece);
	        }).execute();
	
	        this._data = data;
	    },
	
	    remove: function remove() {
	        this.group.removeAll();
	        this._data = null;
	    }
	});
	
	module.exports = Funnel;

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var layout = __webpack_require__(242);
	var number = __webpack_require__(228);
	
	var parsePercent = number.parsePercent;
	
	function getViewRect(seriesModel, api) {
	    return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}
	
	function getSortedIndices(data, sort) {
	    var valueArr = data.mapArray('value', function (val) {
	        return val;
	    });
	    var indices = [];
	    var isAscending = sort === 'ascending';
	    for (var i = 0, len = data.count(); i < len; i++) {
	        indices[i] = i;
	    }
	    indices.sort(function (a, b) {
	        return isAscending ? valueArr[a] - valueArr[b] : valueArr[b] - valueArr[a];
	    });
	    return indices;
	}
	
	function labelLayout(data) {
	    data.each(function (idx) {
	        var itemModel = data.getItemModel(idx);
	        var labelModel = itemModel.getModel('label.normal');
	        var labelPosition = labelModel.get('position');
	
	        var labelLineModel = itemModel.getModel('labelLine.normal');
	
	        var layout = data.getItemLayout(idx);
	        var points = layout.points;
	
	        var isLabelInside = labelPosition === 'inner' || labelPosition === 'inside' || labelPosition === 'center';
	
	        var textAlign;
	        var textX;
	        var textY;
	        var linePoints;
	
	        if (isLabelInside) {
	            textX = (points[0][0] + points[1][0] + points[2][0] + points[3][0]) / 4;
	            textY = (points[0][1] + points[1][1] + points[2][1] + points[3][1]) / 4;
	            textAlign = 'center';
	            linePoints = [[textX, textY], [textX, textY]];
	        } else {
	            var x1;
	            var y1;
	            var x2;
	            var labelLineLen = labelLineModel.get('length');
	            if (labelPosition === 'left') {
	                // Left side
	                x1 = (points[3][0] + points[0][0]) / 2;
	                y1 = (points[3][1] + points[0][1]) / 2;
	                x2 = x1 - labelLineLen;
	                textX = x2 - 5;
	                textAlign = 'right';
	            } else {
	                // Right side
	                x1 = (points[1][0] + points[2][0]) / 2;
	                y1 = (points[1][1] + points[2][1]) / 2;
	                x2 = x1 + labelLineLen;
	                textX = x2 + 5;
	                textAlign = 'left';
	            }
	            var y2 = y1;
	
	            linePoints = [[x1, y1], [x2, y2]];
	            textY = y2;
	        }
	
	        layout.label = {
	            linePoints: linePoints,
	            x: textX,
	            y: textY,
	            verticalAlign: 'middle',
	            textAlign: textAlign,
	            inside: isLabelInside
	        };
	    });
	}
	
	module.exports = function (ecModel, api) {
	    ecModel.eachSeriesByType('funnel', function (seriesModel) {
	        var data = seriesModel.getData();
	        var sort = seriesModel.get('sort');
	        var viewRect = getViewRect(seriesModel, api);
	        var indices = getSortedIndices(data, sort);
	
	        var sizeExtent = [parsePercent(seriesModel.get('minSize'), viewRect.width), parsePercent(seriesModel.get('maxSize'), viewRect.width)];
	        var dataExtent = data.getDataExtent('value');
	        var min = seriesModel.get('min');
	        var max = seriesModel.get('max');
	        if (min == null) {
	            min = Math.min(dataExtent[0], 0);
	        }
	        if (max == null) {
	            max = dataExtent[1];
	        }
	
	        var funnelAlign = seriesModel.get('funnelAlign');
	        var gap = seriesModel.get('gap');
	        var itemHeight = (viewRect.height - gap * (data.count() - 1)) / data.count();
	
	        var y = viewRect.y;
	
	        var getLinePoints = function getLinePoints(idx, offY) {
	            // End point index is data.count() and we assign it 0
	            var val = data.get('value', idx) || 0;
	            var itemWidth = number.linearMap(val, [min, max], sizeExtent, true);
	            var x0;
	            switch (funnelAlign) {
	                case 'left':
	                    x0 = viewRect.x;
	                    break;
	                case 'center':
	                    x0 = viewRect.x + (viewRect.width - itemWidth) / 2;
	                    break;
	                case 'right':
	                    x0 = viewRect.x + viewRect.width - itemWidth;
	                    break;
	            }
	            return [[x0, offY], [x0 + itemWidth, offY]];
	        };
	
	        if (sort === 'ascending') {
	            // From bottom to top
	            itemHeight = -itemHeight;
	            gap = -gap;
	            y += viewRect.height;
	            indices = indices.reverse();
	        }
	
	        for (var i = 0; i < indices.length; i++) {
	            var idx = indices[i];
	            var nextIdx = indices[i + 1];
	            var start = getLinePoints(idx, y);
	            var end = getLinePoints(nextIdx, y + itemHeight);
	
	            y += itemHeight + gap;
	
	            data.setItemLayout(idx, {
	                points: start.concat(end.slice().reverse())
	            });
	        }
	
	        labelLayout(data);
	    });
	};

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(437);
	
	__webpack_require__(448);
	__webpack_require__(449);
	
	echarts.registerVisualCoding('chart', __webpack_require__(450));

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(438);
	__webpack_require__(441);
	__webpack_require__(443);
	
	var echarts = __webpack_require__(222);
	
	// Parallel view
	echarts.extendComponentView({
	    type: 'parallel'
	});
	
	echarts.registerPreprocessor(__webpack_require__(447));

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Parallel coordinate system creater.
	 */
	
	var Parallel = __webpack_require__(439);
	
	function create(ecModel, api) {
	    var coordSysList = [];
	
	    ecModel.eachComponent('parallel', function (parallelModel, idx) {
	        var coordSys = new Parallel(parallelModel, ecModel, api);
	
	        coordSys.name = 'parallel_' + idx;
	        coordSys.resize(parallelModel, api);
	
	        parallelModel.coordinateSystem = coordSys;
	        coordSys.model = parallelModel;
	
	        coordSysList.push(coordSys);
	    });
	
	    // Inject the coordinateSystems into seriesModel
	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.get('coordinateSystem') === 'parallel') {
	            var parallelIndex = seriesModel.get('parallelIndex');
	            seriesModel.coordinateSystem = coordSysList[parallelIndex];
	        }
	    });
	
	    return coordSysList;
	}
	
	__webpack_require__(246).register('parallel', { create: create });

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Parallel Coordinates
	 * <https://en.wikipedia.org/wiki/Parallel_coordinates>
	 */
	
	var layout = __webpack_require__(242);
	var axisHelper = __webpack_require__(329);
	var zrUtil = __webpack_require__(224);
	var ParallelAxis = __webpack_require__(440);
	var matrix = __webpack_require__(238);
	var vector = __webpack_require__(237);
	
	var each = zrUtil.each;
	
	var PI = Math.PI;
	
	function Parallel(parallelModel, ecModel, api) {
	
	    /**
	     * key: dimension
	     * @type {Object.<string, module:echarts/coord/parallel/Axis>}
	     * @private
	     */
	    this._axesMap = {};
	
	    /**
	     * key: dimension
	     * value: {position: [], rotation, }
	     * @type {Object.<string, Object>}
	     * @private
	     */
	    this._axesLayout = {};
	
	    /**
	     * Always follow axis order.
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    this.dimensions = parallelModel.dimensions;
	
	    /**
	     * @type {module:zrender/core/BoundingRect}
	     */
	    this._rect;
	
	    /**
	     * @type {module:echarts/coord/parallel/ParallelModel}
	     */
	    this._model = parallelModel;
	
	    this._init(parallelModel, ecModel, api);
	}
	
	Parallel.prototype = {
	
	    type: 'parallel',
	
	    constructor: Parallel,
	
	    /**
	     * Initialize cartesian coordinate systems
	     * @private
	     */
	    _init: function _init(parallelModel, ecModel, api) {
	
	        var dimensions = parallelModel.dimensions;
	        var parallelAxisIndex = parallelModel.parallelAxisIndex;
	
	        each(dimensions, function (dim, idx) {
	
	            var axisIndex = parallelAxisIndex[idx];
	            var axisModel = ecModel.getComponent('parallelAxis', axisIndex);
	
	            var axis = this._axesMap[dim] = new ParallelAxis(dim, axisHelper.createScaleByModel(axisModel), [0, 0], axisModel.get('type'), axisIndex);
	
	            var isCategory = axis.type === 'category';
	            axis.onBand = isCategory && axisModel.get('boundaryGap');
	            axis.inverse = axisModel.get('inverse');
	
	            // Inject axis into axisModel
	            axisModel.axis = axis;
	
	            // Inject axisModel into axis
	            axis.model = axisModel;
	        }, this);
	    },
	
	    /**
	     * Update axis scale after data processed
	     * @param  {module:echarts/model/Global} ecModel
	     * @param  {module:echarts/ExtensionAPI} api
	     */
	    update: function update(ecModel, api) {
	        this._updateAxesFromSeries(this._model, ecModel);
	    },
	
	    /**
	     * Update properties from series
	     * @private
	     */
	    _updateAxesFromSeries: function _updateAxesFromSeries(parallelModel, ecModel) {
	        ecModel.eachSeries(function (seriesModel) {
	
	            if (!parallelModel.contains(seriesModel, ecModel)) {
	                return;
	            }
	
	            var data = seriesModel.getData();
	
	            each(this.dimensions, function (dim) {
	                var axis = this._axesMap[dim];
	                axis.scale.unionExtent(data.getDataExtent(dim));
	                axisHelper.niceScaleExtent(axis, axis.model);
	            }, this);
	        }, this);
	    },
	
	    /**
	     * Resize the parallel coordinate system.
	     * @param {module:echarts/coord/parallel/ParallelModel} parallelModel
	     * @param {module:echarts/ExtensionAPI} api
	     */
	    resize: function resize(parallelModel, api) {
	        this._rect = layout.getLayoutRect(parallelModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        });
	
	        this._layoutAxes(parallelModel);
	    },
	
	    /**
	     * @return {module:zrender/core/BoundingRect}
	     */
	    getRect: function getRect() {
	        return this._rect;
	    },
	
	    /**
	     * @private
	     */
	    _layoutAxes: function _layoutAxes(parallelModel) {
	        var rect = this._rect;
	        var layout = parallelModel.get('layout');
	        var axes = this._axesMap;
	        var dimensions = this.dimensions;
	
	        var size = [rect.width, rect.height];
	        var sizeIdx = layout === 'horizontal' ? 0 : 1;
	        var layoutLength = size[sizeIdx];
	        var axisLength = size[1 - sizeIdx];
	        var axisExtent = [0, axisLength];
	
	        each(axes, function (axis) {
	            var idx = axis.inverse ? 1 : 0;
	            axis.setExtent(axisExtent[idx], axisExtent[1 - idx]);
	        });
	
	        each(dimensions, function (dim, idx) {
	            var pos = layoutLength * idx / (dimensions.length - 1);
	
	            var positionTable = {
	                horizontal: {
	                    x: pos,
	                    y: axisLength
	                },
	                vertical: {
	                    x: 0,
	                    y: pos
	                }
	            };
	            var rotationTable = {
	                horizontal: PI / 2,
	                vertical: 0
	            };
	
	            var position = [positionTable[layout].x + rect.x, positionTable[layout].y + rect.y];
	
	            var rotation = rotationTable[layout];
	            var transform = matrix.create();
	            matrix.rotate(transform, transform, rotation);
	            matrix.translate(transform, transform, position);
	
	            // TODO
	            // tick等排布信息。
	
	            // TODO
	            // 根据axis order 更新 dimensions顺序。
	
	            this._axesLayout[dim] = {
	                position: position,
	                rotation: rotation,
	                transform: transform,
	                tickDirection: 1,
	                labelDirection: 1
	            };
	        }, this);
	    },
	
	    /**
	     * Get axis by dim.
	     * @param {string} dim
	     * @return {module:echarts/coord/parallel/ParallelAxis} [description]
	     */
	    getAxis: function getAxis(dim) {
	        return this._axesMap[dim];
	    },
	
	    /**
	     * Convert a dim value of a single item of series data to Point.
	     * @param {*} value
	     * @param {string} dim
	     * @return {Array}
	     */
	    dataToPoint: function dataToPoint(value, dim) {
	        return this.axisCoordToPoint(this._axesMap[dim].dataToCoord(value), dim);
	    },
	
	    /**
	     * @param {module:echarts/data/List} data
	     * @param {Functio} cb param: {string} activeState 'active' or 'inactive' or 'normal'
	     *                            {number} dataIndex
	     * @param {Object} context
	     */
	    eachActiveState: function eachActiveState(data, callback, context) {
	        var dimensions = this.dimensions;
	        var axesMap = this._axesMap;
	        var hasActiveSet = false;
	
	        for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	            if (axesMap[dimensions[j]].model.getActiveState() !== 'normal') {
	                hasActiveSet = true;
	            }
	        }
	
	        for (var i = 0, len = data.count(); i < len; i++) {
	            var values = data.getValues(dimensions, i);
	            var activeState;
	
	            if (!hasActiveSet) {
	                activeState = 'normal';
	            } else {
	                activeState = 'active';
	                for (var j = 0, lenj = dimensions.length; j < lenj; j++) {
	                    var dimName = dimensions[j];
	                    var state = axesMap[dimName].model.getActiveState(values[j], j);
	
	                    if (state === 'inactive') {
	                        activeState = 'inactive';
	                        break;
	                    }
	                }
	            }
	
	            callback.call(context, activeState, i);
	        }
	    },
	
	    /**
	     * Convert coords of each axis to Point.
	     *  Return point. For example: [10, 20]
	     * @param {Array.<number>} coords
	     * @param {string} dim
	     * @return {Array.<number>}
	     */
	    axisCoordToPoint: function axisCoordToPoint(coord, dim) {
	        var axisLayout = this._axesLayout[dim];
	        var point = [coord, 0];
	        vector.applyTransform(point, point, axisLayout.transform);
	        return point;
	    },
	
	    /**
	     * Get axis layout.
	     */
	    getAxisLayout: function getAxisLayout(dim) {
	        return zrUtil.clone(this._axesLayout[dim]);
	    }
	
	};
	
	module.exports = Parallel;

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	
	/**
	 * @constructor module:echarts/coord/parallel/ParallelAxis
	 * @extends {module:echarts/coord/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 */
	var ParallelAxis = function ParallelAxis(dim, scale, coordExtent, axisType, axisIndex) {
	
	  Axis.call(this, dim, scale, coordExtent);
	
	  /**
	   * Axis type
	   *  - 'category'
	   *  - 'value'
	   *  - 'time'
	   *  - 'log'
	   * @type {string}
	   */
	  this.type = axisType || 'value';
	
	  /**
	   * @type {number}
	   * @readOnly
	   */
	  this.axisIndex = axisIndex;
	};
	
	ParallelAxis.prototype = {
	
	  constructor: ParallelAxis,
	
	  /**
	   * Axis model
	   * @param {module:echarts/coord/parallel/AxisModel}
	   */
	  model: null
	
	};
	
	zrUtil.inherits(ParallelAxis, Axis);
	
	module.exports = ParallelAxis;

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Component = __webpack_require__(240);
	
	__webpack_require__(442);
	
	Component.extend({
	
	    type: 'parallel',
	
	    dependencies: ['parallelAxis'],
	
	    /**
	     * @type {module:echarts/coord/parallel/Parallel}
	     */
	    coordinateSystem: null,
	
	    /**
	     * Each item like: 'dim0', 'dim1', 'dim2', ...
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,
	
	    /**
	     * Coresponding to dimensions.
	     * @type {Array.<number>}
	     * @readOnly
	     */
	    parallelAxisIndex: null,
	
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 0, // 二级层叠
	        left: 80,
	        top: 60,
	        right: 80,
	        bottom: 60,
	        // width: {totalWidth} - left - right,
	        // height: {totalHeight} - top - bottom,
	
	        layout: 'horizontal', // 'horizontal' or 'vertical'
	
	        parallelAxisDefault: null
	    },
	
	    /**
	     * @override
	     */
	    init: function init() {
	        Component.prototype.init.apply(this, arguments);
	
	        this.mergeOption({});
	    },
	
	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(newOption) {
	        var thisOption = this.option;
	
	        newOption && zrUtil.merge(thisOption, newOption, true);
	
	        this._initDimensions();
	    },
	
	    /**
	     * Whether series or axis is in this coordinate system.
	     * @param {module:echarts/model/Series|module:echarts/coord/parallel/AxisModel} model
	     * @param {module:echarts/model/Global} ecModel
	     */
	    contains: function contains(model, ecModel) {
	        var parallelIndex = model.get('parallelIndex');
	        return parallelIndex != null && ecModel.getComponent('parallel', parallelIndex) === this;
	    },
	
	    /**
	     * @private
	     */
	    _initDimensions: function _initDimensions() {
	        var dimensions = this.dimensions = [];
	        var parallelAxisIndex = this.parallelAxisIndex = [];
	
	        var axisModels = zrUtil.filter(this.dependentModels.parallelAxis, function (axisModel) {
	            // Can not use this.contains here, because
	            // initialization has not been completed yet.
	            return axisModel.get('parallelIndex') === this.componentIndex;
	        });
	
	        zrUtil.each(axisModels, function (axisModel) {
	            dimensions.push('dim' + axisModel.get('dim'));
	            parallelAxisIndex.push(axisModel.componentIndex);
	        });
	    }
	
	});

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ComponentModel = __webpack_require__(240);
	var zrUtil = __webpack_require__(224);
	var makeStyleMapper = __webpack_require__(232);
	var axisModelCreator = __webpack_require__(342);
	var numberUtil = __webpack_require__(228);
	
	var AxisModel = ComponentModel.extend({
	
	    type: 'baseParallelAxis',
	
	    /**
	     * @type {module:echarts/coord/parallel/Axis}
	     */
	    axis: null,
	
	    /**
	     * @type {Array.<Array.<number>}
	     * @readOnly
	     */
	    activeIntervals: [],
	
	    /**
	     * @return {Object}
	     */
	    getAreaSelectStyle: function getAreaSelectStyle() {
	        return makeStyleMapper([['fill', 'color'], ['lineWidth', 'borderWidth'], ['stroke', 'borderColor'], ['width', 'width'], ['opacity', 'opacity']]).call(this.getModel('areaSelectStyle'));
	    },
	
	    /**
	     * The code of this feature is put on AxisModel but not ParallelAxis,
	     * because axisModel can be alive after echarts updating but instance of
	     * ParallelAxis having been disposed. this._activeInterval should be kept
	     * when action dispatched (i.e. legend click).
	     *
	     * @param {Array.<Array<number>>} intervals interval.length === 0
	     *                                          means set all active.
	     * @public
	     */
	    setActiveIntervals: function setActiveIntervals(intervals) {
	        var activeIntervals = this.activeIntervals = zrUtil.clone(intervals);
	
	        // Normalize
	        if (activeIntervals) {
	            for (var i = activeIntervals.length - 1; i >= 0; i--) {
	                numberUtil.asc(activeIntervals[i]);
	            }
	        }
	    },
	
	    /**
	     * @param {number|string} [value] When attempting to detect 'no activeIntervals set',
	     *                         value can not be input.
	     * @return {string} 'normal': no activeIntervals set,
	     *                  'active',
	     *                  'inactive'.
	     * @public
	     */
	    getActiveState: function getActiveState(value) {
	        var activeIntervals = this.activeIntervals;
	
	        if (!activeIntervals.length) {
	            return 'normal';
	        }
	
	        if (value == null) {
	            return 'inactive';
	        }
	
	        for (var i = 0, len = activeIntervals.length; i < len; i++) {
	            if (activeIntervals[i][0] <= value && value <= activeIntervals[i][1]) {
	                return 'active';
	            }
	        }
	        return 'inactive';
	    }
	
	});
	
	var defaultOption = {
	
	    type: 'value',
	
	    /**
	     * @type {Array.<number>}
	     */
	    dim: null, // 0, 1, 2, ...
	
	    parallelIndex: null,
	
	    areaSelectStyle: {
	        width: 20,
	        borderWidth: 1,
	        borderColor: 'rgba(160,197,232)',
	        color: 'rgba(160,197,232)',
	        opacity: 0.3
	    },
	
	    z: 10
	};
	
	zrUtil.merge(AxisModel.prototype, __webpack_require__(344));
	
	function getAxisType(axisName, option) {
	    return option.type || (option.data ? 'category' : 'value');
	}
	
	axisModelCreator('parallel', AxisModel, getAxisType, defaultOption);
	
	module.exports = AxisModel;

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(438);
	__webpack_require__(444);
	__webpack_require__(445);

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	var actionInfo = {
	    type: 'axisAreaSelect',
	    event: 'axisAreaSelected',
	    update: 'updateVisual'
	};
	
	/**
	 * @payload
	 * @property {string} parallelAxisId
	 * @property {Array.<Array.<number>>} intervals
	 */
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	    ecModel.eachComponent({ mainType: 'parallelAxis', query: payload }, function (parallelAxisModel) {
	        parallelAxisModel.axis.model.setActiveIntervals(payload.intervals);
	    });
	});

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var AxisBuilder = __webpack_require__(347);
	var SelectController = __webpack_require__(446);
	
	var elementList = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	
	var AxisView = __webpack_require__(222).extendComponentView({
	
	    type: 'parallelAxis',
	
	    /**
	     * @type {module:echarts/component/helper/SelectController}
	     */
	    _selectController: null,
	
	    /**
	     * @override
	     */
	    render: function render(axisModel, ecModel, api, payload) {
	        if (fromAxisAreaSelect(axisModel, ecModel, payload)) {
	            return;
	        }
	
	        this.axisModel = axisModel;
	        this.api = api;
	
	        this.group.removeAll();
	
	        if (!axisModel.get('show')) {
	            return;
	        }
	
	        var coordSys = ecModel.getComponent('parallel', axisModel.get('parallelIndex')).coordinateSystem;
	
	        var areaSelectStyle = axisModel.getAreaSelectStyle();
	        var areaWidth = areaSelectStyle.width;
	
	        var axisLayout = coordSys.getAxisLayout(axisModel.axis.dim);
	        var builderOpt = zrUtil.extend({
	            strokeContainThreshold: areaWidth,
	            // lineWidth === 0 or no value.
	            silent: !(areaWidth > 0) // jshint ignore:line
	        }, axisLayout);
	
	        var axisBuilder = new AxisBuilder(axisModel, builderOpt);
	
	        zrUtil.each(elementList, axisBuilder.add, axisBuilder);
	
	        var axisGroup = axisBuilder.getGroup();
	
	        this.group.add(axisGroup);
	
	        this._buildSelectController(axisGroup, areaSelectStyle, axisModel, api);
	    },
	
	    _buildSelectController: function _buildSelectController(axisGroup, areaSelectStyle, axisModel, api) {
	
	        var axis = axisModel.axis;
	        var selectController = this._selectController;
	
	        if (!selectController) {
	            selectController = this._selectController = new SelectController('line', api.getZr(), areaSelectStyle);
	
	            selectController.on('selected', zrUtil.bind(this._onSelected, this));
	        }
	
	        selectController.enable(axisGroup);
	
	        // After filtering, axis may change, select area needs to be update.
	        var ranges = zrUtil.map(axisModel.activeIntervals, function (interval) {
	            return [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)];
	        });
	        selectController.update(ranges);
	    },
	
	    _onSelected: function _onSelected(ranges) {
	        // Do not cache these object, because the mey be changed.
	        var axisModel = this.axisModel;
	        var axis = axisModel.axis;
	
	        var intervals = zrUtil.map(ranges, function (range) {
	            return [axis.coordToData(range[0], true), axis.coordToData(range[1], true)];
	        });
	        this.api.dispatchAction({
	            type: 'axisAreaSelect',
	            parallelAxisId: axisModel.id,
	            intervals: intervals
	        });
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._selectController && this._selectController.disable();
	    },
	
	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        if (this._selectController) {
	            this._selectController.dispose();
	            this._selectController = null;
	        }
	    }
	});
	
	function fromAxisAreaSelect(axisModel, ecModel, payload) {
	    return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({ mainType: 'parallelAxis', query: payload })[0] === axisModel;
	}
	
	module.exports = AxisView;

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Box selection tool.
	 *
	 * @module echarts/component/helper/SelectController
	 */
	
	var Eventful = __webpack_require__(253);
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var bind = zrUtil.bind;
	var each = zrUtil.each;
	var mathMin = Math.min;
	var mathMax = Math.max;
	var mathPow = Math.pow;
	
	var COVER_Z = 10000;
	var UNSELECT_THRESHOLD = 2;
	var EVENTS = ['mousedown', 'mousemove', 'mouseup'];
	
	/**
	 * @alias module:echarts/component/helper/SelectController
	 * @constructor
	 * @mixin {module:zrender/mixin/Eventful}
	 *
	 * @param {string} type 'line', 'rect'
	 * @param {module:zrender/zrender~ZRender} zr
	 * @param {Object} [opt]
	 * @param {number} [opt.width]
	 * @param {number} [opt.lineWidth]
	 * @param {string} [opt.stroke]
	 * @param {string} [opt.fill]
	 */
	function SelectController(type, zr, opt) {
	
	    Eventful.call(this);
	
	    /**
	     * @type {string}
	     * @readOnly
	     */
	    this.type = type;
	
	    /**
	     * @type {module:zrender/zrender~ZRender}
	     */
	    this.zr = zr;
	
	    /**
	     * @type {Object}
	     * @readOnly
	     */
	    this.opt = zrUtil.clone(opt);
	
	    /**
	     * @type {module:zrender/container/Group}
	     * @readOnly
	     */
	    this.group = new graphic.Group();
	
	    /**
	     * @type {module:zrender/core/BoundingRect}
	     */
	    this._containerRect = null;
	
	    /**
	     * @type {Array.<nubmer>}
	     * @private
	     */
	    this._track = [];
	
	    /**
	     * @type {boolean}
	     */
	    this._dragging;
	
	    /**
	     * @type {module:zrender/Element}
	     * @private
	     */
	    this._cover;
	
	    /**
	     * @type {boolean}
	     * @private
	     */
	    this._disabled = true;
	
	    /**
	     * @type {Object}
	     * @private
	     */
	    this._handlers = {
	        mousedown: bind(mousedown, this),
	        mousemove: bind(mousemove, this),
	        mouseup: bind(mouseup, this)
	    };
	
	    each(EVENTS, function (eventName) {
	        this.zr.on(eventName, this._handlers[eventName]);
	    }, this);
	}
	
	SelectController.prototype = {
	
	    constructor: SelectController,
	
	    /**
	     * @param {module:zrender/mixin/Transformable} container
	     * @param {module:zrender/core/BoundingRect|boolean} [rect] If not specified,
	     *                                                  use container.getBoundingRect().
	     *                                                  If false, do not use containerRect.
	     */
	    enable: function enable(container, rect) {
	
	        this._disabled = false;
	
	        // Remove from old container.
	        removeGroup.call(this);
	
	        // boundingRect will change when dragging, so we have
	        // to keep initial boundingRect.
	        this._containerRect = rect !== false ? rect || container.getBoundingRect() : null;
	
	        // Add to new container.
	        container.add(this.group);
	    },
	
	    /**
	     * Update cover location.
	     * @param {Array.<number>|Object} ranges If null/undefined, remove cover.
	     */
	    update: function update(ranges) {
	        // TODO
	        // Only support one interval yet.
	        renderCover.call(this, ranges && zrUtil.clone(ranges));
	    },
	
	    disable: function disable() {
	        this._disabled = true;
	
	        removeGroup.call(this);
	    },
	
	    dispose: function dispose() {
	        this.disable();
	
	        each(EVENTS, function (eventName) {
	            this.zr.off(eventName, this._handlers[eventName]);
	        }, this);
	    }
	};
	
	zrUtil.mixin(SelectController, Eventful);
	
	function updateZ(group) {
	    group.traverse(function (el) {
	        el.z = COVER_Z;
	    });
	}
	
	function isInContainer(x, y) {
	    var localPos = this.group.transformCoordToLocal(x, y);
	    return !this._containerRect || this._containerRect.contain(localPos[0], localPos[1]);
	}
	
	function preventDefault(e) {
	    var rawE = e.event;
	    rawE.preventDefault && rawE.preventDefault();
	}
	
	function mousedown(e) {
	    if (this._disabled || e.target && e.target.draggable) {
	        return;
	    }
	
	    preventDefault(e);
	
	    var x = e.offsetX;
	    var y = e.offsetY;
	
	    if (isInContainer.call(this, x, y)) {
	        this._dragging = true;
	        this._track = [[x, y]];
	    }
	}
	
	function mousemove(e) {
	    if (!this._dragging || this._disabled) {
	        return;
	    }
	
	    preventDefault(e);
	
	    updateViewByCursor.call(this, e);
	}
	
	function mouseup(e) {
	    if (!this._dragging || this._disabled) {
	        return;
	    }
	
	    preventDefault(e);
	
	    updateViewByCursor.call(this, e, true);
	
	    this._dragging = false;
	    this._track = [];
	}
	
	function updateViewByCursor(e, isEnd) {
	    var x = e.offsetX;
	    var y = e.offsetY;
	
	    if (isInContainer.call(this, x, y)) {
	        this._track.push([x, y]);
	
	        // Create or update cover.
	        var ranges = shouldShowCover.call(this) ? coverRenderers[this.type].getRanges.call(this)
	        // Remove cover.
	        : [];
	
	        renderCover.call(this, ranges);
	
	        this.trigger('selected', zrUtil.clone(ranges));
	
	        if (isEnd) {
	            this.trigger('selectEnd', zrUtil.clone(ranges));
	        }
	    }
	}
	
	function shouldShowCover() {
	    var track = this._track;
	
	    if (!track.length) {
	        return false;
	    }
	
	    var p2 = track[track.length - 1];
	    var p1 = track[0];
	    var dx = p2[0] - p1[0];
	    var dy = p2[1] - p1[1];
	    var dist = mathPow(dx * dx + dy * dy, 0.5);
	
	    return dist > UNSELECT_THRESHOLD;
	}
	
	function renderCover(ranges) {
	    var coverRenderer = coverRenderers[this.type];
	
	    if (ranges && ranges.length) {
	        if (!this._cover) {
	            this._cover = coverRenderer.create.call(this);
	            this.group.add(this._cover);
	        }
	        coverRenderer.update.call(this, ranges);
	    } else {
	        this.group.remove(this._cover);
	        this._cover = null;
	    }
	
	    updateZ(this.group);
	}
	
	function removeGroup() {
	    // container may 'removeAll' outside.
	    var group = this.group;
	    var container = group.parent;
	    if (container) {
	        container.remove(group);
	    }
	}
	
	function createRectCover() {
	    var opt = this.opt;
	    return new graphic.Rect({
	        // FIXME
	        // customize style.
	        style: {
	            stroke: opt.stroke,
	            fill: opt.fill,
	            lineWidth: opt.lineWidth,
	            opacity: opt.opacity
	        }
	    });
	}
	
	function getLocalTrack() {
	    return zrUtil.map(this._track, function (point) {
	        return this.group.transformCoordToLocal(point[0], point[1]);
	    }, this);
	}
	
	function getLocalTrackEnds() {
	    var localTrack = getLocalTrack.call(this);
	    var tail = localTrack.length - 1;
	    tail < 0 && (tail = 0);
	    return [localTrack[0], localTrack[tail]];
	}
	
	/**
	 * key: this.type
	 * @type {Object}
	 */
	var coverRenderers = {
	
	    line: {
	
	        create: createRectCover,
	
	        getRanges: function getRanges() {
	            var ends = getLocalTrackEnds.call(this);
	            var min = mathMin(ends[0][0], ends[1][0]);
	            var max = mathMax(ends[0][0], ends[1][0]);
	
	            return [[min, max]];
	        },
	
	        update: function update(ranges) {
	            var range = ranges[0];
	            var width = this.opt.width;
	            this._cover.setShape({
	                x: range[0],
	                y: -width / 2,
	                width: range[1] - range[0],
	                height: width
	            });
	        }
	    },
	
	    rect: {
	
	        create: createRectCover,
	
	        getRanges: function getRanges() {
	            var ends = getLocalTrackEnds.call(this);
	
	            var min = [mathMin(ends[1][0], ends[0][0]), mathMin(ends[1][1], ends[0][1])];
	            var max = [mathMax(ends[1][0], ends[0][0]), mathMax(ends[1][1], ends[0][1])];
	
	            return [[[min[0], max[0]], // x range
	            [min[1], max[1]] // y range
	            ]];
	        },
	
	        update: function update(ranges) {
	            var range = ranges[0];
	            this._cover.setShape({
	                x: range[0][0],
	                y: range[1][0],
	                width: range[0][1] - range[0][0],
	                height: range[1][1] - range[1][0]
	            });
	        }
	    }
	};
	
	module.exports = SelectController;

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	
	module.exports = function (option) {
	    createParallelIfNeeded(option);
	    mergeAxisOptionFromParallel(option);
	};
	
	/**
	 * Create a parallel coordinate if not exists.
	 * @inner
	 */
	function createParallelIfNeeded(option) {
	    if (option.parallel) {
	        return;
	    }
	
	    var hasParallelSeries = false;
	
	    zrUtil.each(option.series, function (seriesOpt) {
	        if (seriesOpt && seriesOpt.type === 'parallel') {
	            hasParallelSeries = true;
	        }
	    });
	
	    if (hasParallelSeries) {
	        option.parallel = [{}];
	    }
	}
	
	/**
	 * Merge aixs definition from parallel option (if exists) to axis option.
	 * @inner
	 */
	function mergeAxisOptionFromParallel(option) {
	    var axes = modelUtil.normalizeToArray(option.parallelAxis);
	
	    zrUtil.each(axes, function (axisOption) {
	        if (!zrUtil.isObject(axisOption)) {
	            return;
	        }
	
	        var parallelIndex = axisOption.parallelIndex || 0;
	        var parallelOption = modelUtil.normalizeToArray(option.parallel)[parallelIndex];
	
	        if (parallelOption && parallelOption.parallelAxisDefault) {
	            zrUtil.merge(axisOption, parallelOption.parallelAxisDefault, false);
	        }
	    });
	}

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var zrUtil = __webpack_require__(224);
	var SeriesModel = __webpack_require__(248);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.parallel',
	
	    dependencies: ['parallel'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var parallelModel = ecModel.getComponent('parallel', this.get('parallelIndex'));
	        var dimensions = parallelModel.dimensions;
	        var parallelAxisIndices = parallelModel.parallelAxisIndex;
	
	        var rawData = option.data;
	
	        var dimensionsInfo = zrUtil.map(dimensions, function (dim, index) {
	            var axisModel = ecModel.getComponent('parallelAxis', parallelAxisIndices[index]);
	            if (axisModel.get('type') === 'category') {
	                translateCategoryValue(axisModel, dim, rawData);
	                return { name: dim, type: 'ordinal' };
	            } else {
	                return dim;
	            }
	        });
	
	        var list = new List(dimensionsInfo, this);
	        list.initData(rawData);
	
	        return list;
	    },
	
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	
	        coordinateSystem: 'parallel',
	        parallelIndex: 0,
	
	        // FIXME 尚无用
	        label: {
	            normal: {
	                show: false
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                //           'inside'|'left'|'right'|'top'|'bottom'
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            },
	            emphasis: {
	                show: false
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	                // position: 默认自适应，水平布局为'top'，垂直布局为'right'，可选为
	                //           'inside'|'left'|'right'|'top'|'bottom'
	                // textStyle: null      // 默认使用全局文本样式，详见TEXTSTYLE
	            }
	        },
	
	        inactiveOpacity: 0.05,
	        activeOpacity: 1,
	
	        lineStyle: {
	            normal: {
	                width: 2,
	                opacity: 0.45,
	                type: 'solid'
	            }
	        },
	        // smooth: false
	
	        animationEasing: 'linear'
	    }
	});
	
	function translateCategoryValue(axisModel, dim, rawData) {
	    var axisData = axisModel.get('data');
	    var numberDim = +dim.replace('dim', '');
	
	    if (axisData && axisData.length) {
	        zrUtil.each(rawData, function (dataItem) {
	            if (!dataItem) {
	                return;
	            }
	            var index = zrUtil.indexOf(axisData, dataItem[numberDim]);
	            dataItem[numberDim] = index >= 0 ? index : NaN;
	        });
	    }
	    // FIXME
	    // 如果没有设置axis data, 应自动算出，或者提示。
	}

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	
	var ParallelView = __webpack_require__(262).extend({
	
	    type: 'parallel',
	
	    init: function init() {
	
	        /**
	         * @type {module:zrender/container/Group}
	         * @private
	         */
	        this._dataGroup = new graphic.Group();
	
	        this.group.add(this._dataGroup);
	        /**
	         * @type {module:echarts/data/List}
	         */
	        this._data;
	    },
	
	    /**
	     * @override
	     */
	    render: function render(seriesModel, ecModel, api, payload) {
	
	        var dataGroup = this._dataGroup;
	        var data = seriesModel.getData();
	        var oldData = this._data;
	        var coordSys = seriesModel.coordinateSystem;
	        var dimensions = coordSys.dimensions;
	
	        data.diff(oldData).add(add).update(update).remove(remove).execute();
	
	        // Update style
	        data.eachItemGraphicEl(function (elGroup, idx) {
	            var itemModel = data.getItemModel(idx);
	            var lineStyleModel = itemModel.getModel('lineStyle.normal');
	            elGroup.eachChild(function (child) {
	                child.setStyle(zrUtil.extend(lineStyleModel.getLineStyle(), {
	                    stroke: data.getItemVisual(idx, 'color'),
	                    opacity: data.getItemVisual(idx, 'opacity')
	                }));
	            });
	        });
	
	        // First create
	        if (!this._data) {
	            dataGroup.setClipPath(createGridClipShape(coordSys, seriesModel, function () {
	                dataGroup.removeClipPath();
	            }));
	        }
	
	        this._data = data;
	
	        function add(newDataIndex) {
	            var values = data.getValues(dimensions, newDataIndex);
	            var elGroup = new graphic.Group();
	            dataGroup.add(elGroup);
	
	            eachAxisPair(values, dimensions, coordSys, function (pointPair, pairIndex) {
	                // FIXME
	                // init animation
	                if (pointPair) {
	                    elGroup.add(createEl(pointPair));
	                }
	            });
	
	            data.setItemGraphicEl(newDataIndex, elGroup);
	        }
	
	        function update(newDataIndex, oldDataIndex) {
	            var values = data.getValues(dimensions, newDataIndex);
	            var elGroup = oldData.getItemGraphicEl(oldDataIndex);
	            var newEls = [];
	            var elGroupIndex = 0;
	
	            eachAxisPair(values, dimensions, coordSys, function (pointPair, pairIndex) {
	                var el = elGroup.childAt(elGroupIndex++);
	
	                if (pointPair && !el) {
	                    newEls.push(createEl(pointPair));
	                } else if (pointPair) {
	                    graphic.updateProps(el, {
	                        shape: {
	                            points: pointPair
	                        }
	                    }, seriesModel);
	                }
	            });
	
	            // Remove redundent els
	            for (var i = elGroup.childCount() - 1; i >= elGroupIndex; i--) {
	                elGroup.remove(elGroup.childAt(i));
	            }
	
	            // Add new els
	            for (var i = 0, len = newEls.length; i < len; i++) {
	                elGroup.add(newEls[i]);
	            }
	
	            data.setItemGraphicEl(newDataIndex, elGroup);
	        }
	
	        function remove(oldDataIndex) {
	            var elGroup = oldData.getItemGraphicEl(oldDataIndex);
	            dataGroup.remove(elGroup);
	        }
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._dataGroup && this._dataGroup.removeAll();
	        this._data = null;
	    }
	});
	
	function createGridClipShape(coordSys, seriesModel, cb) {
	    var parallelModel = coordSys.model;
	    var rect = coordSys.getRect();
	    var rectEl = new graphic.Rect({
	        shape: {
	            x: rect.x,
	            y: rect.y,
	            width: rect.width,
	            height: rect.height
	        }
	    });
	    var dim = parallelModel.get('layout') === 'horizontal' ? 'width' : 'height';
	    rectEl.setShape(dim, 0);
	    graphic.initProps(rectEl, {
	        shape: {
	            width: rect.width,
	            height: rect.height
	        }
	    }, seriesModel, cb);
	    return rectEl;
	}
	
	function eachAxisPair(values, dimensions, coordSys, cb) {
	    for (var i = 0, len = dimensions.length - 1; i < len; i++) {
	        var dimA = dimensions[i];
	        var dimB = dimensions[i + 1];
	        var valueA = values[i];
	        var valueB = values[i + 1];
	
	        cb(isEmptyValue(valueA, coordSys.getAxis(dimA).type) || isEmptyValue(valueB, coordSys.getAxis(dimB).type) ? null : [coordSys.dataToPoint(valueA, dimA), coordSys.dataToPoint(valueB, dimB)], i);
	    }
	}
	
	function createEl(pointPair) {
	    return new graphic.Polyline({
	        shape: { points: pointPair },
	        silent: true
	    });
	}
	
	// FIXME
	// 公用方法?
	function isEmptyValue(val, axisType) {
	    return axisType === 'category' ? val == null : val == null || isNaN(val); // axisType === 'value'
	}
	
	module.exports = ParallelView;

/***/ },
/* 450 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * @payload
	 * @property {string} parallelAxisId
	 * @property {Array.<number>} extent
	 */
	module.exports = function (ecModel, payload) {
	
	    ecModel.eachSeriesByType('parallel', function (seriesModel) {
	
	        var itemStyleModel = seriesModel.getModel('itemStyle.normal');
	        var globalColors = ecModel.get('color');
	
	        var color = itemStyleModel.get('color') || globalColors[seriesModel.seriesIndex % globalColors.length];
	        var inactiveOpacity = seriesModel.get('inactiveOpacity');
	        var activeOpacity = seriesModel.get('activeOpacity');
	        var lineStyle = seriesModel.getModel('lineStyle.normal').getLineStyle();
	
	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();
	
	        var opacityMap = {
	            normal: lineStyle.opacity,
	            active: activeOpacity,
	            inactive: inactiveOpacity
	        };
	
	        coordSys.eachActiveState(data, function (activeState, dataIndex) {
	            data.setItemVisual(dataIndex, 'opacity', opacityMap[activeState]);
	        });
	
	        data.setVisual('color', color);
	    });
	};

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(452);
	__webpack_require__(453);
	echarts.registerLayout(__webpack_require__(454));
	echarts.registerVisualCoding('chart', __webpack_require__(456));

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var createGraphFromNodeEdge = __webpack_require__(412);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.sankey',
	
	    layoutInfo: null,
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var links = option.edges || option.links;
	        var nodes = option.data || option.nodes;
	        if (nodes && links) {
	            var graph = createGraphFromNodeEdge(nodes, links, this, true);
	            return graph.data;
	        }
	    },
	
	    /**
	     * @return {module:echarts/data/Graph}
	     */
	    getGraph: function getGraph() {
	        return this.getData().graph;
	    },
	
	    /**
	     * return {module:echarts/data/List}
	     */
	    getEdgeData: function getEdgeData() {
	        return this.getGraph().edgeData;
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 2,
	
	        coordinateSystem: 'view',
	
	        layout: null,
	
	        // the position of the whole view
	        left: '5%',
	        top: '5%',
	        right: '20%',
	        bottom: '5%',
	
	        // the dx of the node
	        nodeWidth: 20,
	
	        // the distance between two nodes
	        nodeGap: 8,
	
	        // the number of iterations to change the position of the node
	        layoutIterations: 32,
	
	        label: {
	            normal: {
	                show: true,
	                position: 'right',
	                textStyle: {
	                    color: '#000',
	                    fontSize: 12
	                }
	            },
	            emphasis: {
	                show: true
	            }
	        },
	
	        itemStyle: {
	            normal: {
	                borderWidth: 1,
	                borderColor: '#aaa'
	            }
	        },
	
	        lineStyle: {
	            normal: {
	                color: '#314656',
	                opacity: 0.2,
	                curveness: 0.5
	            },
	            emphasis: {
	                opacity: 0.6
	            }
	        },
	
	        // colorEncoded node
	
	        color: ['#9e0142', '#d53e4f', '#f46d43', '#fdae61', '#fee08b', '#ffffbf', '#e6f598', '#abdda4', '#66c2a5', '#3288bd', '#5e4fa2'],
	
	        animationEasing: 'linear',
	
	        animationDuration: 1000
	    }
	
	});

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var modelUtil = __webpack_require__(226);
	var zrUtil = __webpack_require__(224);
	
	var SankeyShape = graphic.extendShape({
	    shape: {
	        x1: 0, y1: 0,
	        x2: 0, y2: 0,
	        cpx1: 0, cpy1: 0,
	        cpx2: 0, cpy2: 0,
	
	        extent: 0
	    },
	
	    buildPath: function buildPath(ctx, shape) {
	        var halfExtent = shape.extent / 2;
	        ctx.moveTo(shape.x1, shape.y1 - halfExtent);
	        ctx.bezierCurveTo(shape.cpx1, shape.cpy1 - halfExtent, shape.cpx2, shape.cpy2 - halfExtent, shape.x2, shape.y2 - halfExtent);
	        ctx.lineTo(shape.x2, shape.y2 + halfExtent);
	        ctx.bezierCurveTo(shape.cpx2, shape.cpy2 + halfExtent, shape.cpx1, shape.cpy1 + halfExtent, shape.x1, shape.y1 + halfExtent);
	        ctx.closePath();
	    }
	});
	
	module.exports = __webpack_require__(222).extendChartView({
	
	    type: 'sankey',
	
	    /**
	     * @private
	     * @type {module:echarts/chart/sankey/SankeySeries}
	     */
	    _model: null,
	
	    render: function render(seriesModel, ecModel, api) {
	        var graph = seriesModel.getGraph();
	        var group = this.group;
	        var layoutInfo = seriesModel.layoutInfo;
	
	        this._model = seriesModel;
	
	        group.removeAll();
	
	        group.position = [layoutInfo.x, layoutInfo.y];
	
	        var edgeData = graph.edgeData;
	        var rawOption = seriesModel.option;
	        var formatModel = modelUtil.createDataFormatModel(seriesModel, edgeData, rawOption.edges || rawOption.links);
	
	        formatModel.formatTooltip = function (dataIndex) {
	            var params = this.getDataParams(dataIndex);
	            var rawDataOpt = params.data;
	            var html = rawDataOpt.source + ' -- ' + rawDataOpt.target;
	            if (params.value) {
	                html += ':' + params.value;
	            }
	            return html;
	        };
	
	        // generate a rect  for each node
	        graph.eachNode(function (node) {
	            var layout = node.getLayout();
	            var itemModel = node.getModel();
	            var labelModel = itemModel.getModel('label.normal');
	            var textStyleModel = labelModel.getModel('textStyle');
	            var labelHoverModel = itemModel.getModel('label.emphasis');
	            var textStyleHoverModel = labelHoverModel.getModel('textStyle');
	
	            var rect = new graphic.Rect({
	                shape: {
	                    x: layout.x,
	                    y: layout.y,
	                    width: node.getLayout().dx,
	                    height: node.getLayout().dy
	                },
	                style: {
	                    // Get formatted label in label.normal option. Use node id if it is not specified
	                    text: labelModel.get('show') ? seriesModel.getFormattedLabel(node.dataIndex, 'normal') || node.id
	                    // Use empty string to hide the label
	                    : '',
	                    textFont: textStyleModel.getFont(),
	                    textFill: textStyleModel.getTextColor(),
	                    textPosition: labelModel.get('position')
	                }
	            });
	
	            rect.setStyle(zrUtil.defaults({
	                fill: node.getVisual('color')
	            }, itemModel.getModel('itemStyle.normal').getItemStyle()));
	
	            graphic.setHoverStyle(rect, zrUtil.extend(node.getModel('itemStyle.emphasis'), {
	                text: labelHoverModel.get('show') ? seriesModel.getFormattedLabel(node.dataIndex, 'emphasis') || node.id : '',
	                textFont: textStyleHoverModel.getFont(),
	                textFill: textStyleHoverModel.getTextColor(),
	                textPosition: labelHoverModel.get('position')
	            }));
	
	            group.add(rect);
	        });
	
	        // generate a bezire Curve for each edge
	        graph.eachEdge(function (edge) {
	            var curve = new SankeyShape();
	
	            curve.dataIndex = edge.dataIndex;
	            curve.hostModel = formatModel;
	
	            var lineStyleModel = edge.getModel('lineStyle.normal');
	            var curvature = lineStyleModel.get('curveness');
	            var n1Layout = edge.node1.getLayout();
	            var n2Layout = edge.node2.getLayout();
	            var edgeLayout = edge.getLayout();
	
	            curve.shape.extent = Math.max(1, edgeLayout.dy);
	
	            var x1 = n1Layout.x + n1Layout.dx;
	            var y1 = n1Layout.y + edgeLayout.sy + edgeLayout.dy / 2;
	            var x2 = n2Layout.x;
	            var y2 = n2Layout.y + edgeLayout.ty + edgeLayout.dy / 2;
	            var cpx1 = x1 * (1 - curvature) + x2 * curvature;
	            var cpy1 = y1;
	            var cpx2 = x1 * curvature + x2 * (1 - curvature);
	            var cpy2 = y2;
	
	            curve.setShape({
	                x1: x1,
	                y1: y1,
	                x2: x2,
	                y2: y2,
	                cpx1: cpx1,
	                cpy1: cpy1,
	                cpx2: cpx2,
	                cpy2: cpy2
	            });
	
	            curve.setStyle(lineStyleModel.getItemStyle());
	            graphic.setHoverStyle(curve, edge.getModel('lineStyle.emphasis').getItemStyle());
	
	            group.add(curve);
	        });
	        if (!this._data) {
	            group.setClipPath(createGridClipShape(group.getBoundingRect(), seriesModel, function () {
	                group.removeClipPath();
	            }));
	        }
	        this._data = seriesModel.getData();
	    }
	});
	
	//add animation to the view
	function createGridClipShape(rect, seriesModel, cb) {
	    var rectEl = new graphic.Rect({
	        shape: {
	            x: rect.x - 10,
	            y: rect.y - 10,
	            width: 0,
	            height: rect.height + 20
	        }
	    });
	    graphic.initProps(rectEl, {
	        shape: {
	            width: rect.width + 20,
	            height: rect.height + 20
	        }
	    }, seriesModel, cb);
	
	    return rectEl;
	}

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var layout = __webpack_require__(242);
	var nest = __webpack_require__(455);
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (ecModel, api) {
	
	    ecModel.eachSeriesByType('sankey', function (seriesModel) {
	
	        var nodeWidth = seriesModel.get('nodeWidth');
	        var nodeGap = seriesModel.get('nodeGap');
	
	        var layoutInfo = getViewRect(seriesModel, api);
	
	        seriesModel.layoutInfo = layoutInfo;
	
	        var width = layoutInfo.width;
	        var height = layoutInfo.height;
	
	        var graph = seriesModel.getGraph();
	
	        var nodes = graph.nodes;
	        var edges = graph.edges;
	
	        computeNodeValues(nodes);
	
	        var filteredNodes = nodes.filter(function (node) {
	            return node.getLayout().value === 0;
	        });
	
	        var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');
	
	        layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations);
	    });
	};
	
	/**
	 * get the layout position of the whole view.
	 */
	function getViewRect(seriesModel, api) {
	    return layout.getLayoutRect(seriesModel.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    });
	}
	
	function layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations) {
	    computeNodeBreadths(nodes, nodeWidth, width);
	    computeNodeDepths(nodes, edges, height, nodeGap, iterations);
	    computeEdgeDepths(nodes);
	}
	
	/**
	 * compute the value of each node by summing the associated edge's value.
	 * @param {module:echarts/data/Graph~Node} nodes
	 */
	function computeNodeValues(nodes) {
	    zrUtil.each(nodes, function (node) {
	        var value1 = sum(node.outEdges, getEdgeValue);
	        var value2 = sum(node.inEdges, getEdgeValue);
	        var value = Math.max(value1, value2);
	        node.setLayout({ value: value }, true);
	    });
	}
	
	/**
	 * compute the x-position for each node.
	 * @param {module:echarts/data/Graph~Node} nodes
	 * @param  {number} nodeWidth
	 * @param  {number} width
	 */
	function computeNodeBreadths(nodes, nodeWidth, width) {
	    var remainNodes = nodes;
	    var nextNode = null;
	    var x = 0;
	    var kx = 0;
	
	    while (remainNodes.length) {
	        nextNode = [];
	
	        for (var i = 0, len = remainNodes.length; i < len; i++) {
	            var node = remainNodes[i];
	            node.setLayout({ x: x }, true);
	            node.setLayout({ dx: nodeWidth }, true);
	
	            for (var j = 0, lenj = node.outEdges.length; j < lenj; j++) {
	                nextNode.push(node.outEdges[j].node2);
	            }
	        }
	        remainNodes = nextNode;
	        ++x;
	    }
	
	    moveSinksRight(nodes, x);
	    kx = (width - nodeWidth) / (x - 1);
	
	    scaleNodeBreadths(nodes, kx);
	}
	
	/**
	 * all the node without outEgdes are assigned maximum breadth and
	 * be aligned in the last column.
	 * @param {module:echarts/data/Graph~Node} nodes
	 * @param {number} x
	 */
	function moveSinksRight(nodes, x) {
	    zrUtil.each(nodes, function (node) {
	        if (!node.outEdges.length) {
	            node.setLayout({ x: x - 1 }, true);
	        }
	    });
	}
	
	/**
	 * scale node x-position to the width.
	 * @param {module:echarts/data/Graph~Node} nodes
	 * @param {number} kx
	 */
	function scaleNodeBreadths(nodes, kx) {
	    zrUtil.each(nodes, function (node) {
	        var nodeX = node.getLayout().x * kx;
	        node.setLayout({ x: nodeX }, true);
	    });
	}
	
	/**
	 * using Gauss-Seidel iterations method to compute the node depth(y-position).
	 * @param {module:echarts/data/Graph~Node} nodes
	 * @param {module:echarts/data/Graph~Edge} edges
	 * @param {number} height
	 * @param {numbber} nodeGap
	 * @param {number} iterations
	 */
	function computeNodeDepths(nodes, edges, height, nodeGap, iterations) {
	    var nodesByBreadth = nest().key(function (d) {
	        return d.getLayout().x;
	    }).sortKeys(ascending).entries(nodes).map(function (d) {
	        return d.values;
	    });
	
	    initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap);
	    resolveCollisions(nodesByBreadth, nodeGap, height);
	
	    for (var alpha = 1; iterations > 0; iterations--) {
	        alpha *= 0.99;
	        relaxRightToLeft(nodesByBreadth, alpha);
	        resolveCollisions(nodesByBreadth, nodeGap, height);
	        relaxLeftToRight(nodesByBreadth, alpha);
	        resolveCollisions(nodesByBreadth, nodeGap, height);
	    }
	}
	
	/**
	 * compute the original y-position for each node.
	 * @param {module:echarts/data/Graph~Node} nodes
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 * @param {module:echarts/data/Graph~Edge} edges
	 * @param {number} height
	 * @param {number} nodeGap
	 */
	function initializeNodeDepth(nodes, nodesByBreadth, edges, height, nodeGap) {
	    var kyArray = [];
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        var n = nodes.length;
	        var sum = 0;
	        zrUtil.each(nodes, function (node) {
	            sum += node.getLayout().value;
	        });
	        var ky = (height - (n - 1) * nodeGap) / sum;
	        kyArray.push(ky);
	    });
	    kyArray.sort(function (a, b) {
	        return a - b;
	    });
	    var ky0 = kyArray[0];
	
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        zrUtil.each(nodes, function (node, i) {
	            node.setLayout({ y: i }, true);
	            var nodeDy = node.getLayout().value * ky0;
	            node.setLayout({ dy: nodeDy }, true);
	        });
	    });
	
	    zrUtil.each(edges, function (edge) {
	        var edgeDy = +edge.getValue() * ky0;
	        edge.setLayout({ dy: edgeDy }, true);
	    });
	}
	
	/**
	 * resolve the collision of initialized depth.
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 * @param {number} nodeGap
	 * @param {number} height
	 */
	function resolveCollisions(nodesByBreadth, nodeGap, height) {
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        var node;
	        var dy;
	        var y0 = 0;
	        var n = nodes.length;
	        var i;
	
	        nodes.sort(ascendingDepth);
	
	        for (i = 0; i < n; i++) {
	            node = nodes[i];
	            dy = y0 - node.getLayout().y;
	            if (dy > 0) {
	                var nodeY = node.getLayout().y + dy;
	                node.setLayout({ y: nodeY }, true);
	            }
	            y0 = node.getLayout().y + node.getLayout().dy + nodeGap;
	        }
	
	        // if the bottommost node goes outside the biunds, push it back up
	        dy = y0 - nodeGap - height;
	        if (dy > 0) {
	            var nodeY = node.getLayout().y - dy;
	            node.setLayout({ y: nodeY }, true);
	            y0 = node.getLayout().y;
	            for (i = n - 2; i >= 0; --i) {
	                node = nodes[i];
	                dy = node.getLayout().y + node.getLayout().dy + nodeGap - y0;
	                if (dy > 0) {
	                    nodeY = node.getLayout().y - dy;
	                    node.setLayout({ y: nodeY }, true);
	                }
	                y0 = node.getLayout().y;
	            }
	        }
	    });
	}
	
	/**
	 * change the y-position of the nodes, except most the right side nodes.
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 * @param {number} alpha
	 */
	function relaxRightToLeft(nodesByBreadth, alpha) {
	    zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {
	        zrUtil.each(nodes, function (node) {
	            if (node.outEdges.length) {
	                var y = sum(node.outEdges, weightedTarget) / sum(node.outEdges, getEdgeValue);
	                var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                node.setLayout({ y: nodeY }, true);
	            }
	        });
	    });
	}
	
	function weightedTarget(edge) {
	    return center(edge.node2) * edge.getValue();
	}
	
	/**
	 * change the y-position of the nodes, except most the left side nodes.
	 * @param {Array.<Array.<module:echarts/data/Graph~Node>>} nodesByBreadth
	 * @param {number} alpha
	 */
	function relaxLeftToRight(nodesByBreadth, alpha) {
	    zrUtil.each(nodesByBreadth, function (nodes) {
	        zrUtil.each(nodes, function (node) {
	            if (node.inEdges.length) {
	                var y = sum(node.inEdges, weightedSource) / sum(node.inEdges, getEdgeValue);
	                var nodeY = node.getLayout().y + (y - center(node)) * alpha;
	                node.setLayout({ y: nodeY }, true);
	            }
	        });
	    });
	}
	
	function weightedSource(edge) {
	    return center(edge.node1) * edge.getValue();
	}
	
	/**
	 * compute the depth(y-position) of each edge.
	 * @param {module:echarts/data/Graph~Node} nodes
	 */
	function computeEdgeDepths(nodes) {
	    zrUtil.each(nodes, function (node) {
	        node.outEdges.sort(ascendingTargetDepth);
	        node.inEdges.sort(ascendingSourceDepth);
	    });
	    zrUtil.each(nodes, function (node) {
	        var sy = 0;
	        var ty = 0;
	        zrUtil.each(node.outEdges, function (edge) {
	            edge.setLayout({ sy: sy }, true);
	            sy += edge.getLayout().dy;
	        });
	        zrUtil.each(node.inEdges, function (edge) {
	            edge.setLayout({ ty: ty }, true);
	            ty += edge.getLayout().dy;
	        });
	    });
	}
	
	function ascendingTargetDepth(a, b) {
	    return a.node2.getLayout().y - b.node2.getLayout().y;
	}
	
	function ascendingSourceDepth(a, b) {
	    return a.node1.getLayout().y - b.node1.getLayout().y;
	}
	
	function sum(array, f) {
	    var s = 0;
	    var n = array.length;
	    var a;
	    var i = -1;
	    if (arguments.length === 1) {
	        while (++i < n) {
	            a = +array[i];
	            if (!isNaN(a)) {
	                s += a;
	            }
	        }
	    } else {
	        while (++i < n) {
	            a = +f.call(array, array[i], i);
	            if (!isNaN(a)) {
	                s += a;
	            }
	        }
	    }
	    return s;
	}
	
	function center(node) {
	    return node.getLayout().y + node.getLayout().dy / 2;
	}
	
	function ascendingDepth(a, b) {
	    return a.getLayout().y - b.getLayout().y;
	}
	
	function ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a == b ? 0 : NaN;
	}
	
	function getEdgeValue(edge) {
	    return edge.getValue();
	}

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	/**
	 * nest helper used to group by the array.
	 * can specified the keys and sort the keys.
	 */
	function nest() {
	
	    var keysFunction = [];
	    var sortKeysFunction = [];
	
	    /**
	     * map an Array into the mapObject.
	     * @param {Array} array
	     * @param {number} depth
	     */
	    function map(array, depth) {
	        if (depth >= keysFunction.length) {
	            return array;
	        }
	        var i = -1;
	        var n = array.length;
	        var keyFunction = keysFunction[depth++];
	        var mapObject = {};
	        var valuesByKey = {};
	
	        while (++i < n) {
	            var keyValue = keyFunction(array[i]);
	            var values = valuesByKey[keyValue];
	
	            if (values) {
	                values.push(array[i]);
	            } else {
	                valuesByKey[keyValue] = [array[i]];
	            }
	        }
	
	        zrUtil.each(valuesByKey, function (value, key) {
	            mapObject[key] = map(value, depth);
	        });
	
	        return mapObject;
	    }
	
	    /**
	     * transform the Map Object to multidimensional Array
	     * @param {Object} map
	     * @param {number} depth
	     */
	    function entriesMap(mapObject, depth) {
	        if (depth >= keysFunction.length) {
	            return mapObject;
	        }
	        var array = [];
	        var sortKeyFunction = sortKeysFunction[depth++];
	
	        zrUtil.each(mapObject, function (value, key) {
	            array.push({
	                key: key, values: entriesMap(value, depth)
	            });
	        });
	
	        if (sortKeyFunction) {
	            return array.sort(function (a, b) {
	                return sortKeyFunction(a.key, b.key);
	            });
	        } else {
	            return array;
	        }
	    }
	
	    return {
	        /**
	         * specified the key to groupby the arrays.
	         * users can specified one more keys.
	         * @param {Function} d
	         */
	        key: function key(d) {
	            keysFunction.push(d);
	            return this;
	        },
	
	        /**
	         * specified the comparator to sort the keys
	         * @param {Function} order
	         */
	        sortKeys: function sortKeys(order) {
	            sortKeysFunction[keysFunction.length - 1] = order;
	            return this;
	        },
	
	        /**
	         * the array to be grouped by.
	         * @param {Array} array
	         */
	        entries: function entries(array) {
	            return entriesMap(map(array, 0), 0);
	        }
	    };
	}
	module.exports = nest;

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var VisualMapping = __webpack_require__(408);
	
	module.exports = function (ecModel, payload) {
	    ecModel.eachSeriesByType('sankey', function (seriesModel) {
	        var graph = seriesModel.getGraph();
	        var nodes = graph.nodes;
	
	        nodes.sort(function (a, b) {
	            return a.getLayout().value - b.getLayout().value;
	        });
	
	        var minValue = nodes[0].getLayout().value;
	        var maxValue = nodes[nodes.length - 1].getLayout().value;
	
	        nodes.forEach(function (node) {
	            var mapping = new VisualMapping({
	                type: 'color',
	                mappingMethod: 'linear',
	                dataExtent: [minValue, maxValue],
	                visual: seriesModel.get('color')
	            });
	
	            var mapValueToColor = mapping.mapValueToVisual(node.getLayout().value);
	            node.setVisual('color', mapValueToColor);
	        });
	    });
	};

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(458);
	__webpack_require__(461);
	
	echarts.registerVisualCoding('chart', __webpack_require__(462));
	echarts.registerLayout(__webpack_require__(463));

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var SeriesModel = __webpack_require__(248);
	var whiskerBoxCommon = __webpack_require__(459);
	
	var BoxplotSeries = SeriesModel.extend({
	
	    type: 'series.boxplot',
	
	    dependencies: ['xAxis', 'yAxis', 'grid'],
	
	    // TODO
	    // box width represents group size, so dimension should have 'size'.
	
	    /**
	     * @see <https://en.wikipedia.org/wiki/Box_plot>
	     * The meanings of 'min' and 'max' depend on user,
	     * and echarts do not need to know it.
	     * @readOnly
	     */
	    valueDimensions: ['min', 'Q1', 'median', 'Q3', 'max'],
	
	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,
	
	    /**
	     * @override
	     */
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        layout: null, // 'horizontal' or 'vertical'
	        boxWidth: [7, 50], // [min, max] can be percent of band width.
	
	        itemStyle: {
	            normal: {
	                color: '#fff',
	                borderWidth: 1
	            },
	            emphasis: {
	                borderWidth: 2,
	                shadowBlur: 5,
	                shadowOffsetX: 2,
	                shadowOffsetY: 2,
	                shadowColor: 'rgba(0,0,0,0.4)'
	            }
	        },
	
	        animationEasing: 'elasticOut',
	        animationDuration: 800
	    }
	});
	
	zrUtil.mixin(BoxplotSeries, whiskerBoxCommon.seriesModelMixin, true);
	
	module.exports = BoxplotSeries;

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var List = __webpack_require__(315);
	var completeDimensions = __webpack_require__(317);
	var WhiskerBoxDraw = __webpack_require__(460);
	var zrUtil = __webpack_require__(224);
	
	function getItemValue(item) {
	    return item.value == null ? item : item.value;
	}
	
	var seriesModelMixin = {
	
	    /**
	     * @private
	     * @type {string}
	     */
	    _baseAxisDim: null,
	
	    /**
	     * @override
	     */
	    getInitialData: function getInitialData(option, ecModel) {
	        // When both types of xAxis and yAxis are 'value', layout is
	        // needed to be specified by user. Otherwise, layout can be
	        // judged by which axis is category.
	
	        var categories;
	
	        var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));
	        var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));
	        var xAxisType = xAxisModel.get('type');
	        var yAxisType = yAxisModel.get('type');
	        var addOrdinal;
	
	        // FIXME
	        // 考虑时间轴
	
	        if (xAxisType === 'category') {
	            option.layout = 'horizontal';
	            categories = xAxisModel.getCategories();
	            addOrdinal = true;
	        } else if (yAxisType === 'category') {
	            option.layout = 'vertical';
	            categories = yAxisModel.getCategories();
	            addOrdinal = true;
	        } else {
	            option.layout = option.layout || 'horizontal';
	        }
	
	        this._baseAxisDim = option.layout === 'horizontal' ? 'x' : 'y';
	
	        var data = option.data;
	        var dimensions = this.dimensions = ['base'].concat(this.valueDimensions);
	        completeDimensions(dimensions, data);
	
	        var list = new List(dimensions, this);
	        list.initData(data, categories ? categories.slice() : null, function (dataItem, dimName, idx, dimIdx) {
	            var value = getItemValue(dataItem);
	            return addOrdinal ? dimName === 'base' ? idx : value[dimIdx - 1] : value[dimIdx];
	        });
	
	        return list;
	    },
	
	    /**
	     * Used by Gird.
	     * @param {string} axisDim 'x' or 'y'
	     * @return {Array.<string>} dimensions on the axis.
	     */
	    coordDimToDataDim: function coordDimToDataDim(axisDim) {
	        var dims = this.valueDimensions.slice();
	        var baseDim = ['base'];
	        var map = {
	            horizontal: { x: baseDim, y: dims },
	            vertical: { x: dims, y: baseDim }
	        };
	        return map[this.get('layout')][axisDim];
	    },
	
	    /**
	     * @override
	     * @param {string|number} dataDim
	     * @return {string} coord dimension
	     */
	    dataDimToCoordDim: function dataDimToCoordDim(dataDim) {
	        var dim;
	
	        zrUtil.each(['x', 'y'], function (coordDim, index) {
	            var dataDims = this.coordDimToDataDim(coordDim);
	            if (zrUtil.indexOf(dataDims, dataDim) >= 0) {
	                dim = coordDim;
	            }
	        }, this);
	
	        return dim;
	    },
	
	    /**
	     * If horizontal, base axis is x, otherwise y.
	     * @override
	     */
	    getBaseAxis: function getBaseAxis() {
	        var dim = this._baseAxisDim;
	        return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;
	    }
	};
	
	var viewMixin = {
	
	    init: function init() {
	        /**
	         * Old data.
	         * @private
	         * @type {module:echarts/chart/helper/WhiskerBoxDraw}
	         */
	        var whiskerBoxDraw = this._whiskerBoxDraw = new WhiskerBoxDraw(this.getStyleUpdater());
	        this.group.add(whiskerBoxDraw.group);
	    },
	
	    render: function render(seriesModel, ecModel, api) {
	        this._whiskerBoxDraw.updateData(seriesModel.getData());
	    },
	
	    remove: function remove(ecModel) {
	        this._whiskerBoxDraw.remove();
	    }
	};
	
	module.exports = {
	    seriesModelMixin: seriesModelMixin,
	    viewMixin: viewMixin
	};

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/Symbol
	 */
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var Path = __webpack_require__(265);
	
	var WhiskerPath = Path.extend({
	
	    type: 'whiskerInBox',
	
	    shape: {},
	
	    buildPath: function buildPath(ctx, shape) {
	        for (var i in shape) {
	            if (i.indexOf('ends') === 0) {
	                var pts = shape[i];
	                ctx.moveTo(pts[0][0], pts[0][1]);
	                ctx.lineTo(pts[1][0], pts[1][1]);
	            }
	        }
	    }
	});
	
	/**
	 * @constructor
	 * @alias {module:echarts/chart/helper/WhiskerBox}
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @param {Function} styleUpdater
	 * @param {boolean} isInit
	 * @extends {module:zrender/graphic/Group}
	 */
	function WhiskerBox(data, idx, styleUpdater, isInit) {
	    graphic.Group.call(this);
	
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.bodyIndex;
	
	    /**
	     * @type {number}
	     * @readOnly
	     */
	    this.whiskerIndex;
	
	    /**
	     * @type {Function}
	     */
	    this.styleUpdater = styleUpdater;
	
	    this._createContent(data, idx, isInit);
	
	    this.updateData(data, idx, isInit);
	
	    /**
	     * Last series model.
	     * @type {module:echarts/model/Series}
	     */
	    this._seriesModel;
	}
	
	var whiskerBoxProto = WhiskerBox.prototype;
	
	whiskerBoxProto._createContent = function (data, idx, isInit) {
	    var itemLayout = data.getItemLayout(idx);
	    var constDim = itemLayout.chartLayout === 'horizontal' ? 1 : 0;
	    var count = 0;
	
	    // Whisker element.
	    this.add(new graphic.Polygon({
	        shape: {
	            points: isInit ? transInit(itemLayout.bodyEnds, constDim, itemLayout) : itemLayout.bodyEnds
	        },
	        style: { strokeNoScale: true },
	        z2: 100
	    }));
	    this.bodyIndex = count++;
	
	    // Box element.
	    var whiskerEnds = zrUtil.map(itemLayout.whiskerEnds, function (ends) {
	        return isInit ? transInit(ends, constDim, itemLayout) : ends;
	    });
	    this.add(new WhiskerPath({
	        shape: makeWhiskerEndsShape(whiskerEnds),
	        style: { strokeNoScale: true },
	        z2: 100
	    }));
	    this.whiskerIndex = count++;
	};
	
	function transInit(points, dim, itemLayout) {
	    return zrUtil.map(points, function (point) {
	        point = point.slice();
	        point[dim] = itemLayout.initBaseline;
	        return point;
	    });
	}
	
	function makeWhiskerEndsShape(whiskerEnds) {
	    // zr animation only support 2-dim array.
	    var shape = {};
	    zrUtil.each(whiskerEnds, function (ends, i) {
	        shape['ends' + i] = ends;
	    });
	    return shape;
	}
	
	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	whiskerBoxProto.updateData = function (data, idx, isInit) {
	    var seriesModel = this._seriesModel = data.hostModel;
	    var itemLayout = data.getItemLayout(idx);
	    var updateMethod = graphic[isInit ? 'initProps' : 'updateProps'];
	    // this.childAt(this.bodyIndex).stopAnimation(true);
	    // this.childAt(this.whiskerIndex).stopAnimation(true);
	    updateMethod(this.childAt(this.bodyIndex), { shape: { points: itemLayout.bodyEnds } }, seriesModel);
	    updateMethod(this.childAt(this.whiskerIndex), { shape: makeWhiskerEndsShape(itemLayout.whiskerEnds) }, seriesModel);
	
	    this.styleUpdater.call(null, this, data, idx);
	};
	
	zrUtil.inherits(WhiskerBox, graphic.Group);
	
	/**
	 * @constructor
	 * @alias module:echarts/chart/helper/WhiskerBoxDraw
	 */
	function WhiskerBoxDraw(styleUpdater) {
	    this.group = new graphic.Group();
	    this.styleUpdater = styleUpdater;
	}
	
	var whiskerBoxDrawProto = WhiskerBoxDraw.prototype;
	
	/**
	 * Update symbols draw by new data
	 * @param {module:echarts/data/List} data
	 */
	whiskerBoxDrawProto.updateData = function (data) {
	    var group = this.group;
	    var oldData = this._data;
	    var styleUpdater = this.styleUpdater;
	
	    data.diff(oldData).add(function (newIdx) {
	        if (data.hasValue(newIdx)) {
	            var symbolEl = new WhiskerBox(data, newIdx, styleUpdater, true);
	            data.setItemGraphicEl(newIdx, symbolEl);
	            group.add(symbolEl);
	        }
	    }).update(function (newIdx, oldIdx) {
	        var symbolEl = oldData.getItemGraphicEl(oldIdx);
	
	        // Empty data
	        if (!data.hasValue(newIdx)) {
	            group.remove(symbolEl);
	            return;
	        }
	
	        if (!symbolEl) {
	            symbolEl = new WhiskerBox(data, newIdx, styleUpdater);
	        } else {
	            symbolEl.updateData(data, newIdx);
	        }
	
	        // Add back
	        group.add(symbolEl);
	
	        data.setItemGraphicEl(newIdx, symbolEl);
	    }).remove(function (oldIdx) {
	        var el = oldData.getItemGraphicEl(oldIdx);
	        el && group.remove(el);
	    }).execute();
	
	    this._data = data;
	};
	
	/**
	 * Remove symbols.
	 * @param {module:echarts/data/List} data
	 */
	whiskerBoxDrawProto.remove = function () {
	    var group = this.group;
	    var data = this._data;
	    this._data = null;
	    data && data.eachItemGraphicEl(function (el) {
	        el && group.remove(el);
	    });
	};
	
	module.exports = WhiskerBoxDraw;

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var ChartView = __webpack_require__(262);
	var graphic = __webpack_require__(263);
	var whiskerBoxCommon = __webpack_require__(459);
	
	var BoxplotView = ChartView.extend({
	
	    type: 'boxplot',
	
	    getStyleUpdater: function getStyleUpdater() {
	        return updateStyle;
	    }
	});
	
	zrUtil.mixin(BoxplotView, whiskerBoxCommon.viewMixin, true);
	
	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	
	function updateStyle(itemGroup, data, idx) {
	    var itemModel = data.getItemModel(idx);
	    var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	    var borderColor = data.getItemVisual(idx, 'color');
	
	    // Exclude borderColor.
	    var itemStyle = normalItemStyleModel.getItemStyle(['borderColor']);
	
	    var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	    whiskerEl.style.set(itemStyle);
	    whiskerEl.style.stroke = borderColor;
	    whiskerEl.dirty();
	
	    var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	    bodyEl.style.set(itemStyle);
	    bodyEl.style.stroke = borderColor;
	    bodyEl.dirty();
	
	    var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    graphic.setHoverStyle(itemGroup, hoverStyle);
	}
	
	module.exports = BoxplotView;

/***/ },
/* 462 */
/***/ function(module, exports) {

	'use strict';
	
	var borderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	
	module.exports = function (ecModel, api) {
	
	    var globalColors = ecModel.get('color');
	
	    ecModel.eachRawSeriesByType('boxplot', function (seriesModel) {
	
	        var defaulColor = globalColors[seriesModel.seriesIndex % globalColors.length];
	        var data = seriesModel.getData();
	
	        data.setVisual({
	            legendSymbol: 'roundRect',
	            // Use name 'color' but not 'borderColor' for legend usage and
	            // visual coding from other component like dataRange.
	            color: seriesModel.get(borderColorQuery) || defaulColor
	        });
	
	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                data.setItemVisual(idx, { color: itemModel.get(borderColorQuery, true) });
	            });
	        }
	    });
	};

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var parsePercent = numberUtil.parsePercent;
	var each = zrUtil.each;
	
	module.exports = function (ecModel, api) {
	
	    var groupResult = groupSeriesByAxis(ecModel);
	
	    each(groupResult, function (groupItem) {
	        var seriesModels = groupItem.seriesModels;
	
	        if (!seriesModels.length) {
	            return;
	        }
	
	        calculateBase(groupItem);
	
	        each(seriesModels, function (seriesModel, idx) {
	            layoutSingleSeries(seriesModel, groupItem.boxOffsetList[idx], groupItem.boxWidthList[idx]);
	        });
	    });
	};
	
	/**
	 * Group series by axis.
	 */
	function groupSeriesByAxis(ecModel) {
	    var result = [];
	    var axisList = [];
	
	    ecModel.eachSeriesByType('boxplot', function (seriesModel) {
	        var baseAxis = seriesModel.getBaseAxis();
	        var idx = zrUtil.indexOf(axisList, baseAxis);
	
	        if (idx < 0) {
	            idx = axisList.length;
	            axisList[idx] = baseAxis;
	            result[idx] = { axis: baseAxis, seriesModels: [] };
	        }
	
	        result[idx].seriesModels.push(seriesModel);
	    });
	
	    return result;
	}
	
	/**
	 * Calculate offset and box width for each series.
	 */
	function calculateBase(groupItem) {
	    var extent;
	    var baseAxis = groupItem.axis;
	    var seriesModels = groupItem.seriesModels;
	    var seriesCount = seriesModels.length;
	
	    var boxWidthList = groupItem.boxWidthList = [];
	    var boxOffsetList = groupItem.boxOffsetList = [];
	    var boundList = [];
	
	    var bandWidth;
	    if (baseAxis.type === 'category') {
	        bandWidth = baseAxis.getBandWidth();
	    } else {
	        var maxDataCount = 0;
	        each(seriesModels, function (seriesModel) {
	            maxDataCount = Math.max(maxDataCount, seriesModel.getData().count());
	        });
	        extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / maxDataCount;
	    }
	
	    each(seriesModels, function (seriesModel) {
	        var boxWidthBound = seriesModel.get('boxWidth');
	        if (!zrUtil.isArray(boxWidthBound)) {
	            boxWidthBound = [boxWidthBound, boxWidthBound];
	        }
	        boundList.push([parsePercent(boxWidthBound[0], bandWidth) || 0, parsePercent(boxWidthBound[1], bandWidth) || 0]);
	    });
	
	    var availableWidth = bandWidth * 0.8 - 2;
	    var boxGap = availableWidth / seriesCount * 0.3;
	    var boxWidth = (availableWidth - boxGap * (seriesCount - 1)) / seriesCount;
	    var base = boxWidth / 2 - availableWidth / 2;
	
	    each(seriesModels, function (seriesModel, idx) {
	        boxOffsetList.push(base);
	        base += boxGap + boxWidth;
	
	        boxWidthList.push(Math.min(Math.max(boxWidth, boundList[idx][0]), boundList[idx][1]));
	    });
	}
	
	/**
	 * Calculate points location for each series.
	 */
	function layoutSingleSeries(seriesModel, offset, boxWidth) {
	    var coordSys = seriesModel.coordinateSystem;
	    var data = seriesModel.getData();
	    var dimensions = seriesModel.dimensions;
	    var chartLayout = seriesModel.get('layout');
	    var halfWidth = boxWidth / 2;
	
	    data.each(dimensions, function () {
	        var args = arguments;
	        var dimLen = dimensions.length;
	        var axisDimVal = args[0];
	        var idx = args[dimLen];
	        var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	        var constDim = 1 - variableDim;
	
	        var median = getPoint(args[3]);
	        var end1 = getPoint(args[1]);
	        var end5 = getPoint(args[5]);
	        var whiskerEnds = [[end1, getPoint(args[2])], [end5, getPoint(args[4])]];
	        layEndLine(end1);
	        layEndLine(end5);
	        layEndLine(median);
	
	        var bodyEnds = [];
	        addBodyEnd(whiskerEnds[0][1], 0);
	        addBodyEnd(whiskerEnds[1][1], 1);
	
	        data.setItemLayout(idx, {
	            chartLayout: chartLayout,
	            initBaseline: median[constDim],
	            median: median,
	            bodyEnds: bodyEnds,
	            whiskerEnds: whiskerEnds
	        });
	
	        function getPoint(val) {
	            var p = [];
	            p[variableDim] = axisDimVal;
	            p[constDim] = val;
	            var point;
	            if (isNaN(axisDimVal) || isNaN(val)) {
	                point = [NaN, NaN];
	            } else {
	                point = coordSys.dataToPoint(p);
	                point[variableDim] += offset;
	            }
	            return point;
	        }
	
	        function addBodyEnd(point, start) {
	            var point1 = point.slice();
	            var point2 = point.slice();
	            point1[variableDim] += halfWidth;
	            point2[variableDim] -= halfWidth;
	            start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	        }
	
	        function layEndLine(endCenter) {
	            var line = [endCenter.slice(), endCenter.slice()];
	            line[0][variableDim] -= halfWidth;
	            line[1][variableDim] += halfWidth;
	            whiskerEnds.push(line);
	        }
	    });
	}

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	
	__webpack_require__(465);
	__webpack_require__(466);
	
	echarts.registerPreprocessor(__webpack_require__(467));
	
	echarts.registerVisualCoding('chart', __webpack_require__(468));
	echarts.registerLayout(__webpack_require__(469));

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var SeriesModel = __webpack_require__(248);
	var whiskerBoxCommon = __webpack_require__(459);
	var formatUtil = __webpack_require__(227);
	var encodeHTML = formatUtil.encodeHTML;
	var addCommas = formatUtil.addCommas;
	
	var CandlestickSeries = SeriesModel.extend({
	
	    type: 'series.candlestick',
	
	    dependencies: ['xAxis', 'yAxis', 'grid'],
	
	    /**
	     * @readOnly
	     */
	    valueDimensions: ['open', 'close', 'lowest', 'highest'],
	
	    /**
	     * @type {Array.<string>}
	     * @readOnly
	     */
	    dimensions: null,
	
	    /**
	     * @override
	     */
	    defaultOption: {
	        zlevel: 0, // 一级层叠
	        z: 2, // 二级层叠
	        coordinateSystem: 'cartesian2d',
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        layout: null, // 'horizontal' or 'vertical'
	
	        itemStyle: {
	            normal: {
	                color: '#c23531', // 阳线 positive
	                color0: '#314656', // 阴线 negative     '#c23531', '#314656'
	                borderWidth: 1,
	                // FIXME
	                // ec2中使用的是lineStyle.color 和 lineStyle.color0
	                borderColor: '#c23531',
	                borderColor0: '#314656'
	            },
	            emphasis: {
	                borderWidth: 2
	            }
	        },
	
	        animationUpdate: false,
	        animationEasing: 'linear',
	        animationDuration: 300
	    },
	
	    /**
	     * Get dimension for shadow in dataZoom
	     * @return {string} dimension name
	     */
	    getShadowDim: function getShadowDim() {
	        return 'open';
	    },
	
	    /**
	     * @override
	     */
	    formatTooltip: function formatTooltip(dataIndex, mutipleSeries) {
	        // It rearly use mutiple candlestick series in one cartesian,
	        // so only consider one series in this default tooltip.
	        var valueHTMLArr = zrUtil.map(this.valueDimensions, function (dim) {
	            return dim + ': ' + addCommas(this._data.get(dim, dataIndex));
	        }, this);
	
	        return encodeHTML(this.name) + '<br />' + valueHTMLArr.join('<br />');
	    }
	
	});
	
	zrUtil.mixin(CandlestickSeries, whiskerBoxCommon.seriesModelMixin, true);
	
	module.exports = CandlestickSeries;

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var ChartView = __webpack_require__(262);
	var graphic = __webpack_require__(263);
	var whiskerBoxCommon = __webpack_require__(459);
	
	var CandlestickView = ChartView.extend({
	
	    type: 'candlestick',
	
	    getStyleUpdater: function getStyleUpdater() {
	        return updateStyle;
	    }
	
	});
	
	zrUtil.mixin(CandlestickView, whiskerBoxCommon.viewMixin, true);
	
	// Update common properties
	var normalStyleAccessPath = ['itemStyle', 'normal'];
	var emphasisStyleAccessPath = ['itemStyle', 'emphasis'];
	
	function updateStyle(itemGroup, data, idx) {
	    var itemModel = data.getItemModel(idx);
	    var normalItemStyleModel = itemModel.getModel(normalStyleAccessPath);
	    var color = data.getItemVisual(idx, 'color');
	    var borderColor = data.getItemVisual(idx, 'borderColor');
	
	    // Color must be excluded.
	    // Because symbol provide setColor individually to set fill and stroke
	    var itemStyle = normalItemStyleModel.getItemStyle(['color', 'color0', 'borderColor', 'borderColor0']);
	
	    var whiskerEl = itemGroup.childAt(itemGroup.whiskerIndex);
	    whiskerEl.style.set(itemStyle);
	    whiskerEl.style.stroke = borderColor;
	    whiskerEl.dirty();
	
	    var bodyEl = itemGroup.childAt(itemGroup.bodyIndex);
	    bodyEl.style.set(itemStyle);
	    bodyEl.style.fill = color;
	    bodyEl.style.stroke = borderColor;
	    bodyEl.dirty();
	
	    var hoverStyle = itemModel.getModel(emphasisStyleAccessPath).getItemStyle();
	    graphic.setHoverStyle(itemGroup, hoverStyle);
	}
	
	module.exports = CandlestickView;

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (option) {
	    if (!option || !zrUtil.isArray(option.series)) {
	        return;
	    }
	
	    // Translate 'k' to 'candlestick'.
	    zrUtil.each(option.series, function (seriesItem) {
	        if (zrUtil.isObject(seriesItem) && seriesItem.type === 'k') {
	            seriesItem.type = 'candlestick';
	        }
	    });
	};

/***/ },
/* 468 */
/***/ function(module, exports) {

	'use strict';
	
	var positiveBorderColorQuery = ['itemStyle', 'normal', 'borderColor'];
	var negativeBorderColorQuery = ['itemStyle', 'normal', 'borderColor0'];
	var positiveColorQuery = ['itemStyle', 'normal', 'color'];
	var negativeColorQuery = ['itemStyle', 'normal', 'color0'];
	
	module.exports = function (ecModel, api) {
	
	    ecModel.eachRawSeriesByType('candlestick', function (seriesModel) {
	
	        var data = seriesModel.getData();
	
	        data.setVisual({
	            legendSymbol: 'roundRect'
	        });
	
	        // Only visible series has each data be visual encoded
	        if (!ecModel.isSeriesFiltered(seriesModel)) {
	            data.each(function (idx) {
	                var itemModel = data.getItemModel(idx);
	                var sign = data.getItemLayout(idx).sign;
	
	                data.setItemVisual(idx, {
	                    color: itemModel.get(sign > 0 ? positiveColorQuery : negativeColorQuery),
	                    borderColor: itemModel.get(sign > 0 ? positiveBorderColorQuery : negativeBorderColorQuery)
	                });
	            });
	        }
	    });
	};

/***/ },
/* 469 */
/***/ function(module, exports) {

	'use strict';
	
	var CANDLE_MIN_WIDTH = 2;
	var CANDLE_MIN_NICE_WIDTH = 5;
	var GPA_MIN = 4;
	
	module.exports = function (ecModel, api) {
	
	    ecModel.eachSeriesByType('candlestick', function (seriesModel) {
	
	        var coordSys = seriesModel.coordinateSystem;
	        var data = seriesModel.getData();
	        var dimensions = seriesModel.dimensions;
	        var chartLayout = seriesModel.get('layout');
	
	        var candleWidth = calculateCandleWidth(seriesModel, data);
	
	        data.each(dimensions, function () {
	            var args = arguments;
	            var dimLen = dimensions.length;
	            var axisDimVal = args[0];
	            var idx = args[dimLen];
	            var variableDim = chartLayout === 'horizontal' ? 0 : 1;
	            var constDim = 1 - variableDim;
	
	            var openVal = args[1];
	            var closeVal = args[2];
	            var lowestVal = args[3];
	            var highestVal = args[4];
	
	            var ocLow = Math.min(openVal, closeVal);
	            var ocHigh = Math.max(openVal, closeVal);
	
	            var ocLowPoint = getPoint(ocLow);
	            var ocHighPoint = getPoint(ocHigh);
	            var lowestPoint = getPoint(lowestVal);
	            var highestPoint = getPoint(highestVal);
	
	            var whiskerEnds = [[highestPoint, ocHighPoint], [lowestPoint, ocLowPoint]];
	
	            var bodyEnds = [];
	            addBodyEnd(ocHighPoint, 0);
	            addBodyEnd(ocLowPoint, 1);
	
	            data.setItemLayout(idx, {
	                chartLayout: chartLayout,
	                sign: openVal > closeVal ? -1 : openVal < closeVal ? 1 : 0,
	                initBaseline: openVal > closeVal ? ocHighPoint[constDim] : ocLowPoint[constDim], // open point.
	                bodyEnds: bodyEnds,
	                whiskerEnds: whiskerEnds
	            });
	
	            function getPoint(val) {
	                var p = [];
	                p[variableDim] = axisDimVal;
	                p[constDim] = val;
	                return isNaN(axisDimVal) || isNaN(val) ? [NaN, NaN] : coordSys.dataToPoint(p);
	            }
	
	            function addBodyEnd(point, start) {
	                var point1 = point.slice();
	                var point2 = point.slice();
	                point1[variableDim] += candleWidth / 2;
	                point2[variableDim] -= candleWidth / 2;
	                start ? bodyEnds.push(point1, point2) : bodyEnds.push(point2, point1);
	            }
	        }, true);
	    });
	};
	
	function calculateCandleWidth(seriesModel, data) {
	    var baseAxis = seriesModel.getBaseAxis();
	    var extent;
	
	    var bandWidth = baseAxis.type === 'category' ? baseAxis.getBandWidth() : (extent = baseAxis.getExtent(), Math.abs(extent[1] - extent[0]) / data.count());
	
	    // Half band width is perfect when space is enouph, otherwise
	    // try not to be smaller than CANDLE_MIN_NICE_WIDTH (and only
	    // gap is compressed), otherwise ensure not to be smaller than
	    // CANDLE_MIN_WIDTH in spite of overlap.
	
	    return bandWidth / 2 - 2 > CANDLE_MIN_NICE_WIDTH // "- 2" is minus border width
	    ? bandWidth / 2 - 2 : bandWidth - CANDLE_MIN_NICE_WIDTH > GPA_MIN ? CANDLE_MIN_NICE_WIDTH : Math.max(bandWidth - GPA_MIN, CANDLE_MIN_WIDTH);
	}

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	
	__webpack_require__(471);
	__webpack_require__(472);
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(324), 'effectScatter', 'circle', null));
	echarts.registerLayout(zrUtil.curry(__webpack_require__(325), 'effectScatter'));

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var createListFromArray = __webpack_require__(314);
	var SeriesModel = __webpack_require__(248);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.effectScatter',
	
	    dependencies: ['grid', 'polar'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var list = createListFromArray(option.data, this, ecModel);
	        return list;
	    },
	
	    defaultOption: {
	        coordinateSystem: 'cartesian2d',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,
	
	        effectType: 'ripple',
	
	        // When to show the effect, option: 'render'|'emphasis'
	        showEffectOn: 'render',
	
	        // Ripple effect config
	        rippleEffect: {
	            period: 4,
	            // Scale of ripple
	            scale: 2.5,
	            // Brush type can be fill or stroke
	            brushType: 'fill'
	        },
	
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        // Polar coordinate system
	        polarIndex: 0,
	
	        // Geo coordinate system
	        geoIndex: 0,
	
	        // symbol: null,        // 图形类型
	        symbolSize: 10 // 图形大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	        // symbolRotate: null,  // 图形旋转控制
	
	        // large: false,
	        // Available when large is true
	        // largeThreshold: 2000,
	
	        // itemStyle: {
	        //     normal: {
	        //         opacity: 1
	        //     }
	        // }
	    }
	});

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SymbolDraw = __webpack_require__(319);
	var EffectSymbol = __webpack_require__(473);
	
	__webpack_require__(222).extendChartView({
	
	    type: 'effectScatter',
	
	    init: function init() {
	        this._symbolDraw = new SymbolDraw(EffectSymbol);
	    },
	
	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var effectSymbolDraw = this._symbolDraw;
	        effectSymbolDraw.updateData(data);
	        this.group.add(effectSymbolDraw.group);
	    },
	
	    updateLayout: function updateLayout() {
	        this._symbolDraw.updateLayout();
	    },
	
	    remove: function remove(ecModel, api) {
	        this._symbolDraw && this._symbolDraw.remove(api);
	    }
	});

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Symbol with ripple effect
	 * @module echarts/chart/helper/EffectSymbol
	 */
	
	var zrUtil = __webpack_require__(224);
	var symbolUtil = __webpack_require__(321);
	var graphic = __webpack_require__(263);
	var numberUtil = __webpack_require__(228);
	var _Symbol = __webpack_require__(320);
	var Group = graphic.Group;
	
	var EFFECT_RIPPLE_NUMBER = 3;
	
	function normalizeSymbolSize(symbolSize) {
	    if (!zrUtil.isArray(symbolSize)) {
	        symbolSize = [+symbolSize, +symbolSize];
	    }
	    return symbolSize;
	}
	/**
	 * @constructor
	 * @param {module:echarts/data/List} data
	 * @param {number} idx
	 * @extends {module:zrender/graphic/Group}
	 */
	function EffectSymbol(data, idx) {
	    Group.call(this);
	
	    var symbol = new _Symbol(data, idx);
	    var rippleGroup = new Group();
	    this.add(symbol);
	    this.add(rippleGroup);
	
	    rippleGroup.beforeUpdate = function () {
	        this.attr(symbol.getScale());
	    };
	    this.updateData(data, idx);
	}
	
	var effectSymbolProto = EffectSymbol.prototype;
	
	effectSymbolProto.stopEffectAnimation = function () {
	    this.childAt(1).removeAll();
	};
	
	effectSymbolProto.startEffectAnimation = function (period, brushType, rippleScale, effectOffset, z, zlevel) {
	    var symbolType = this._symbolType;
	    var color = this._color;
	
	    var rippleGroup = this.childAt(1);
	
	    for (var i = 0; i < EFFECT_RIPPLE_NUMBER; i++) {
	        var ripplePath = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	        ripplePath.attr({
	            style: {
	                stroke: brushType === 'stroke' ? color : null,
	                fill: brushType === 'fill' ? color : null,
	                strokeNoScale: true
	            },
	            z2: 99,
	            silent: true,
	            scale: [1, 1],
	            z: z,
	            zlevel: zlevel
	        });
	
	        var delay = -i / EFFECT_RIPPLE_NUMBER * period + effectOffset;
	        // TODO Configurable period
	        ripplePath.animate('', true).when(period, {
	            scale: [rippleScale, rippleScale]
	        }).delay(delay).start();
	        ripplePath.animateStyle(true).when(period, {
	            opacity: 0
	        }).delay(delay).start();
	
	        rippleGroup.add(ripplePath);
	    }
	};
	
	/**
	 * Highlight symbol
	 */
	effectSymbolProto.highlight = function () {
	    this.trigger('emphasis');
	};
	
	/**
	 * Downplay symbol
	 */
	effectSymbolProto.downplay = function () {
	    this.trigger('normal');
	};
	
	/**
	 * Update symbol properties
	 * @param  {module:echarts/data/List} data
	 * @param  {number} idx
	 */
	effectSymbolProto.updateData = function (data, idx) {
	    var seriesModel = data.hostModel;
	
	    this.childAt(0).updateData(data, idx);
	
	    var rippleGroup = this.childAt(1);
	    var itemModel = data.getItemModel(idx);
	    var symbolType = data.getItemVisual(idx, 'symbol');
	    var symbolSize = normalizeSymbolSize(data.getItemVisual(idx, 'symbolSize'));
	    var color = data.getItemVisual(idx, 'color');
	
	    rippleGroup.attr('scale', symbolSize);
	
	    rippleGroup.traverse(function (ripplePath) {
	        ripplePath.attr({
	            fill: color
	        });
	    });
	
	    var symbolOffset = itemModel.getShallow('symbolOffset');
	    if (symbolOffset) {
	        var pos = rippleGroup.position;
	        pos[0] = numberUtil.parsePercent(symbolOffset[0], symbolSize[0]);
	        pos[1] = numberUtil.parsePercent(symbolOffset[1], symbolSize[1]);
	    }
	
	    this._symbolType = symbolType;
	    this._color = color;
	
	    var showEffectOn = seriesModel.get('showEffectOn');
	    var rippleScale = itemModel.get('rippleEffect.scale');
	    var brushType = itemModel.get('rippleEffect.brushType');
	    var effectPeriod = itemModel.get('rippleEffect.period') * 1000;
	    var effectOffset = idx / data.count();
	    var z = itemModel.getShallow('z') || 0;
	    var zlevel = itemModel.getShallow('zlevel') || 0;
	
	    this.stopEffectAnimation();
	    if (showEffectOn === 'render') {
	        this.startEffectAnimation(effectPeriod, brushType, rippleScale, effectOffset, z, zlevel);
	    }
	    var symbol = this.childAt(0);
	    function onEmphasis() {
	        symbol.trigger('emphasis');
	        if (showEffectOn !== 'render') {
	            this.startEffectAnimation(effectPeriod, brushType, rippleScale, effectOffset, z, zlevel);
	        }
	    }
	    function onNormal() {
	        symbol.trigger('normal');
	        if (showEffectOn !== 'render') {
	            this.stopEffectAnimation();
	        }
	    }
	    this.on('mouseover', onEmphasis, this).on('mouseout', onNormal, this).on('emphasis', onEmphasis, this).on('normal', onNormal, this);
	};
	
	effectSymbolProto.fadeOut = function (cb) {
	    cb && cb();
	};
	
	zrUtil.inherits(EffectSymbol, Group);
	
	module.exports = EffectSymbol;

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(475);
	__webpack_require__(476);
	
	var zrUtil = __webpack_require__(224);
	var echarts = __webpack_require__(222);
	echarts.registerLayout(__webpack_require__(478));
	
	echarts.registerVisualCoding('chart', zrUtil.curry(__webpack_require__(309), 'lines', 'lineStyle'));

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var List = __webpack_require__(315);
	var zrUtil = __webpack_require__(224);
	var CoordinateSystem = __webpack_require__(246);
	
	module.exports = SeriesModel.extend({
	
	    type: 'series.lines',
	
	    dependencies: ['grid', 'polar'],
	
	    getInitialData: function getInitialData(option, ecModel) {
	        var fromDataArr = [];
	        var toDataArr = [];
	        var lineDataArr = [];
	        zrUtil.each(option.data, function (opt) {
	            fromDataArr.push(opt[0]);
	            toDataArr.push(opt[1]);
	            lineDataArr.push(zrUtil.extend(zrUtil.extend({}, zrUtil.isArray(opt[0]) ? null : opt[0]), zrUtil.isArray(opt[1]) ? null : opt[1]));
	        });
	
	        // var coordSys = option.coordinateSystem;
	        // if (coordSys !== 'cartesian2d' && coordSys !== 'geo') {
	        //     throw new Error('Coordinate system can only be cartesian2d or geo in lines');
	        // }
	
	        // var dimensions = coordSys === 'geo' ? ['lng', 'lat'] : ['x', 'y'];
	        var coordSys = CoordinateSystem.get(option.coordinateSystem);
	        if (!coordSys) {
	            throw new Error('Invalid coordinate system');
	        }
	        var dimensions = coordSys.dimensions;
	
	        var fromData = new List(dimensions, this);
	        var toData = new List(dimensions, this);
	        var lineData = new List(['value'], this);
	
	        function geoCoordGetter(item, dim, dataIndex, dimIndex) {
	            return item.coord && item.coord[dimIndex];
	        }
	
	        fromData.initData(fromDataArr, null, geoCoordGetter);
	        toData.initData(toDataArr, null, geoCoordGetter);
	        lineData.initData(lineDataArr);
	
	        this.fromData = fromData;
	        this.toData = toData;
	
	        return lineData;
	    },
	
	    formatTooltip: function formatTooltip(dataIndex) {
	        var fromName = this.fromData.getName(dataIndex);
	        var toName = this.toData.getName(dataIndex);
	        return fromName + ' > ' + toName;
	    },
	
	    defaultOption: {
	        coordinateSystem: 'geo',
	        zlevel: 0,
	        z: 2,
	        legendHoverLink: true,
	
	        hoverAnimation: true,
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        // Geo coordinate system
	        geoIndex: 0,
	
	        // symbol: null,
	        // symbolSize: 10,
	        // symbolRotate: null,
	
	        effect: {
	            show: false,
	            period: 4,
	            symbol: 'circle',
	            symbolSize: 3,
	            // Length of trail, 0 - 1
	            trailLength: 0.2
	            // Same with lineStyle.normal.color
	            // color
	        },
	
	        large: false,
	        // Available when large is true
	        largeThreshold: 2000,
	
	        label: {
	            normal: {
	                show: false,
	                position: 'end'
	                // distance: 5,
	                // formatter: 标签文本格式器，同Tooltip.formatter，不支持异步回调
	            }
	        },
	        // itemStyle: {
	        //     normal: {
	        //     }
	        // },
	        lineStyle: {
	            normal: {
	                opacity: 0.5
	            }
	        }
	    }
	});

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var LineDraw = __webpack_require__(415);
	var EffectLine = __webpack_require__(477);
	var Line = __webpack_require__(416);
	
	__webpack_require__(222).extendChartView({
	
	    type: 'lines',
	
	    init: function init() {},
	
	    render: function render(seriesModel, ecModel, api) {
	        var data = seriesModel.getData();
	        var lineDraw = this._lineDraw;
	
	        var hasEffect = seriesModel.get('effect.show');
	        if (hasEffect !== this._hasEffet) {
	            if (lineDraw) {
	                lineDraw.remove();
	            }
	            lineDraw = this._lineDraw = new LineDraw(hasEffect ? EffectLine : Line);
	            this._hasEffet = hasEffect;
	        }
	
	        var zlevel = seriesModel.get('zlevel');
	        var trailLength = seriesModel.get('effect.trailLength');
	
	        var zr = api.getZr();
	        // Avoid the drag cause ghost shadow
	        // FIXME Better way ?
	        zr.painter.getLayer(zlevel).clear(true);
	        // Config layer with motion blur
	        if (this._lastZlevel != null) {
	            zr.configLayer(this._lastZlevel, {
	                motionBlur: false
	            });
	        }
	        if (hasEffect && trailLength) {
	            zr.configLayer(zlevel, {
	                motionBlur: true,
	                lastFrameAlpha: Math.max(Math.min(trailLength / 10 + 0.9, 1), 0)
	            });
	        }
	
	        this.group.add(lineDraw.group);
	
	        lineDraw.updateData(data);
	
	        this._lastZlevel = zlevel;
	    },
	
	    updateLayout: function updateLayout(seriesModel, ecModel, api) {
	        this._lineDraw.updateLayout();
	        // Not use motion when dragging or zooming
	        var zr = api.getZr();
	        zr.painter.getLayer(this._lastZlevel).clear(true);
	    },
	
	    remove: function remove(ecModel, api) {
	        this._lineDraw && this._lineDraw.remove(api, true);
	    }
	});

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/chart/helper/EffectLine
	 */
	
	var graphic = __webpack_require__(263);
	var Line = __webpack_require__(416);
	var zrUtil = __webpack_require__(224);
	var symbolUtil = __webpack_require__(321);
	
	var curveUtil = __webpack_require__(270);
	
	/**
	 * @constructor
	 * @extends {module:zrender/graphic/Group}
	 * @alias {module:echarts/chart/helper/Line}
	 */
	function EffectLine(lineData, fromData, toData, idx) {
	    graphic.Group.call(this);
	
	    var line = new Line(lineData, fromData, toData, idx);
	    this.add(line);
	
	    this._updateEffectSymbol(lineData, idx);
	}
	
	var effectLineProto = EffectLine.prototype;
	
	function setAnimationPoints(symbol, points) {
	    symbol.__p1 = points[0];
	    symbol.__p2 = points[1];
	    symbol.__cp1 = points[2] || [(points[0][0] + points[1][0]) / 2, (points[0][1] + points[1][1]) / 2];
	}
	
	function updateSymbolPosition() {
	    var p1 = this.__p1;
	    var p2 = this.__p2;
	    var cp1 = this.__cp1;
	    var t = this.__t;
	    var pos = this.position;
	    var quadraticAt = curveUtil.quadraticAt;
	    var quadraticDerivativeAt = curveUtil.quadraticDerivativeAt;
	    pos[0] = quadraticAt(p1[0], cp1[0], p2[0], t);
	    pos[1] = quadraticAt(p1[1], cp1[1], p2[1], t);
	
	    // Tangent
	    var tx = quadraticDerivativeAt(p1[0], cp1[0], p2[0], t);
	    var ty = quadraticDerivativeAt(p1[1], cp1[1], p2[1], t);
	
	    this.rotation = -Math.atan2(ty, tx) - Math.PI / 2;
	
	    this.ignore = false;
	}
	
	effectLineProto._updateEffectSymbol = function (lineData, idx) {
	    var itemModel = lineData.getItemModel(idx);
	    var effectModel = itemModel.getModel('effect');
	    var size = effectModel.get('symbolSize');
	    var symbolType = effectModel.get('symbol');
	    if (!zrUtil.isArray(size)) {
	        size = [size, size];
	    }
	    var color = effectModel.get('color') || lineData.getItemVisual(idx, 'color');
	    var symbol = this.childAt(1);
	    var period = effectModel.get('period') * 1000;
	    if (this._symbolType !== symbolType || period !== this._period) {
	        symbol = symbolUtil.createSymbol(symbolType, -0.5, -0.5, 1, 1, color);
	        symbol.ignore = true;
	        symbol.z2 = 100;
	        this._symbolType = symbolType;
	        this._period = period;
	
	        this.add(symbol);
	
	        symbol.__t = 0;
	        symbol.animate('', true).when(period, {
	            __t: 1
	        }).delay(idx / lineData.count() * period / 2).during(zrUtil.bind(updateSymbolPosition, symbol)).start();
	    }
	    // Shadow color is same with color in default
	    symbol.setStyle('shadowColor', color);
	    symbol.setStyle(effectModel.getItemStyle(['color']));
	
	    symbol.attr('scale', size);
	    var points = lineData.getItemLayout(idx);
	    setAnimationPoints(symbol, points);
	
	    symbol.setColor(color);
	    symbol.attr('scale', size);
	};
	
	effectLineProto.updateData = function (lineData, fromData, toData, idx) {
	    this.childAt(0).updateData(lineData, fromData, toData, idx);
	    this._updateEffectSymbol(lineData, idx);
	};
	
	effectLineProto.updateLayout = function (lineData, fromData, toData, idx) {
	    this.childAt(0).updateLayout(lineData, fromData, toData, idx);
	    var symbol = this.childAt(1);
	    var points = lineData.getItemLayout(idx);
	    setAnimationPoints(symbol, points);
	};
	
	zrUtil.inherits(EffectLine, graphic.Group);
	
	module.exports = EffectLine;

/***/ },
/* 478 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel) {
	    ecModel.eachSeriesByType('lines', function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	        var fromData = seriesModel.fromData;
	        var toData = seriesModel.toData;
	        var lineData = seriesModel.getData();
	
	        var dims = coordSys.dimensions;
	        fromData.each(dims, function (x, y, idx) {
	            fromData.setItemLayout(idx, coordSys.dataToPoint([x, y]));
	        });
	        toData.each(dims, function (x, y, idx) {
	            toData.setItemLayout(idx, coordSys.dataToPoint([x, y]));
	        });
	        lineData.each(function (idx) {
	            var p1 = fromData.getItemLayout(idx);
	            var p2 = toData.getItemLayout(idx);
	            var curveness = lineData.getItemModel(idx).get('lineStyle.normal.curveness');
	            var cp1;
	            if (curveness > 0) {
	                cp1 = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * curveness];
	            }
	            lineData.setItemLayout(idx, [p1, p2, cp1]);
	        });
	    });
	};

/***/ },
/* 479 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(480);
	__webpack_require__(481);

/***/ },
/* 480 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SeriesModel = __webpack_require__(248);
	var createListFromArray = __webpack_require__(314);
	
	module.exports = SeriesModel.extend({
	    type: 'series.heatmap',
	
	    getInitialData: function getInitialData(option, ecModel) {
	        return createListFromArray(option.data, this, ecModel);
	    },
	
	    defaultOption: {
	
	        // Cartesian2D or geo
	        coordinateSystem: 'cartesian2d',
	
	        zlevel: 0,
	
	        z: 2,
	
	        // Cartesian coordinate system
	        xAxisIndex: 0,
	        yAxisIndex: 0,
	
	        // Geo coordinate system
	        geoIndex: 0,
	
	        blurSize: 30,
	
	        pointSize: 20
	    }
	});

/***/ },
/* 481 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var graphic = __webpack_require__(263);
	var HeatmapLayer = __webpack_require__(482);
	var zrUtil = __webpack_require__(224);
	
	function getIsInPiecewiseRange(dataExtent, pieceList, selected) {
	    var dataSpan = dataExtent[1] - dataExtent[0];
	    pieceList = zrUtil.map(pieceList, function (piece) {
	        return {
	            interval: [(piece.interval[0] - dataExtent[0]) / dataSpan, (piece.interval[1] - dataExtent[0]) / dataSpan]
	        };
	    });
	    var len = pieceList.length;
	    var lastIndex = 0;
	    return function (val) {
	        // Try to find in the location of the last found
	        for (var i = lastIndex; i < len; i++) {
	            var interval = pieceList[i].interval;
	            if (interval[0] <= val && val <= interval[1]) {
	                lastIndex = i;
	                break;
	            }
	        }
	        if (i === len) {
	            // Not found, back interation
	            for (var i = lastIndex - 1; i >= 0; i--) {
	                var interval = pieceList[i].interval;
	                if (interval[0] <= val && val <= interval[1]) {
	                    lastIndex = i;
	                    break;
	                }
	            }
	        }
	        return i >= 0 && i < len && selected[i];
	    };
	}
	
	function getIsInContinuousRange(dataExtent, range) {
	    var dataSpan = dataExtent[1] - dataExtent[0];
	    range = [(range[0] - dataExtent[0]) / dataSpan, (range[1] - dataExtent[0]) / dataSpan];
	    return function (val) {
	        return val >= range[0] && val <= range[1];
	    };
	}
	
	function isGeoCoordSys(coordSys) {
	    var dimensions = coordSys.dimensions;
	    // Not use coorSys.type === 'geo' because coordSys maybe extended
	    return dimensions[0] === 'lng' && dimensions[1] === 'lat';
	}
	
	module.exports = __webpack_require__(222).extendChartView({
	
	    type: 'heatmap',
	
	    render: function render(seriesModel, ecModel, api) {
	        var visualMapOfThisSeries;
	        ecModel.eachComponent('visualMap', function (visualMap) {
	            visualMap.eachTargetSeries(function (targetSeries) {
	                if (targetSeries === seriesModel) {
	                    visualMapOfThisSeries = visualMap;
	                }
	            });
	        });
	
	        if (!visualMapOfThisSeries) {
	            throw new Error('Heatmap must use with visualMap');
	        }
	
	        this.group.removeAll();
	        var coordSys = seriesModel.coordinateSystem;
	        if (coordSys.type === 'cartesian2d') {
	            this._renderOnCartesian(coordSys, seriesModel, api);
	        } else if (isGeoCoordSys(coordSys)) {
	            this._renderOnGeo(coordSys, seriesModel, visualMapOfThisSeries, api);
	        }
	    },
	
	    _renderOnCartesian: function _renderOnCartesian(cartesian, seriesModel, api) {
	        var xAxis = cartesian.getAxis('x');
	        var yAxis = cartesian.getAxis('y');
	        var group = this.group;
	
	        if (!(xAxis.type === 'category' && yAxis.type === 'category')) {
	            throw new Error('Heatmap on cartesian must have two category axes');
	        }
	        if (!(xAxis.onBand && yAxis.onBand)) {
	            throw new Error('Heatmap on cartesian must have two axes with boundaryGap true');
	        }
	        var width = xAxis.getBandWidth();
	        var height = yAxis.getBandWidth();
	
	        var data = seriesModel.getData();
	        data.each(['x', 'y', 'z'], function (x, y, z, idx) {
	            var itemModel = data.getItemModel(idx);
	            var point = cartesian.dataToPoint([x, y]);
	            // Ignore empty data
	            if (isNaN(z)) {
	                return;
	            }
	            var rect = new graphic.Rect({
	                shape: {
	                    x: point[0] - width / 2,
	                    y: point[1] - height / 2,
	                    width: width,
	                    height: height
	                },
	                style: {
	                    fill: data.getItemVisual(idx, 'color')
	                }
	            });
	            var style = itemModel.getModel('itemStyle.normal').getItemStyle(['color']);
	            var hoverStl = itemModel.getModel('itemStyle.emphasis').getItemStyle();
	            var labelModel = itemModel.getModel('label.normal');
	            var hoverLabelModel = itemModel.getModel('label.emphasis');
	
	            var rawValue = seriesModel.getRawValue(idx);
	            var defaultText = '-';
	            if (rawValue && rawValue[2] != null) {
	                defaultText = rawValue[2];
	            }
	            if (labelModel.get('show')) {
	                graphic.setText(style, labelModel);
	                style.text = seriesModel.getFormattedLabel(idx, 'normal') || defaultText;
	            }
	            if (hoverLabelModel.get('show')) {
	                graphic.setText(hoverStl, hoverLabelModel);
	                hoverStl.text = seriesModel.getFormattedLabel(idx, 'emphasis') || defaultText;
	            }
	
	            rect.setStyle(style);
	
	            graphic.setHoverStyle(rect, hoverStl);
	
	            group.add(rect);
	            data.setItemGraphicEl(idx, rect);
	        });
	    },
	
	    _renderOnGeo: function _renderOnGeo(geo, seriesModel, visualMapModel, api) {
	        var inRangeVisuals = visualMapModel.targetVisuals.inRange;
	        var outOfRangeVisuals = visualMapModel.targetVisuals.outOfRange;
	        // if (!visualMapping) {
	        //     throw new Error('Data range must have color visuals');
	        // }
	
	        var data = seriesModel.getData();
	        var hmLayer = this._hmLayer || this._hmLayer || new HeatmapLayer();
	        hmLayer.blurSize = seriesModel.get('blurSize');
	        hmLayer.pointSize = seriesModel.get('pointSize');
	
	        var rect = geo.getViewRect().clone();
	        var roamTransform = geo.getRoamTransform();
	        rect.applyTransform(roamTransform);
	
	        // Clamp on viewport
	        var x = Math.max(rect.x, 0);
	        var y = Math.max(rect.y, 0);
	        var x2 = Math.min(rect.width + rect.x, api.getWidth());
	        var y2 = Math.min(rect.height + rect.y, api.getHeight());
	        var width = x2 - x;
	        var height = y2 - y;
	
	        var points = data.mapArray(['lng', 'lat', 'value'], function (lng, lat, value) {
	            var pt = geo.dataToPoint([lng, lat]);
	            pt[0] -= x;
	            pt[1] -= y;
	            pt.push(value);
	            return pt;
	        });
	
	        var dataExtent = visualMapModel.getExtent();
	        var isInRange = visualMapModel.type === 'visualMap.continuous' ? getIsInContinuousRange(dataExtent, visualMapModel.option.range) : getIsInPiecewiseRange(dataExtent, visualMapModel.getPieceList(), visualMapModel.option.selected);
	
	        hmLayer.update(points, width, height, inRangeVisuals.color.getNormalizer(), {
	            inRange: inRangeVisuals.color.getColorMapper(),
	            outOfRange: outOfRangeVisuals.color.getColorMapper()
	        }, isInRange);
	        var img = new graphic.Image({
	            style: {
	                width: width,
	                height: height,
	                x: x,
	                y: y,
	                image: hmLayer.canvas
	            },
	            silent: true
	        });
	        this.group.add(img);
	    }
	});

/***/ },
/* 482 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file defines echarts Heatmap Chart
	 * @author Ovilia (me@zhangwenli.com)
	 * Inspired by https://github.com/mourner/simpleheat
	 *
	 * @module
	 */
	
	var GRADIENT_LEVELS = 256;
	var zrUtil = __webpack_require__(224);
	
	/**
	 * Heatmap Chart
	 *
	 * @class
	 */
	function Heatmap() {
	    var canvas = zrUtil.createCanvas();
	    this.canvas = canvas;
	
	    this.blurSize = 30;
	    this.pointSize = 20;
	    this.opacity = 1;
	
	    this._gradientPixels = {};
	}
	
	Heatmap.prototype = {
	    /**
	     * Renders Heatmap and returns the rendered canvas
	     * @param {Array} data array of data, each has x, y, value
	     * @param {number} width canvas width
	     * @param {number} height canvas height
	     */
	    update: function update(data, width, height, normalize, colorFunc, isInRange) {
	        var brush = this._getBrush();
	        var gradientInRange = this._getGradient(data, colorFunc, 'inRange');
	        var gradientOutOfRange = this._getGradient(data, colorFunc, 'outOfRange');
	        var r = this.pointSize + this.blurSize;
	
	        var canvas = this.canvas;
	        var ctx = canvas.getContext('2d');
	        var len = data.length;
	        canvas.width = width;
	        canvas.height = height;
	        for (var i = 0; i < len; ++i) {
	            var p = data[i];
	            var x = p[0];
	            var y = p[1];
	            var value = p[2];
	
	            // calculate alpha using value
	            var alpha = normalize(value);
	
	            // draw with the circle brush with alpha
	            ctx.globalAlpha = alpha;
	            ctx.drawImage(brush, x - r, y - r);
	        }
	
	        // colorize the canvas using alpha value and set with gradient
	        var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
	        var pixels = imageData.data;
	        var offset = 0;
	        var pixelLen = pixels.length;
	        while (offset < pixelLen) {
	            var alpha = pixels[offset + 3] / 256;
	            var gradientOffset = Math.floor(alpha * (GRADIENT_LEVELS - 1)) * 4;
	            // Simple optimize to ignore the empty data
	            if (alpha > 0) {
	                var gradient = isInRange(alpha) ? gradientInRange : gradientOutOfRange;
	                pixels[offset++] = gradient[gradientOffset];
	                pixels[offset++] = gradient[gradientOffset + 1];
	                pixels[offset++] = gradient[gradientOffset + 2];
	                pixels[offset++] *= this.opacity * gradient[gradientOffset + 3];
	            } else {
	                offset += 4;
	            }
	        }
	        ctx.putImageData(imageData, 0, 0);
	
	        return canvas;
	    },
	
	    /**
	     * get canvas of a black circle brush used for canvas to draw later
	     * @private
	     * @returns {Object} circle brush canvas
	     */
	    _getBrush: function _getBrush() {
	        var brushCanvas = this._brushCanvas || (this._brushCanvas = zrUtil.createCanvas());
	        // set brush size
	        var r = this.pointSize + this.blurSize;
	        var d = r * 2;
	        brushCanvas.width = d;
	        brushCanvas.height = d;
	
	        var ctx = brushCanvas.getContext('2d');
	        ctx.clearRect(0, 0, d, d);
	
	        // in order to render shadow without the distinct circle,
	        // draw the distinct circle in an invisible place,
	        // and use shadowOffset to draw shadow in the center of the canvas
	        ctx.shadowOffsetX = d;
	        ctx.shadowBlur = this.blurSize;
	        // draw the shadow in black, and use alpha and shadow blur to generate
	        // color in color map
	        ctx.shadowColor = '#000';
	
	        // draw circle in the left to the canvas
	        ctx.beginPath();
	        ctx.arc(-r, r, this.pointSize, 0, Math.PI * 2, true);
	        ctx.closePath();
	        ctx.fill();
	        return brushCanvas;
	    },
	
	    /**
	     * get gradient color map
	     * @private
	     */
	    _getGradient: function _getGradient(data, colorFunc, state) {
	        var gradientPixels = this._gradientPixels;
	        var pixelsSingleState = gradientPixels[state] || (gradientPixels[state] = new Uint8ClampedArray(256 * 4));
	        var color = [];
	        var off = 0;
	        for (var i = 0; i < 256; i++) {
	            colorFunc[state](i / 255, true, color);
	            pixelsSingleState[off++] = color[0];
	            pixelsSingleState[off++] = color[1];
	            pixelsSingleState[off++] = color[2];
	            pixelsSingleState[off++] = color[3];
	        }
	        return pixelsSingleState;
	    }
	};
	
	module.exports = Heatmap;

/***/ },
/* 483 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Legend component entry file8
	 */
	
	__webpack_require__(484);
	__webpack_require__(485);
	__webpack_require__(486);
	
	var echarts = __webpack_require__(222);
	// Series Filter
	echarts.registerProcessor('filter', __webpack_require__(488));

/***/ },
/* 484 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Model = __webpack_require__(229);
	
	var LegendModel = __webpack_require__(222).extendComponentModel({
	
	    type: 'legend',
	
	    dependencies: ['series'],
	
	    layoutMode: {
	        type: 'box',
	        ignoreSize: true
	    },
	
	    init: function init(option, parentModel, ecModel) {
	        this.mergeDefaultAndTheme(option, ecModel);
	
	        option.selected = option.selected || {};
	
	        this._updateData(ecModel);
	
	        var legendData = this._data;
	        // If has any selected in option.selected
	        var selectedMap = this.option.selected;
	        // If selectedMode is single, try to select one
	        if (legendData[0] && this.get('selectedMode') === 'single') {
	            var hasSelected = false;
	            for (var name in selectedMap) {
	                if (selectedMap[name]) {
	                    this.select(name);
	                    hasSelected = true;
	                }
	            }
	            // Try select the first if selectedMode is single
	            !hasSelected && this.select(legendData[0].get('name'));
	        }
	    },
	
	    mergeOption: function mergeOption(option) {
	        LegendModel.superCall(this, 'mergeOption', option);
	
	        this._updateData(this.ecModel);
	    },
	
	    _updateData: function _updateData(ecModel) {
	        var legendData = zrUtil.map(this.get('data') || [], function (dataItem) {
	            if (typeof dataItem === 'string') {
	                dataItem = {
	                    name: dataItem
	                };
	            }
	            return new Model(dataItem, this, this.ecModel);
	        }, this);
	        this._data = legendData;
	
	        var availableNames = zrUtil.map(ecModel.getSeries(), function (series) {
	            return series.name;
	        });
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.legendDataProvider) {
	                var data = seriesModel.legendDataProvider();
	                availableNames = availableNames.concat(data.mapArray(data.getName));
	            }
	        });
	        /**
	         * @type {Array.<string>}
	         * @private
	         */
	        this._availableNames = availableNames;
	    },
	
	    /**
	     * @return {Array.<module:echarts/model/Model>}
	     */
	    getData: function getData() {
	        return this._data;
	    },
	
	    /**
	     * @param {string} name
	     */
	    select: function select(name) {
	        var selected = this.option.selected;
	        var selectedMode = this.get('selectedMode');
	        if (selectedMode === 'single') {
	            var data = this._data;
	            zrUtil.each(data, function (dataItem) {
	                selected[dataItem.get('name')] = false;
	            });
	        }
	        selected[name] = true;
	    },
	
	    /**
	     * @param {string} name
	     */
	    unSelect: function unSelect(name) {
	        if (this.get('selectedMode') !== 'single') {
	            this.option.selected[name] = false;
	        }
	    },
	
	    /**
	     * @param {string} name
	     */
	    toggleSelected: function toggleSelected(name) {
	        var selected = this.option.selected;
	        // Default is true
	        if (!(name in selected)) {
	            selected[name] = true;
	        }
	        this[selected[name] ? 'unSelect' : 'select'](name);
	    },
	
	    /**
	     * @param {string} name
	     */
	    isSelected: function isSelected(name) {
	        var selected = this.option.selected;
	        return !(name in selected && !selected[name]) && zrUtil.indexOf(this._availableNames, name) >= 0;
	    },
	
	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 4,
	        show: true,
	
	        // 布局方式，默认为水平布局，可选为：
	        // 'horizontal' | 'vertical'
	        orient: 'horizontal',
	
	        left: 'center',
	        // right: 'center',
	
	        top: 'top',
	        // bottom: 'top',
	
	        // 水平对齐
	        // 'auto' | 'left' | 'right'
	        // 默认为 'auto', 根据 x 的位置判断是左对齐还是右对齐
	        align: 'auto',
	
	        backgroundColor: 'rgba(0,0,0,0)',
	        // 图例边框颜色
	        borderColor: '#ccc',
	        // 图例边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,
	        // 图例内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,
	        // 各个item之间的间隔，单位px，默认为10，
	        // 横向布局时为水平间隔，纵向布局时为纵向间隔
	        itemGap: 10,
	        // 图例图形宽度
	        itemWidth: 25,
	        // 图例图形高度
	        itemHeight: 14,
	        textStyle: {
	            // 图例文字颜色
	            color: '#333'
	        },
	        // formatter: '',
	        // 选择模式，默认开启图例开关
	        selectedMode: true
	        // 配置默认选中状态，可配合LEGEND.SELECTED事件做动态数据载入
	        // selected: null,
	        // 图例内容（详见legend.data，数组中每一项代表一个item
	        // data: [],
	    }
	});
	
	module.exports = LegendModel;

/***/ },
/* 485 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Legend action
	 */
	
	var echarts = __webpack_require__(222);
	var zrUtil = __webpack_require__(224);
	
	function legendSelectActionHandler(methodName, payload, ecModel) {
	    var selectedMap = {};
	    var isToggleSelect = methodName === 'toggleSelected';
	    var isSelected;
	    // Update all legend components
	    ecModel.eachComponent('legend', function (legendModel) {
	        if (isToggleSelect && isSelected != null) {
	            // Force other legend has same selected status
	            // Or the first is toggled to true and other are toggled to false
	            // In the case one legend has some item unSelected in option. And if other legend
	            // doesn't has the item, they will assume it is selected.
	            legendModel[isSelected ? 'select' : 'unSelect'](payload.name);
	        } else {
	            legendModel[methodName](payload.name);
	            isSelected = legendModel.isSelected(payload.name);
	        }
	        var legendData = legendModel.getData();
	        zrUtil.each(legendData, function (model) {
	            var name = model.get('name');
	            // Wrap element
	            if (name === '\n' || name === '') {
	                return;
	            }
	            var isItemSelected = legendModel.isSelected(name);
	            if (name in selectedMap) {
	                // Unselected if any legend is unselected
	                selectedMap[name] = selectedMap[name] && isItemSelected;
	            } else {
	                selectedMap[name] = isItemSelected;
	            }
	        });
	    });
	    // Return the event explicitly
	    return {
	        name: payload.name,
	        selected: selectedMap
	    };
	}
	/**
	 * @event legendToggleSelect
	 * @type {Object}
	 * @property {string} type 'legendToggleSelect'
	 * @property {string} [from]
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendToggleSelect', 'legendselectchanged', zrUtil.curry(legendSelectActionHandler, 'toggleSelected'));
	
	/**
	 * @event legendSelect
	 * @type {Object}
	 * @property {string} type 'legendSelect'
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendSelect', 'legendselected', zrUtil.curry(legendSelectActionHandler, 'select'));
	
	/**
	 * @event legendUnSelect
	 * @type {Object}
	 * @property {string} type 'legendUnSelect'
	 * @property {string} name Series name or data item name
	 */
	echarts.registerAction('legendUnSelect', 'legendunselected', zrUtil.curry(legendSelectActionHandler, 'unSelect'));

/***/ },
/* 486 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var symbolCreator = __webpack_require__(321);
	var graphic = __webpack_require__(263);
	var listComponentHelper = __webpack_require__(487);
	
	var curry = zrUtil.curry;
	
	var LEGEND_DISABLE_COLOR = '#ccc';
	
	function dispatchSelectAction(name, api) {
	    api.dispatchAction({
	        type: 'legendToggleSelect',
	        name: name
	    });
	}
	
	function dispatchHighlightAction(seriesModel, dataName, api) {
	    seriesModel.get('legendHoverLink') && api.dispatchAction({
	        type: 'highlight',
	        seriesName: seriesModel.name,
	        name: dataName
	    });
	}
	
	function dispatchDownplayAction(seriesModel, dataName, api) {
	    seriesModel.get('legendHoverLink') && api.dispatchAction({
	        type: 'downplay',
	        seriesName: seriesModel.name,
	        name: dataName
	    });
	}
	
	module.exports = __webpack_require__(222).extendComponentView({
	
	    type: 'legend',
	
	    init: function init() {
	        this._symbolTypeStore = {};
	    },
	
	    render: function render(legendModel, ecModel, api) {
	        var group = this.group;
	        group.removeAll();
	
	        if (!legendModel.get('show')) {
	            return;
	        }
	
	        var selectMode = legendModel.get('selectedMode');
	        var itemAlign = legendModel.get('align');
	
	        if (itemAlign === 'auto') {
	            itemAlign = legendModel.get('left') === 'right' && legendModel.get('orient') === 'vertical' ? 'right' : 'left';
	        }
	
	        var legendItemMap = {};
	        var legendDrawedMap = {};
	        zrUtil.each(legendModel.getData(), function (itemModel) {
	            var seriesName = itemModel.get('name');
	            // Use empty string or \n as a newline string
	            if (seriesName === '' || seriesName === '\n') {
	                group.add(new graphic.Group({
	                    newline: true
	                }));
	            }
	
	            var seriesModel = ecModel.getSeriesByName(seriesName)[0];
	
	            legendItemMap[seriesName] = itemModel;
	
	            if (!seriesModel || legendDrawedMap[seriesName]) {
	                // Series not exists
	                return;
	            }
	
	            var data = seriesModel.getData();
	            var color = data.getVisual('color');
	
	            // If color is a callback function
	            if (typeof color === 'function') {
	                // Use the first data
	                color = color(seriesModel.getDataParams(0));
	            }
	
	            // Using rect symbol defaultly
	            var legendSymbolType = data.getVisual('legendSymbol') || 'roundRect';
	            var symbolType = data.getVisual('symbol');
	
	            var itemGroup = this._createItem(seriesName, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode);
	
	            itemGroup.on('click', curry(dispatchSelectAction, seriesName, api)).on('mouseover', curry(dispatchHighlightAction, seriesModel, '', api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, '', api));
	
	            legendDrawedMap[seriesName] = true;
	        }, this);
	
	        ecModel.eachRawSeries(function (seriesModel) {
	            if (seriesModel.legendDataProvider) {
	                var data = seriesModel.legendDataProvider();
	                data.each(function (idx) {
	                    var name = data.getName(idx);
	
	                    // Avoid mutiple series use the same data name
	                    if (!legendItemMap[name] || legendDrawedMap[name]) {
	                        return;
	                    }
	
	                    var color = data.getItemVisual(idx, 'color');
	
	                    var legendSymbolType = 'roundRect';
	
	                    var itemGroup = this._createItem(name, legendItemMap[name], legendModel, legendSymbolType, null, itemAlign, color, selectMode);
	
	                    itemGroup.on('click', curry(dispatchSelectAction, name, api))
	                    // FIXME Should not specify the series name
	                    .on('mouseover', curry(dispatchHighlightAction, seriesModel, name, api)).on('mouseout', curry(dispatchDownplayAction, seriesModel, name, api));
	
	                    legendDrawedMap[name] = true;
	                }, false, this);
	            }
	        }, this);
	
	        listComponentHelper.layout(group, legendModel, api);
	        // Render background after group is layout
	        // FIXME
	        listComponentHelper.addBackground(group, legendModel);
	    },
	
	    _createItem: function _createItem(name, itemModel, legendModel, legendSymbolType, symbolType, itemAlign, color, selectMode) {
	        var itemWidth = legendModel.get('itemWidth');
	        var itemHeight = legendModel.get('itemHeight');
	
	        var isSelected = legendModel.isSelected(name);
	        var itemGroup = new graphic.Group();
	
	        var textStyleModel = itemModel.getModel('textStyle');
	
	        var itemIcon = itemModel.get('icon');
	
	        // Use user given icon first
	        legendSymbolType = itemIcon || legendSymbolType;
	        itemGroup.add(symbolCreator.createSymbol(legendSymbolType, 0, 0, itemWidth, itemHeight, isSelected ? color : LEGEND_DISABLE_COLOR));
	
	        // Compose symbols
	        // PENDING
	        if (!itemIcon && symbolType
	        // At least show one symbol, can't be all none
	         && (symbolType !== legendSymbolType || symbolType == 'none')) {
	            var size = itemHeight * 0.8;
	            if (symbolType === 'none') {
	                symbolType = 'circle';
	            }
	            // Put symbol in the center
	            itemGroup.add(symbolCreator.createSymbol(symbolType, (itemWidth - size) / 2, (itemHeight - size) / 2, size, size, isSelected ? color : LEGEND_DISABLE_COLOR));
	        }
	
	        // Text
	        var textX = itemAlign === 'left' ? itemWidth + 5 : -5;
	        var textAlign = itemAlign;
	
	        var formatter = legendModel.get('formatter');
	        if (typeof formatter === 'string' && formatter) {
	            name = formatter.replace('{name}', name);
	        } else if (typeof formatter === 'function') {
	            name = formatter(name);
	        }
	
	        var text = new graphic.Text({
	            style: {
	                text: name,
	                x: textX,
	                y: itemHeight / 2,
	                fill: isSelected ? textStyleModel.getTextColor() : LEGEND_DISABLE_COLOR,
	                textFont: textStyleModel.getFont(),
	                textAlign: textAlign,
	                textVerticalAlign: 'middle'
	            }
	        });
	        itemGroup.add(text);
	
	        // Add a invisible rect to increase the area of mouse hover
	        itemGroup.add(new graphic.Rect({
	            shape: itemGroup.getBoundingRect(),
	            invisible: true
	        }));
	
	        itemGroup.eachChild(function (child) {
	            child.silent = !selectMode;
	        });
	
	        this.group.add(itemGroup);
	
	        return itemGroup;
	    }
	});

/***/ },
/* 487 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// List layout
	var _layout = __webpack_require__(242);
	var formatUtil = __webpack_require__(227);
	var graphic = __webpack_require__(263);
	
	function positionGroup(group, model, api) {
	    _layout.positionGroup(group, model.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    }, model.get('padding'));
	}
	
	module.exports = {
	    /**
	     * Layout list like component.
	     * It will box layout each items in group of component and then position the whole group in the viewport
	     * @param {module:zrender/group/Group} group
	     * @param {module:echarts/model/Component} componentModel
	     * @param {module:echarts/ExtensionAPI}
	     */
	    layout: function layout(group, componentModel, api) {
	        var rect = _layout.getLayoutRect(componentModel.getBoxLayoutParams(), {
	            width: api.getWidth(),
	            height: api.getHeight()
	        }, componentModel.get('padding'));
	        _layout.box(componentModel.get('orient'), group, componentModel.get('itemGap'), rect.width, rect.height);
	
	        positionGroup(group, componentModel, api);
	    },
	
	    addBackground: function addBackground(group, componentModel) {
	        var padding = formatUtil.normalizeCssArray(componentModel.get('padding'));
	        var boundingRect = group.getBoundingRect();
	        var style = componentModel.getItemStyle(['color', 'opacity']);
	        style.fill = componentModel.get('backgroundColor');
	        var rect = new graphic.Rect({
	            shape: {
	                x: boundingRect.x - padding[3],
	                y: boundingRect.y - padding[0],
	                width: boundingRect.width + padding[1] + padding[3],
	                height: boundingRect.height + padding[0] + padding[2]
	            },
	            style: style,
	            silent: true,
	            z2: -1
	        });
	        graphic.subPixelOptimizeRect(rect);
	
	        group.add(rect);
	    }
	};

/***/ },
/* 488 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (ecModel) {
	    var legendModels = ecModel.findComponents({
	        mainType: 'legend'
	    });
	    if (legendModels && legendModels.length) {
	        ecModel.filterSeries(function (series) {
	            // If in any legend component the status is not selected.
	            // Because in legend series
	            for (var i = 0; i < legendModels.length; i++) {
	                if (!legendModels[i].isSelected(series.name)) {
	                    return false;
	                }
	            }
	            return true;
	        });
	    }
	};

/***/ },
/* 489 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// FIXME Better way to pack data in graphic element
	
	__webpack_require__(490);
	
	__webpack_require__(491);
	
	// Show tip action
	/**
	 * @action
	 * @property {string} type
	 * @property {number} seriesIndex
	 * @property {number} dataIndex
	 * @property {number} [x]
	 * @property {number} [y]
	 */
	__webpack_require__(222).registerAction({
	    type: 'showTip',
	    event: 'showTip',
	    update: 'none'
	},
	// noop
	function () {});
	// Hide tip action
	__webpack_require__(222).registerAction({
	    type: 'hideTip',
	    event: 'hideTip',
	    update: 'none'
	},
	// noop
	function () {});

/***/ },
/* 490 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(222).extendComponentModel({
	
	    type: 'tooltip',
	
	    defaultOption: {
	        zlevel: 0,
	
	        z: 8,
	
	        show: true,
	
	        // tooltip主体内容
	        showContent: true,
	
	        // 触发类型，默认数据触发，见下图，可选为：'item' ¦ 'axis'
	        trigger: 'item',
	
	        // 触发条件，支持 'click' | 'mousemove'
	        triggerOn: 'mousemove',
	
	        // 是否永远显示 content
	        alwaysShowContent: false,
	
	        // 位置 {Array} | {Function}
	        // position: null
	
	        // 内容格式器：{string}（Template） ¦ {Function}
	        // formatter: null
	
	        // 隐藏延迟，单位ms
	        hideDelay: 100,
	
	        // 动画变换时间，单位s
	        transitionDuration: 0.4,
	
	        enterable: false,
	
	        // 提示背景颜色，默认为透明度为0.7的黑色
	        backgroundColor: 'rgba(50,50,50,0.7)',
	
	        // 提示边框颜色
	        borderColor: '#333',
	
	        // 提示边框圆角，单位px，默认为4
	        borderRadius: 4,
	
	        // 提示边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,
	
	        // 提示内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,
	
	        // 坐标轴指示器，坐标轴触发有效
	        axisPointer: {
	            // 默认为直线
	            // 可选为：'line' | 'shadow' | 'cross'
	            type: 'line',
	
	            // type 为 line 的时候有效，指定 tooltip line 所在的轴，可选
	            // 可选 'x' | 'y' | 'angle' | 'radius' | 'auto'
	            // 默认 'auto'，会选择类型为 cateogry 的轴，对于双数值轴，笛卡尔坐标系会默认选择 x 轴
	            // 极坐标系会默认选择 angle 轴
	            axis: 'auto',
	
	            animation: true,
	            animationDurationUpdate: 200,
	            animationEasingUpdate: 'exponentialOut',
	
	            // 直线指示器样式设置
	            lineStyle: {
	                color: '#555',
	                width: 1,
	                type: 'solid'
	            },
	
	            crossStyle: {
	                color: '#555',
	                width: 1,
	                type: 'dashed',
	
	                // TODO formatter
	                textStyle: {}
	            },
	
	            // 阴影指示器样式设置
	            shadowStyle: {
	                color: 'rgba(150,150,150,0.3)'
	            }
	        },
	        textStyle: {
	            color: '#fff',
	            fontSize: 14
	        }
	    }
	});

/***/ },
/* 491 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var TooltipContent = __webpack_require__(492);
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	var formatUtil = __webpack_require__(227);
	var numberUtil = __webpack_require__(228);
	var parsePercent = numberUtil.parsePercent;
	var env = __webpack_require__(299);
	
	function dataEqual(a, b) {
	    if (!a || !b) {
	        return false;
	    }
	    var round = numberUtil.round;
	    return round(a[0]) === round(b[0]) && round(a[1]) === round(b[1]);
	}
	/**
	 * @inner
	 */
	function makeLineShape(x1, y1, x2, y2) {
	    return {
	        x1: x1,
	        y1: y1,
	        x2: x2,
	        y2: y2
	    };
	}
	
	/**
	 * @inner
	 */
	function makeRectShape(x, y, width, height) {
	    return {
	        x: x,
	        y: y,
	        width: width,
	        height: height
	    };
	}
	
	/**
	 * @inner
	 */
	function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {
	    return {
	        cx: cx,
	        cy: cy,
	        r0: r0,
	        r: r,
	        startAngle: startAngle,
	        endAngle: endAngle,
	        clockwise: true
	    };
	}
	
	function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	    var width = el.clientWidth;
	    var height = el.clientHeight;
	    var gap = 20;
	
	    if (x + width + gap > viewWidth) {
	        x -= width + gap;
	    } else {
	        x += gap;
	    }
	    if (y + height + gap > viewHeight) {
	        y -= height + gap;
	    } else {
	        y += gap;
	    }
	    return [x, y];
	}
	
	function calcTooltipPosition(position, rect, dom) {
	    var domWidth = dom.clientWidth;
	    var domHeight = dom.clientHeight;
	    var gap = 5;
	    var x = 0;
	    var y = 0;
	    var rectWidth = rect.width;
	    var rectHeight = rect.height;
	    switch (position) {
	        case 'inside':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'top':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y - domHeight - gap;
	            break;
	        case 'bottom':
	            x = rect.x + rectWidth / 2 - domWidth / 2;
	            y = rect.y + rectHeight + gap;
	            break;
	        case 'left':
	            x = rect.x - domWidth - gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	            break;
	        case 'right':
	            x = rect.x + rectWidth + gap;
	            y = rect.y + rectHeight / 2 - domHeight / 2;
	    }
	    return [x, y];
	}
	
	/**
	 * @param  {string|Function|Array.<number>} positionExpr
	 * @param  {number} x Mouse x
	 * @param  {number} y Mouse y
	 * @param  {module:echarts/component/tooltip/TooltipContent} content
	 * @param  {Object|<Array.<Object>} params
	 * @param  {module:zrender/Element} el target element
	 * @param  {module:echarts/ExtensionAPI} api
	 * @return {Array.<number>}
	 */
	function updatePosition(positionExpr, x, y, content, params, el, api) {
	    var viewWidth = api.getWidth();
	    var viewHeight = api.getHeight();
	
	    var rect = el && el.getBoundingRect().clone();
	    el && rect.applyTransform(el.transform);
	    if (typeof positionExpr === 'function') {
	        // Callback of position can be an array or a string specify the positiont
	        positionExpr = positionExpr([x, y], params, rect);
	    }
	
	    if (zrUtil.isArray(positionExpr)) {
	        x = parsePercent(positionExpr[0], viewWidth);
	        y = parsePercent(positionExpr[1], viewHeight);
	    }
	    // Specify tooltip position by string 'top' 'bottom' 'left' 'right' around graphic element
	    else if (typeof positionExpr === 'string' && el) {
	            var pos = calcTooltipPosition(positionExpr, rect, content.el);
	            x = pos[0];
	            y = pos[1];
	        } else {
	            var pos = refixTooltipPosition(x, y, content.el, viewWidth, viewHeight);
	            x = pos[0];
	            y = pos[1];
	        }
	
	    content.moveTo(x, y);
	}
	
	function ifSeriesSupportAxisTrigger(seriesModel) {
	    var coordSys = seriesModel.coordinateSystem;
	    var trigger = seriesModel.get('tooltip.trigger', true);
	    // Ignore series use item tooltip trigger and series coordinate system is not cartesian or
	    return !(!coordSys || coordSys.type !== 'cartesian2d' && coordSys.type !== 'polar' && coordSys.type !== 'single' || trigger === 'item');
	}
	
	__webpack_require__(222).extendComponentView({
	
	    type: 'tooltip',
	
	    _axisPointers: {},
	
	    init: function init(ecModel, api) {
	        if (env.node) {
	            return;
	        }
	        var tooltipContent = new TooltipContent(api.getDom(), api);
	        this._tooltipContent = tooltipContent;
	
	        api.on('showTip', this._manuallyShowTip, this);
	        api.on('hideTip', this._manuallyHideTip, this);
	    },
	
	    render: function render(tooltipModel, ecModel, api) {
	        if (env.node) {
	            return;
	        }
	
	        // Reset
	        this.group.removeAll();
	
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._axisPointers = {};
	
	        /**
	         * @private
	         * @type {module:echarts/component/tooltip/TooltipModel}
	         */
	        this._tooltipModel = tooltipModel;
	
	        /**
	         * @private
	         * @type {module:echarts/model/Global}
	         */
	        this._ecModel = ecModel;
	
	        /**
	         * @private
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this._api = api;
	
	        /**
	         * @type {Object}
	         * @private
	         */
	        this._lastHover = {
	            // data
	            // payloadBatch
	        };
	
	        var tooltipContent = this._tooltipContent;
	        tooltipContent.update();
	        tooltipContent.enterable = tooltipModel.get('enterable');
	        this._alwaysShowContent = tooltipModel.get('alwaysShowContent');
	
	        /**
	         * @type {Object.<string, Array>}
	         */
	        this._seriesGroupByAxis = this._prepareAxisTriggerData(tooltipModel, ecModel);
	
	        var crossText = this._crossText;
	        if (crossText) {
	            this.group.add(crossText);
	        }
	
	        // Try to keep the tooltip show when refreshing
	        if (this._lastX != null && this._lastY != null) {
	            var self = this;
	            clearTimeout(this._refreshUpdateTimeout);
	            this._refreshUpdateTimeout = setTimeout(function () {
	                // Show tip next tick after other charts are rendered
	                // In case highlight action has wrong result
	                // FIXME
	                self._manuallyShowTip({
	                    x: self._lastX,
	                    y: self._lastY
	                });
	            });
	        }
	
	        var zr = this._api.getZr();
	        var tryShow = this._tryShow;
	        zr.off('click', tryShow);
	        zr.off('mousemove', tryShow);
	        zr.off('mouseout', this._hide);
	        if (tooltipModel.get('triggerOn') === 'click') {
	            zr.on('click', tryShow, this);
	        } else {
	            zr.on('mousemove', tryShow, this);
	            zr.on('mouseout', this._hide, this);
	        }
	    },
	
	    /**
	     * Show tip manually by
	     *  dispatchAction({
	     *      type: 'showTip',
	     *      x: 10,
	     *      y: 10
	     *  });
	     * Or
	     *  dispatchAction({
	     *      type: 'showTip',
	     *      seriesIndex: 0,
	     *      dataIndex: 1
	     *  });
	     *
	     *  TODO Batch
	     */
	    _manuallyShowTip: function _manuallyShowTip(event) {
	        // From self
	        if (event.from === this.uid) {
	            return;
	        }
	
	        var ecModel = this._ecModel;
	        var seriesIndex = event.seriesIndex;
	        var dataIndex = event.dataIndex;
	        var seriesModel = ecModel.getSeriesByIndex(seriesIndex);
	        var api = this._api;
	
	        if (event.x == null || event.y == null) {
	            if (!seriesModel) {
	                // Find the first series can use axis trigger
	                ecModel.eachSeries(function (_series) {
	                    if (ifSeriesSupportAxisTrigger(_series) && !seriesModel) {
	                        seriesModel = _series;
	                    }
	                });
	            }
	            if (seriesModel) {
	                var data = seriesModel.getData();
	                if (dataIndex == null) {
	                    dataIndex = data.indexOfName(event.name);
	                }
	                var el = data.getItemGraphicEl(dataIndex);
	                var cx, cy;
	                // Try to get the point in coordinate system
	                var coordSys = seriesModel.coordinateSystem;
	                if (coordSys && coordSys.dataToPoint) {
	                    var point = coordSys.dataToPoint(data.getValues(coordSys.dimensions, dataIndex, true));
	                    cx = point && point[0];
	                    cy = point && point[1];
	                } else if (el) {
	                    // Use graphic bounding rect
	                    var rect = el.getBoundingRect().clone();
	                    rect.applyTransform(el.transform);
	                    cx = rect.x + rect.width / 2;
	                    cy = rect.y + rect.height / 2;
	                }
	                if (cx != null && cy != null) {
	                    this._tryShow({
	                        offsetX: cx,
	                        offsetY: cy,
	                        target: el,
	                        event: {}
	                    });
	                }
	            }
	        } else {
	            var el = api.getZr().handler.findHover(event.x, event.y);
	            this._tryShow({
	                offsetX: event.x,
	                offsetY: event.y,
	                target: el,
	                event: {}
	            });
	        }
	    },
	
	    _manuallyHideTip: function _manuallyHideTip(e) {
	        if (e.from === this.uid) {
	            return;
	        }
	
	        this._hide();
	    },
	
	    _prepareAxisTriggerData: function _prepareAxisTriggerData(tooltipModel, ecModel) {
	        // Prepare data for axis trigger
	        var seriesGroupByAxis = {};
	        ecModel.eachSeries(function (seriesModel) {
	            if (ifSeriesSupportAxisTrigger(seriesModel)) {
	                var coordSys = seriesModel.coordinateSystem;
	                var baseAxis;
	                var key;
	
	                // Only cartesian2d, polar and single support axis trigger
	                if (coordSys.type === 'cartesian2d') {
	                    // FIXME `axisPointer.axis` is not baseAxis
	                    baseAxis = coordSys.getBaseAxis();
	                    key = baseAxis.dim + baseAxis.index;
	                } else if (coordSys.type === 'single') {
	                    baseAxis = coordSys.getAxis();
	                    key = baseAxis.dim + baseAxis.type;
	                } else {
	                    baseAxis = coordSys.getBaseAxis();
	                    key = baseAxis.dim + coordSys.name;
	                }
	
	                seriesGroupByAxis[key] = seriesGroupByAxis[key] || {
	                    coordSys: [],
	                    series: []
	                };
	                seriesGroupByAxis[key].coordSys.push(coordSys);
	                seriesGroupByAxis[key].series.push(seriesModel);
	            }
	        }, this);
	
	        return seriesGroupByAxis;
	    },
	
	    /**
	     * mousemove handler
	     * @param {Object} e
	     * @private
	     */
	    _tryShow: function _tryShow(e) {
	        var el = e.target;
	        var tooltipModel = this._tooltipModel;
	        var globalTrigger = tooltipModel.get('trigger');
	        var ecModel = this._ecModel;
	        var api = this._api;
	
	        if (!tooltipModel) {
	            return;
	        }
	
	        // Save mouse x, mouse y. So we can try to keep showing the tip if chart is refreshed
	        this._lastX = e.offsetX;
	        this._lastY = e.offsetY;
	
	        // Always show item tooltip if mouse is on the element with dataIndex
	        if (el && el.dataIndex != null) {
	            // Use hostModel in element if possible
	            // Used when mouseover on a element like markPoint or edge
	            // In which case, the data is not main data in series.
	            var hostModel = el.hostModel || ecModel.getSeriesByIndex(el.seriesIndex);
	            var dataIndex = el.dataIndex;
	            var itemModel = hostModel.getData().getItemModel(dataIndex);
	            // Series or single data may use item trigger when global is axis trigger
	            if ((itemModel.get('tooltip.trigger') || globalTrigger) === 'axis') {
	                this._showAxisTooltip(tooltipModel, ecModel, e);
	            } else {
	                // Reset ticket
	                this._ticket = '';
	                // If either single data or series use item trigger
	                this._hideAxisPointer();
	                // Reset last hover and dispatch downplay action
	                this._resetLastHover();
	
	                this._showItemTooltipContent(hostModel, dataIndex, e);
	            }
	
	            api.dispatchAction({
	                type: 'showTip',
	                from: this.uid,
	                dataIndex: el.dataIndex,
	                seriesIndex: el.seriesIndex
	            });
	        } else {
	            if (globalTrigger === 'item') {
	                this._hide();
	            } else {
	                // Try show axis tooltip
	                this._showAxisTooltip(tooltipModel, ecModel, e);
	            }
	
	            // Action of cross pointer
	            // other pointer types will trigger action in _dispatchAndShowSeriesTooltipContent method
	            if (tooltipModel.get('axisPointer.type') === 'cross') {
	                api.dispatchAction({
	                    type: 'showTip',
	                    from: this.uid,
	                    x: e.offsetX,
	                    y: e.offsetY
	                });
	            }
	        }
	    },
	
	    /**
	     * Show tooltip on axis
	     * @param {module:echarts/component/tooltip/TooltipModel} tooltipModel
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Object} e
	     * @private
	     */
	    _showAxisTooltip: function _showAxisTooltip(tooltipModel, ecModel, e) {
	        var axisPointerModel = tooltipModel.getModel('axisPointer');
	        var axisPointerType = axisPointerModel.get('type');
	
	        if (axisPointerType === 'cross') {
	            var el = e.target;
	            if (el && el.dataIndex != null) {
	                var seriesModel = ecModel.getSeriesByIndex(el.seriesIndex);
	                var dataIndex = el.dataIndex;
	                this._showItemTooltipContent(seriesModel, dataIndex, e);
	            }
	        }
	
	        this._showAxisPointer();
	        var allNotShow = true;
	        zrUtil.each(this._seriesGroupByAxis, function (seriesCoordSysSameAxis) {
	            // Try show the axis pointer
	            var allCoordSys = seriesCoordSysSameAxis.coordSys;
	            var coordSys = allCoordSys[0];
	
	            // If mouse position is not in the grid or polar
	            var point = [e.offsetX, e.offsetY];
	
	            if (!coordSys.containPoint(point)) {
	                // Hide axis pointer
	                this._hideAxisPointer(coordSys.name);
	                return;
	            }
	
	            allNotShow = false;
	            // Make sure point is discrete on cateogry axis
	            var dimensions = coordSys.dimensions;
	            var value = coordSys.pointToData(point, true);
	            point = coordSys.dataToPoint(value);
	            var baseAxis = coordSys.getBaseAxis();
	            var axisType = axisPointerModel.get('axis');
	            if (axisType === 'auto') {
	                axisType = baseAxis.dim;
	            }
	
	            var contentNotChange = false;
	            var lastHover = this._lastHover;
	            if (axisPointerType === 'cross') {
	                // If hover data not changed
	                // Possible when two axes are all category
	                if (dataEqual(lastHover.data, value)) {
	                    contentNotChange = true;
	                }
	                lastHover.data = value;
	            } else {
	                var valIndex = zrUtil.indexOf(dimensions, axisType);
	
	                // If hover data not changed on the axis dimension
	                if (lastHover.data === value[valIndex]) {
	                    contentNotChange = true;
	                }
	                lastHover.data = value[valIndex];
	            }
	
	            if (coordSys.type === 'cartesian2d' && !contentNotChange) {
	                this._showCartesianPointer(axisPointerModel, coordSys, axisType, point);
	            } else if (coordSys.type === 'polar' && !contentNotChange) {
	                this._showPolarPointer(axisPointerModel, coordSys, axisType, point);
	            } else if (coordSys.type === 'single' && !contentNotChange) {
	                this._showSinglePointer(axisPointerModel, coordSys, axisType, point);
	            }
	
	            if (axisPointerType !== 'cross') {
	                this._dispatchAndShowSeriesTooltipContent(coordSys, seriesCoordSysSameAxis.series, point, value, contentNotChange);
	            }
	        }, this);
	
	        if (allNotShow) {
	            this._hide();
	        }
	    },
	
	    /**
	     * Show tooltip on axis of cartesian coordinate
	     * @param {module:echarts/model/Model} axisPointerModel
	     * @param {module:echarts/coord/cartesian/Cartesian2D} cartesians
	     * @param {string} axisType
	     * @param {Array.<number>} point
	     * @private
	     */
	    _showCartesianPointer: function _showCartesianPointer(axisPointerModel, cartesian, axisType, point) {
	        var self = this;
	
	        var axisPointerType = axisPointerModel.get('type');
	        var moveAnimation = axisPointerType !== 'cross';
	
	        if (axisPointerType === 'cross') {
	            moveGridLine('x', point, cartesian.getAxis('y').getGlobalExtent());
	            moveGridLine('y', point, cartesian.getAxis('x').getGlobalExtent());
	
	            this._updateCrossText(cartesian, point, axisPointerModel);
	        } else {
	            var otherAxis = cartesian.getAxis(axisType === 'x' ? 'y' : 'x');
	            var otherExtent = otherAxis.getGlobalExtent();
	
	            if (cartesian.type === 'cartesian2d') {
	                (axisPointerType === 'line' ? moveGridLine : moveGridShadow)(axisType, point, otherExtent);
	            }
	        }
	
	        /**
	         * @inner
	         */
	        function moveGridLine(axisType, point, otherExtent) {
	            var targetShape = axisType === 'x' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	
	            var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	
	        /**
	         * @inner
	         */
	        function moveGridShadow(axisType, point, otherExtent) {
	            var axis = cartesian.getAxis(axisType);
	            var bandWidth = axis.getBandWidth();
	            var span = otherExtent[1] - otherExtent[0];
	            var targetShape = axisType === 'x' ? makeRectShape(point[0] - bandWidth / 2, otherExtent[0], bandWidth, span) : makeRectShape(otherExtent[0], point[1] - bandWidth / 2, span, bandWidth);
	
	            var pointerEl = self._getPointerElement(cartesian, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },
	
	    _showSinglePointer: function _showSinglePointer(axisPointerModel, single, axisType, point) {
	        var self = this;
	        var axisPointerType = axisPointerModel.get('type');
	        var moveAnimation = axisPointerType !== 'cross';
	        var rect = single.getRect();
	        var otherExtent = [rect.y, rect.y + rect.height];
	
	        moveSingleLine(axisType, point, otherExtent);
	
	        /**
	         * @inner
	         */
	        function moveSingleLine(axisType, point, otherExtent) {
	            var axis = single.getAxis();
	            var orient = axis.orient;
	
	            var targetShape = orient === 'horizontal' ? makeLineShape(point[0], otherExtent[0], point[0], otherExtent[1]) : makeLineShape(otherExtent[0], point[1], otherExtent[1], point[1]);
	
	            var pointerEl = self._getPointerElement(single, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },
	
	    /**
	     * Show tooltip on axis of polar coordinate
	     * @param {module:echarts/model/Model} axisPointerModel
	     * @param {Array.<module:echarts/coord/polar/Polar>} polar
	     * @param {string} axisType
	     * @param {Array.<number>} point
	     */
	    _showPolarPointer: function _showPolarPointer(axisPointerModel, polar, axisType, point) {
	        var self = this;
	
	        var axisPointerType = axisPointerModel.get('type');
	
	        var angleAxis = polar.getAngleAxis();
	        var radiusAxis = polar.getRadiusAxis();
	
	        var moveAnimation = axisPointerType !== 'cross';
	
	        if (axisPointerType === 'cross') {
	            movePolarLine('angle', point, radiusAxis.getExtent());
	            movePolarLine('radius', point, angleAxis.getExtent());
	
	            this._updateCrossText(polar, point, axisPointerModel);
	        } else {
	            var otherAxis = polar.getAxis(axisType === 'radius' ? 'angle' : 'radius');
	            var otherExtent = otherAxis.getExtent();
	
	            (axisPointerType === 'line' ? movePolarLine : movePolarShadow)(axisType, point, otherExtent);
	        }
	        /**
	         * @inner
	         */
	        function movePolarLine(axisType, point, otherExtent) {
	            var mouseCoord = polar.pointToCoord(point);
	
	            var targetShape;
	
	            if (axisType === 'angle') {
	                var p1 = polar.coordToPoint([otherExtent[0], mouseCoord[1]]);
	                var p2 = polar.coordToPoint([otherExtent[1], mouseCoord[1]]);
	                targetShape = makeLineShape(p1[0], p1[1], p2[0], p2[1]);
	            } else {
	                targetShape = {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: mouseCoord[0]
	                };
	            }
	
	            var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);
	
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	
	        /**
	         * @inner
	         */
	        function movePolarShadow(axisType, point, otherExtent) {
	            var axis = polar.getAxis(axisType);
	            var bandWidth = axis.getBandWidth();
	
	            var mouseCoord = polar.pointToCoord(point);
	
	            var targetShape;
	
	            var radian = Math.PI / 180;
	
	            if (axisType === 'angle') {
	                targetShape = makeSectorShape(polar.cx, polar.cy, otherExtent[0], otherExtent[1],
	                // In ECharts y is negative if angle is positive
	                (-mouseCoord[1] - bandWidth / 2) * radian, (-mouseCoord[1] + bandWidth / 2) * radian);
	            } else {
	                targetShape = makeSectorShape(polar.cx, polar.cy, mouseCoord[0] - bandWidth / 2, mouseCoord[0] + bandWidth / 2, 0, Math.PI * 2);
	            }
	
	            var pointerEl = self._getPointerElement(polar, axisPointerModel, axisType, targetShape);
	            moveAnimation ? graphic.updateProps(pointerEl, {
	                shape: targetShape
	            }, axisPointerModel) : pointerEl.attr({
	                shape: targetShape
	            });
	        }
	    },
	
	    _updateCrossText: function _updateCrossText(coordSys, point, axisPointerModel) {
	        var crossStyleModel = axisPointerModel.getModel('crossStyle');
	        var textStyleModel = crossStyleModel.getModel('textStyle');
	
	        var tooltipModel = this._tooltipModel;
	
	        var text = this._crossText;
	        if (!text) {
	            text = this._crossText = new graphic.Text({
	                style: {
	                    textAlign: 'left',
	                    textVerticalAlign: 'bottom'
	                }
	            });
	            this.group.add(text);
	        }
	
	        var value = coordSys.pointToData(point);
	
	        var dims = coordSys.dimensions;
	        value = zrUtil.map(value, function (val, idx) {
	            var axis = coordSys.getAxis(dims[idx]);
	            if (axis.type === 'category' || axis.type === 'time') {
	                val = axis.scale.getLabel(val);
	            } else {
	                val = formatUtil.addCommas(val.toFixed(axis.getPixelPrecision()));
	            }
	            return val;
	        });
	
	        text.setStyle({
	            fill: textStyleModel.getTextColor() || crossStyleModel.get('color'),
	            textFont: textStyleModel.getFont(),
	            text: value.join(', '),
	            x: point[0] + 5,
	            y: point[1] - 5
	        });
	        text.z = tooltipModel.get('z');
	        text.zlevel = tooltipModel.get('zlevel');
	    },
	
	    _getPointerElement: function _getPointerElement(coordSys, pointerModel, axisType, initShape) {
	        var tooltipModel = this._tooltipModel;
	        var z = tooltipModel.get('z');
	        var zlevel = tooltipModel.get('zlevel');
	        var axisPointers = this._axisPointers;
	        var coordSysName = coordSys.name;
	        axisPointers[coordSysName] = axisPointers[coordSysName] || {};
	        if (axisPointers[coordSysName][axisType]) {
	            return axisPointers[coordSysName][axisType];
	        }
	
	        // Create if not exists
	        var pointerType = pointerModel.get('type');
	        var styleModel = pointerModel.getModel(pointerType + 'Style');
	        var isShadow = pointerType === 'shadow';
	        var style = styleModel[isShadow ? 'getAreaStyle' : 'getLineStyle']();
	
	        var elementType = coordSys.type === 'polar' ? isShadow ? 'Sector' : axisType === 'radius' ? 'Circle' : 'Line' : isShadow ? 'Rect' : 'Line';
	
	        isShadow ? style.stroke = null : style.fill = null;
	
	        var el = axisPointers[coordSysName][axisType] = new graphic[elementType]({
	            style: style,
	            z: z,
	            zlevel: zlevel,
	            silent: true,
	            shape: initShape
	        });
	
	        this.group.add(el);
	        return el;
	    },
	
	    /**
	     * Dispatch actions and show tooltip on series
	     * @param {Array.<module:echarts/model/Series>} seriesList
	     * @param {Array.<number>} point
	     * @param {Array.<number>} value
	     * @param {boolean} contentNotChange
	     * @param {Object} e
	     */
	    _dispatchAndShowSeriesTooltipContent: function _dispatchAndShowSeriesTooltipContent(coordSys, seriesList, point, value, contentNotChange) {
	
	        var rootTooltipModel = this._tooltipModel;
	        var tooltipContent = this._tooltipContent;
	
	        var baseAxis = coordSys.getBaseAxis();
	
	        var payloadBatch = zrUtil.map(seriesList, function (series) {
	            return {
	                seriesIndex: series.seriesIndex,
	                dataIndex: series.getAxisTooltipDataIndex ? series.getAxisTooltipDataIndex(series.coordDimToDataDim(baseAxis.dim), value, baseAxis) : series.getData().indexOfNearest(series.coordDimToDataDim(baseAxis.dim)[0], value[baseAxis.dim === 'x' || baseAxis.dim === 'radius' ? 0 : 1])
	            };
	        });
	
	        var lastHover = this._lastHover;
	        var api = this._api;
	        // Dispatch downplay action
	        if (lastHover.payloadBatch && !contentNotChange) {
	            api.dispatchAction({
	                type: 'downplay',
	                batch: lastHover.payloadBatch
	            });
	        }
	        // Dispatch highlight action
	        if (!contentNotChange) {
	            api.dispatchAction({
	                type: 'highlight',
	                batch: payloadBatch
	            });
	            lastHover.payloadBatch = payloadBatch;
	        }
	        // Dispatch showTip action
	        api.dispatchAction({
	            type: 'showTip',
	            dataIndex: payloadBatch[0].dataIndex,
	            seriesIndex: payloadBatch[0].seriesIndex,
	            from: this.uid
	        });
	
	        if (baseAxis && rootTooltipModel.get('showContent')) {
	
	            var formatter = rootTooltipModel.get('formatter');
	            var positionExpr = rootTooltipModel.get('position');
	            var html;
	
	            var paramsList = zrUtil.map(seriesList, function (series, index) {
	                return series.getDataParams(payloadBatch[index].dataIndex);
	            });
	            // If only one series
	            // FIXME
	            // if (paramsList.length === 1) {
	            //     paramsList = paramsList[0];
	            // }
	
	            tooltipContent.show(rootTooltipModel);
	
	            // Update html content
	            var firstDataIndex = payloadBatch[0].dataIndex;
	            if (!contentNotChange) {
	                // Reset ticket
	                this._ticket = '';
	                if (!formatter) {
	                    // Default tooltip content
	                    // FIXME
	                    // (1) shold be the first data which has name?
	                    // (2) themeRiver, firstDataIndex is array, and first line is unnecessary.
	                    var firstLine = seriesList[0].getData().getName(firstDataIndex);
	                    html = (firstLine ? firstLine + '<br />' : '') + zrUtil.map(seriesList, function (series, index) {
	                        return series.formatTooltip(payloadBatch[index].dataIndex, true);
	                    }).join('<br />');
	                } else {
	                    if (typeof formatter === 'string') {
	                        html = formatUtil.formatTpl(formatter, paramsList);
	                    } else if (typeof formatter === 'function') {
	                        var self = this;
	                        var ticket = 'axis_' + coordSys.name + '_' + firstDataIndex;
	                        var callback = function callback(cbTicket, html) {
	                            if (cbTicket === self._ticket) {
	                                tooltipContent.setContent(html);
	
	                                updatePosition(positionExpr, point[0], point[1], tooltipContent, paramsList, null, api);
	                            }
	                        };
	                        self._ticket = ticket;
	                        html = formatter(paramsList, ticket, callback);
	                    }
	                }
	
	                tooltipContent.setContent(html);
	            }
	
	            updatePosition(positionExpr, point[0], point[1], tooltipContent, paramsList, null, api);
	        }
	    },
	
	    /**
	     * Show tooltip on item
	     * @param {module:echarts/model/Series} seriesModel
	     * @param {number} dataIndex
	     * @param {Object} e
	     */
	    _showItemTooltipContent: function _showItemTooltipContent(seriesModel, dataIndex, e) {
	        // FIXME Graph data
	        var api = this._api;
	        var data = seriesModel.getData();
	        var itemModel = data.getItemModel(dataIndex);
	
	        var rootTooltipModel = this._tooltipModel;
	
	        var tooltipContent = this._tooltipContent;
	
	        var tooltipModel = itemModel.getModel('tooltip');
	
	        // If series model
	        if (tooltipModel.parentModel) {
	            tooltipModel.parentModel.parentModel = rootTooltipModel;
	        } else {
	            tooltipModel.parentModel = this._tooltipModel;
	        }
	
	        if (tooltipModel.get('showContent')) {
	            var formatter = tooltipModel.get('formatter');
	            var positionExpr = tooltipModel.get('position');
	            var params = seriesModel.getDataParams(dataIndex);
	            var html;
	            if (!formatter) {
	                html = seriesModel.formatTooltip(dataIndex);
	            } else {
	                if (typeof formatter === 'string') {
	                    html = formatUtil.formatTpl(formatter, params);
	                } else if (typeof formatter === 'function') {
	                    var self = this;
	                    var ticket = 'item_' + seriesModel.name + '_' + dataIndex;
	                    var callback = function callback(cbTicket, html) {
	                        if (cbTicket === self._ticket) {
	                            tooltipContent.setContent(html);
	
	                            updatePosition(positionExpr, e.offsetX, e.offsetY, tooltipContent, params, e.target, api);
	                        }
	                    };
	                    self._ticket = ticket;
	                    html = formatter(params, ticket, callback);
	                }
	            }
	
	            tooltipContent.show(tooltipModel);
	            tooltipContent.setContent(html);
	
	            updatePosition(positionExpr, e.offsetX, e.offsetY, tooltipContent, params, e.target, api);
	        }
	    },
	
	    /**
	     * Show axis pointer
	     * @param {string} [coordSysName]
	     */
	    _showAxisPointer: function _showAxisPointer(coordSysName) {
	        if (coordSysName) {
	            var axisPointers = this._axisPointers[coordSysName];
	            axisPointers && zrUtil.each(axisPointers, function (el) {
	                el.show();
	            });
	        } else {
	            this.group.eachChild(function (child) {
	                child.show();
	            });
	            this.group.show();
	        }
	    },
	
	    _resetLastHover: function _resetLastHover() {
	        var lastHover = this._lastHover;
	        if (lastHover.payloadBatch) {
	            this._api.dispatchAction({
	                type: 'downplay',
	                batch: lastHover.payloadBatch
	            });
	        }
	        // Reset lastHover
	        this._lastHover = {};
	    },
	    /**
	     * Hide axis pointer
	     * @param {string} [coordSysName]
	     */
	    _hideAxisPointer: function _hideAxisPointer(coordSysName) {
	        if (coordSysName) {
	            var axisPointers = this._axisPointers[coordSysName];
	            axisPointers && zrUtil.each(axisPointers, function (el) {
	                el.hide();
	            });
	        } else {
	            this.group.hide();
	        }
	    },
	
	    _hide: function _hide() {
	        this._hideAxisPointer();
	        this._resetLastHover();
	        if (!this._alwaysShowContent) {
	            this._tooltipContent.hideLater(this._tooltipModel.get('hideDelay'));
	        }
	
	        this._api.dispatchAction({
	            type: 'hideTip',
	            from: this.uid
	        });
	    },
	
	    dispose: function dispose(ecModel, api) {
	        if (env.node) {
	            return;
	        }
	        var zr = api.getZr();
	        this._tooltipContent.hide();
	
	        zr.off('click', this._tryShow);
	        zr.off('mousemove', this._tryShow);
	        zr.off('mouseout', this._hide);
	
	        api.off('showTip', this._manuallyShowTip);
	        api.off('hideTip', this._manuallyHideTip);
	    }
	});

/***/ },
/* 492 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/component/tooltip/TooltipContent
	 */
	
	var zrUtil = __webpack_require__(224);
	var zrColor = __webpack_require__(259);
	var eventUtil = __webpack_require__(301);
	var formatUtil = __webpack_require__(227);
	var each = zrUtil.each;
	var toCamelCase = formatUtil.toCamelCase;
	
	var vendors = ['', '-webkit-', '-moz-', '-o-'];
	
	var gCssText = 'position:absolute;display:block;border-style:solid;white-space:nowrap;';
	
	/**
	 * @param {number} duration
	 * @return {string}
	 * @inner
	 */
	function assembleTransition(duration) {
	    var transitionCurve = 'cubic-bezier(0.23, 1, 0.32, 1)';
	    var transitionText = 'left ' + duration + 's ' + transitionCurve + ',' + 'top ' + duration + 's ' + transitionCurve;
	    return zrUtil.map(vendors, function (vendorPrefix) {
	        return vendorPrefix + 'transition:' + transitionText;
	    }).join(';');
	}
	
	/**
	 * @param {Object} textStyle
	 * @return {string}
	 * @inner
	 */
	function assembleFont(textStyleModel) {
	    var cssText = [];
	
	    var fontSize = textStyleModel.get('fontSize');
	    var color = textStyleModel.getTextColor();
	
	    color && cssText.push('color:' + color);
	
	    cssText.push('font:' + textStyleModel.getFont());
	
	    fontSize && cssText.push('line-height:' + Math.round(fontSize * 3 / 2) + 'px');
	
	    each(['decoration', 'align'], function (name) {
	        var val = textStyleModel.get(name);
	        val && cssText.push('text-' + name + ':' + val);
	    });
	
	    return cssText.join(';');
	}
	
	/**
	 * @param {Object} tooltipModel
	 * @return {string}
	 * @inner
	 */
	function assembleCssText(tooltipModel) {
	
	    tooltipModel = tooltipModel;
	
	    var cssText = [];
	
	    var transitionDuration = tooltipModel.get('transitionDuration');
	    var backgroundColor = tooltipModel.get('backgroundColor');
	    var textStyleModel = tooltipModel.getModel('textStyle');
	    var padding = tooltipModel.get('padding');
	
	    // Animation transition
	    transitionDuration && cssText.push(assembleTransition(transitionDuration));
	
	    if (backgroundColor) {
	        // for ie
	        cssText.push('background-Color:' + zrColor.toHex(backgroundColor));
	        cssText.push('filter:alpha(opacity=70)');
	        cssText.push('background-Color:' + backgroundColor);
	    }
	
	    // Border style
	    each(['width', 'color', 'radius'], function (name) {
	        var borderName = 'border-' + name;
	        var camelCase = toCamelCase(borderName);
	        var val = tooltipModel.get(camelCase);
	        val != null && cssText.push(borderName + ':' + val + (name === 'color' ? '' : 'px'));
	    });
	
	    // Text style
	    cssText.push(assembleFont(textStyleModel));
	
	    // Padding
	    if (padding != null) {
	        cssText.push('padding:' + formatUtil.normalizeCssArray(padding).join('px ') + 'px');
	    }
	
	    return cssText.join(';') + ';';
	}
	
	/**
	 * @alias module:echarts/component/tooltip/TooltipContent
	 * @constructor
	 */
	function TooltipContent(container, api) {
	    var el = document.createElement('div');
	    var zr = api.getZr();
	
	    this.el = el;
	
	    this._x = api.getWidth() / 2;
	    this._y = api.getHeight() / 2;
	
	    container.appendChild(el);
	
	    this._container = container;
	
	    this._show = false;
	
	    /**
	     * @private
	     */
	    this._hideTimeout;
	
	    var self = this;
	    el.onmouseenter = function () {
	        // clear the timeout in hideLater and keep showing tooltip
	        if (self.enterable) {
	            clearTimeout(self._hideTimeout);
	            self._show = true;
	        }
	        self._inContent = true;
	    };
	    el.onmousemove = function (e) {
	        if (!self.enterable) {
	            // Try trigger zrender event to avoid mouse
	            // in and out shape too frequently
	            var handler = zr.handler;
	            eventUtil.normalizeEvent(container, e);
	            handler.dispatch('mousemove', e);
	        }
	    };
	    el.onmouseleave = function () {
	        if (self.enterable) {
	            if (self._show) {
	                self.hideLater(self._hideDelay);
	            }
	        }
	        self._inContent = false;
	    };
	
	    compromiseMobile(el, container);
	}
	
	function compromiseMobile(tooltipContentEl, container) {
	    // Prevent default behavior on mobile. For example,
	    // defuault pinch gesture will cause browser zoom.
	    // We do not preventing event on tooltip contnet el,
	    // because user may need customization in tooltip el.
	    eventUtil.addEventListener(container, 'touchstart', preventDefault);
	    eventUtil.addEventListener(container, 'touchmove', preventDefault);
	    eventUtil.addEventListener(container, 'touchend', preventDefault);
	
	    function preventDefault(e) {
	        if (contains(e.target)) {
	            e.preventDefault();
	        }
	    }
	
	    function contains(targetEl) {
	        while (targetEl && targetEl !== container) {
	            if (targetEl === tooltipContentEl) {
	                return true;
	            }
	            targetEl = targetEl.parentNode;
	        }
	    }
	}
	
	TooltipContent.prototype = {
	
	    constructor: TooltipContent,
	
	    enterable: true,
	
	    /**
	     * Update when tooltip is rendered
	     */
	    update: function update() {
	        var container = this._container;
	        var stl = container.currentStyle || document.defaultView.getComputedStyle(container);
	        var domStyle = container.style;
	        if (domStyle.position !== 'absolute' && stl.position !== 'absolute') {
	            domStyle.position = 'relative';
	        }
	        // Hide the tooltip
	        // PENDING
	        // this.hide();
	    },
	
	    show: function show(tooltipModel) {
	        clearTimeout(this._hideTimeout);
	
	        this.el.style.cssText = gCssText + assembleCssText(tooltipModel)
	        // http://stackoverflow.com/questions/21125587/css3-transition-not-working-in-chrome-anymore
	         + ';left:' + this._x + 'px;top:' + this._y + 'px;';
	
	        this._show = true;
	    },
	
	    setContent: function setContent(content) {
	        var el = this.el;
	        el.innerHTML = content;
	        el.style.display = content ? 'block' : 'none';
	    },
	
	    moveTo: function moveTo(x, y) {
	        var style = this.el.style;
	        style.left = x + 'px';
	        style.top = y + 'px';
	
	        this._x = x;
	        this._y = y;
	    },
	
	    hide: function hide() {
	        this.el.style.display = 'none';
	        this._show = false;
	    },
	
	    // showLater: function ()
	
	    hideLater: function hideLater(time) {
	        if (this._show && !(this._inContent && this.enterable)) {
	            if (time) {
	                this._hideDelay = time;
	                // Set show false to avoid invoke hideLater mutiple times
	                this._show = false;
	                this._hideTimeout = setTimeout(zrUtil.bind(this.hide, this), time);
	            } else {
	                this.hide();
	            }
	        }
	    },
	
	    isShow: function isShow() {
	        return this._show;
	    }
	};
	
	module.exports = TooltipContent;

/***/ },
/* 493 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(494);
	__webpack_require__(500);
	__webpack_require__(502);
	
	// Polar view
	__webpack_require__(222).extendComponentView({
	    type: 'polar'
	});

/***/ },
/* 494 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// TODO Axis scale
	
	var Polar = __webpack_require__(495);
	var numberUtil = __webpack_require__(228);
	
	var axisHelper = __webpack_require__(329);
	var niceScaleExtent = axisHelper.niceScaleExtent;
	
	// 依赖 PolarModel 做预处理
	__webpack_require__(498);
	
	/**
	 * Resize method bound to the polar
	 * @param {module:echarts/coord/polar/PolarModel} polarModel
	 * @param {module:echarts/ExtensionAPI} api
	 */
	function resizePolar(polarModel, api) {
	    var center = polarModel.get('center');
	    var radius = polarModel.get('radius');
	    var width = api.getWidth();
	    var height = api.getHeight();
	    var parsePercent = numberUtil.parsePercent;
	
	    this.cx = parsePercent(center[0], width);
	    this.cy = parsePercent(center[1], height);
	
	    var radiusAxis = this.getRadiusAxis();
	    var size = Math.min(width, height) / 2;
	    // var idx = radiusAxis.inverse ? 1 : 0;
	    radiusAxis.setExtent(0, parsePercent(radius, size));
	}
	
	/**
	 * Update polar
	 */
	function updatePolarScale(ecModel, api) {
	    var polar = this;
	    var angleAxis = polar.getAngleAxis();
	    var radiusAxis = polar.getRadiusAxis();
	    // Reset scale
	    angleAxis.scale.setExtent(Infinity, -Infinity);
	    radiusAxis.scale.setExtent(Infinity, -Infinity);
	
	    ecModel.eachSeries(function (seriesModel) {
	        if (seriesModel.coordinateSystem === polar) {
	            var data = seriesModel.getData();
	            radiusAxis.scale.unionExtent(data.getDataExtent('radius', radiusAxis.type !== 'category'));
	            angleAxis.scale.unionExtent(data.getDataExtent('angle', angleAxis.type !== 'category'));
	        }
	    });
	
	    niceScaleExtent(angleAxis, angleAxis.model);
	    niceScaleExtent(radiusAxis, radiusAxis.model);
	
	    // Fix extent of category angle axis
	    if (angleAxis.type === 'category' && !angleAxis.onBand) {
	        var extent = angleAxis.getExtent();
	        var diff = 360 / angleAxis.scale.count();
	        angleAxis.inverse ? extent[1] += diff : extent[1] -= diff;
	        angleAxis.setExtent(extent[0], extent[1]);
	    }
	}
	
	/**
	 * Set common axis properties
	 * @param {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	 * @param {module:echarts/coord/polar/AxisModel}
	 * @inner
	 */
	function setAxis(axis, axisModel) {
	    axis.type = axisModel.get('type');
	    axis.scale = axisHelper.createScaleByModel(axisModel);
	    axis.onBand = axisModel.get('boundaryGap') && axis.type === 'category';
	
	    // FIXME Radius axis not support inverse axis
	    if (axisModel.mainType === 'angleAxis') {
	        var startAngle = axisModel.get('startAngle');
	        axis.inverse = axisModel.get('inverse') ^ axisModel.get('clockwise');
	        axis.setExtent(startAngle, startAngle + (axis.inverse ? -360 : 360));
	    }
	
	    // Inject axis instance
	    axisModel.axis = axis;
	    axis.model = axisModel;
	}
	
	var polarCreator = {
	
	    dimensions: Polar.prototype.dimensions,
	
	    create: function create(ecModel, api) {
	        var polarList = [];
	        ecModel.eachComponent('polar', function (polarModel, idx) {
	            var polar = new Polar(idx);
	            // Inject resize and update method
	            polar.resize = resizePolar;
	            polar.update = updatePolarScale;
	
	            var radiusAxis = polar.getRadiusAxis();
	            var angleAxis = polar.getAngleAxis();
	
	            var radiusAxisModel = polarModel.findAxisModel('radiusAxis');
	            var angleAxisModel = polarModel.findAxisModel('angleAxis');
	
	            setAxis(radiusAxis, radiusAxisModel);
	            setAxis(angleAxis, angleAxisModel);
	
	            polar.resize(polarModel, api);
	            polarList.push(polar);
	
	            polarModel.coordinateSystem = polar;
	        });
	        // Inject coordinateSystem to series
	        ecModel.eachSeries(function (seriesModel) {
	            if (seriesModel.get('coordinateSystem') === 'polar') {
	                seriesModel.coordinateSystem = polarList[seriesModel.get('polarIndex')];
	            }
	        });
	
	        return polarList;
	    }
	};
	
	__webpack_require__(246).register('polar', polarCreator);

/***/ },
/* 495 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module echarts/coord/polar/Polar
	 */
	
	var RadiusAxis = __webpack_require__(496);
	var AngleAxis = __webpack_require__(497);
	
	/**
	 * @alias {module:echarts/coord/polar/Polar}
	 * @constructor
	 * @param {string} name
	 */
	var Polar = function Polar(name) {
	
	  /**
	   * @type {string}
	   */
	  this.name = name || '';
	
	  /**
	   * x of polar center
	   * @type {number}
	   */
	  this.cx = 0;
	
	  /**
	   * y of polar center
	   * @type {number}
	   */
	  this.cy = 0;
	
	  /**
	   * @type {module:echarts/coord/polar/RadiusAxis}
	   * @private
	   */
	  this._radiusAxis = new RadiusAxis();
	
	  /**
	   * @type {module:echarts/coord/polar/AngleAxis}
	   * @private
	   */
	  this._angleAxis = new AngleAxis();
	};
	
	Polar.prototype = {
	
	  constructor: Polar,
	
	  type: 'polar',
	
	  /**
	   * @param {Array.<string>}
	   * @readOnly
	   */
	  dimensions: ['radius', 'angle'],
	
	  /**
	   * If contain coord
	   * @param {Array.<number>} point
	   * @return {boolean}
	   */
	  containPoint: function containPoint(point) {
	    var coord = this.pointToCoord(point);
	    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);
	  },
	
	  /**
	   * If contain data
	   * @param {Array.<number>} data
	   * @return {boolean}
	   */
	  containData: function containData(data) {
	    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);
	  },
	
	  /**
	   * @param {string} axisType
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxis: function getAxis(axisType) {
	    return this['_' + axisType + 'Axis'];
	  },
	
	  /**
	   * Get axes by type of scale
	   * @param {string} scaleType
	   * @return {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	   */
	  getAxesByScale: function getAxesByScale(scaleType) {
	    var axes = [];
	    var angleAxis = this._angleAxis;
	    var radiusAxis = this._radiusAxis;
	    angleAxis.scale.type === scaleType && axes.push(angleAxis);
	    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);
	
	    return axes;
	  },
	
	  /**
	   * @return {module:echarts/coord/polar/AngleAxis}
	   */
	  getAngleAxis: function getAngleAxis() {
	    return this._angleAxis;
	  },
	
	  /**
	   * @return {module:echarts/coord/polar/RadiusAxis}
	   */
	  getRadiusAxis: function getRadiusAxis() {
	    return this._radiusAxis;
	  },
	
	  /**
	   * @param {module:echarts/coord/polar/Axis}
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getOtherAxis: function getOtherAxis(axis) {
	    var angleAxis = this._angleAxis;
	    return axis === angleAxis ? this._radiusAxis : angleAxis;
	  },
	
	  /**
	   * Base axis will be used on stacking.
	   *
	   * @return {module:echarts/coord/polar/Axis}
	   */
	  getBaseAxis: function getBaseAxis() {
	    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();
	  },
	
	  /**
	   * Convert series data to a list of (x, y) points
	   * @param {module:echarts/data/List} data
	   * @return {Array}
	   *  Return list of coordinates. For example:
	   *  `[[10, 10], [20, 20], [30, 30]]`
	   */
	  dataToPoints: function dataToPoints(data) {
	    return data.mapArray(this.dimensions, function (radius, angle) {
	      return this.dataToPoint([radius, angle]);
	    }, this);
	  },
	
	  /**
	   * Convert a single data item to (x, y) point.
	   * Parameter data is an array which the first element is radius and the second is angle
	   * @param {Array.<number>} data
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  dataToPoint: function dataToPoint(data, clamp) {
	    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);
	  },
	
	  /**
	   * Convert a (x, y) point to data
	   * @param {Array.<number>} point
	   * @param {boolean} [clamp=false]
	   * @return {Array.<number>}
	   */
	  pointToData: function pointToData(point, clamp) {
	    var coord = this.pointToCoord(point);
	    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];
	  },
	
	  /**
	   * Convert a (x, y) point to (radius, angle) coord
	   * @param {Array.<number>} point
	   * @return {Array.<number>}
	   */
	  pointToCoord: function pointToCoord(point) {
	    var dx = point[0] - this.cx;
	    var dy = point[1] - this.cy;
	    var angleAxis = this.getAngleAxis();
	    var extent = angleAxis.getExtent();
	    var minAngle = Math.min(extent[0], extent[1]);
	    var maxAngle = Math.max(extent[0], extent[1]);
	    // Fix fixed extent in polarCreator
	    // FIXME
	    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;
	
	    var radius = Math.sqrt(dx * dx + dy * dy);
	    dx /= radius;
	    dy /= radius;
	
	    var radian = Math.atan2(-dy, dx) / Math.PI * 180;
	
	    // move to angleExtent
	    var dir = radian < minAngle ? 1 : -1;
	    while (radian < minAngle || radian > maxAngle) {
	      radian += dir * 360;
	    }
	
	    return [radius, radian];
	  },
	
	  /**
	   * Convert a (radius, angle) coord to (x, y) point
	   * @param {Array.<number>} coord
	   * @return {Array.<number>}
	   */
	  coordToPoint: function coordToPoint(coord) {
	    var radius = coord[0];
	    var radian = coord[1] / 180 * Math.PI;
	    var x = Math.cos(radian) * radius + this.cx;
	    // Inverse the y
	    var y = -Math.sin(radian) * radius + this.cy;
	
	    return [x, y];
	  }
	};
	
	module.exports = Polar;

/***/ },
/* 496 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	
	function RadiusAxis(scale, radiusExtent) {
	
	    Axis.call(this, 'radius', scale, radiusExtent);
	
	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = 'category';
	}
	
	RadiusAxis.prototype = {
	
	    constructor: RadiusAxis,
	
	    dataToRadius: Axis.prototype.dataToCoord,
	
	    radiusToData: Axis.prototype.coordToData
	};
	
	zrUtil.inherits(RadiusAxis, Axis);
	
	module.exports = RadiusAxis;

/***/ },
/* 497 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	
	function AngleAxis(scale, angleExtent) {
	
	    angleExtent = angleExtent || [0, 360];
	
	    Axis.call(this, 'angle', scale, angleExtent);
	
	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = 'category';
	}
	
	AngleAxis.prototype = {
	
	    constructor: AngleAxis,
	
	    dataToAngle: Axis.prototype.dataToCoord,
	
	    angleToData: Axis.prototype.coordToData
	};
	
	zrUtil.inherits(AngleAxis, Axis);
	
	module.exports = AngleAxis;

/***/ },
/* 498 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(499);
	
	__webpack_require__(222).extendComponentModel({
	
	    type: 'polar',
	
	    dependencies: ['polarAxis', 'angleAxis'],
	
	    /**
	     * @type {module:echarts/coord/polar/Polar}
	     */
	    coordinateSystem: null,
	
	    /**
	     * @param {string} axisType
	     * @return {module:echarts/coord/polar/AxisModel}
	     */
	    findAxisModel: function findAxisModel(axisType) {
	        var angleAxisModel;
	        var ecModel = this.ecModel;
	        ecModel.eachComponent(axisType, function (axisModel) {
	            if (ecModel.getComponent('polar', axisModel.getShallow('polarIndex')) === this) {
	                angleAxisModel = axisModel;
	            }
	        }, this);
	        return angleAxisModel;
	    },
	
	    defaultOption: {
	
	        zlevel: 0,
	
	        z: 0,
	
	        center: ['50%', '50%'],
	
	        radius: '80%'
	    }
	});

/***/ },
/* 499 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var ComponentModel = __webpack_require__(240);
	var axisModelCreator = __webpack_require__(342);
	
	var PolarAxisModel = ComponentModel.extend({
	    type: 'polarAxis',
	    /**
	     * @type {module:echarts/coord/polar/AngleAxis|module:echarts/coord/polar/RadiusAxis}
	     */
	    axis: null
	});
	
	zrUtil.merge(PolarAxisModel.prototype, __webpack_require__(344));
	
	var polarAxisDefaultExtendedOption = {
	    angle: {
	        polarIndex: 0,
	
	        startAngle: 90,
	
	        clockwise: true,
	
	        splitNumber: 12,
	
	        axisLabel: {
	            rotate: false
	        }
	    },
	    radius: {
	        polarIndex: 0,
	
	        splitNumber: 5
	    }
	};
	
	function getAxisType(axisDim, option) {
	    // Default axis with data is category axis
	    return option.type || (option.data ? 'category' : 'value');
	}
	
	axisModelCreator('angle', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.angle);
	axisModelCreator('radius', PolarAxisModel, getAxisType, polarAxisDefaultExtendedOption.radius);

/***/ },
/* 500 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(494);
	
	__webpack_require__(501);

/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var Model = __webpack_require__(229);
	
	var elementList = ['axisLine', 'axisLabel', 'axisTick', 'splitLine', 'splitArea'];
	
	function getAxisLineShape(polar, r0, r, angle) {
	    var start = polar.coordToPoint([r0, angle]);
	    var end = polar.coordToPoint([r, angle]);
	
	    return {
	        x1: start[0],
	        y1: start[1],
	        x2: end[0],
	        y2: end[1]
	    };
	}
	__webpack_require__(222).extendComponentView({
	
	    type: 'angleAxis',
	
	    render: function render(angleAxisModel, ecModel) {
	        this.group.removeAll();
	        if (!angleAxisModel.get('show')) {
	            return;
	        }
	
	        var polarModel = ecModel.getComponent('polar', angleAxisModel.get('polarIndex'));
	        var angleAxis = angleAxisModel.axis;
	        var polar = polarModel.coordinateSystem;
	        var radiusExtent = polar.getRadiusAxis().getExtent();
	        var ticksAngles = angleAxis.getTicksCoords();
	
	        if (angleAxis.type !== 'category') {
	            // Remove the last tick which will overlap the first tick
	            ticksAngles.pop();
	        }
	
	        zrUtil.each(elementList, function (name) {
	            if (angleAxisModel.get(name + '.show')) {
	                this['_' + name](angleAxisModel, polar, ticksAngles, radiusExtent);
	            }
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _axisLine: function _axisLine(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var lineStyleModel = angleAxisModel.getModel('axisLine.lineStyle');
	
	        var circle = new graphic.Circle({
	            shape: {
	                cx: polar.cx,
	                cy: polar.cy,
	                r: radiusExtent[1]
	            },
	            style: lineStyleModel.getLineStyle(),
	            z2: 1,
	            silent: true
	        });
	        circle.style.fill = null;
	
	        this.group.add(circle);
	    },
	
	    /**
	     * @private
	     */
	    _axisTick: function _axisTick(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var tickModel = angleAxisModel.getModel('axisTick');
	
	        var tickLen = (tickModel.get('inside') ? -1 : 1) * tickModel.get('length');
	
	        var lines = zrUtil.map(ticksAngles, function (tickAngle) {
	            return new graphic.Line({
	                shape: getAxisLineShape(polar, radiusExtent[1], radiusExtent[1] + tickLen, tickAngle)
	            });
	        });
	        this.group.add(graphic.mergePath(lines, {
	            style: tickModel.getModel('lineStyle').getLineStyle()
	        }));
	    },
	
	    /**
	     * @private
	     */
	    _axisLabel: function _axisLabel(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var axis = angleAxisModel.axis;
	
	        var categoryData = angleAxisModel.get('data');
	
	        var labelModel = angleAxisModel.getModel('axisLabel');
	        var axisTextStyleModel = labelModel.getModel('textStyle');
	
	        var labels = angleAxisModel.getFormattedLabels();
	
	        var labelMargin = labelModel.get('margin');
	        var labelsAngles = axis.getLabelsCoords();
	
	        // Use length of ticksAngles because it may remove the last tick to avoid overlapping
	        for (var i = 0; i < ticksAngles.length; i++) {
	            var r = radiusExtent[1];
	            var p = polar.coordToPoint([r + labelMargin, labelsAngles[i]]);
	            var cx = polar.cx;
	            var cy = polar.cy;
	
	            var labelTextAlign = Math.abs(p[0] - cx) / r < 0.3 ? 'center' : p[0] > cx ? 'left' : 'right';
	            var labelTextBaseline = Math.abs(p[1] - cy) / r < 0.3 ? 'middle' : p[1] > cy ? 'top' : 'bottom';
	
	            var textStyleModel = axisTextStyleModel;
	            if (categoryData && categoryData[i] && categoryData[i].textStyle) {
	                textStyleModel = new Model(categoryData[i].textStyle, axisTextStyleModel);
	            }
	            this.group.add(new graphic.Text({
	                style: {
	                    x: p[0],
	                    y: p[1],
	                    fill: textStyleModel.getTextColor(),
	                    text: labels[i],
	                    textAlign: labelTextAlign,
	                    textVerticalAlign: labelTextBaseline,
	                    textFont: textStyleModel.getFont()
	                },
	                silent: true
	            }));
	        }
	    },
	
	    /**
	     * @private
	     */
	    _splitLine: function _splitLine(angleAxisModel, polar, ticksAngles, radiusExtent) {
	        var splitLineModel = angleAxisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineColors = lineStyleModel.get('color');
	        var lineCount = 0;
	
	        lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	
	        var splitLines = [];
	
	        for (var i = 0; i < ticksAngles.length; i++) {
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Line({
	                shape: getAxisLineShape(polar, radiusExtent[0], radiusExtent[1], ticksAngles[i])
	            }));
	        }
	
	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitLines.length; i++) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: zrUtil.defaults({
	                    stroke: lineColors[i % lineColors.length]
	                }, lineStyleModel.getLineStyle()),
	                silent: true,
	                z: angleAxisModel.get('z')
	            }));
	        }
	    },
	
	    /**
	     * @private
	     */
	    _splitArea: function _splitArea(angleAxisModel, polar, ticksAngles, radiusExtent) {
	
	        var splitAreaModel = angleAxisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');
	        var lineCount = 0;
	
	        areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	
	        var splitAreas = [];
	
	        var RADIAN = Math.PI / 180;
	        var prevAngle = -ticksAngles[0] * RADIAN;
	        var r0 = Math.min(radiusExtent[0], radiusExtent[1]);
	        var r1 = Math.max(radiusExtent[0], radiusExtent[1]);
	
	        var clockwise = angleAxisModel.get('clockwise');
	
	        for (var i = 1; i < ticksAngles.length; i++) {
	            var colorIndex = lineCount++ % areaColors.length;
	            splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	            splitAreas[colorIndex].push(new graphic.Sector({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r0: r0,
	                    r: r1,
	                    startAngle: prevAngle,
	                    endAngle: -ticksAngles[i] * RADIAN,
	                    clockwise: clockwise
	                },
	                silent: true
	            }));
	            prevAngle = -ticksAngles[i] * RADIAN;
	        }
	
	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitAreas.length; i++) {
	            this.group.add(graphic.mergePath(splitAreas[i], {
	                style: zrUtil.defaults({
	                    fill: areaColors[i % areaColors.length]
	                }, areaStyleModel.getAreaStyle()),
	                silent: true
	            }));
	        }
	    }
	});

/***/ },
/* 502 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(494);
	
	__webpack_require__(503);

/***/ },
/* 503 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var AxisBuilder = __webpack_require__(347);
	
	var axisBuilderAttrs = ['axisLine', 'axisLabel', 'axisTick', 'axisName'];
	var selfBuilderAttrs = ['splitLine', 'splitArea'];
	
	__webpack_require__(222).extendComponentView({
	
	    type: 'radiusAxis',
	
	    render: function render(radiusAxisModel, ecModel) {
	        this.group.removeAll();
	        if (!radiusAxisModel.get('show')) {
	            return;
	        }
	        var polarModel = ecModel.getComponent('polar', radiusAxisModel.get('polarIndex'));
	        var angleAxis = polarModel.coordinateSystem.getAngleAxis();
	        var radiusAxis = radiusAxisModel.axis;
	        var polar = polarModel.coordinateSystem;
	        var ticksCoords = radiusAxis.getTicksCoords();
	        var axisAngle = angleAxis.getExtent()[0];
	        var radiusExtent = radiusAxis.getExtent();
	
	        var layout = layoutAxis(polar, radiusAxisModel, axisAngle);
	        var axisBuilder = new AxisBuilder(radiusAxisModel, layout);
	        zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);
	        this.group.add(axisBuilder.getGroup());
	
	        zrUtil.each(selfBuilderAttrs, function (name) {
	            if (radiusAxisModel.get(name + '.show')) {
	                this['_' + name](radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords);
	            }
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _splitLine: function _splitLine(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	        var splitLineModel = radiusAxisModel.getModel('splitLine');
	        var lineStyleModel = splitLineModel.getModel('lineStyle');
	        var lineColors = lineStyleModel.get('color');
	        var lineCount = 0;
	
	        lineColors = lineColors instanceof Array ? lineColors : [lineColors];
	
	        var splitLines = [];
	
	        for (var i = 0; i < ticksCoords.length; i++) {
	            var colorIndex = lineCount++ % lineColors.length;
	            splitLines[colorIndex] = splitLines[colorIndex] || [];
	            splitLines[colorIndex].push(new graphic.Circle({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r: ticksCoords[i]
	                },
	                silent: true
	            }));
	        }
	
	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitLines.length; i++) {
	            this.group.add(graphic.mergePath(splitLines[i], {
	                style: zrUtil.defaults({
	                    stroke: lineColors[i % lineColors.length],
	                    fill: null
	                }, lineStyleModel.getLineStyle()),
	                silent: true
	            }));
	        }
	    },
	
	    /**
	     * @private
	     */
	    _splitArea: function _splitArea(radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {
	
	        var splitAreaModel = radiusAxisModel.getModel('splitArea');
	        var areaStyleModel = splitAreaModel.getModel('areaStyle');
	        var areaColors = areaStyleModel.get('color');
	        var lineCount = 0;
	
	        areaColors = areaColors instanceof Array ? areaColors : [areaColors];
	
	        var splitAreas = [];
	
	        var prevRadius = ticksCoords[0];
	        for (var i = 1; i < ticksCoords.length; i++) {
	            var colorIndex = lineCount++ % areaColors.length;
	            splitAreas[colorIndex] = splitAreas[colorIndex] || [];
	            splitAreas[colorIndex].push(new graphic.Sector({
	                shape: {
	                    cx: polar.cx,
	                    cy: polar.cy,
	                    r0: prevRadius,
	                    r: ticksCoords[i],
	                    startAngle: 0,
	                    endAngle: Math.PI * 2
	                },
	                silent: true
	            }));
	            prevRadius = ticksCoords[i];
	        }
	
	        // Simple optimization
	        // Batching the lines if color are the same
	        for (var i = 0; i < splitAreas.length; i++) {
	            this.group.add(graphic.mergePath(splitAreas[i], {
	                style: zrUtil.defaults({
	                    fill: areaColors[i % areaColors.length]
	                }, areaStyleModel.getAreaStyle()),
	                silent: true
	            }));
	        }
	    }
	});
	
	/**
	 * @inner
	 */
	function layoutAxis(polar, radiusAxisModel, axisAngle) {
	    return {
	        position: [polar.cx, polar.cy],
	        rotation: axisAngle / 180 * Math.PI,
	        labelDirection: -1,
	        tickDirection: -1,
	        nameDirection: 1,
	        labelRotation: radiusAxisModel.getModel('axisLabel').get('rotate'),
	        // Over splitLine and splitArea
	        z2: 1
	    };
	}

/***/ },
/* 504 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(384);
	
	__webpack_require__(505);
	
	__webpack_require__(382);

/***/ },
/* 505 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var MapDraw = __webpack_require__(379);
	
	module.exports = __webpack_require__(222).extendComponentView({
	
	    type: 'geo',
	
	    init: function init(ecModel, api) {
	        var mapDraw = new MapDraw(api, true);
	        this._mapDraw = mapDraw;
	
	        this.group.add(mapDraw.group);
	    },
	
	    render: function render(geoModel, ecModel, api) {
	        geoModel.get('show') && this._mapDraw.draw(geoModel, ecModel, api);
	    }
	});

/***/ },
/* 506 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	var graphic = __webpack_require__(263);
	var layout = __webpack_require__(242);
	
	// Model
	echarts.extendComponentModel({
	
	    type: 'title',
	
	    layoutMode: { type: 'box', ignoreSize: true },
	
	    defaultOption: {
	        // 一级层叠
	        zlevel: 0,
	        // 二级层叠
	        z: 6,
	        show: true,
	
	        text: '',
	        // 超链接跳转
	        // link: null,
	        // 仅支持self | blank
	        target: 'blank',
	        subtext: '',
	
	        // 超链接跳转
	        // sublink: null,
	        // 仅支持self | blank
	        subtarget: 'blank',
	
	        // 'center' ¦ 'left' ¦ 'right'
	        // ¦ {number}（x坐标，单位px）
	        left: 0,
	        // 'top' ¦ 'bottom' ¦ 'center'
	        // ¦ {number}（y坐标，单位px）
	        top: 0,
	
	        // 水平对齐
	        // 'auto' | 'left' | 'right'
	        // 默认根据 x 的位置判断是左对齐还是右对齐
	        //textAlign: null
	
	        backgroundColor: 'rgba(0,0,0,0)',
	
	        // 标题边框颜色
	        borderColor: '#ccc',
	
	        // 标题边框线宽，单位px，默认为0（无边框）
	        borderWidth: 0,
	
	        // 标题内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        padding: 5,
	
	        // 主副标题纵向间隔，单位px，默认为10，
	        itemGap: 10,
	        textStyle: {
	            fontSize: 18,
	            fontWeight: 'bolder',
	            // 主标题文字颜色
	            color: '#333'
	        },
	        subtextStyle: {
	            // 副标题文字颜色
	            color: '#aaa'
	        }
	    }
	});
	
	// View
	echarts.extendComponentView({
	
	    type: 'title',
	
	    render: function render(titleModel, ecModel, api) {
	        this.group.removeAll();
	
	        if (!titleModel.get('show')) {
	            return;
	        }
	
	        var group = this.group;
	
	        var textStyleModel = titleModel.getModel('textStyle');
	        var subtextStyleModel = titleModel.getModel('subtextStyle');
	
	        var textAlign = titleModel.get('textAlign');
	
	        var textEl = new graphic.Text({
	            style: {
	                text: titleModel.get('text'),
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor(),
	                textBaseline: 'top'
	            },
	            z2: 10
	        });
	
	        var textRect = textEl.getBoundingRect();
	
	        var subText = titleModel.get('subtext');
	        var subTextEl = new graphic.Text({
	            style: {
	                text: subText,
	                textFont: subtextStyleModel.getFont(),
	                fill: subtextStyleModel.getTextColor(),
	                y: textRect.height + titleModel.get('itemGap'),
	                textBaseline: 'top'
	            },
	            z2: 10
	        });
	
	        var link = titleModel.get('link');
	        var sublink = titleModel.get('sublink');
	
	        textEl.silent = !link;
	        subTextEl.silent = !sublink;
	
	        if (link) {
	            textEl.on('click', function () {
	                window.open(link, titleModel.get('target'));
	            });
	        }
	        if (sublink) {
	            subTextEl.on('click', function () {
	                window.open(sublink, titleModel.get('subtarget'));
	            });
	        }
	
	        group.add(textEl);
	        subText && group.add(subTextEl);
	        // If no subText, but add subTextEl, there will be an empty line.
	
	        var groupRect = group.getBoundingRect();
	        var layoutOption = titleModel.getBoxLayoutParams();
	        layoutOption.width = groupRect.width;
	        layoutOption.height = groupRect.height;
	        var layoutRect = layout.getLayoutRect(layoutOption, {
	            width: api.getWidth(),
	            height: api.getHeight()
	        }, titleModel.get('padding'));
	        // Adjust text align based on position
	        if (!textAlign) {
	            // Align left if title is on the left. center and right is same
	            textAlign = titleModel.get('left') || titleModel.get('right');
	            if (textAlign === 'middle') {
	                textAlign = 'center';
	            }
	            // Adjust layout by text align
	            if (textAlign === 'right') {
	                layoutRect.x += layoutRect.width;
	            } else if (textAlign === 'center') {
	                layoutRect.x += layoutRect.width / 2;
	            }
	        }
	        group.position = [layoutRect.x, layoutRect.y];
	        textEl.setStyle('textAlign', textAlign);
	        subTextEl.setStyle('textAlign', textAlign);
	
	        // Render background
	        // Get groupRect again because textAlign has been changed
	        groupRect = group.getBoundingRect();
	        var padding = layoutRect.margin;
	        var style = titleModel.getItemStyle(['color', 'opacity']);
	        style.fill = titleModel.get('backgroundColor');
	        var rect = new graphic.Rect({
	            shape: {
	                x: groupRect.x - padding[3],
	                y: groupRect.y - padding[0],
	                width: groupRect.width + padding[1] + padding[3],
	                height: groupRect.height + padding[0] + padding[2]
	            },
	            style: style,
	            silent: true
	        });
	        graphic.subPixelOptimizeRect(rect);
	
	        group.add(rect);
	    }
	});

/***/ },
/* 507 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * DataZoom component entry
	 */
	
	__webpack_require__(508);
	
	__webpack_require__(509);
	__webpack_require__(511);
	
	__webpack_require__(512);
	__webpack_require__(513);
	
	__webpack_require__(516);
	__webpack_require__(517);
	
	__webpack_require__(519);
	__webpack_require__(520);

/***/ },
/* 508 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(240).registerSubTypeDefaulter('dataZoom', function (option) {
	    // Default 'slider' when no type specified.
	    return 'slider';
	});

/***/ },
/* 509 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	var zrUtil = __webpack_require__(224);
	var env = __webpack_require__(299);
	var echarts = __webpack_require__(222);
	var modelUtil = __webpack_require__(226);
	var AxisProxy = __webpack_require__(510);
	var each = zrUtil.each;
	var eachAxisDim = modelUtil.eachAxisDim;
	
	var DataZoomModel = echarts.extendComponentModel({
	
	    type: 'dataZoom',
	
	    dependencies: ['xAxis', 'yAxis', 'zAxis', 'radiusAxis', 'angleAxis', 'series'],
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        zlevel: 0,
	        z: 4, // Higher than normal component (z: 2).
	        orient: null, // Default auto by axisIndex. Possible value: 'horizontal', 'vertical'.
	        xAxisIndex: null, // Default all horizontal category axis.
	        yAxisIndex: null, // Default all vertical category axis.
	        angleAxisIndex: null,
	        radiusAxisIndex: null,
	        filterMode: 'filter', // Possible values: 'filter' or 'empty'.
	        // 'filter': data items which are out of window will be removed.
	        //           This option is applicable when filtering outliers.
	        // 'empty': data items which are out of window will be set to empty.
	        //          This option is applicable when user should not neglect
	        //          that there are some data items out of window.
	        // Taking line chart as an example, line will be broken in
	        // the filtered points when filterModel is set to 'empty', but
	        // be connected when set to 'filter'.
	
	        throttle: 100, // Dispatch action by the fixed rate, avoid frequency.
	        // default 100. Do not throttle when use null/undefined.
	        start: 0, // Start percent. 0 ~ 100
	        end: 100, // End percent. 0 ~ 100
	        startValue: null, // Start value. If startValue specified, start is ignored.
	        endValue: null // End value. If endValue specified, end is ignored.
	    },
	
	    /**
	     * @override
	     */
	    init: function init(option, parentModel, ecModel) {
	
	        /**
	         * key like x_0, y_1
	         * @private
	         * @type {Object}
	         */
	        this._dataIntervalByAxis = {};
	
	        /**
	         * @private
	         */
	        this._dataInfo = {};
	
	        /**
	         * key like x_0, y_1
	         * @private
	         */
	        this._axisProxies = {};
	
	        /**
	         * @readOnly
	         */
	        this.textStyleModel;
	
	        var rawOption = retrieveRaw(option);
	
	        this.mergeDefaultAndTheme(option, ecModel);
	
	        this.doInit(rawOption);
	    },
	
	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(newOption) {
	        var rawOption = retrieveRaw(newOption);
	
	        //FIX #2591
	        zrUtil.merge(this.option, newOption, true);
	
	        this.doInit(rawOption);
	    },
	
	    /**
	     * @protected
	     */
	    doInit: function doInit(rawOption) {
	        var thisOption = this.option;
	
	        // Disable realtime view update if canvas is not supported.
	        if (!env.canvasSupported) {
	            thisOption.realtime = false;
	        }
	
	        processRangeProp('start', 'startValue', rawOption, thisOption);
	        processRangeProp('end', 'endValue', rawOption, thisOption);
	
	        this.textStyleModel = this.getModel('textStyle');
	
	        this._resetTarget();
	
	        this._giveAxisProxies();
	    },
	
	    /**
	     * @private
	     */
	    _giveAxisProxies: function _giveAxisProxies() {
	        var axisProxies = this._axisProxies;
	
	        this.eachTargetAxis(function (dimNames, axisIndex, dataZoomModel, ecModel) {
	            var axisModel = this.dependentModels[dimNames.axis][axisIndex];
	
	            // If exists, share axisProxy with other dataZoomModels.
	            var axisProxy = axisModel.__dzAxisProxy || (
	            // Use the first dataZoomModel as the main model of axisProxy.
	            axisModel.__dzAxisProxy = new AxisProxy(dimNames.name, axisIndex, this, ecModel));
	            // FIXME
	            // dispose __dzAxisProxy
	
	            axisProxies[dimNames.name + '_' + axisIndex] = axisProxy;
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _resetTarget: function _resetTarget() {
	        var thisOption = this.option;
	
	        var autoMode = this._judgeAutoMode();
	
	        eachAxisDim(function (dimNames) {
	            var axisIndexName = dimNames.axisIndex;
	            thisOption[axisIndexName] = modelUtil.normalizeToArray(thisOption[axisIndexName]);
	        }, this);
	
	        if (autoMode === 'axisIndex') {
	            this._autoSetAxisIndex();
	        } else if (autoMode === 'orient') {
	            this._autoSetOrient();
	        }
	    },
	
	    /**
	     * @private
	     */
	    _judgeAutoMode: function _judgeAutoMode() {
	        // Auto set only works for setOption at the first time.
	        // The following is user's reponsibility. So using merged
	        // option is OK.
	        var thisOption = this.option;
	
	        var hasIndexSpecified = false;
	        eachAxisDim(function (dimNames) {
	            // When user set axisIndex as a empty array, we think that user specify axisIndex
	            // but do not want use auto mode. Because empty array may be encountered when
	            // some error occured.
	            if (thisOption[dimNames.axisIndex] != null) {
	                hasIndexSpecified = true;
	            }
	        }, this);
	
	        var orient = thisOption.orient;
	
	        if (orient == null && hasIndexSpecified) {
	            return 'orient';
	        } else if (!hasIndexSpecified) {
	            if (orient == null) {
	                thisOption.orient = 'horizontal';
	            }
	            return 'axisIndex';
	        }
	    },
	
	    /**
	     * @private
	     */
	    _autoSetAxisIndex: function _autoSetAxisIndex() {
	        var autoAxisIndex = true;
	        var orient = this.get('orient', true);
	        var thisOption = this.option;
	
	        if (autoAxisIndex) {
	            // Find axis that parallel to dataZoom as default.
	            var dimNames = orient === 'vertical' ? { dim: 'y', axisIndex: 'yAxisIndex', axis: 'yAxis' } : { dim: 'x', axisIndex: 'xAxisIndex', axis: 'xAxis' };
	
	            if (this.dependentModels[dimNames.axis].length) {
	                thisOption[dimNames.axisIndex] = [0];
	                autoAxisIndex = false;
	            }
	        }
	
	        if (autoAxisIndex) {
	            // Find the first category axis as default. (consider polar)
	            eachAxisDim(function (dimNames) {
	                if (!autoAxisIndex) {
	                    return;
	                }
	                var axisIndices = [];
	                var axisModels = this.dependentModels[dimNames.axis];
	                if (axisModels.length && !axisIndices.length) {
	                    for (var i = 0, len = axisModels.length; i < len; i++) {
	                        if (axisModels[i].get('type') === 'category') {
	                            axisIndices.push(i);
	                        }
	                    }
	                }
	                thisOption[dimNames.axisIndex] = axisIndices;
	                if (axisIndices.length) {
	                    autoAxisIndex = false;
	                }
	            }, this);
	        }
	
	        if (autoAxisIndex) {
	            // FIXME
	            // 这里是兼容ec2的写法（没指定xAxisIndex和yAxisIndex时把scatter和双数值轴折柱纳入dataZoom控制），
	            // 但是实际是否需要Grid.js#getScaleByOption来判断（考虑time，log等axis type）？
	
	            // If both dataZoom.xAxisIndex and dataZoom.yAxisIndex is not specified,
	            // dataZoom component auto adopts series that reference to
	            // both xAxis and yAxis which type is 'value'.
	            this.ecModel.eachSeries(function (seriesModel) {
	                if (this._isSeriesHasAllAxesTypeOf(seriesModel, 'value')) {
	                    eachAxisDim(function (dimNames) {
	                        var axisIndices = thisOption[dimNames.axisIndex];
	                        var axisIndex = seriesModel.get(dimNames.axisIndex);
	                        if (zrUtil.indexOf(axisIndices, axisIndex) < 0) {
	                            axisIndices.push(axisIndex);
	                        }
	                    });
	                }
	            }, this);
	        }
	    },
	
	    /**
	     * @private
	     */
	    _autoSetOrient: function _autoSetOrient() {
	        var dim;
	
	        // Find the first axis
	        this.eachTargetAxis(function (dimNames) {
	            !dim && (dim = dimNames.name);
	        }, this);
	
	        this.option.orient = dim === 'y' ? 'vertical' : 'horizontal';
	    },
	
	    /**
	     * @private
	     */
	    _isSeriesHasAllAxesTypeOf: function _isSeriesHasAllAxesTypeOf(seriesModel, axisType) {
	        // FIXME
	        // 需要series的xAxisIndex和yAxisIndex都首先自动设置上。
	        // 例如series.type === scatter时。
	
	        var is = true;
	        eachAxisDim(function (dimNames) {
	            var seriesAxisIndex = seriesModel.get(dimNames.axisIndex);
	            var axisModel = this.dependentModels[dimNames.axis][seriesAxisIndex];
	
	            if (!axisModel || axisModel.get('type') !== axisType) {
	                is = false;
	            }
	        }, this);
	        return is;
	    },
	
	    /**
	     * @public
	     */
	    getFirstTargetAxisModel: function getFirstTargetAxisModel() {
	        var firstAxisModel;
	        eachAxisDim(function (dimNames) {
	            if (firstAxisModel == null) {
	                var indices = this.get(dimNames.axisIndex);
	                if (indices.length) {
	                    firstAxisModel = this.dependentModels[dimNames.axis][indices[0]];
	                }
	            }
	        }, this);
	
	        return firstAxisModel;
	    },
	
	    /**
	     * @public
	     * @param {Function} callback param: axisModel, dimNames, axisIndex, dataZoomModel, ecModel
	     */
	    eachTargetAxis: function eachTargetAxis(callback, context) {
	        var ecModel = this.ecModel;
	        eachAxisDim(function (dimNames) {
	            each(this.get(dimNames.axisIndex), function (axisIndex) {
	                callback.call(context, dimNames, axisIndex, this, ecModel);
	            }, this);
	        }, this);
	    },
	
	    getAxisProxy: function getAxisProxy(dimName, axisIndex) {
	        return this._axisProxies[dimName + '_' + axisIndex];
	    },
	
	    /**
	     * If not specified, set to undefined.
	     *
	     * @public
	     * @param {Object} opt
	     * @param {number} [opt.start]
	     * @param {number} [opt.end]
	     * @param {number} [opt.startValue]
	     * @param {number} [opt.endValue]
	     */
	    setRawRange: function setRawRange(opt) {
	        each(['start', 'end', 'startValue', 'endValue'], function (name) {
	            // If any of those prop is null/undefined, we should alos set
	            // them, because only one pair between start/end and
	            // startValue/endValue can work.
	            this.option[name] = opt[name];
	        }, this);
	    },
	
	    /**
	     * @public
	     * @return {Array.<number>} [startPercent, endPercent]
	     */
	    getPercentRange: function getPercentRange() {
	        var axisProxy = this.findRepresentativeAxisProxy();
	        if (axisProxy) {
	            return axisProxy.getDataPercentWindow();
	        }
	    },
	
	    /**
	     * @public
	     * For example, chart.getModel().getComponent('dataZoom').getValueRange('y', 0);
	     *
	     * @param {string} [axisDimName]
	     * @param {number} [axisIndex]
	     * @return {Array.<number>} [startValue, endValue]
	     */
	    getValueRange: function getValueRange(axisDimName, axisIndex) {
	        if (axisDimName == null && axisIndex == null) {
	            var axisProxy = this.findRepresentativeAxisProxy();
	            if (axisProxy) {
	                return axisProxy.getDataValueWindow();
	            }
	        } else {
	            return this.getAxisProxy(axisDimName, axisIndex).getDataValueWindow();
	        }
	    },
	
	    /**
	     * @public
	     * @return {module:echarts/component/dataZoom/AxisProxy}
	     */
	    findRepresentativeAxisProxy: function findRepresentativeAxisProxy() {
	        // Find the first hosted axisProxy
	        var axisProxies = this._axisProxies;
	        for (var key in axisProxies) {
	            if (axisProxies.hasOwnProperty(key) && axisProxies[key].hostedBy(this)) {
	                return axisProxies[key];
	            }
	        }
	
	        // If no hosted axis find not hosted axisProxy.
	        // Consider this case: dataZoomModel1 and dataZoomModel2 control the same axis,
	        // and the option.start or option.end settings are different. The percentRange
	        // should follow axisProxy.
	        // (We encounter this problem in toolbox data zoom.)
	        for (var key in axisProxies) {
	            if (axisProxies.hasOwnProperty(key) && !axisProxies[key].hostedBy(this)) {
	                return axisProxies[key];
	            }
	        }
	    }
	
	});
	
	function retrieveRaw(option) {
	    var ret = {};
	    each(['start', 'end', 'startValue', 'endValue'], function (name) {
	        ret[name] = option[name];
	    });
	    return ret;
	}
	
	function processRangeProp(percentProp, valueProp, rawOption, thisOption) {
	    // start/end has higher priority over startValue/endValue,
	    // but we should make chart.setOption({endValue: 1000}) effective,
	    // rather than chart.setOption({endValue: 1000, end: null}).
	    if (rawOption[valueProp] != null && rawOption[percentProp] == null) {
	        thisOption[percentProp] = null;
	    }
	    // Otherwise do nothing and use the merge result.
	}
	
	module.exports = DataZoomModel;

/***/ },
/* 510 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Axis operator
	 */
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	
	/**
	 * Operate single axis.
	 * One axis can only operated by one axis operator.
	 * Different dataZoomModels may be defined to operate the same axis.
	 * (i.e. 'inside' data zoom and 'slider' data zoom components)
	 * So dataZoomModels share one axisProxy in that case.
	 *
	 * @class
	 */
	var AxisProxy = function AxisProxy(dimName, axisIndex, dataZoomModel, ecModel) {
	
	    /**
	     * @private
	     * @type {string}
	     */
	    this._dimName = dimName;
	
	    /**
	     * @private
	     */
	    this._axisIndex = axisIndex;
	
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._valueWindow;
	
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._percentWindow;
	
	    /**
	     * @private
	     * @type {Array.<number>}
	     */
	    this._dataExtent;
	
	    /**
	     * @readOnly
	     * @type {module: echarts/model/Global}
	     */
	    this.ecModel = ecModel;
	
	    /**
	     * @private
	     * @type {module: echarts/component/dataZoom/DataZoomModel}
	     */
	    this._dataZoomModel = dataZoomModel;
	};
	
	AxisProxy.prototype = {
	
	    constructor: AxisProxy,
	
	    /**
	     * Whether the axisProxy is hosted by dataZoomModel.
	     *
	     * @public
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     * @return {boolean}
	     */
	    hostedBy: function hostedBy(dataZoomModel) {
	        return this._dataZoomModel === dataZoomModel;
	    },
	
	    /**
	     * @return {Array.<number>}
	     */
	    getDataExtent: function getDataExtent() {
	        return this._dataExtent.slice();
	    },
	
	    /**
	     * @return {Array.<number>}
	     */
	    getDataValueWindow: function getDataValueWindow() {
	        return this._valueWindow.slice();
	    },
	
	    /**
	     * @return {Array.<number>}
	     */
	    getDataPercentWindow: function getDataPercentWindow() {
	        return this._percentWindow.slice();
	    },
	
	    /**
	     * @public
	     * @param {number} axisIndex
	     * @return {Array} seriesModels
	     */
	    getTargetSeriesModels: function getTargetSeriesModels() {
	        var seriesModels = [];
	
	        this.ecModel.eachSeries(function (seriesModel) {
	            if (this._axisIndex === seriesModel.get(this._dimName + 'AxisIndex')) {
	                seriesModels.push(seriesModel);
	            }
	        }, this);
	
	        return seriesModels;
	    },
	
	    getAxisModel: function getAxisModel() {
	        return this.ecModel.getComponent(this._dimName + 'Axis', this._axisIndex);
	    },
	
	    getOtherAxisModel: function getOtherAxisModel() {
	        var axisDim = this._dimName;
	        var ecModel = this.ecModel;
	        var axisModel = this.getAxisModel();
	        var isCartesian = axisDim === 'x' || axisDim === 'y';
	        var otherAxisDim;
	        var coordSysIndexName;
	        if (isCartesian) {
	            coordSysIndexName = 'gridIndex';
	            otherAxisDim = axisDim === 'x' ? 'y' : 'x';
	        } else {
	            coordSysIndexName = 'polarIndex';
	            otherAxisDim = axisDim === 'angle' ? 'radius' : 'angle';
	        }
	        var foundOtherAxisModel;
	        ecModel.eachComponent(otherAxisDim + 'Axis', function (otherAxisModel) {
	            if ((otherAxisModel.get(coordSysIndexName) || 0) === (axisModel.get(coordSysIndexName) || 0)) {
	                foundOtherAxisModel = otherAxisModel;
	            }
	        });
	        return foundOtherAxisModel;
	    },
	
	    /**
	     * Notice: reset should not be called before series.restoreData() called,
	     * so it is recommanded to be called in "process stage" but not "model init
	     * stage".
	     *
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    reset: function reset(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }
	
	        // Culculate data window and data extent, and record them.
	        var dataExtent = this._dataExtent = calculateDataExtent(this._dimName, this.getTargetSeriesModels());
	        var dataWindow = calculateDataWindow(dataZoomModel.option, dataExtent, this);
	        this._valueWindow = dataWindow.valueWindow;
	        this._percentWindow = dataWindow.percentWindow;
	
	        // Update axis setting then.
	        setAxisModel(this);
	    },
	
	    /**
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    restore: function restore(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }
	
	        this._valueWindow = this._percentWindow = null;
	        setAxisModel(this, true);
	    },
	
	    /**
	     * @param {module: echarts/component/dataZoom/DataZoomModel} dataZoomModel
	     */
	    filterData: function filterData(dataZoomModel) {
	        if (dataZoomModel !== this._dataZoomModel) {
	            return;
	        }
	
	        var axisDim = this._dimName;
	        var seriesModels = this.getTargetSeriesModels();
	        var filterMode = dataZoomModel.get('filterMode');
	        var valueWindow = this._valueWindow;
	
	        // FIXME
	        // Toolbox may has dataZoom injected. And if there are stacked bar chart
	        // with NaN data. NaN will be filtered and stack will be wrong.
	        // So we need to force the mode to be set empty
	        var otherAxisModel = this.getOtherAxisModel();
	        if (dataZoomModel.get('$fromToolbox') && otherAxisModel && otherAxisModel.get('type') === 'category') {
	            filterMode = 'empty';
	        }
	        // Process series data
	        each(seriesModels, function (seriesModel) {
	            var seriesData = seriesModel.getData();
	            if (!seriesData) {
	                return;
	            }
	
	            each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                if (filterMode === 'empty') {
	                    seriesModel.setData(seriesData.map(dim, function (value) {
	                        return !isInWindow(value) ? NaN : value;
	                    }));
	                } else {
	                    seriesData.filterSelf(dim, isInWindow);
	                }
	            });
	        });
	
	        function isInWindow(value) {
	            return value >= valueWindow[0] && value <= valueWindow[1];
	        }
	    }
	};
	
	function calculateDataExtent(axisDim, seriesModels) {
	    var dataExtent = [Infinity, -Infinity];
	
	    each(seriesModels, function (seriesModel) {
	        var seriesData = seriesModel.getData();
	        if (seriesData) {
	            each(seriesModel.coordDimToDataDim(axisDim), function (dim) {
	                var seriesExtent = seriesData.getDataExtent(dim);
	                seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);
	                seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);
	            });
	        }
	    }, this);
	
	    return dataExtent;
	}
	
	function calculateDataWindow(opt, dataExtent, axisProxy) {
	    var axisModel = axisProxy.getAxisModel();
	    var scale = axisModel.axis.scale;
	    var percentExtent = [0, 100];
	    var percentWindow = [opt.start, opt.end];
	    var valueWindow = [];
	
	    // In percent range is used and axis min/max/scale is set,
	    // window should be based on min/max/0, but should not be
	    // based on the extent of filtered data.
	    dataExtent = dataExtent.slice();
	    fixExtendByAxis(dataExtent, axisModel, scale);
	
	    each(['startValue', 'endValue'], function (prop) {
	        valueWindow.push(opt[prop] != null ? scale.parse(opt[prop]) : null);
	    });
	
	    // Normalize bound.
	    each([0, 1], function (idx) {
	        var boundValue = valueWindow[idx];
	        var boundPercent = percentWindow[idx];
	
	        // start/end has higher priority over startValue/endValue,
	        // because start/end can be consistent among different type
	        // of axis but startValue/endValue not.
	
	        if (boundPercent != null || boundValue == null) {
	            if (boundPercent == null) {
	                boundPercent = percentExtent[idx];
	            }
	            // Use scale.parse to math round for category or time axis.
	            boundValue = scale.parse(numberUtil.linearMap(boundPercent, percentExtent, dataExtent, true));
	        } else {
	            // boundPercent == null && boundValue != null
	            boundPercent = numberUtil.linearMap(boundValue, dataExtent, percentExtent, true);
	        }
	        // Avoid rounding error
	        valueWindow[idx] = numberUtil.round(boundValue);
	        percentWindow[idx] = numberUtil.round(boundPercent);
	    });
	
	    return {
	        valueWindow: asc(valueWindow),
	        percentWindow: asc(percentWindow)
	    };
	}
	
	function fixExtendByAxis(dataExtent, axisModel, scale) {
	    each(['min', 'max'], function (minMax, index) {
	        var axisMax = axisModel.get(minMax, true);
	        // Consider 'dataMin', 'dataMax'
	        if (axisMax != null && (axisMax + '').toLowerCase() !== 'data' + minMax) {
	            dataExtent[index] = scale.parse(axisMax);
	        }
	    });
	
	    if (!axisModel.get('scale', true)) {
	        dataExtent[0] > 0 && (dataExtent[0] = 0);
	        dataExtent[1] < 0 && (dataExtent[1] = 0);
	    }
	
	    return dataExtent;
	}
	
	function setAxisModel(axisProxy, isRestore) {
	    var axisModel = axisProxy.getAxisModel();
	
	    var percentWindow = axisProxy._percentWindow;
	    var valueWindow = axisProxy._valueWindow;
	
	    if (!percentWindow) {
	        return;
	    }
	
	    var isFull = isRestore || percentWindow[0] === 0 && percentWindow[1] === 100;
	    // [0, 500]: arbitrary value, guess axis extent.
	    var precision = !isRestore && numberUtil.getPixelPrecision(valueWindow, [0, 500]);
	    // toFixed() digits argument must be between 0 and 20
	    var invalidPrecision = !isRestore && !(precision < 20 && precision >= 0);
	
	    var useOrigin = isRestore || isFull || invalidPrecision;
	
	    axisModel.setRange && axisModel.setRange(useOrigin ? null : +valueWindow[0].toFixed(precision), useOrigin ? null : +valueWindow[1].toFixed(precision));
	}
	
	module.exports = AxisProxy;

/***/ },
/* 511 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var ComponentView = __webpack_require__(249);
	
	module.exports = ComponentView.extend({
	
	    type: 'dataZoom',
	
	    render: function render(dataZoomModel, ecModel, api, payload) {
	        this.dataZoomModel = dataZoomModel;
	        this.ecModel = ecModel;
	        this.api = api;
	    },
	
	    /**
	     * Find the first target coordinate system.
	     *
	     * @protected
	     * @return {Object} {
	     *                   cartesians: [
	     *                       {model: coord0, axisModels: [axis1, axis3], coordIndex: 1},
	     *                       {model: coord1, axisModels: [axis0, axis2], coordIndex: 0},
	     *                       ...
	     *                   ],  // cartesians must not be null/undefined.
	     *                   polars: [
	     *                       {model: coord0, axisModels: [axis4], coordIndex: 0},
	     *                       ...
	     *                   ],  // polars must not be null/undefined.
	     *                   axisModels: [axis0, axis1, axis2, axis3, axis4]
	     *                       // axisModels must not be null/undefined.
	     *                  }
	     */
	    getTargetInfo: function getTargetInfo() {
	        var dataZoomModel = this.dataZoomModel;
	        var ecModel = this.ecModel;
	        var cartesians = [];
	        var polars = [];
	        var axisModels = [];
	
	        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	            var axisModel = ecModel.getComponent(dimNames.axis, axisIndex);
	            if (axisModel) {
	                axisModels.push(axisModel);
	
	                var gridIndex = axisModel.get('gridIndex');
	                var polarIndex = axisModel.get('polarIndex');
	
	                if (gridIndex != null) {
	                    var coordModel = ecModel.getComponent('grid', gridIndex);
	                    save(coordModel, axisModel, cartesians, gridIndex);
	                } else if (polarIndex != null) {
	                    var coordModel = ecModel.getComponent('polar', polarIndex);
	                    save(coordModel, axisModel, polars, polarIndex);
	                }
	            }
	        }, this);
	
	        function save(coordModel, axisModel, store, coordIndex) {
	            var item;
	            for (var i = 0; i < store.length; i++) {
	                if (store[i].model === coordModel) {
	                    item = store[i];
	                    break;
	                }
	            }
	            if (!item) {
	                store.push(item = {
	                    model: coordModel, axisModels: [], coordIndex: coordIndex
	                });
	            }
	            item.axisModels.push(axisModel);
	        }
	
	        return {
	            cartesians: cartesians,
	            polars: polars,
	            axisModels: axisModels
	        };
	    }
	
	});

/***/ },
/* 512 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	var DataZoomModel = __webpack_require__(509);
	var layout = __webpack_require__(242);
	var zrUtil = __webpack_require__(224);
	
	var SliderZoomModel = DataZoomModel.extend({
	
	    type: 'dataZoom.slider',
	
	    layoutMode: 'box',
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        show: true,
	
	        // ph => placeholder. Using placehoder here because
	        // deault value can only be drived in view stage.
	        right: 'ph', // Default align to grid rect.
	        top: 'ph', // Default align to grid rect.
	        width: 'ph', // Default align to grid rect.
	        height: 'ph', // Default align to grid rect.
	        left: null, // Default align to grid rect.
	        bottom: null, // Default align to grid rect.
	
	        backgroundColor: 'rgba(47,69,84,0)', // Background of slider zoom component.
	        dataBackgroundColor: '#ddd', // Background of data shadow.
	        fillerColor: 'rgba(47,69,84,0.25)', // Color of selected area.
	        handleColor: 'rgba(47,69,84,0.65)', // Color of handle.
	        handleSize: 10,
	
	        labelPrecision: null,
	        labelFormatter: null,
	        showDetail: true,
	        showDataShadow: 'auto', // Default auto decision.
	        realtime: true,
	        zoomLock: false, // Whether disable zoom.
	        textStyle: {
	            color: '#333'
	        }
	    },
	
	    /**
	     * @public
	     */
	    setDefaultLayoutParams: function setDefaultLayoutParams(params) {
	        var option = this.option;
	        zrUtil.each(['right', 'top', 'width', 'height'], function (name) {
	            if (option[name] === 'ph') {
	                option[name] = params[name];
	            };
	        });
	    },
	
	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(option) {
	        SliderZoomModel.superApply(this, 'mergeOption', arguments);
	    }
	
	});
	
	module.exports = SliderZoomModel;

/***/ },
/* 513 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var throttle = __webpack_require__(514);
	var DataZoomView = __webpack_require__(511);
	var Rect = graphic.Rect;
	var numberUtil = __webpack_require__(228);
	var linearMap = numberUtil.linearMap;
	var layout = __webpack_require__(242);
	var sliderMove = __webpack_require__(515);
	var asc = numberUtil.asc;
	var bind = zrUtil.bind;
	var mathRound = Math.round;
	var mathMax = Math.max;
	var each = zrUtil.each;
	
	// Constants
	var DEFAULT_LOCATION_EDGE_GAP = 7;
	var DEFAULT_FRAME_BORDER_WIDTH = 1;
	var DEFAULT_FILLER_SIZE = 30;
	var HORIZONTAL = 'horizontal';
	var VERTICAL = 'vertical';
	var LABEL_GAP = 5;
	var SHOW_DATA_SHADOW_SERIES_TYPE = ['line', 'bar', 'candlestick', 'scatter'];
	
	var SliderZoomView = DataZoomView.extend({
	
	    type: 'dataZoom.slider',
	
	    init: function init(ecModel, api) {
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._displayables = {};
	
	        /**
	         * @private
	         * @type {string}
	         */
	        this._orient;
	
	        /**
	         * [0, 100]
	         * @private
	         */
	        this._range;
	
	        /**
	         * [coord of the first handle, coord of the second handle]
	         * @private
	         */
	        this._handleEnds;
	
	        /**
	         * [length, thick]
	         * @private
	         * @type {Array.<number>}
	         */
	        this._size;
	
	        /**
	         * @private
	         * @type {number}
	         */
	        this._halfHandleSize;
	
	        /**
	         * @private
	         */
	        this._location;
	
	        /**
	         * @private
	         */
	        this._dragging;
	
	        /**
	         * @private
	         */
	        this._dataShadowInfo;
	
	        this.api = api;
	    },
	
	    /**
	     * @override
	     */
	    render: function render(dataZoomModel, ecModel, api, payload) {
	        SliderZoomView.superApply(this, 'render', arguments);
	
	        throttle.createOrUpdate(this, '_dispatchZoomAction', this.dataZoomModel.get('throttle'), 'fixRate');
	
	        this._orient = dataZoomModel.get('orient');
	        this._halfHandleSize = mathRound(dataZoomModel.get('handleSize') / 2);
	
	        if (this.dataZoomModel.get('show') === false) {
	            this.group.removeAll();
	            return;
	        }
	
	        // Notice: this._resetInterval() should not be executed when payload.type
	        // is 'dataZoom', origin this._range should be maintained, otherwise 'pan'
	        // or 'zoom' info will be missed because of 'throttle' of this.dispatchAction,
	        if (!payload || payload.type !== 'dataZoom' || payload.from !== this.uid) {
	            this._buildView();
	        }
	
	        this._updateView();
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        SliderZoomView.superApply(this, 'remove', arguments);
	        throttle.clear(this, '_dispatchZoomAction');
	    },
	
	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        SliderZoomView.superApply(this, 'dispose', arguments);
	        throttle.clear(this, '_dispatchZoomAction');
	    },
	
	    _buildView: function _buildView() {
	        var thisGroup = this.group;
	
	        thisGroup.removeAll();
	
	        this._resetLocation();
	        this._resetInterval();
	
	        var barGroup = this._displayables.barGroup = new graphic.Group();
	
	        this._renderBackground();
	        this._renderDataShadow();
	        this._renderHandle();
	
	        thisGroup.add(barGroup);
	
	        this._positionGroup();
	    },
	
	    /**
	     * @private
	     */
	    _resetLocation: function _resetLocation() {
	        var dataZoomModel = this.dataZoomModel;
	        var api = this.api;
	
	        // If some of x/y/width/height are not specified,
	        // auto-adapt according to target grid.
	        var coordRect = this._findCoordRect();
	        var ecSize = { width: api.getWidth(), height: api.getHeight() };
	
	        // Default align by coordinate system rect.
	        var positionInfo = this._orient === HORIZONTAL ? {
	            // Why using 'right', because right should be used in vertical,
	            // and it is better to be consistent for dealing with position param merge.
	            right: ecSize.width - coordRect.x - coordRect.width,
	            top: ecSize.height - DEFAULT_FILLER_SIZE - DEFAULT_LOCATION_EDGE_GAP,
	            width: coordRect.width,
	            height: DEFAULT_FILLER_SIZE
	        } : { // vertical
	            right: DEFAULT_LOCATION_EDGE_GAP,
	            top: coordRect.y,
	            width: DEFAULT_FILLER_SIZE,
	            height: coordRect.height
	        };
	
	        // Write back to option for chart.getOption(). (and may then
	        // chart.setOption() again, where current location value is needed);
	        // dataZoomModel.setLayoutParams(positionInfo);
	        dataZoomModel.setDefaultLayoutParams(positionInfo);
	
	        var layoutRect = layout.getLayoutRect(dataZoomModel.option, ecSize, dataZoomModel.padding);
	
	        this._location = { x: layoutRect.x, y: layoutRect.y };
	        this._size = [layoutRect.width, layoutRect.height];
	        this._orient === VERTICAL && this._size.reverse();
	    },
	
	    /**
	     * @private
	     */
	    _positionGroup: function _positionGroup() {
	        var thisGroup = this.group;
	        var location = this._location;
	        var orient = this._orient;
	
	        // Just use the first axis to determine mapping.
	        var targetAxisModel = this.dataZoomModel.getFirstTargetAxisModel();
	        var inverse = targetAxisModel && targetAxisModel.get('inverse');
	
	        var barGroup = this._displayables.barGroup;
	        var otherAxisInverse = (this._dataShadowInfo || {}).otherAxisInverse;
	
	        // Transform barGroup.
	        barGroup.attr(orient === HORIZONTAL && !inverse ? { scale: otherAxisInverse ? [1, 1] : [1, -1] } : orient === HORIZONTAL && inverse ? { scale: otherAxisInverse ? [-1, 1] : [-1, -1] } : orient === VERTICAL && !inverse ? { scale: otherAxisInverse ? [1, -1] : [1, 1], rotation: Math.PI / 2 }
	        // Dont use Math.PI, considering shadow direction.
	        : { scale: otherAxisInverse ? [-1, -1] : [-1, 1], rotation: Math.PI / 2 });
	
	        // Position barGroup
	        var rect = thisGroup.getBoundingRect([barGroup]);
	        thisGroup.position[0] = location.x - rect.x;
	        thisGroup.position[1] = location.y - rect.y;
	    },
	
	    /**
	     * @private
	     */
	    _getViewExtent: function _getViewExtent() {
	        // View total length.
	        var halfHandleSize = this._halfHandleSize;
	        var totalLength = mathMax(this._size[0], halfHandleSize * 4);
	        var extent = [halfHandleSize, totalLength - halfHandleSize];
	
	        return extent;
	    },
	
	    _renderBackground: function _renderBackground() {
	        var dataZoomModel = this.dataZoomModel;
	        var size = this._size;
	
	        this._displayables.barGroup.add(new Rect({
	            silent: true,
	            shape: {
	                x: 0, y: 0, width: size[0], height: size[1]
	            },
	            style: {
	                fill: dataZoomModel.get('backgroundColor')
	            }
	        }));
	    },
	
	    _renderDataShadow: function _renderDataShadow() {
	        var info = this._dataShadowInfo = this._prepareDataShadowInfo();
	
	        if (!info) {
	            return;
	        }
	
	        var size = this._size;
	        var seriesModel = info.series;
	        var data = seriesModel.getRawData();
	        var otherDim = seriesModel.getShadowDim ? seriesModel.getShadowDim() // @see candlestick
	        : info.otherDim;
	
	        var otherDataExtent = data.getDataExtent(otherDim);
	        // Nice extent.
	        var otherOffset = (otherDataExtent[1] - otherDataExtent[0]) * 0.3;
	        otherDataExtent = [otherDataExtent[0] - otherOffset, otherDataExtent[1] + otherOffset];
	        var otherShadowExtent = [0, size[1]];
	
	        var thisShadowExtent = [0, size[0]];
	
	        var points = [[size[0], 0], [0, 0]];
	        var step = thisShadowExtent[1] / (data.count() - 1);
	        var thisCoord = 0;
	
	        // Optimize for large data shadow
	        var stride = Math.round(data.count() / size[0]);
	        data.each([otherDim], function (value, index) {
	            if (stride > 0 && index % stride) {
	                thisCoord += step;
	                return;
	            }
	            // FIXME
	            // 应该使用统计的空判断？还是在list里进行空判断？
	            var otherCoord = value == null || isNaN(value) || value === '' ? null : linearMap(value, otherDataExtent, otherShadowExtent, true);
	            otherCoord != null && points.push([thisCoord, otherCoord]);
	
	            thisCoord += step;
	        });
	
	        this._displayables.barGroup.add(new graphic.Polyline({
	            shape: { points: points },
	            style: { fill: this.dataZoomModel.get('dataBackgroundColor'), lineWidth: 0 },
	            silent: true,
	            z2: -20
	        }));
	    },
	
	    _prepareDataShadowInfo: function _prepareDataShadowInfo() {
	        var dataZoomModel = this.dataZoomModel;
	        var showDataShadow = dataZoomModel.get('showDataShadow');
	
	        if (showDataShadow === false) {
	            return;
	        }
	
	        // Find a representative series.
	        var result;
	        var ecModel = this.ecModel;
	
	        dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	            var seriesModels = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getTargetSeriesModels();
	
	            zrUtil.each(seriesModels, function (seriesModel) {
	                if (result) {
	                    return;
	                }
	
	                if (showDataShadow !== true && zrUtil.indexOf(SHOW_DATA_SHADOW_SERIES_TYPE, seriesModel.get('type')) < 0) {
	                    return;
	                }
	
	                var otherDim = getOtherDim(dimNames.name);
	
	                var thisAxis = ecModel.getComponent(dimNames.axis, axisIndex).axis;
	
	                result = {
	                    thisAxis: thisAxis,
	                    series: seriesModel,
	                    thisDim: dimNames.name,
	                    otherDim: otherDim,
	                    otherAxisInverse: seriesModel.coordinateSystem.getOtherAxis(thisAxis).inverse
	                };
	            }, this);
	        }, this);
	
	        return result;
	    },
	
	    _renderHandle: function _renderHandle() {
	        var displaybles = this._displayables;
	        var handles = displaybles.handles = [];
	        var handleLabels = displaybles.handleLabels = [];
	        var barGroup = this._displayables.barGroup;
	        var size = this._size;
	
	        barGroup.add(displaybles.filler = new Rect({
	            draggable: true,
	            cursor: 'move',
	            drift: bind(this._onDragMove, this, 'all'),
	            ondragend: bind(this._onDragEnd, this),
	            onmouseover: bind(this._showDataInfo, this, true),
	            onmouseout: bind(this._showDataInfo, this, false),
	            style: {
	                fill: this.dataZoomModel.get('fillerColor'),
	                // text: ':::',
	                textPosition: 'inside'
	            }
	        }));
	
	        // Frame border.
	        barGroup.add(new Rect(graphic.subPixelOptimizeRect({
	            silent: true,
	            shape: {
	                x: 0,
	                y: 0,
	                width: size[0],
	                height: size[1]
	            },
	            style: {
	                stroke: this.dataZoomModel.get('dataBackgroundColor'),
	                lineWidth: DEFAULT_FRAME_BORDER_WIDTH,
	                fill: 'rgba(0,0,0,0)'
	            }
	        })));
	
	        each([0, 1], function (handleIndex) {
	
	            barGroup.add(handles[handleIndex] = new Rect({
	                style: {
	                    fill: this.dataZoomModel.get('handleColor')
	                },
	                cursor: 'move',
	                draggable: true,
	                drift: bind(this._onDragMove, this, handleIndex),
	                ondragend: bind(this._onDragEnd, this),
	                onmouseover: bind(this._showDataInfo, this, true),
	                onmouseout: bind(this._showDataInfo, this, false)
	            }));
	
	            var textStyleModel = this.dataZoomModel.textStyleModel;
	
	            this.group.add(handleLabels[handleIndex] = new graphic.Text({
	                silent: true,
	                invisible: true,
	                style: {
	                    x: 0, y: 0, text: '',
	                    textVerticalAlign: 'middle',
	                    textAlign: 'center',
	                    fill: textStyleModel.getTextColor(),
	                    textFont: textStyleModel.getFont()
	                }
	            }));
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _resetInterval: function _resetInterval() {
	        var range = this._range = this.dataZoomModel.getPercentRange();
	        var viewExtent = this._getViewExtent();
	
	        this._handleEnds = [linearMap(range[0], [0, 100], viewExtent, true), linearMap(range[1], [0, 100], viewExtent, true)];
	    },
	
	    /**
	     * @private
	     * @param {(number|string)} handleIndex 0 or 1 or 'all'
	     * @param {number} dx
	     * @param {number} dy
	     */
	    _updateInterval: function _updateInterval(handleIndex, delta) {
	        var handleEnds = this._handleEnds;
	        var viewExtend = this._getViewExtent();
	
	        sliderMove(delta, handleEnds, viewExtend, handleIndex === 'all' || this.dataZoomModel.get('zoomLock') ? 'rigid' : 'cross', handleIndex);
	
	        this._range = asc([linearMap(handleEnds[0], viewExtend, [0, 100], true), linearMap(handleEnds[1], viewExtend, [0, 100], true)]);
	    },
	
	    /**
	     * @private
	     */
	    _updateView: function _updateView() {
	        var displaybles = this._displayables;
	        var handleEnds = this._handleEnds;
	        var handleInterval = asc(handleEnds.slice());
	        var size = this._size;
	        var halfHandleSize = this._halfHandleSize;
	
	        each([0, 1], function (handleIndex) {
	
	            // Handles
	            var handle = displaybles.handles[handleIndex];
	            handle.setShape({
	                x: handleEnds[handleIndex] - halfHandleSize,
	                y: -1,
	                width: halfHandleSize * 2,
	                height: size[1] + 2,
	                r: 1
	            });
	        }, this);
	
	        // Filler
	        displaybles.filler.setShape({
	            x: handleInterval[0],
	            y: 0,
	            width: handleInterval[1] - handleInterval[0],
	            height: this._size[1]
	        });
	
	        this._updateDataInfo();
	    },
	
	    /**
	     * @private
	     */
	    _updateDataInfo: function _updateDataInfo() {
	        var dataZoomModel = this.dataZoomModel;
	        var displaybles = this._displayables;
	        var handleLabels = displaybles.handleLabels;
	        var orient = this._orient;
	        var labelTexts = ['', ''];
	
	        // FIXME
	        // date型，支持formatter，autoformatter（ec2 date.getAutoFormatter）
	        if (dataZoomModel.get('showDetail')) {
	            var dataInterval;
	            var axis;
	            dataZoomModel.eachTargetAxis(function (dimNames, axisIndex) {
	                // Using dataInterval of the first axis.
	                if (!dataInterval) {
	                    dataInterval = dataZoomModel.getAxisProxy(dimNames.name, axisIndex).getDataValueWindow();
	                    axis = this.ecModel.getComponent(dimNames.axis, axisIndex).axis;
	                }
	            }, this);
	
	            if (dataInterval) {
	                labelTexts = [this._formatLabel(dataInterval[0], axis), this._formatLabel(dataInterval[1], axis)];
	            }
	        }
	
	        var orderedHandleEnds = asc(this._handleEnds.slice());
	
	        setLabel.call(this, 0);
	        setLabel.call(this, 1);
	
	        function setLabel(handleIndex) {
	            // Label
	            // Text should not transform by barGroup.
	            var barTransform = graphic.getTransform(displaybles.handles[handleIndex], this.group);
	            var direction = graphic.transformDirection(handleIndex === 0 ? 'right' : 'left', barTransform);
	            var offset = this._halfHandleSize + LABEL_GAP;
	            var textPoint = graphic.applyTransform([orderedHandleEnds[handleIndex] + (handleIndex === 0 ? -offset : offset), this._size[1] / 2], barTransform);
	            handleLabels[handleIndex].setStyle({
	                x: textPoint[0],
	                y: textPoint[1],
	                textVerticalAlign: orient === HORIZONTAL ? 'middle' : direction,
	                textAlign: orient === HORIZONTAL ? direction : 'center',
	                text: labelTexts[handleIndex]
	            });
	        }
	    },
	
	    /**
	     * @private
	     */
	    _formatLabel: function _formatLabel(value, axis) {
	        var dataZoomModel = this.dataZoomModel;
	        var labelFormatter = dataZoomModel.get('labelFormatter');
	        if (zrUtil.isFunction(labelFormatter)) {
	            return labelFormatter(value);
	        }
	
	        var labelPrecision = dataZoomModel.get('labelPrecision');
	        if (labelPrecision == null || labelPrecision === 'auto') {
	            labelPrecision = axis.getPixelPrecision();
	        }
	
	        value = value == null && isNaN(value) ? ''
	        // FIXME Glue code
	        : axis.type === 'category' || axis.type === 'time' ? axis.scale.getLabel(Math.round(value))
	        // param of toFixed should less then 20.
	        : value.toFixed(Math.min(labelPrecision, 20));
	
	        if (zrUtil.isString(labelFormatter)) {
	            value = labelFormatter.replace('{value}', value);
	        }
	
	        return value;
	    },
	
	    /**
	     * @private
	     * @param {boolean} showOrHide true: show, false: hide
	     */
	    _showDataInfo: function _showDataInfo(showOrHide) {
	        // Always show when drgging.
	        showOrHide = this._dragging || showOrHide;
	
	        var handleLabels = this._displayables.handleLabels;
	        handleLabels[0].attr('invisible', !showOrHide);
	        handleLabels[1].attr('invisible', !showOrHide);
	    },
	
	    _onDragMove: function _onDragMove(handleIndex, dx, dy) {
	        this._dragging = true;
	
	        // Transform dx, dy to bar coordination.
	        var vertex = this._applyBarTransform([dx, dy], true);
	
	        this._updateInterval(handleIndex, vertex[0]);
	        this._updateView();
	
	        if (this.dataZoomModel.get('realtime')) {
	            this._dispatchZoomAction();
	        }
	    },
	
	    _onDragEnd: function _onDragEnd() {
	        this._dragging = false;
	        this._showDataInfo(false);
	        this._dispatchZoomAction();
	    },
	
	    /**
	     * This action will be throttled.
	     * @private
	     */
	    _dispatchZoomAction: function _dispatchZoomAction() {
	        var range = this._range;
	
	        this.api.dispatchAction({
	            type: 'dataZoom',
	            from: this.uid,
	            dataZoomId: this.dataZoomModel.id,
	            start: range[0],
	            end: range[1]
	        });
	    },
	
	    /**
	     * @private
	     */
	    _applyBarTransform: function _applyBarTransform(vertex, inverse) {
	        var barTransform = this._displayables.barGroup.getLocalTransform();
	        return graphic.applyTransform(vertex, barTransform, inverse);
	    },
	
	    /**
	     * @private
	     */
	    _findCoordRect: function _findCoordRect() {
	        // Find the grid coresponding to the first axis referred by dataZoom.
	        var targetInfo = this.getTargetInfo();
	
	        // FIXME
	        // 判断是catesian还是polar
	        var rect;
	        if (targetInfo.cartesians.length) {
	            rect = targetInfo.cartesians[0].model.coordinateSystem.getRect();
	        } else {
	            // Polar
	            // FIXME
	            // 暂时随便写的
	            var width = this.api.getWidth();
	            var height = this.api.getHeight();
	            rect = {
	                x: width * 0.2,
	                y: height * 0.2,
	                width: width * 0.6,
	                height: height * 0.6
	            };
	        }
	
	        return rect;
	    }
	
	});
	
	function getOtherDim(thisDim) {
	    // FIXME
	    // 这个逻辑和getOtherAxis里一致，但是写在这里是否不好
	    return thisDim === 'x' ? 'y' : 'x';
	}
	
	module.exports = SliderZoomView;

/***/ },
/* 514 */
/***/ function(module, exports) {

	'use strict';
	
	var lib = {};
	
	var ORIGIN_METHOD = '\0__throttleOriginMethod';
	var RATE = '\0__throttleRate';
	
	/**
	 * 频率控制 返回函数连续调用时，fn 执行频率限定为每多少时间执行一次
	 * 例如常见效果：
	 * notifyWhenChangesStop
	 *      频繁调用时，只保证最后一次执行
	 *      配成：trailing：true；debounce：true 即可
	 * notifyAtFixRate
	 *      频繁调用时，按规律心跳执行
	 *      配成：trailing：true；debounce：false 即可
	 * 注意：
	 *     根据model更新view的时候，可以使用throttle，
	 *     但是根据view更新model的时候，避免使用这种延迟更新的方式。
	 *     因为这可能导致model和server同步出现问题。
	 *
	 * @public
	 * @param {(Function|Array.<Function>)} fn 需要调用的函数
	 *                                         如果fn为array，则表示可以对多个函数进行throttle。
	 *                                         他们共享同一个timer。
	 * @param {number} delay 延迟时间，单位毫秒
	 * @param {bool} trailing 是否保证最后一次触发的执行
	 *                        true：表示保证最后一次调用会触发执行。
	 *                        但任何调用后不可能立即执行，总会delay。
	 *                        false：表示不保证最后一次调用会触发执行。
	 *                        但只要间隔大于delay，调用就会立即执行。
	 * @param {bool} debounce 节流
	 *                        true：表示：频繁调用（间隔小于delay）时，根本不执行
	 *                        false：表示：频繁调用（间隔小于delay）时，按规律心跳执行
	 * @return {(Function|Array.<Function>)} 实际调用函数。
	 *                                       当输入的fn为array时，返回值也为array。
	 *                                       每项是Function。
	 */
	lib.throttle = function (fn, delay, trailing, debounce) {
	
	    var currCall = new Date().getTime();
	    var lastCall = 0;
	    var lastExec = 0;
	    var timer = null;
	    var diff;
	    var scope;
	    var args;
	    var isSingle = typeof fn === 'function';
	    delay = delay || 0;
	
	    if (isSingle) {
	        return createCallback();
	    } else {
	        var ret = [];
	        for (var i = 0; i < fn.length; i++) {
	            ret[i] = createCallback(i);
	        }
	        return ret;
	    }
	
	    function createCallback(index) {
	
	        function exec() {
	            lastExec = new Date().getTime();
	            timer = null;
	            (isSingle ? fn : fn[index]).apply(scope, args || []);
	        }
	
	        var cb = function cb() {
	            currCall = new Date().getTime();
	            scope = this;
	            args = arguments;
	            diff = currCall - (debounce ? lastCall : lastExec) - delay;
	
	            clearTimeout(timer);
	
	            if (debounce) {
	                if (trailing) {
	                    timer = setTimeout(exec, delay);
	                } else if (diff >= 0) {
	                    exec();
	                }
	            } else {
	                if (diff >= 0) {
	                    exec();
	                } else if (trailing) {
	                    timer = setTimeout(exec, -diff);
	                }
	            }
	
	            lastCall = currCall;
	        };
	
	        /**
	         * Clear throttle.
	         * @public
	         */
	        cb.clear = function () {
	            if (timer) {
	                clearTimeout(timer);
	                timer = null;
	            }
	        };
	
	        return cb;
	    }
	};
	
	/**
	 * 按一定频率执行，最后一次调用总归会执行
	 *
	 * @public
	 */
	lib.fixRate = function (fn, delay) {
	    return delay != null ? lib.throttle(fn, delay, true, false) : fn;
	};
	
	/**
	 * 直到不频繁调用了才会执行，最后一次调用总归会执行
	 *
	 * @public
	 */
	lib.debounce = function (fn, delay) {
	    return delay != null ? lib.throttle(fn, delay, true, true) : fn;
	};
	
	/**
	 * Create throttle method or update throttle rate.
	 *
	 * @example
	 * ComponentView.prototype.render = function () {
	 *     ...
	 *     throttle.createOrUpdate(
	 *         this,
	 *         '_dispatchAction',
	 *         this.model.get('throttle'),
	 *         'fixRate'
	 *     );
	 * };
	 * ComponentView.prototype.remove = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 * ComponentView.prototype.dispose = function () {
	 *     throttle.clear(this, '_dispatchAction');
	 * };
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 * @param {number} rate
	 * @param {string} throttleType 'fixRate' or 'debounce'
	 */
	lib.createOrUpdate = function (obj, fnAttr, rate, throttleType) {
	    var fn = obj[fnAttr];
	
	    if (!fn || rate == null || !throttleType) {
	        return;
	    }
	
	    var originFn = fn[ORIGIN_METHOD] || fn;
	    var lastRate = fn[RATE];
	
	    if (lastRate !== rate) {
	        fn = obj[fnAttr] = lib[throttleType](originFn, rate);
	        fn[ORIGIN_METHOD] = originFn;
	        fn[RATE] = rate;
	    }
	};
	
	/**
	 * Clear throttle. Example see throttle.createOrUpdate.
	 *
	 * @public
	 * @param {Object} obj
	 * @param {string} fnAttr
	 */
	lib.clear = function (obj, fnAttr) {
	    var fn = obj[fnAttr];
	    if (fn && fn[ORIGIN_METHOD]) {
	        obj[fnAttr] = fn[ORIGIN_METHOD];
	    }
	};
	
	module.exports = lib;

/***/ },
/* 515 */
/***/ function(module, exports) {

	'use strict';
	
	/**
	 * Calculate slider move result.
	 *
	 * @param {number} delta Move length.
	 * @param {Array.<number>} handleEnds handleEnds[0] and be bigger then handleEnds[1].
	 *                                    handleEnds will be modified in this method.
	 * @param {Array.<number>} extent handleEnds is restricted by extent.
	 *                                extent[0] should less or equals than extent[1].
	 * @param {string} mode 'rigid': Math.abs(handleEnds[0] - handleEnds[1]) remain unchanged,
	 *                      'cross' handleEnds[0] can be bigger then handleEnds[1],
	 *                      'push' handleEnds[0] can not be bigger then handleEnds[1],
	 *                              when they touch, one push other.
	 * @param {number} handleIndex If mode is 'rigid', handleIndex is not required.
	 * @param {Array.<number>} The input handleEnds.
	 */
	module.exports = function (delta, handleEnds, extent, mode, handleIndex) {
	    if (!delta) {
	        return handleEnds;
	    }
	
	    if (mode === 'rigid') {
	        delta = getRealDelta(delta, handleEnds, extent);
	        handleEnds[0] += delta;
	        handleEnds[1] += delta;
	    } else {
	        delta = getRealDelta(delta, handleEnds[handleIndex], extent);
	        handleEnds[handleIndex] += delta;
	
	        if (mode === 'push' && handleEnds[0] > handleEnds[1]) {
	            handleEnds[1 - handleIndex] = handleEnds[handleIndex];
	        }
	    }
	
	    return handleEnds;
	
	    function getRealDelta(delta, handleEnds, extent) {
	        var handleMinMax = !handleEnds.length ? [handleEnds, handleEnds] : handleEnds.slice();
	        handleEnds[0] > handleEnds[1] && handleMinMax.reverse();
	
	        if (delta < 0 && handleMinMax[0] + delta < extent[0]) {
	            delta = extent[0] - handleMinMax[0];
	        }
	        if (delta > 0 && handleMinMax[1] + delta > extent[1]) {
	            delta = extent[1] - handleMinMax[1];
	        }
	        return delta;
	    }
	};

/***/ },
/* 516 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	module.exports = __webpack_require__(509).extend({
	
	    type: 'dataZoom.inside',
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        zoomLock: false // Whether disable zoom but only pan.
	    }
	});

/***/ },
/* 517 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var DataZoomView = __webpack_require__(511);
	var zrUtil = __webpack_require__(224);
	var sliderMove = __webpack_require__(515);
	var roams = __webpack_require__(518);
	var bind = zrUtil.bind;
	
	var InsideZoomView = DataZoomView.extend({
	
	    type: 'dataZoom.inside',
	
	    /**
	     * @override
	     */
	    init: function init(ecModel, api) {
	        /**
	         * 'throttle' is used in this.dispatchAction, so we save range
	         * to avoid missing some 'pan' info.
	         * @private
	         * @type {Array.<number>}
	         */
	        this._range;
	    },
	
	    /**
	     * @override
	     */
	    render: function render(dataZoomModel, ecModel, api, payload) {
	        InsideZoomView.superApply(this, 'render', arguments);
	
	        // Notice: origin this._range should be maintained, and should not be re-fetched
	        // from dataZoomModel when payload.type is 'dataZoom', otherwise 'pan' or 'zoom'
	        // info will be missed because of 'throttle' of this.dispatchAction.
	        if (roams.shouldRecordRange(payload, dataZoomModel.id)) {
	            this._range = dataZoomModel.getPercentRange();
	        }
	
	        // Reset controllers.
	        zrUtil.each(this.getTargetInfo().cartesians, function (coordInfo) {
	            var coordModel = coordInfo.model;
	            roams.register(api, {
	                coordId: coordModel.id,
	                coordType: coordModel.type,
	                coordinateSystem: coordModel.coordinateSystem,
	                dataZoomId: dataZoomModel.id,
	                throttleRage: dataZoomModel.get('throttle', true),
	                panGetRange: bind(this._onPan, this, coordInfo),
	                zoomGetRange: bind(this._onZoom, this, coordInfo)
	            });
	        }, this);
	
	        // TODO
	        // polar支持
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        roams.unregister(this.api, this.dataZoomModel.id);
	        InsideZoomView.superApply(this, 'remove', arguments);
	        this._range = null;
	    },
	
	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        roams.unregister(this.api, this.dataZoomModel.id);
	        InsideZoomView.superApply(this, 'dispose', arguments);
	        this._range = null;
	    },
	
	    /**
	     * @private
	     */
	    _onPan: function _onPan(coordInfo, controller, dx, dy) {
	        return this._range = panCartesian([dx, dy], this._range, controller, coordInfo);
	    },
	
	    /**
	     * @private
	     */
	    _onZoom: function _onZoom(coordInfo, controller, scale, mouseX, mouseY) {
	        var dataZoomModel = this.dataZoomModel;
	
	        if (dataZoomModel.option.zoomLock) {
	            return;
	        }
	
	        return this._range = scaleCartesian(1 / scale, [mouseX, mouseY], this._range, controller, coordInfo, dataZoomModel);
	    }
	
	});
	
	function panCartesian(pixelDeltas, range, controller, coordInfo) {
	    range = range.slice();
	
	    // Calculate transform by the first axis.
	    var axisModel = coordInfo.axisModels[0];
	    if (!axisModel) {
	        return;
	    }
	
	    var directionInfo = getDirectionInfo(pixelDeltas, axisModel, controller);
	
	    var percentDelta = directionInfo.signal * (range[1] - range[0]) * directionInfo.pixel / directionInfo.pixelLength;
	
	    sliderMove(percentDelta, range, [0, 100], 'rigid');
	
	    return range;
	}
	
	function scaleCartesian(scale, mousePoint, range, controller, coordInfo, dataZoomModel) {
	    range = range.slice();
	
	    // Calculate transform by the first axis.
	    var axisModel = coordInfo.axisModels[0];
	    if (!axisModel) {
	        return;
	    }
	
	    var directionInfo = getDirectionInfo(mousePoint, axisModel, controller);
	
	    var mouse = directionInfo.pixel - directionInfo.pixelStart;
	    var percentPoint = mouse / directionInfo.pixelLength * (range[1] - range[0]) + range[0];
	
	    scale = Math.max(scale, 0);
	    range[0] = (range[0] - percentPoint) * scale + percentPoint;
	    range[1] = (range[1] - percentPoint) * scale + percentPoint;
	
	    return fixRange(range);
	}
	
	function getDirectionInfo(xy, axisModel, controller) {
	    var axis = axisModel.axis;
	    var rect = controller.rect;
	    var ret = {};
	
	    if (axis.dim === 'x') {
	        ret.pixel = xy[0];
	        ret.pixelLength = rect.width;
	        ret.pixelStart = rect.x;
	        ret.signal = axis.inverse ? 1 : -1;
	    } else {
	        // axis.dim === 'y'
	        ret.pixel = xy[1];
	        ret.pixelLength = rect.height;
	        ret.pixelStart = rect.y;
	        ret.signal = axis.inverse ? -1 : 1;
	    }
	
	    return ret;
	}
	
	function fixRange(range) {
	    // Clamp, using !(<= or >=) to handle NaN.
	    // jshint ignore:start
	    var bound = [0, 100];
	    !(range[0] <= bound[1]) && (range[0] = bound[1]);
	    !(range[1] <= bound[1]) && (range[1] = bound[1]);
	    !(range[0] >= bound[0]) && (range[0] = bound[0]);
	    !(range[1] >= bound[0]) && (range[1] = bound[0]);
	    // jshint ignore:end
	
	    return range;
	}
	
	module.exports = InsideZoomView;

/***/ },
/* 518 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Roam controller manager.
	 */
	
	// Only create one roam controller for each coordinate system.
	// one roam controller might be refered by two inside data zoom
	// components (for example, one for x and one for y). When user
	// pan or zoom, only dispatch one action for those data zoom
	// components.
	
	var zrUtil = __webpack_require__(224);
	var RoamController = __webpack_require__(380);
	var throttle = __webpack_require__(514);
	var curry = zrUtil.curry;
	
	var ATTR = '\0_ec_dataZoom_roams';
	
	var roams = {
	
	    /**
	     * @public
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Object} dataZoomInfo
	     * @param {string} dataZoomInfo.coordType
	     * @param {string} dataZoomInfo.coordId
	     * @param {Object} dataZoomInfo.coordinateSystem
	     * @param {string} dataZoomInfo.dataZoomId
	     * @param {number} dataZoomInfo.throttleRate
	     * @param {Function} dataZoomInfo.panGetRange
	     * @param {Function} dataZoomInfo.zoomGetRange
	     */
	    register: function register(api, dataZoomInfo) {
	        var store = giveStore(api);
	        var theDataZoomId = dataZoomInfo.dataZoomId;
	        var theCoordId = dataZoomInfo.coordType + '\0_' + dataZoomInfo.coordId;
	
	        // Do clean when a dataZoom changes its target coordnate system.
	        zrUtil.each(store, function (record, coordId) {
	            var dataZoomInfos = record.dataZoomInfos;
	            if (dataZoomInfos[theDataZoomId] && coordId !== theCoordId) {
	                delete dataZoomInfos[theDataZoomId];
	                record.count--;
	            }
	        });
	
	        cleanStore(store);
	
	        var record = store[theCoordId];
	
	        // Create if needed.
	        if (!record) {
	            record = store[theCoordId] = {
	                coordId: theCoordId,
	                dataZoomInfos: {},
	                count: 0
	            };
	            record.controller = createController(api, dataZoomInfo, record);
	            record.dispatchAction = zrUtil.curry(dispatchAction, api);
	        }
	
	        // Update.
	        if (record) {
	            throttle.createOrUpdate(record, 'dispatchAction', dataZoomInfo.throttleRate, 'fixRate');
	
	            !record.dataZoomInfos[theDataZoomId] && record.count++;
	            record.dataZoomInfos[theDataZoomId] = dataZoomInfo;
	        }
	    },
	
	    /**
	     * @public
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {string} dataZoomId
	     */
	    unregister: function unregister(api, dataZoomId) {
	        var store = giveStore(api);
	
	        zrUtil.each(store, function (record, coordId) {
	            var dataZoomInfos = record.dataZoomInfos;
	            if (dataZoomInfos[dataZoomId]) {
	                delete dataZoomInfos[dataZoomId];
	                record.count--;
	            }
	        });
	
	        cleanStore(store);
	    },
	
	    /**
	     * @public
	     */
	    shouldRecordRange: function shouldRecordRange(payload, dataZoomId) {
	        if (payload && payload.type === 'dataZoom' && payload.batch) {
	            for (var i = 0, len = payload.batch.length; i < len; i++) {
	                if (payload.batch[i].dataZoomId === dataZoomId) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    }
	
	};
	
	/**
	 * Key: coordId, value: {dataZoomInfos: [], count, controller}
	 * @type {Array.<Object>}
	 */
	function giveStore(api) {
	    // Mount store on zrender instance, so that we do not
	    // need to worry about dispose.
	    var zr = api.getZr();
	    return zr[ATTR] || (zr[ATTR] = {});
	}
	
	function createController(api, dataZoomInfo, newRecord) {
	    var controller = new RoamController(api.getZr());
	    controller.enable();
	    controller.on('pan', curry(onPan, newRecord));
	    controller.on('zoom', curry(onZoom, newRecord));
	    controller.rect = dataZoomInfo.coordinateSystem.getRect().clone();
	
	    return controller;
	}
	
	function cleanStore(store) {
	    zrUtil.each(store, function (record, coordId) {
	        if (!record.count) {
	            record.controller.off('pan').off('zoom');
	            delete store[coordId];
	        }
	    });
	}
	
	function onPan(record, dx, dy) {
	    wrapAndDispatch(record, function (info) {
	        return info.panGetRange(record.controller, dx, dy);
	    });
	}
	
	function onZoom(record, scale, mouseX, mouseY) {
	    wrapAndDispatch(record, function (info) {
	        return info.zoomGetRange(record.controller, scale, mouseX, mouseY);
	    });
	}
	
	function wrapAndDispatch(record, getRange) {
	    var batch = [];
	
	    zrUtil.each(record.dataZoomInfos, function (info) {
	        var range = getRange(info);
	        range && batch.push({
	            dataZoomId: info.dataZoomId,
	            start: range[0],
	            end: range[1]
	        });
	    });
	
	    record.dispatchAction(batch);
	}
	
	/**
	 * This action will be throttled.
	 */
	function dispatchAction(api, batch) {
	    api.dispatchAction({
	        type: 'dataZoom',
	        batch: batch
	    });
	}
	
	module.exports = roams;

/***/ },
/* 519 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom processor
	 */
	
	var echarts = __webpack_require__(222);
	
	echarts.registerProcessor('filter', function (ecModel, api) {
	
	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	        // We calculate window and reset axis here but not in model
	        // init stage and not after action dispatch handler, because
	        // reset should be called after seriesData.restoreData.
	        dataZoomModel.eachTargetAxis(resetSingleAxis);
	
	        // Caution: data zoom filtering is order sensitive when using
	        // percent range and no min/max/scale set on axis.
	        // For example, we have dataZoom definition:
	        // [
	        //      {xAxisIndex: 0, start: 30, end: 70},
	        //      {yAxisIndex: 0, start: 20, end: 80}
	        // ]
	        // In this case, [20, 80] of y-dataZoom should be based on data
	        // that have filtered by x-dataZoom using range of [30, 70],
	        // but should not be based on full raw data. Thus sliding
	        // x-dataZoom will change both ranges of xAxis and yAxis,
	        // while sliding y-dataZoom will only change the range of yAxis.
	        // So we should filter x-axis after reset x-axis immediately,
	        // and then reset y-axis and filter y-axis.
	        dataZoomModel.eachTargetAxis(filterSingleAxis);
	    });
	
	    ecModel.eachComponent('dataZoom', function (dataZoomModel) {
	        // Fullfill all of the range props so that user
	        // is able to get them from chart.getOption().
	        var axisProxy = dataZoomModel.findRepresentativeAxisProxy();
	        var percentRange = axisProxy.getDataPercentWindow();
	        var valueRange = axisProxy.getDataValueWindow();
	        dataZoomModel.setRawRange({
	            start: percentRange[0],
	            end: percentRange[1],
	            startValue: valueRange[0],
	            endValue: valueRange[1]
	        });
	    });
	});
	
	function resetSingleAxis(dimNames, axisIndex, dataZoomModel) {
	    dataZoomModel.getAxisProxy(dimNames.name, axisIndex).reset(dataZoomModel);
	}
	
	function filterSingleAxis(dimNames, axisIndex, dataZoomModel) {
	    dataZoomModel.getAxisProxy(dimNames.name, axisIndex).filterData(dataZoomModel);
	}

/***/ },
/* 520 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom action
	 */
	
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	var echarts = __webpack_require__(222);
	
	echarts.registerAction('dataZoom', function (payload, ecModel) {
	
	    var linkedNodesFinder = modelUtil.createLinkedNodesFinder(zrUtil.bind(ecModel.eachComponent, ecModel, 'dataZoom'), modelUtil.eachAxisDim, function (model, dimNames) {
	        return model.get(dimNames.axisIndex);
	    });
	
	    var effectedModels = [];
	
	    ecModel.eachComponent({ mainType: 'dataZoom', query: payload }, function (model, index) {
	        effectedModels.push.apply(effectedModels, linkedNodesFinder(model).nodes);
	    });
	
	    zrUtil.each(effectedModels, function (dataZoomModel, index) {
	        dataZoomModel.setRawRange({
	            start: payload.start,
	            end: payload.end,
	            startValue: payload.startValue,
	            endValue: payload.endValue
	        });
	    });
	});

/***/ },
/* 521 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * visualMap component entry
	 */
	
	__webpack_require__(522);
	__webpack_require__(533);

/***/ },
/* 522 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * DataZoom component entry
	 */
	
	__webpack_require__(222).registerPreprocessor(__webpack_require__(523));
	
	__webpack_require__(524);
	__webpack_require__(525);
	__webpack_require__(526);
	__webpack_require__(529);
	__webpack_require__(532);

/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file VisualMap preprocessor
	 */
	
	var zrUtil = __webpack_require__(224);
	var each = zrUtil.each;
	
	module.exports = function (option) {
	    var visualMap = option && option.visualMap;
	
	    if (!zrUtil.isArray(visualMap)) {
	        visualMap = visualMap ? [visualMap] : [];
	    }
	
	    each(visualMap, function (opt) {
	        if (!opt) {
	            return;
	        }
	
	        // rename splitList to pieces
	        if (has(opt, 'splitList') && !has(opt, 'pieces')) {
	            opt.pieces = opt.splitList;
	            delete opt.splitList;
	        }
	
	        var pieces = opt.pieces;
	        if (pieces && zrUtil.isArray(pieces)) {
	            each(pieces, function (piece) {
	                if (zrUtil.isObject(piece)) {
	                    if (has(piece, 'start') && !has(piece, 'min')) {
	                        piece.min = piece.start;
	                    }
	                    if (has(piece, 'end') && !has(piece, 'max')) {
	                        piece.max = piece.end;
	                    }
	                }
	            });
	        }
	    });
	};
	
	function has(obj, name) {
	    return obj && obj.hasOwnProperty && obj.hasOwnProperty(name);
	}

/***/ },
/* 524 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(240).registerSubTypeDefaulter('visualMap', function (option) {
	    // Compatible with ec2, when splitNumber === 0, continuous visualMap will be used.
	    return !option.categories && (!(option.pieces ? option.pieces.length > 0 : option.splitNumber > 0) || option.calculable) ? 'continuous' : 'piecewise';
	});

/***/ },
/* 525 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data range visual coding.
	 */
	
	var echarts = __webpack_require__(222);
	var VisualMapping = __webpack_require__(408);
	var zrUtil = __webpack_require__(224);
	
	echarts.registerVisualCoding('component', function (ecModel) {
	    ecModel.eachComponent('visualMap', function (visualMapModel) {
	        processSingleVisualMap(visualMapModel, ecModel);
	    });
	});
	
	function processSingleVisualMap(visualMapModel, ecModel) {
	    var visualMappings = visualMapModel.targetVisuals;
	    var visualTypesMap = {};
	    zrUtil.each(['inRange', 'outOfRange'], function (state) {
	        var visualTypes = VisualMapping.prepareVisualTypes(visualMappings[state]);
	        visualTypesMap[state] = visualTypes;
	    });
	
	    visualMapModel.eachTargetSeries(function (seriesModel) {
	        var data = seriesModel.getData();
	        var dimension = visualMapModel.getDataDimension(data);
	        var dataIndex;
	
	        function getVisual(key) {
	            return data.getItemVisual(dataIndex, key);
	        }
	
	        function setVisual(key, value) {
	            data.setItemVisual(dataIndex, key, value);
	        }
	
	        data.each([dimension], function (value, index) {
	            // For performance consideration, do not use curry.
	            dataIndex = index;
	            var valueState = visualMapModel.getValueState(value);
	            var mappings = visualMappings[valueState];
	            var visualTypes = visualTypesMap[valueState];
	            for (var i = 0, len = visualTypes.length; i < len; i++) {
	                var type = visualTypes[i];
	                mappings[type] && mappings[type].applyVisual(value, getVisual, setVisual);
	            }
	        });
	    });
	}

/***/ },
/* 526 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	var VisualMapModel = __webpack_require__(527);
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	
	// Constant
	var DEFAULT_BAR_BOUND = [20, 140];
	
	var ContinuousModel = VisualMapModel.extend({
	
	    type: 'visualMap.continuous',
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        handlePosition: 'auto', // 'auto', 'left', 'right', 'top', 'bottom'
	        calculable: false, // 是否值域漫游，启用后无视splitNumber和pieces，线性渐变
	        range: [-Infinity, Infinity], // 当前选中范围
	        hoverLink: true,
	        realtime: true,
	        itemWidth: null, // 值域图形宽度
	        itemHeight: null // 值域图形高度
	    },
	
	    /**
	     * @override
	     */
	    doMergeOption: function doMergeOption(newOption, isInit) {
	        ContinuousModel.superApply(this, 'doMergeOption', arguments);
	
	        this.resetTargetSeries(newOption, isInit);
	        this.resetExtent();
	
	        this.resetVisual(function (mappingOption) {
	            mappingOption.mappingMethod = 'linear';
	        });
	
	        this._resetRange();
	    },
	
	    /**
	     * @protected
	     * @override
	     */
	    resetItemSize: function resetItemSize() {
	        VisualMapModel.prototype.resetItemSize.apply(this, arguments);
	
	        var itemSize = this.itemSize;
	
	        this._orient === 'horizontal' && itemSize.reverse();
	
	        (itemSize[0] == null || isNaN(itemSize[0])) && (itemSize[0] = DEFAULT_BAR_BOUND[0]);
	        (itemSize[1] == null || isNaN(itemSize[1])) && (itemSize[1] = DEFAULT_BAR_BOUND[1]);
	    },
	
	    /**
	     * @private
	     */
	    _resetRange: function _resetRange() {
	        var dataExtent = this.getExtent();
	        var range = this.option.range;
	        if (range[0] > range[1]) {
	            range.reverse();
	        }
	        range[0] = Math.max(range[0], dataExtent[0]);
	        range[1] = Math.min(range[1], dataExtent[1]);
	    },
	
	    /**
	     * @protected
	     * @override
	     */
	    completeVisualOption: function completeVisualOption() {
	        VisualMapModel.prototype.completeVisualOption.apply(this, arguments);
	
	        zrUtil.each(this.stateList, function (state) {
	            var symbolSize = this.option.controller[state].symbolSize;
	            if (symbolSize && symbolSize[0] !== symbolSize[1]) {
	                symbolSize[0] = 0; // For good looking.
	            }
	        }, this);
	    },
	
	    /**
	     * @public
	     * @override
	     */
	    setSelected: function setSelected(selected) {
	        this.option.range = selected.slice();
	        this._resetRange();
	    },
	
	    /**
	     * @public
	     */
	    getSelected: function getSelected() {
	        var dataExtent = this.getExtent();
	
	        var dataInterval = numberUtil.asc((this.get('range') || []).slice());
	
	        // Clamp
	        dataInterval[0] > dataExtent[1] && (dataInterval[0] = dataExtent[1]);
	        dataInterval[1] > dataExtent[1] && (dataInterval[1] = dataExtent[1]);
	        dataInterval[0] < dataExtent[0] && (dataInterval[0] = dataExtent[0]);
	        dataInterval[1] < dataExtent[0] && (dataInterval[1] = dataExtent[0]);
	
	        return dataInterval;
	    },
	
	    /**
	     * @public
	     * @override
	     */
	    getValueState: function getValueState(value) {
	        var range = this.option.range;
	        var dataExtent = this.getExtent();
	
	        // When range[0] === dataExtent[0], any value larger than dataExtent[0] maps to 'inRange'.
	        // range[1] is processed likewise.
	        return (range[0] <= dataExtent[0] || range[0] <= value) && (range[1] >= dataExtent[1] || value <= range[1]) ? 'inRange' : 'outOfRange';
	    }
	
	});
	
	module.exports = ContinuousModel;

/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	var zrUtil = __webpack_require__(224);
	var env = __webpack_require__(299);
	var echarts = __webpack_require__(222);
	var modelUtil = __webpack_require__(226);
	var visualDefault = __webpack_require__(528);
	var VisualMapping = __webpack_require__(408);
	var mapVisual = VisualMapping.mapVisual;
	var eachVisual = VisualMapping.eachVisual;
	var numberUtil = __webpack_require__(228);
	var isArray = zrUtil.isArray;
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	var linearMap = numberUtil.linearMap;
	
	var VisualMapModel = echarts.extendComponentModel({
	
	    type: 'visualMap',
	
	    dependencies: ['series'],
	
	    /**
	     * [lowerBound, upperBound]
	     *
	     * @readOnly
	     * @type {Array.<number>}
	     */
	    dataBound: [-Infinity, Infinity],
	
	    /**
	     * @readOnly
	     * @type {Array.<string>}
	     */
	    stateList: ['inRange', 'outOfRange'],
	
	    /**
	     * @readOnly
	     * @type {string|Object}
	     */
	    layoutMode: { type: 'box', ignoreSize: true },
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        show: true,
	
	        zlevel: 0,
	        z: 4,
	
	        // set min: 0, max: 200, only for campatible with ec2.
	        // In fact min max should not have default value.
	        min: 0, // min value, must specified if pieces is not specified.
	        max: 200, // max value, must specified if pieces is not specified.
	
	        dimension: null,
	        inRange: null, // 'color', 'colorHue', 'colorSaturation', 'colorLightness', 'colorAlpha',
	        // 'symbol', 'symbolSize'
	        outOfRange: null, // 'color', 'colorHue', 'colorSaturation',
	        // 'colorLightness', 'colorAlpha',
	        // 'symbol', 'symbolSize'
	
	        left: 0, // 'center' ¦ 'left' ¦ 'right' ¦ {number} (px)
	        right: null, // The same as left.
	        top: null, // 'top' ¦ 'bottom' ¦ 'center' ¦ {number} (px)
	        bottom: 0, // The same as top.
	
	        itemWidth: null,
	        itemHeight: null,
	        inverse: false,
	        orient: 'vertical', // 'horizontal' ¦ 'vertical'
	
	        seriesIndex: null, // 所控制的series indices，默认所有有value的series.
	        backgroundColor: 'rgba(0,0,0,0)',
	        borderColor: '#ccc', // 值域边框颜色
	        contentColor: '#5793f3',
	        inactiveColor: '#aaa',
	        borderWidth: 0, // 值域边框线宽，单位px，默认为0（无边框）
	        padding: 5, // 值域内边距，单位px，默认各方向内边距为5，
	        // 接受数组分别设定上右下左边距，同css
	        textGap: 10, //
	        precision: 0, // 小数精度，默认为0，无小数点
	        color: ['#bf444c', '#d88273', '#f6efa6'], //颜色（deprecated，兼容ec2，顺序同pieces，不同于inRange/outOfRange）
	
	        formatter: null,
	        text: null, // 文本，如['高', '低']，兼容ec2，text[0]对应高值，text[1]对应低值
	        textStyle: {
	            color: '#333' // 值域文字颜色
	        }
	    },
	
	    /**
	     * @protected
	     */
	    init: function init(option, parentModel, ecModel) {
	        /**
	         * @private
	         * @type {boolean}
	         */
	        this._autoSeriesIndex = false;
	
	        /**
	         * @private
	         * @type {Array.<number>}
	         */
	        this._dataExtent;
	
	        /**
	         * @readOnly
	         */
	        this.controllerVisuals = {};
	
	        /**
	         * @readOnly
	         */
	        this.targetVisuals = {};
	
	        /**
	         * @readOnly
	         */
	        this.textStyleModel;
	
	        /**
	         * [width, height]
	         * @readOnly
	         * @type {Array.<number>}
	         */
	        this.itemSize;
	
	        this.mergeDefaultAndTheme(option, ecModel);
	        this.doMergeOption({}, true);
	    },
	
	    /**
	     * @public
	     */
	    mergeOption: function mergeOption(option) {
	        VisualMapModel.superApply(this, 'mergeOption', arguments);
	        this.doMergeOption(option, false);
	    },
	
	    /**
	     * @protected
	     */
	    doMergeOption: function doMergeOption(newOption, isInit) {
	        var thisOption = this.option;
	
	        // FIXME
	        // necessary?
	        // Disable realtime view update if canvas is not supported.
	        if (!env.canvasSupported) {
	            thisOption.realtime = false;
	        }
	
	        this.textStyleModel = this.getModel('textStyle');
	
	        this.resetItemSize();
	
	        this.completeVisualOption();
	    },
	
	    /**
	     * @example
	     * this.formatValueText(someVal); // format single numeric value to text.
	     * this.formatValueText(someVal, true); // format single category value to text.
	     * this.formatValueText([min, max]); // format numeric min-max to text.
	     * this.formatValueText([this.dataBound[0], max]); // using data lower bound.
	     * this.formatValueText([min, this.dataBound[1]]); // using data upper bound.
	     *
	     * @param {number|Array.<number>} value Real value, or this.dataBound[0 or 1].
	     * @param {boolean} [isCategory=false] Only available when value is number.
	     * @return {string}
	     * @protected
	     */
	    formatValueText: function formatValueText(value, isCategory) {
	        var option = this.option;
	        var precision = option.precision;
	        var dataBound = this.dataBound;
	        var formatter = option.formatter;
	        var isMinMax;
	        var textValue;
	
	        if (zrUtil.isArray(value)) {
	            value = value.slice();
	            isMinMax = true;
	        }
	
	        textValue = isCategory ? value : isMinMax ? [toFixed(value[0]), toFixed(value[1])] : toFixed(value);
	
	        if (zrUtil.isString(formatter)) {
	            return formatter.replace('{value}', isMinMax ? textValue[0] : textValue).replace('{value2}', isMinMax ? textValue[1] : textValue);
	        } else if (zrUtil.isFunction(formatter)) {
	            return isMinMax ? formatter(value[0], value[1]) : formatter(value);
	        }
	
	        if (isMinMax) {
	            if (value[0] === dataBound[0]) {
	                return '< ' + textValue[1];
	            } else if (value[1] === dataBound[1]) {
	                return '> ' + textValue[0];
	            } else {
	                return textValue[0] + ' - ' + textValue[1];
	            }
	        } else {
	            // Format single value (includes category case).
	            return textValue;
	        }
	
	        function toFixed(val) {
	            return val === dataBound[0] ? 'min' : val === dataBound[1] ? 'max' : (+val).toFixed(precision);
	        }
	    },
	
	    /**
	     * @protected
	     */
	    resetTargetSeries: function resetTargetSeries(newOption, isInit) {
	        var thisOption = this.option;
	        var autoSeriesIndex = this._autoSeriesIndex = (isInit ? thisOption : newOption).seriesIndex == null;
	        thisOption.seriesIndex = autoSeriesIndex ? [] : modelUtil.normalizeToArray(thisOption.seriesIndex);
	
	        autoSeriesIndex && this.ecModel.eachSeries(function (seriesModel, index) {
	            var data = seriesModel.getData();
	            // FIXME
	            // 只考虑了list，还没有考虑map等。
	
	            // FIXME
	            // 这里可能应该这么判断：data.dimensions中有超出其所属coordSystem的量。
	            if (data.type === 'list') {
	                thisOption.seriesIndex.push(index);
	            }
	        });
	    },
	
	    /**
	     * @protected
	     */
	    resetExtent: function resetExtent() {
	        var thisOption = this.option;
	
	        // Can not calculate data extent by data here.
	        // Because series and data may be modified in processing stage.
	        // So we do not support the feature "auto min/max".
	
	        var extent = asc([thisOption.min, thisOption.max]);
	
	        this._dataExtent = extent;
	    },
	
	    /**
	     * @protected
	     */
	    getDataDimension: function getDataDimension(list) {
	        var optDim = this.option.dimension;
	        return optDim != null ? optDim : list.dimensions.length - 1;
	    },
	
	    /**
	     * @public
	     * @override
	     */
	    getExtent: function getExtent() {
	        return this._dataExtent.slice();
	    },
	
	    /**
	     * @protected
	     */
	    resetVisual: function resetVisual(fillVisualOption) {
	        var dataExtent = this.getExtent();
	
	        doReset.call(this, 'controller', this.controllerVisuals);
	        doReset.call(this, 'target', this.targetVisuals);
	
	        function doReset(baseAttr, visualMappings) {
	            each(this.stateList, function (state) {
	                var mappings = visualMappings[state] || (visualMappings[state] = {});
	                var visaulOption = this.option[baseAttr][state] || {};
	                each(visaulOption, function (visualData, visualType) {
	                    if (!VisualMapping.isValidType(visualType)) {
	                        return;
	                    }
	                    var mappingOption = {
	                        type: visualType,
	                        dataExtent: dataExtent,
	                        visual: visualData
	                    };
	                    fillVisualOption && fillVisualOption.call(this, mappingOption, state);
	                    mappings[visualType] = new VisualMapping(mappingOption);
	                }, this);
	            }, this);
	        }
	    },
	
	    /**
	     * @protected
	     */
	    completeVisualOption: function completeVisualOption() {
	        var thisOption = this.option;
	        var base = { inRange: thisOption.inRange, outOfRange: thisOption.outOfRange };
	
	        var target = thisOption.target || (thisOption.target = {});
	        var controller = thisOption.controller || (thisOption.controller = {});
	
	        zrUtil.merge(target, base); // Do not override
	        zrUtil.merge(controller, base); // Do not override
	
	        var isCategory = this.isCategory();
	
	        completeSingle.call(this, target);
	        completeSingle.call(this, controller);
	        completeInactive.call(this, target, 'inRange', 'outOfRange');
	        completeInactive.call(this, target, 'outOfRange', 'inRange');
	        completeController.call(this, controller);
	
	        function completeSingle(base) {
	            // Compatible with ec2 dataRange.color.
	            // The mapping order of dataRange.color is: [high value, ..., low value]
	            // whereas inRange.color and outOfRange.color is [low value, ..., high value]
	            // Notice: ec2 has no inverse.
	            if (isArray(thisOption.color)
	            // If there has been inRange: {symbol: ...}, adding color is a mistake.
	            // So adding color only when no inRange defined.
	             && !base.inRange) {
	                base.inRange = { color: thisOption.color.slice().reverse() };
	            }
	
	            // If using shortcut like: {inRange: 'symbol'}, complete default value.
	            each(this.stateList, function (state) {
	                var visualType = base[state];
	
	                if (zrUtil.isString(visualType)) {
	                    var defa = visualDefault.get(visualType, 'active', isCategory);
	                    if (defa) {
	                        base[state] = {};
	                        base[state][visualType] = defa;
	                    } else {
	                        // Mark as not specified.
	                        delete base[state];
	                    }
	                }
	            }, this);
	        }
	
	        function completeInactive(base, stateExist, stateAbsent) {
	            var optExist = base[stateExist];
	            var optAbsent = base[stateAbsent];
	
	            if (optExist && !optAbsent) {
	                optAbsent = base[stateAbsent] = {};
	                each(optExist, function (visualData, visualType) {
	                    var defa = visualDefault.get(visualType, 'inactive', isCategory);
	                    if (VisualMapping.isValidType(visualType) && defa) {
	                        optAbsent[visualType] = defa;
	                    }
	                });
	            }
	        }
	
	        function completeController(controller) {
	            var symbolExists = (controller.inRange || {}).symbol || (controller.outOfRange || {}).symbol;
	            var symbolSizeExists = (controller.inRange || {}).symbolSize || (controller.outOfRange || {}).symbolSize;
	            var inactiveColor = this.get('inactiveColor');
	
	            each(this.stateList, function (state) {
	
	                var itemSize = this.itemSize;
	                var visuals = controller[state];
	
	                // Set inactive color for controller if no other color attr (like colorAlpha) specified.
	                if (!visuals) {
	                    visuals = controller[state] = {
	                        color: isCategory ? inactiveColor : [inactiveColor]
	                    };
	                }
	
	                // Consistent symbol and symbolSize if not specified.
	                if (!visuals.symbol) {
	                    visuals.symbol = symbolExists && zrUtil.clone(symbolExists) || (isCategory ? 'roundRect' : ['roundRect']);
	                }
	                if (!visuals.symbolSize) {
	                    visuals.symbolSize = symbolSizeExists && zrUtil.clone(symbolSizeExists) || (isCategory ? itemSize[0] : [itemSize[0], itemSize[0]]);
	                }
	
	                // Filter square and none.
	                visuals.symbol = mapVisual(visuals.symbol, function (symbol) {
	                    return symbol === 'none' || symbol === 'square' ? 'roundRect' : symbol;
	                });
	
	                // Normalize symbolSize
	                var symbolSize = visuals.symbolSize;
	
	                if (symbolSize) {
	                    var max = -Infinity;
	                    // symbolSize can be object when categories defined.
	                    eachVisual(symbolSize, function (value) {
	                        value > max && (max = value);
	                    });
	                    visuals.symbolSize = mapVisual(symbolSize, function (value) {
	                        return linearMap(value, [0, max], [0, itemSize[0]], true);
	                    });
	                }
	            }, this);
	        }
	    },
	
	    /**
	     * @public
	     */
	    eachTargetSeries: function eachTargetSeries(callback, context) {
	        zrUtil.each(this.option.seriesIndex, function (seriesIndex) {
	            callback.call(context, this.ecModel.getSeriesByIndex(seriesIndex));
	        }, this);
	    },
	
	    /**
	     * @public
	     */
	    isCategory: function isCategory() {
	        return !!this.option.categories;
	    },
	
	    /**
	     * @protected
	     */
	    resetItemSize: function resetItemSize() {
	        this.itemSize = [parseFloat(this.get('itemWidth')), parseFloat(this.get('itemHeight'))];
	    },
	
	    /**
	     * @public
	     * @abstract
	     */
	    setSelected: zrUtil.noop,
	
	    /**
	     * @public
	     * @abstract
	     */
	    getValueState: zrUtil.noop
	
	});
	
	module.exports = VisualMapModel;

/***/ },
/* 528 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Visual mapping.
	 */
	
	var zrUtil = __webpack_require__(224);
	
	var visualDefault = {
	
	    /**
	     * @public
	     */
	    get: function get(visualType, key, isCategory) {
	        var value = zrUtil.clone((defaultOption[visualType] || {})[key]);
	
	        return isCategory ? zrUtil.isArray(value) ? value[value.length - 1] : value : value;
	    }
	
	};
	
	var defaultOption = {
	
	    color: {
	        active: ['#006edd', '#e0ffff'],
	        inactive: ['rgba(0,0,0,0)']
	    },
	
	    colorHue: {
	        active: [0, 360],
	        inactive: [0, 0]
	    },
	
	    colorSaturation: {
	        active: [0.3, 1],
	        inactive: [0, 0]
	    },
	
	    colorLightness: {
	        active: [0.9, 0.5],
	        inactive: [0, 0]
	    },
	
	    colorAlpha: {
	        active: [0.3, 1],
	        inactive: [0, 0]
	    },
	
	    symbol: {
	        active: ['circle', 'roundRect', 'diamond'],
	        inactive: ['none']
	    },
	
	    symbolSize: {
	        active: [10, 50],
	        inactive: [0, 0]
	    }
	};
	
	module.exports = visualDefault;

/***/ },
/* 529 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var VisualMapView = __webpack_require__(530);
	var graphic = __webpack_require__(263);
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var sliderMove = __webpack_require__(515);
	var linearMap = numberUtil.linearMap;
	var LinearGradient = __webpack_require__(296);
	var helper = __webpack_require__(531);
	var each = zrUtil.each;
	
	// Notice:
	// Any "interval" should be by the order of [low, high].
	// "handle0" (handleIndex === 0) maps to
	// low data value: this._dataInterval[0] and has low coord.
	// "handle1" (handleIndex === 1) maps to
	// high data value: this._dataInterval[1] and has high coord.
	// The logic of transform is implemented in this._createBarGroup.
	
	var ContinuousVisualMapView = VisualMapView.extend({
	
	    type: 'visualMap.continuous',
	
	    /**
	     * @override
	     */
	    init: function init() {
	
	        VisualMapView.prototype.init.apply(this, arguments);
	
	        /**
	         * @private
	         */
	        this._shapes = {};
	
	        /**
	         * @private
	         */
	        this._dataInterval = [];
	
	        /**
	         * @private
	         */
	        this._handleEnds = [];
	
	        /**
	         * @private
	         */
	        this._orient;
	
	        /**
	         * @private
	         */
	        this._useHandle;
	    },
	
	    /**
	     * @protected
	     * @override
	     */
	    doRender: function doRender(visualMapModel, ecModel, api, payload) {
	        if (!payload || payload.type !== 'selectDataRange' || payload.from !== this.uid) {
	            this._buildView();
	        } else {
	            this._updateView();
	        }
	    },
	
	    /**
	     * @private
	     */
	    _buildView: function _buildView() {
	        this.group.removeAll();
	
	        var visualMapModel = this.visualMapModel;
	        var thisGroup = this.group;
	
	        this._orient = visualMapModel.get('orient');
	        this._useHandle = visualMapModel.get('calculable');
	
	        this._resetInterval();
	
	        this._renderBar(thisGroup);
	
	        var dataRangeText = visualMapModel.get('text');
	        this._renderEndsText(thisGroup, dataRangeText, 0);
	        this._renderEndsText(thisGroup, dataRangeText, 1);
	
	        // Do this for background size calculation.
	        this._updateView(true);
	
	        // After updating view, inner shapes is built completely,
	        // and then background can be rendered.
	        this.renderBackground(thisGroup);
	
	        // Real update view
	        this._updateView();
	
	        this.positionGroup(thisGroup);
	    },
	
	    /**
	     * @private
	     */
	    _renderEndsText: function _renderEndsText(group, dataRangeText, endsIndex) {
	        if (!dataRangeText) {
	            return;
	        }
	
	        // Compatible with ec2, text[0] map to high value, text[1] map low value.
	        var text = dataRangeText[1 - endsIndex];
	        text = text != null ? text + '' : '';
	
	        var visualMapModel = this.visualMapModel;
	        var textGap = visualMapModel.get('textGap');
	        var itemSize = visualMapModel.itemSize;
	
	        var barGroup = this._shapes.barGroup;
	        var position = this._applyTransform([itemSize[0] / 2, endsIndex === 0 ? -textGap : itemSize[1] + textGap], barGroup);
	        var align = this._applyTransform(endsIndex === 0 ? 'bottom' : 'top', barGroup);
	        var orient = this._orient;
	        var textStyleModel = this.visualMapModel.textStyleModel;
	
	        this.group.add(new graphic.Text({
	            style: {
	                x: position[0],
	                y: position[1],
	                textVerticalAlign: orient === 'horizontal' ? 'middle' : align,
	                textAlign: orient === 'horizontal' ? align : 'center',
	                text: text,
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        }));
	    },
	
	    /**
	     * @private
	     */
	    _renderBar: function _renderBar(targetGroup) {
	        var visualMapModel = this.visualMapModel;
	        var shapes = this._shapes;
	        var itemSize = visualMapModel.itemSize;
	        var orient = this._orient;
	        var useHandle = this._useHandle;
	        var itemAlign = helper.getItemAlign(visualMapModel, this.api, itemSize);
	        var barGroup = shapes.barGroup = this._createBarGroup(itemAlign);
	
	        // Bar
	        barGroup.add(shapes.outOfRange = createPolygon());
	        barGroup.add(shapes.inRange = createPolygon(null, zrUtil.bind(this._modifyHandle, this, 'all'), useHandle ? 'move' : null));
	
	        var textRect = visualMapModel.textStyleModel.getTextRect('国');
	        var textSize = Math.max(textRect.width, textRect.height);
	
	        // Handle
	        if (useHandle) {
	            shapes.handleGroups = [];
	            shapes.handleThumbs = [];
	            shapes.handleLabels = [];
	            shapes.handleLabelPoints = [];
	
	            this._createHandle(barGroup, 0, itemSize, textSize, orient, itemAlign);
	            this._createHandle(barGroup, 1, itemSize, textSize, orient, itemAlign);
	        }
	
	        // Indicator
	        // FIXME
	
	        targetGroup.add(barGroup);
	    },
	
	    /**
	     * @private
	     */
	    _createHandle: function _createHandle(barGroup, handleIndex, itemSize, textSize, orient) {
	        var handleGroup = new graphic.Group({ position: [itemSize[0], 0] });
	        var handleThumb = createPolygon(createHandlePoints(handleIndex, textSize), zrUtil.bind(this._modifyHandle, this, handleIndex), 'move');
	        handleGroup.add(handleThumb);
	
	        // For text locating. Text is always horizontal layout
	        // but should not be effected by transform.
	        var handleLabelPoint = {
	            x: orient === 'horizontal' ? textSize / 2 : textSize * 1.5,
	            y: orient === 'horizontal' ? handleIndex === 0 ? -(textSize * 1.5) : textSize * 1.5 : handleIndex === 0 ? -textSize / 2 : textSize / 2
	        };
	
	        var textStyleModel = this.visualMapModel.textStyleModel;
	        var handleLabel = new graphic.Text({
	            silent: true,
	            style: {
	                x: 0, y: 0, text: '',
	                textVerticalAlign: 'middle',
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        });
	
	        this.group.add(handleLabel); // Text do not transform
	
	        var shapes = this._shapes;
	        shapes.handleThumbs[handleIndex] = handleThumb;
	        shapes.handleGroups[handleIndex] = handleGroup;
	        shapes.handleLabelPoints[handleIndex] = handleLabelPoint;
	        shapes.handleLabels[handleIndex] = handleLabel;
	
	        barGroup.add(handleGroup);
	    },
	
	    /**
	     * @private
	     */
	    _modifyHandle: function _modifyHandle(handleIndex, dx, dy) {
	        if (!this._useHandle) {
	            return;
	        }
	
	        // Transform dx, dy to bar coordination.
	        var vertex = this._applyTransform([dx, dy], this._shapes.barGroup, true);
	        this._updateInterval(handleIndex, vertex[1]);
	
	        this.api.dispatchAction({
	            type: 'selectDataRange',
	            from: this.uid,
	            visualMapId: this.visualMapModel.id,
	            selected: this._dataInterval.slice()
	        });
	    },
	
	    /**
	     * @private
	     */
	    _resetInterval: function _resetInterval() {
	        var visualMapModel = this.visualMapModel;
	
	        var dataInterval = this._dataInterval = visualMapModel.getSelected();
	        var dataExtent = visualMapModel.getExtent();
	        var sizeExtent = [0, visualMapModel.itemSize[1]];
	
	        this._handleEnds = [linearMap(dataInterval[0], dataExtent, sizeExtent, true), linearMap(dataInterval[1], dataExtent, sizeExtent, true)];
	    },
	
	    /**
	     * @private
	     * @param {(number|string)} handleIndex 0 or 1 or 'all'
	     * @param {number} dx
	     * @param {number} dy
	     */
	    _updateInterval: function _updateInterval(handleIndex, delta) {
	        delta = delta || 0;
	        var visualMapModel = this.visualMapModel;
	        var handleEnds = this._handleEnds;
	
	        sliderMove(delta, handleEnds, [0, visualMapModel.itemSize[1]], handleIndex === 'all' ? 'rigid' : 'push', handleIndex);
	        var dataExtent = visualMapModel.getExtent();
	        var sizeExtent = [0, visualMapModel.itemSize[1]];
	        // Update data interval.
	        this._dataInterval = [linearMap(handleEnds[0], sizeExtent, dataExtent, true), linearMap(handleEnds[1], sizeExtent, dataExtent, true)];
	    },
	
	    /**
	     * @private
	     */
	    _updateView: function _updateView(forSketch) {
	        var visualMapModel = this.visualMapModel;
	        var dataExtent = visualMapModel.getExtent();
	        var shapes = this._shapes;
	        var dataInterval = this._dataInterval;
	
	        var outOfRangeHandleEnds = [0, visualMapModel.itemSize[1]];
	        var inRangeHandleEnds = forSketch ? outOfRangeHandleEnds : this._handleEnds;
	
	        var visualInRange = this._createBarVisual(dataInterval, dataExtent, inRangeHandleEnds, 'inRange');
	        var visualOutOfRange = this._createBarVisual(dataExtent, dataExtent, outOfRangeHandleEnds, 'outOfRange');
	
	        shapes.inRange.setStyle('fill', visualInRange.barColor).setShape('points', visualInRange.barPoints);
	        shapes.outOfRange.setStyle('fill', visualOutOfRange.barColor).setShape('points', visualOutOfRange.barPoints);
	
	        this._useHandle && each([0, 1], function (handleIndex) {
	
	            shapes.handleThumbs[handleIndex].setStyle('fill', visualInRange.handlesColor[handleIndex]);
	
	            shapes.handleLabels[handleIndex].setStyle({
	                text: visualMapModel.formatValueText(dataInterval[handleIndex]),
	                textAlign: this._applyTransform(this._orient === 'horizontal' ? handleIndex === 0 ? 'bottom' : 'top' : 'left', shapes.barGroup)
	            });
	        }, this);
	
	        this._updateHandlePosition(inRangeHandleEnds);
	    },
	
	    /**
	     * @private
	     */
	    _createBarVisual: function _createBarVisual(dataInterval, dataExtent, handleEnds, forceState) {
	        var colorStops = this.getControllerVisual(dataInterval, forceState, 'color').color;
	
	        var symbolSizes = [this.getControllerVisual(dataInterval[0], forceState, 'symbolSize').symbolSize, this.getControllerVisual(dataInterval[1], forceState, 'symbolSize').symbolSize];
	        var barPoints = this._createBarPoints(handleEnds, symbolSizes);
	
	        return {
	            barColor: new LinearGradient(0, 0, 1, 1, colorStops),
	            barPoints: barPoints,
	            handlesColor: [colorStops[0].color, colorStops[colorStops.length - 1].color]
	        };
	    },
	
	    /**
	     * @private
	     */
	    _createBarPoints: function _createBarPoints(handleEnds, symbolSizes) {
	        var itemSize = this.visualMapModel.itemSize;
	
	        return [[itemSize[0] - symbolSizes[0], handleEnds[0]], [itemSize[0], handleEnds[0]], [itemSize[0], handleEnds[1]], [itemSize[0] - symbolSizes[1], handleEnds[1]]];
	    },
	
	    /**
	     * @private
	     */
	    _createBarGroup: function _createBarGroup(itemAlign) {
	        var orient = this._orient;
	        var inverse = this.visualMapModel.get('inverse');
	
	        return new graphic.Group(orient === 'horizontal' && !inverse ? { scale: itemAlign === 'bottom' ? [1, 1] : [-1, 1], rotation: Math.PI / 2 } : orient === 'horizontal' && inverse ? { scale: itemAlign === 'bottom' ? [-1, 1] : [1, 1], rotation: -Math.PI / 2 } : orient === 'vertical' && !inverse ? { scale: itemAlign === 'left' ? [1, -1] : [-1, -1] } : { scale: itemAlign === 'left' ? [1, 1] : [-1, 1] });
	    },
	
	    /**
	     * @private
	     */
	    _updateHandlePosition: function _updateHandlePosition(handleEnds) {
	        if (!this._useHandle) {
	            return;
	        }
	
	        var shapes = this._shapes;
	
	        each([0, 1], function (handleIndex) {
	            var handleGroup = shapes.handleGroups[handleIndex];
	            handleGroup.position[1] = handleEnds[handleIndex];
	
	            // Update handle label position.
	            var labelPoint = shapes.handleLabelPoints[handleIndex];
	            var textPoint = graphic.applyTransform([labelPoint.x, labelPoint.y], graphic.getTransform(handleGroup, this.group));
	
	            shapes.handleLabels[handleIndex].setStyle({
	                x: textPoint[0], y: textPoint[1]
	            });
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _applyTransform: function _applyTransform(vertex, element, inverse) {
	        var transform = graphic.getTransform(element, this.group);
	
	        return graphic[zrUtil.isArray(vertex) ? 'applyTransform' : 'transformDirection'](vertex, transform, inverse);
	    }
	
	});
	
	function createPolygon(points, onDrift, cursor) {
	    return new graphic.Polygon({
	        shape: { points: points },
	        draggable: !!onDrift,
	        cursor: cursor,
	        drift: onDrift
	    });
	}
	
	function createHandlePoints(handleIndex, textSize) {
	    return handleIndex === 0 ? [[0, 0], [textSize, 0], [textSize, -textSize]] : [[0, 0], [textSize, 0], [textSize, textSize]];
	}
	
	module.exports = ContinuousVisualMapView;

/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var echarts = __webpack_require__(222);
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var formatUtil = __webpack_require__(227);
	var layout = __webpack_require__(242);
	var VisualMapping = __webpack_require__(408);
	
	module.exports = echarts.extendComponentView({
	
	    type: 'visualMap',
	
	    /**
	     * @readOnly
	     * @type {Object}
	     */
	    autoPositionValues: { left: 1, right: 1, top: 1, bottom: 1 },
	
	    init: function init(ecModel, api) {
	        /**
	         * @readOnly
	         * @type {module:echarts/model/Global}
	         */
	        this.ecModel = ecModel;
	
	        /**
	         * @readOnly
	         * @type {module:echarts/ExtensionAPI}
	         */
	        this.api = api;
	
	        /**
	         * @readOnly
	         * @type {module:echarts/component/visualMap/visualMapModel}
	         */
	        this.visualMapModel;
	
	        /**
	         * @private
	         * @type {Object}
	         */
	        this._updatableShapes = {};
	    },
	
	    /**
	     * @protected
	     */
	    render: function render(visualMapModel, ecModel, api, payload) {
	        this.visualMapModel = visualMapModel;
	
	        if (visualMapModel.get('show') === false) {
	            this.group.removeAll();
	            return;
	        }
	
	        this.doRender.apply(this, arguments);
	    },
	
	    /**
	     * @protected
	     */
	    renderBackground: function renderBackground(group) {
	        var visualMapModel = this.visualMapModel;
	        var padding = formatUtil.normalizeCssArray(visualMapModel.get('padding') || 0);
	        var rect = group.getBoundingRect();
	
	        group.add(new graphic.Rect({
	            z2: -1, // Lay background rect on the lowest layer.
	            silent: true,
	            shape: {
	                x: rect.x - padding[3],
	                y: rect.y - padding[0],
	                width: rect.width + padding[3] + padding[1],
	                height: rect.height + padding[0] + padding[2]
	            },
	            style: {
	                fill: visualMapModel.get('backgroundColor'),
	                stroke: visualMapModel.get('borderColor'),
	                lineWidth: visualMapModel.get('borderWidth')
	            }
	        }));
	    },
	
	    /**
	     * @protected
	     * @param {(number|Array)} targetValue
	     * @param {string=} forceState Specify state, instead of using getValueState method.
	     * @param {string=} visualCluster Specify visual type, defualt all available visualClusters.
	     */
	    getControllerVisual: function getControllerVisual(targetValue, forceState, visualCluster) {
	        var visualMapModel = this.visualMapModel;
	        var targetIsArray = zrUtil.isArray(targetValue);
	
	        // targetValue is array when caculate gradient color,
	        // where forceState is required.
	        if (targetIsArray && (!forceState || visualCluster !== 'color')) {
	            throw new Error(targetValue);
	        }
	
	        var mappings = visualMapModel.controllerVisuals[forceState || visualMapModel.getValueState(targetValue)];
	        var defaultColor = visualMapModel.get('contentColor');
	        var visualObj = {
	            symbol: visualMapModel.get('itemSymbol'),
	            color: targetIsArray ? [{ color: defaultColor, offset: 0 }, { color: defaultColor, offset: 1 }] : defaultColor
	        };
	
	        function getter(key) {
	            return visualObj[key];
	        }
	
	        function setter(key, value) {
	            visualObj[key] = value;
	        }
	
	        var visualTypes = VisualMapping.prepareVisualTypes(mappings);
	
	        zrUtil.each(visualTypes, function (type) {
	            var visualMapping = mappings[type];
	            if (!visualCluster || VisualMapping.isInVisualCluster(type, visualCluster)) {
	                visualMapping && visualMapping.applyVisual(targetValue, getter, setter);
	            }
	        });
	
	        return visualObj;
	    },
	
	    /**
	     * @protected
	     */
	    positionGroup: function positionGroup(group) {
	        var model = this.visualMapModel;
	        var api = this.api;
	
	        layout.positionGroup(group, model.getBoxLayoutParams(), { width: api.getWidth(), height: api.getHeight() });
	    },
	
	    /**
	     * @protected
	     * @abstract
	     */
	    doRender: zrUtil.noop
	
	});

/***/ },
/* 531 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var layout = __webpack_require__(242);
	
	var helper = {
	
	    /**
	     * @param {module:echarts/component/visualMap/VisualMapModel} visualMapModel\
	     * @param {module:echarts/ExtensionAPI} api
	     * @param {Array.<number>} itemSize always [short, long]
	     * @return {string} 'left' or 'right' or 'top' or 'bottom'
	     */
	    getItemAlign: function getItemAlign(visualMapModel, api, itemSize) {
	        var modelOption = visualMapModel.option;
	        var itemAlign = modelOption.align;
	
	        if (itemAlign != null && itemAlign !== 'auto') {
	            return itemAlign;
	        }
	
	        // Auto decision align.
	        var ecSize = { width: api.getWidth(), height: api.getHeight() };
	        var realIndex = modelOption.orient === 'horizontal' ? 1 : 0;
	
	        var paramsSet = [['left', 'right', 'width'], ['top', 'bottom', 'height']];
	        var reals = paramsSet[realIndex];
	        var fakeValue = [0, null, 10];
	
	        var layoutInput = {};
	        for (var i = 0; i < 3; i++) {
	            layoutInput[paramsSet[1 - realIndex][i]] = fakeValue[i];
	            layoutInput[reals[i]] = i === 2 ? itemSize[0] : modelOption[reals[i]];
	        }
	
	        var rParam = [['x', 'width', 3], ['y', 'height', 0]][realIndex];
	        var rect = layout.getLayoutRect(layoutInput, ecSize, modelOption.padding);
	
	        return reals[(rect.margin[rParam[2]] || 0) + rect[rParam[0]] + rect[rParam[1]] * 0.5 < ecSize[rParam[1]] * 0.5 ? 0 : 1];
	    }
	};
	
	module.exports = helper;

/***/ },
/* 532 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data range action
	 */
	
	var echarts = __webpack_require__(222);
	
	var actionInfo = {
	    type: 'selectDataRange',
	    event: 'dataRangeSelected',
	    // FIXME use updateView appears wrong
	    update: 'update'
	};
	
	echarts.registerAction(actionInfo, function (payload, ecModel) {
	
	    ecModel.eachComponent({ mainType: 'visualMap', query: payload }, function (model) {
	        model.setSelected(payload.selected);
	    });
	});

/***/ },
/* 533 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * DataZoom component entry
	 */
	
	__webpack_require__(222).registerPreprocessor(__webpack_require__(523));
	
	__webpack_require__(524);
	__webpack_require__(525);
	__webpack_require__(534);
	__webpack_require__(535);
	__webpack_require__(532);

/***/ },
/* 534 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var VisualMapModel = __webpack_require__(527);
	var zrUtil = __webpack_require__(224);
	var VisualMapping = __webpack_require__(408);
	
	var PiecewiseModel = VisualMapModel.extend({
	
	    type: 'visualMap.piecewise',
	
	    /**
	     * Order Rule:
	     *
	     * option.categories / option.pieces / option.text / option.selected:
	     *     If !option.inverse,
	     *     Order when vertical: ['top', ..., 'bottom'].
	     *     Order when horizontal: ['left', ..., 'right'].
	     *     If option.inverse, the meaning of
	     *     the order should be reversed.
	     *
	     * this._pieceList:
	     *     The order is always [low, ..., high].
	     *
	     * Mapping from location to low-high:
	     *     If !option.inverse
	     *     When vertical, top is high.
	     *     When horizontal, right is high.
	     *     If option.inverse, reverse.
	     */
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	        selected: null, // Object. If not specified, means selected.
	        // When pieces and splitNumber: {'0': true, '5': true}
	        // When categories: {'cate1': false, 'cate3': true}
	        // When selected === false, means all unselected.
	        align: 'auto', // 'auto', 'left', 'right'
	        itemWidth: 20, // 值域图形宽度
	        itemHeight: 14, // 值域图形高度
	        itemSymbol: 'roundRect',
	        pieceList: null, // 值顺序：由高到低, item can be:
	        // {min, max, value, color, colorSaturation, colorAlpha, symbol, symbolSize}
	        categories: null, // 描述 category 数据。如：['some1', 'some2', 'some3']，设置后，min max失效。
	        splitNumber: 5, // 分割段数，默认为5，为0时为线性渐变 (continous)
	        selectedMode: 'multiple',
	        itemGap: 10 // 各个item之间的间隔，单位px，默认为10，
	        // 横向布局时为水平间隔，纵向布局时为纵向间隔
	    },
	
	    /**
	     * @override
	     */
	    doMergeOption: function doMergeOption(newOption, isInit) {
	        PiecewiseModel.superApply(this, 'doMergeOption', arguments);
	
	        /**
	         * The order is always [low, ..., high].
	         * [{text: string, interval: Array.<number>}, ...]
	         * @private
	         * @type {Array.<Object>}
	         */
	        this._pieceList = [];
	
	        this.resetTargetSeries(newOption, isInit);
	        this.resetExtent();
	
	        /**
	         * 'pieces', 'categories', 'splitNumber'
	         * @type {string}
	         */
	        var mode = this._mode = this._decideMode();
	
	        resetMethods[this._mode].call(this);
	
	        this._resetSelected(newOption, isInit);
	
	        var categories = this.option.categories;
	        this.resetVisual(function (mappingOption, state) {
	            if (mode === 'categories') {
	                mappingOption.mappingMethod = 'category';
	                mappingOption.categories = zrUtil.clone(categories);
	            } else {
	                mappingOption.mappingMethod = 'piecewise';
	                mappingOption.pieceList = zrUtil.map(this._pieceList, function (piece) {
	                    var piece = zrUtil.clone(piece);
	                    if (state !== 'inRange') {
	                        piece.visual = null;
	                    }
	                    return piece;
	                });
	            }
	        });
	    },
	
	    _resetSelected: function _resetSelected(newOption, isInit) {
	        var thisOption = this.option;
	        var pieceList = this._pieceList;
	
	        // Selected do not merge but all override.
	        var selected = (isInit ? thisOption : newOption).selected || {};
	        thisOption.selected = selected;
	
	        // Consider 'not specified' means true.
	        zrUtil.each(pieceList, function (piece, index) {
	            var key = this.getSelectedMapKey(piece);
	            if (!(key in selected)) {
	                selected[key] = true;
	            }
	        }, this);
	
	        if (thisOption.selectedMode === 'single') {
	            // Ensure there is only one selected.
	            var hasSel = false;
	
	            zrUtil.each(pieceList, function (piece, index) {
	                var key = this.getSelectedMapKey(piece);
	                if (selected[key]) {
	                    hasSel ? selected[key] = false : hasSel = true;
	                }
	            }, this);
	        }
	        // thisOption.selectedMode === 'multiple', default: all selected.
	    },
	
	    /**
	     * @public
	     */
	    getSelectedMapKey: function getSelectedMapKey(piece) {
	        return this._mode === 'categories' ? piece.value + '' : piece.index + '';
	    },
	
	    /**
	     * @public
	     */
	    getPieceList: function getPieceList() {
	        return this._pieceList;
	    },
	
	    /**
	     * @private
	     * @return {string}
	     */
	    _decideMode: function _decideMode() {
	        var option = this.option;
	
	        return option.pieces && option.pieces.length > 0 ? 'pieces' : this.option.categories ? 'categories' : 'splitNumber';
	    },
	
	    /**
	     * @public
	     * @override
	     */
	    setSelected: function setSelected(selected) {
	        this.option.selected = zrUtil.clone(selected);
	    },
	
	    /**
	     * @public
	     * @override
	     */
	    getValueState: function getValueState(value) {
	        var pieceList = this._pieceList;
	        var index = VisualMapping.findPieceIndex(value, pieceList);
	
	        return index != null ? this.option.selected[this.getSelectedMapKey(pieceList[index])] ? 'inRange' : 'outOfRange' : 'outOfRange';
	    }
	
	});
	
	/**
	 * Key is this._mode
	 * @type {Object}
	 * @this {module:echarts/component/viusalMap/PiecewiseMode}
	 */
	var resetMethods = {
	
	    splitNumber: function splitNumber() {
	        var thisOption = this.option;
	        var precision = thisOption.precision;
	        var dataExtent = this.getExtent();
	        var splitNumber = thisOption.splitNumber;
	        splitNumber = Math.max(parseInt(splitNumber, 10), 1);
	        thisOption.splitNumber = splitNumber;
	
	        var splitStep = (dataExtent[1] - dataExtent[0]) / splitNumber;
	        // Precision auto-adaption
	        while (+splitStep.toFixed(precision) !== splitStep && precision < 5) {
	            precision++;
	        }
	        thisOption.precision = precision;
	        splitStep = +splitStep.toFixed(precision);
	
	        for (var i = 0, curr = dataExtent[0]; i < splitNumber; i++, curr += splitStep) {
	            var max = i === splitNumber - 1 ? dataExtent[1] : curr + splitStep;
	
	            this._pieceList.push({
	                text: this.formatValueText([curr, max]),
	                index: i,
	                interval: [curr, max]
	            });
	        }
	    },
	
	    categories: function categories() {
	        var thisOption = this.option;
	        zrUtil.each(thisOption.categories, function (cate) {
	            // FIXME category模式也使用pieceList，但在visualMapping中不是使用pieceList。
	            // 是否改一致。
	            this._pieceList.push({
	                text: this.formatValueText(cate, true),
	                value: cate
	            });
	        }, this);
	
	        // See "Order Rule".
	        normalizeReverse(thisOption, this._pieceList);
	    },
	
	    pieces: function pieces() {
	        var thisOption = this.option;
	        zrUtil.each(thisOption.pieces, function (pieceListItem, index) {
	
	            if (!zrUtil.isObject(pieceListItem)) {
	                pieceListItem = { value: pieceListItem };
	            }
	
	            var item = { text: '', index: index };
	            var hasLabel;
	
	            if (pieceListItem.label != null) {
	                item.text = pieceListItem.label;
	                hasLabel = true;
	            }
	
	            if (pieceListItem.hasOwnProperty('value')) {
	                item.value = pieceListItem.value;
	
	                if (!hasLabel) {
	                    item.text = this.formatValueText(item.value);
	                }
	            } else {
	                var min = pieceListItem.min;
	                var max = pieceListItem.max;
	                min == null && (min = -Infinity);
	                max == null && (max = Infinity);
	                if (min === max) {
	                    // Consider: [{min: 5, max: 5, visual: {...}}, {min: 0, max: 5}],
	                    // we use value to lift the priority when min === max
	                    item.value = min;
	                }
	                item.interval = [min, max];
	
	                if (!hasLabel) {
	                    item.text = this.formatValueText([min, max]);
	                }
	            }
	
	            item.visual = VisualMapping.retrieveVisuals(pieceListItem);
	
	            this._pieceList.push(item);
	        }, this);
	
	        // See "Order Rule".
	        normalizeReverse(thisOption, this._pieceList);
	    }
	};
	
	function normalizeReverse(thisOption, arr) {
	    var inverse = thisOption.inverse;
	    if (thisOption.orient === 'vertical' ? !inverse : inverse) {
	        arr.reverse();
	    }
	}
	
	module.exports = PiecewiseModel;

/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var VisualMapView = __webpack_require__(530);
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var symbolCreators = __webpack_require__(321);
	var layout = __webpack_require__(242);
	var helper = __webpack_require__(531);
	
	var PiecewiseVisualMapView = VisualMapView.extend({
	
	    type: 'visualMap.piecewise',
	
	    /**
	     * @protected
	     * @override
	     */
	    doRender: function doRender() {
	        var thisGroup = this.group;
	
	        thisGroup.removeAll();
	
	        var visualMapModel = this.visualMapModel;
	        var textGap = visualMapModel.get('textGap');
	        var textStyleModel = visualMapModel.textStyleModel;
	        var textFont = textStyleModel.getFont();
	        var textFill = textStyleModel.getTextColor();
	        var itemAlign = this._getItemAlign();
	        var itemSize = visualMapModel.itemSize;
	
	        var viewData = this._getViewData();
	        var showLabel = !viewData.endsText;
	        var showEndsText = !showLabel;
	
	        showEndsText && this._renderEndsText(thisGroup, viewData.endsText[0], itemSize);
	
	        zrUtil.each(viewData.pieceList, renderItem, this);
	
	        showEndsText && this._renderEndsText(thisGroup, viewData.endsText[1], itemSize);
	
	        layout.box(visualMapModel.get('orient'), thisGroup, visualMapModel.get('itemGap'));
	
	        this.renderBackground(thisGroup);
	
	        this.positionGroup(thisGroup);
	
	        function renderItem(item) {
	            var itemGroup = new graphic.Group();
	            itemGroup.onclick = zrUtil.bind(this._onItemClick, this, item.piece);
	
	            this._createItemSymbol(itemGroup, item.piece, [0, 0, itemSize[0], itemSize[1]]);
	
	            if (showLabel) {
	                itemGroup.add(new graphic.Text({
	                    style: {
	                        x: itemAlign === 'right' ? -textGap : itemSize[0] + textGap,
	                        y: itemSize[1] / 2,
	                        text: item.piece.text,
	                        textVerticalAlign: 'middle',
	                        textAlign: itemAlign,
	                        textFont: textFont,
	                        fill: textFill
	                    }
	                }));
	            }
	
	            thisGroup.add(itemGroup);
	        }
	    },
	
	    /**
	     * @private
	     */
	    _getItemAlign: function _getItemAlign() {
	        var visualMapModel = this.visualMapModel;
	        var modelOption = visualMapModel.option;
	        if (modelOption.orient === 'vertical') {
	            return helper.getItemAlign(visualMapModel, this.api, visualMapModel.itemSize);
	        } else {
	            // horizontal, most case left unless specifying right.
	            var align = modelOption.align;
	            if (!align || align === 'auto') {
	                align = 'left';
	            }
	            return align;
	        }
	    },
	
	    /**
	     * @private
	     */
	    _renderEndsText: function _renderEndsText(group, text, itemSize) {
	        if (!text) {
	            return;
	        }
	        var itemGroup = new graphic.Group();
	        var textStyleModel = this.visualMapModel.textStyleModel;
	        itemGroup.add(new graphic.Text({
	            style: {
	                x: itemSize[0] / 2,
	                y: itemSize[1] / 2,
	                textVerticalAlign: 'middle',
	                textAlign: 'center',
	                text: text,
	                textFont: textStyleModel.getFont(),
	                fill: textStyleModel.getTextColor()
	            }
	        }));
	
	        group.add(itemGroup);
	    },
	
	    /**
	     * @private
	     * @return {Object} {peiceList, endsText} The order is the same as screen pixel order.
	     */
	    _getViewData: function _getViewData() {
	        var visualMapModel = this.visualMapModel;
	
	        var pieceList = zrUtil.map(visualMapModel.getPieceList(), function (piece, index) {
	            return { piece: piece, index: index };
	        });
	        var endsText = visualMapModel.get('text');
	
	        // Consider orient and inverse.
	        var orient = visualMapModel.get('orient');
	        var inverse = visualMapModel.get('inverse');
	
	        // Order of pieceList is always [low, ..., high]
	        if (orient === 'horizontal' ? inverse : !inverse) {
	            pieceList.reverse();
	        }
	        // Origin order of endsText is [high, low]
	        else if (endsText) {
	                endsText = endsText.slice().reverse();
	            }
	
	        return { pieceList: pieceList, endsText: endsText };
	    },
	
	    /**
	     * @private
	     */
	    _createItemSymbol: function _createItemSymbol(group, piece, shapeParam) {
	        var representValue;
	        if (this.visualMapModel.isCategory()) {
	            representValue = piece.value;
	        } else {
	            if (piece.value != null) {
	                representValue = piece.value;
	            } else {
	                var pieceInterval = piece.interval || [];
	                representValue = (pieceInterval[0] + pieceInterval[1]) / 2;
	            }
	        }
	
	        var visualObj = this.getControllerVisual(representValue);
	
	        group.add(symbolCreators.createSymbol(visualObj.symbol, shapeParam[0], shapeParam[1], shapeParam[2], shapeParam[3], visualObj.color));
	    },
	
	    /**
	     * @private
	     */
	    _onItemClick: function _onItemClick(piece) {
	        var visualMapModel = this.visualMapModel;
	        var option = visualMapModel.option;
	        var selected = zrUtil.clone(option.selected);
	        var newKey = visualMapModel.getSelectedMapKey(piece);
	
	        if (option.selectedMode === 'single') {
	            selected[newKey] = true;
	            zrUtil.each(selected, function (o, key) {
	                selected[key] = key === newKey;
	            });
	        } else {
	            selected[newKey] = !selected[newKey];
	        }
	
	        this.api.dispatchAction({
	            type: 'selectDataRange',
	            from: this.uid,
	            visualMapId: this.visualMapModel.id,
	            selected: selected
	        });
	    }
	});
	
	module.exports = PiecewiseVisualMapView;

/***/ },
/* 536 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// HINT Markpoint can't be used too much
	
	__webpack_require__(537);
	__webpack_require__(538);
	
	__webpack_require__(222).registerPreprocessor(function (opt) {
	    // Make sure markPoint component is enabled
	    opt.markPoint = opt.markPoint || {};
	});

/***/ },
/* 537 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Default enable markPoint
	// var globalDefault = require('../../model/globalDefault');
	var modelUtil = __webpack_require__(226);
	// // Force to load markPoint component
	// globalDefault.markPoint = {};
	
	var MarkPointModel = __webpack_require__(222).extendComponentModel({
	
	    type: 'markPoint',
	
	    dependencies: ['series', 'grid', 'polar'],
	    /**
	     * @overrite
	     */
	    init: function init(option, parentModel, ecModel, extraOpt) {
	        this.mergeDefaultAndTheme(option, ecModel);
	        this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	    },
	
	    mergeOption: function mergeOption(newOpt, ecModel, createdBySelf, isInit) {
	        if (!createdBySelf) {
	            ecModel.eachSeries(function (seriesModel) {
	                var markPointOpt = seriesModel.get('markPoint');
	                var mpModel = seriesModel.markPointModel;
	                if (!markPointOpt || !markPointOpt.data) {
	                    seriesModel.markPointModel = null;
	                    return;
	                }
	                if (!mpModel) {
	                    if (isInit) {
	                        // Default label emphasis `position` and `show`
	                        modelUtil.defaultEmphasis(markPointOpt.label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	                    }
	                    var opt = {
	                        // Use the same series index and name
	                        seriesIndex: seriesModel.seriesIndex,
	                        name: seriesModel.name,
	                        createdBySelf: true
	                    };
	                    mpModel = new MarkPointModel(markPointOpt, this, ecModel, opt);
	                } else {
	                    mpModel.mergeOption(markPointOpt, ecModel, true);
	                }
	                seriesModel.markPointModel = mpModel;
	            }, this);
	        }
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 5,
	        symbol: 'pin', // 标注类型
	        symbolSize: 50, // 标注大小
	        // symbolRotate: null, // 标注旋转控制
	        tooltip: {
	            trigger: 'item'
	        },
	        label: {
	            normal: {
	                show: true,
	                // 标签文本格式器，同Tooltip.formatter，不支持回调
	                // formatter: null,
	                // 可选为'left'|'right'|'top'|'bottom'
	                position: 'inside'
	                // 默认使用全局文本样式，详见TEXTSTYLE
	                // textStyle: null
	            },
	            emphasis: {
	                show: true
	                // 标签文本格式器，同Tooltip.formatter，不支持回调
	                // formatter: null,
	                // position: 'inside'  // 'left'|'right'|'top'|'bottom'
	                // textStyle: null     // 默认使用全局文本样式，详见TEXTSTYLE
	            }
	        },
	        itemStyle: {
	            normal: {
	                // color: 各异，
	                // 标注边线颜色，优先于color
	                // borderColor: 各异,
	                // 标注边线线宽，单位px，默认为1
	                borderWidth: 2
	            },
	            emphasis: {
	                // color: 各异
	            }
	        }
	    }
	});
	
	module.exports = MarkPointModel;

/***/ },
/* 538 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var SymbolDraw = __webpack_require__(319);
	var zrUtil = __webpack_require__(224);
	var formatUtil = __webpack_require__(227);
	var modelUtil = __webpack_require__(226);
	var numberUtil = __webpack_require__(228);
	
	var addCommas = formatUtil.addCommas;
	var encodeHTML = formatUtil.encodeHTML;
	
	var List = __webpack_require__(315);
	
	var markerHelper = __webpack_require__(539);
	
	// FIXME
	var markPointFormatMixin = {
	    getRawDataArray: function getRawDataArray() {
	        return this.option.data;
	    },
	
	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this.getData();
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	        var name = data.getName(dataIndex);
	        return this.name + '<br />' + ((name ? encodeHTML(name) + ' : ' : '') + formattedValue);
	    },
	
	    getData: function getData() {
	        return this._data;
	    },
	
	    setData: function setData(data) {
	        this._data = data;
	    }
	};
	
	zrUtil.defaults(markPointFormatMixin, modelUtil.dataFormatMixin);
	
	__webpack_require__(222).extendComponentView({
	
	    type: 'markPoint',
	
	    init: function init() {
	        this._symbolDrawMap = {};
	    },
	
	    render: function render(markPointModel, ecModel, api) {
	        var symbolDrawMap = this._symbolDrawMap;
	        for (var name in symbolDrawMap) {
	            symbolDrawMap[name].__keep = false;
	        }
	
	        ecModel.eachSeries(function (seriesModel) {
	            var mpModel = seriesModel.markPointModel;
	            mpModel && this._renderSeriesMP(seriesModel, mpModel, api);
	        }, this);
	
	        for (var name in symbolDrawMap) {
	            if (!symbolDrawMap[name].__keep) {
	                symbolDrawMap[name].remove();
	                this.group.remove(symbolDrawMap[name].group);
	            }
	        }
	    },
	
	    _renderSeriesMP: function _renderSeriesMP(seriesModel, mpModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var seriesName = seriesModel.name;
	        var seriesData = seriesModel.getData();
	
	        var symbolDrawMap = this._symbolDrawMap;
	        var symbolDraw = symbolDrawMap[seriesName];
	        if (!symbolDraw) {
	            symbolDraw = symbolDrawMap[seriesName] = new SymbolDraw();
	        }
	
	        var mpData = createList(coordSys, seriesModel, mpModel);
	        var dims = coordSys && coordSys.dimensions;
	
	        // FIXME
	        zrUtil.mixin(mpModel, markPointFormatMixin);
	        mpModel.setData(mpData);
	
	        mpData.each(function (idx) {
	            var itemModel = mpData.getItemModel(idx);
	            var point;
	            var xPx = itemModel.getShallow('x');
	            var yPx = itemModel.getShallow('y');
	            if (xPx != null && yPx != null) {
	                point = [numberUtil.parsePercent(xPx, api.getWidth()), numberUtil.parsePercent(yPx, api.getHeight())];
	            }
	            // Chart like bar may have there own marker positioning logic
	            else if (seriesModel.getMarkerPosition) {
	                    // Use the getMarkerPoisition
	                    point = seriesModel.getMarkerPosition(mpData.getValues(mpData.dimensions, idx));
	                } else if (coordSys) {
	                    var x = mpData.get(dims[0], idx);
	                    var y = mpData.get(dims[1], idx);
	                    point = coordSys.dataToPoint([x, y]);
	                }
	
	            mpData.setItemLayout(idx, point);
	
	            var symbolSize = itemModel.getShallow('symbolSize');
	            if (typeof symbolSize === 'function') {
	                // FIXME 这里不兼容 ECharts 2.x，2.x 貌似参数是整个数据？
	                symbolSize = symbolSize(mpModel.getRawValue(idx), mpModel.getDataParams(idx));
	            }
	            mpData.setItemVisual(idx, {
	                symbolSize: symbolSize,
	                color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color'),
	                symbol: itemModel.getShallow('symbol')
	            });
	        });
	
	        // TODO Text are wrong
	        symbolDraw.updateData(mpData);
	        this.group.add(symbolDraw.group);
	
	        // Set host model for tooltip
	        // FIXME
	        mpData.eachItemGraphicEl(function (el) {
	            el.traverse(function (child) {
	                child.hostModel = mpModel;
	            });
	        });
	
	        symbolDraw.__keep = true;
	    }
	});
	
	/**
	 * @inner
	 * @param {module:echarts/coord/*} [coordSys]
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */
	function createList(coordSys, seriesModel, mpModel) {
	    var coordDimsInfos = zrUtil.map(coordSys.dimensions, function (coordDim) {
	        var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]);
	        info.name = coordDim;
	        return info;
	    });
	
	    var mpData = new List(coordDimsInfos, mpModel);
	
	    if (coordSys) {
	        mpData.initData(zrUtil.filter(zrUtil.map(mpModel.get('data'), zrUtil.curry(markerHelper.dataTransform, seriesModel)), zrUtil.curry(markerHelper.dataFilter, coordSys)), null, markerHelper.dimValueGetter);
	    }
	
	    return mpData;
	}

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var indexOf = zrUtil.indexOf;
	
	function getPrecision(data, valueAxisDim, dataIndex) {
	    var precision = -1;
	    do {
	        precision = Math.max(numberUtil.getPrecision(data.get(valueAxisDim, dataIndex)), precision);
	        data = data.stackedOn;
	    } while (data);
	
	    return precision;
	}
	
	function markerTypeCalculatorWithExtent(mlType, data, baseDataDim, valueDataDim, baseCoordIndex, valueCoordIndex) {
	    var coordArr = [];
	    var value = numCalculate(data, valueDataDim, mlType);
	
	    var dataIndex = data.indexOfNearest(valueDataDim, value, true);
	    coordArr[baseCoordIndex] = data.get(baseDataDim, dataIndex, true);
	    coordArr[valueCoordIndex] = data.get(valueDataDim, dataIndex, true);
	
	    var precision = getPrecision(data, valueDataDim, dataIndex);
	    if (precision >= 0) {
	        coordArr[valueCoordIndex] = +coordArr[valueCoordIndex].toFixed(precision);
	    }
	
	    return coordArr;
	}
	
	var curry = zrUtil.curry;
	// TODO Specified percent
	var markerTypeCalculator = {
	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    min: curry(markerTypeCalculatorWithExtent, 'min'),
	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    max: curry(markerTypeCalculatorWithExtent, 'max'),
	    /**
	     * @method
	     * @param {module:echarts/data/List} data
	     * @param {string} baseAxisDim
	     * @param {string} valueAxisDim
	     */
	    average: curry(markerTypeCalculatorWithExtent, 'average')
	};
	
	/**
	 * Transform markPoint data item to format used in List by do the following
	 * 1. Calculate statistic like `max`, `min`, `average`
	 * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array
	 * @param  {module:echarts/model/Series} seriesModel
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {Object}
	 */
	var dataTransform = function dataTransform(seriesModel, item) {
	    var data = seriesModel.getData();
	    var coordSys = seriesModel.coordinateSystem;
	
	    // 1. If not specify the position with pixel directly
	    // 2. If `coord` is not a data array. Which uses `xAxis`,
	    // `yAxis` to specify the coord on each dimension
	    if ((isNaN(item.x) || isNaN(item.y)) && !zrUtil.isArray(item.coord) && coordSys) {
	        var axisInfo = getAxisInfo(item, data, coordSys, seriesModel);
	
	        // Clone the option
	        // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value
	        item = zrUtil.clone(item);
	
	        if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {
	            var dims = coordSys.dimensions;
	            var baseCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);
	            var valueCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);
	
	            item.coord = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, baseCoordIndex, valueCoordIndex);
	            // Force to use the value of calculated value.
	            item.value = item.coord[valueCoordIndex];
	        } else {
	            // FIXME Only has one of xAxis and yAxis.
	            item.coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis];
	        }
	    }
	    return item;
	};
	
	var getAxisInfo = function getAxisInfo(item, data, coordSys, seriesModel) {
	    var ret = {};
	
	    if (item.valueIndex != null || item.valueDim != null) {
	        ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;
	        ret.valueAxis = coordSys.getAxis(seriesModel.dataDimToCoordDim(ret.valueDataDim));
	        ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);
	        ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	    } else {
	        ret.baseAxis = seriesModel.getBaseAxis();
	        ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);
	        ret.baseDataDim = seriesModel.coordDimToDataDim(ret.baseAxis.dim)[0];
	        ret.valueDataDim = seriesModel.coordDimToDataDim(ret.valueAxis.dim)[0];
	    }
	
	    return ret;
	};
	
	/**
	 * Filter data which is out of coordinateSystem range
	 * [dataFilter description]
	 * @param  {module:echarts/coord/*} [coordSys]
	 * @param  {Object} item
	 * @return {boolean}
	 */
	var dataFilter = function dataFilter(coordSys, item) {
	    // Alwalys return true if there is no coordSys
	    return coordSys && item.coord && (item.x == null || item.y == null) ? coordSys.containData(item.coord) : true;
	};
	
	var dimValueGetter = function dimValueGetter(item, dimName, dataIndex, dimIndex) {
	    // x, y, radius, angle
	    if (dimIndex < 2) {
	        return item.coord && item.coord[dimIndex];
	    } else {
	        item.value;
	    }
	};
	
	var numCalculate = function numCalculate(data, valueDataDim, mlType) {
	    return mlType === 'average' ? data.getSum(valueDataDim, true) / data.count() : data.getDataExtent(valueDataDim, true)[mlType === 'max' ? 1 : 0];
	};
	
	module.exports = {
	    dataTransform: dataTransform,
	    dataFilter: dataFilter,
	    dimValueGetter: dimValueGetter,
	    getAxisInfo: getAxisInfo,
	    numCalculate: numCalculate
	};

/***/ },
/* 540 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(541);
	__webpack_require__(542);
	
	__webpack_require__(222).registerPreprocessor(function (opt) {
	    // Make sure markLine component is enabled
	    opt.markLine = opt.markLine || {};
	});

/***/ },
/* 541 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Default enable markLine
	// var globalDefault = require('../../model/globalDefault');
	var modelUtil = __webpack_require__(226);
	
	// // Force to load markLine component
	// globalDefault.markLine = {};
	
	var MarkLineModel = __webpack_require__(222).extendComponentModel({
	
	    type: 'markLine',
	
	    dependencies: ['series', 'grid', 'polar'],
	    /**
	     * @overrite
	     */
	    init: function init(option, parentModel, ecModel, extraOpt) {
	        this.mergeDefaultAndTheme(option, ecModel);
	        this.mergeOption(option, ecModel, extraOpt.createdBySelf, true);
	    },
	
	    mergeOption: function mergeOption(newOpt, ecModel, createdBySelf, isInit) {
	        if (!createdBySelf) {
	            ecModel.eachSeries(function (seriesModel) {
	                var markLineOpt = seriesModel.get('markLine');
	                var mlModel = seriesModel.markLineModel;
	                if (!markLineOpt || !markLineOpt.data) {
	                    seriesModel.markLineModel = null;
	                    return;
	                }
	                if (!mlModel) {
	                    if (isInit) {
	                        // Default label emphasis `position` and `show`
	                        modelUtil.defaultEmphasis(markLineOpt.label, ['position', 'show', 'textStyle', 'distance', 'formatter']);
	                    }
	                    var opt = {
	                        // Use the same series index and name
	                        seriesIndex: seriesModel.seriesIndex,
	                        name: seriesModel.name,
	                        createdBySelf: true
	                    };
	                    mlModel = new MarkLineModel(markLineOpt, this, ecModel, opt);
	                } else {
	                    mlModel.mergeOption(markLineOpt, ecModel, true);
	                }
	                seriesModel.markLineModel = mlModel;
	            }, this);
	        }
	    },
	
	    defaultOption: {
	        zlevel: 0,
	        z: 5,
	        // 标线起始和结束的symbol介绍类型，如果都一样，可以直接传string
	        symbol: ['circle', 'arrow'],
	        // 标线起始和结束的symbol大小，半宽（半径）参数，当图形为方向或菱形则总宽度为symbolSize * 2
	        symbolSize: [8, 16],
	        // 标线起始和结束的symbol旋转控制
	        //symbolRotate: null,
	        //smooth: false,
	        precision: 2,
	        tooltip: {
	            trigger: 'item'
	        },
	        label: {
	            normal: {
	                show: true,
	                // 标签文本格式器，同Tooltip.formatter，不支持回调
	                // formatter: null,
	                // 可选为 'start'|'end'|'left'|'right'|'top'|'bottom'
	                position: 'end'
	                // 默认使用全局文本样式，详见TEXTSTYLE
	                // textStyle: null
	            },
	            emphasis: {
	                show: true
	            }
	        },
	        lineStyle: {
	            normal: {
	                // color
	                // width
	                type: 'dashed'
	                // shadowColor: 'rgba(0,0,0,0)',
	                // shadowBlur: 0,
	                // shadowOffsetX: 0,
	                // shadowOffsetY: 0
	            },
	            emphasis: {
	                width: 3
	            }
	        },
	        animationEasing: 'linear'
	    }
	});
	
	module.exports = MarkLineModel;

/***/ },
/* 542 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var List = __webpack_require__(315);
	var formatUtil = __webpack_require__(227);
	var modelUtil = __webpack_require__(226);
	var numberUtil = __webpack_require__(228);
	
	var addCommas = formatUtil.addCommas;
	var encodeHTML = formatUtil.encodeHTML;
	
	var markerHelper = __webpack_require__(539);
	
	var LineDraw = __webpack_require__(415);
	
	var markLineTransform = function markLineTransform(seriesModel, coordSys, mlModel, item) {
	    var data = seriesModel.getData();
	    // Special type markLine like 'min', 'max', 'average'
	    var mlType = item.type;
	
	    if (!zrUtil.isArray(item) && (mlType === 'min' || mlType === 'max' || mlType === 'average')) {
	        var axisInfo = markerHelper.getAxisInfo(item, data, coordSys, seriesModel);
	
	        var baseAxisKey = axisInfo.baseAxis.dim + 'Axis';
	        var valueAxisKey = axisInfo.valueAxis.dim + 'Axis';
	        var baseScaleExtent = axisInfo.baseAxis.scale.getExtent();
	
	        var mlFrom = zrUtil.clone(item);
	        var mlTo = {};
	
	        mlFrom.type = null;
	
	        // FIXME Polar should use circle
	        mlFrom[baseAxisKey] = baseScaleExtent[0];
	        mlTo[baseAxisKey] = baseScaleExtent[1];
	
	        var value = markerHelper.numCalculate(data, axisInfo.valueDataDim, mlType);
	
	        // Round if axis is cateogry
	        value = axisInfo.valueAxis.coordToData(axisInfo.valueAxis.dataToCoord(value));
	
	        var precision = mlModel.get('precision');
	        if (precision >= 0) {
	            value = +value.toFixed(precision);
	        }
	
	        mlFrom[valueAxisKey] = mlTo[valueAxisKey] = value;
	
	        item = [mlFrom, mlTo, { // Extra option for tooltip and label
	            type: mlType,
	            valueIndex: item.valueIndex,
	            // Force to use the value of calculated value.
	            value: value
	        }];
	    }
	
	    item = [markerHelper.dataTransform(seriesModel, item[0]), markerHelper.dataTransform(seriesModel, item[1]), zrUtil.extend({}, item[2])];
	
	    // Avoid line data type is extended by from(to) data type
	    item[2].type = item[2].type || '';
	
	    // Merge from option and to option into line option
	    zrUtil.merge(item[2], item[0]);
	    zrUtil.merge(item[2], item[1]);
	
	    return item;
	};
	
	function markLineFilter(coordSys, item) {
	    return markerHelper.dataFilter(coordSys, item[0]) && markerHelper.dataFilter(coordSys, item[1]);
	}
	
	var markLineFormatMixin = {
	    formatTooltip: function formatTooltip(dataIndex) {
	        var data = this._data;
	        var value = this.getRawValue(dataIndex);
	        var formattedValue = zrUtil.isArray(value) ? zrUtil.map(value, addCommas).join(', ') : addCommas(value);
	        var name = data.getName(dataIndex);
	        return this.name + '<br />' + ((name ? encodeHTML(name) + ' : ' : '') + formattedValue);
	    },
	
	    getRawDataArray: function getRawDataArray() {
	        return this.option.data;
	    },
	
	    getData: function getData() {
	        return this._data;
	    },
	
	    setData: function setData(data) {
	        this._data = data;
	    }
	};
	
	zrUtil.defaults(markLineFormatMixin, modelUtil.dataFormatMixin);
	
	__webpack_require__(222).extendComponentView({
	
	    type: 'markLine',
	
	    init: function init() {
	        /**
	         * Markline grouped by series
	         * @private
	         * @type {Object}
	         */
	        this._markLineMap = {};
	    },
	
	    render: function render(markLineModel, ecModel, api) {
	        var lineDrawMap = this._markLineMap;
	        for (var name in lineDrawMap) {
	            lineDrawMap[name].__keep = false;
	        }
	
	        ecModel.eachSeries(function (seriesModel) {
	            var mlModel = seriesModel.markLineModel;
	            mlModel && this._renderSeriesML(seriesModel, mlModel, ecModel, api);
	        }, this);
	
	        for (var name in lineDrawMap) {
	            if (!lineDrawMap[name].__keep) {
	                this.group.remove(lineDrawMap[name].group);
	            }
	        }
	    },
	
	    _renderSeriesML: function _renderSeriesML(seriesModel, mlModel, ecModel, api) {
	        var coordSys = seriesModel.coordinateSystem;
	        var seriesName = seriesModel.name;
	        var seriesData = seriesModel.getData();
	
	        var lineDrawMap = this._markLineMap;
	        var lineDraw = lineDrawMap[seriesName];
	        if (!lineDraw) {
	            lineDraw = lineDrawMap[seriesName] = new LineDraw();
	        }
	        this.group.add(lineDraw.group);
	
	        var mlData = createList(coordSys, seriesModel, mlModel);
	        var dims = coordSys.dimensions;
	
	        var fromData = mlData.from;
	        var toData = mlData.to;
	        var lineData = mlData.line;
	
	        // Line data for tooltip and formatter
	        zrUtil.extend(mlModel, markLineFormatMixin);
	        mlModel.setData(lineData);
	
	        var symbolType = mlModel.get('symbol');
	        var symbolSize = mlModel.get('symbolSize');
	        if (!zrUtil.isArray(symbolType)) {
	            symbolType = [symbolType, symbolType];
	        }
	        if (typeof symbolSize === 'number') {
	            symbolSize = [symbolSize, symbolSize];
	        }
	
	        // Update visual and layout of from symbol and to symbol
	        mlData.from.each(function (idx) {
	            var lineModel = lineData.getItemModel(idx);
	            var mlType = lineModel.get('type');
	            var valueIndex = lineModel.get('valueIndex');
	            updateDataVisualAndLayout(fromData, idx, true, mlType, valueIndex);
	            updateDataVisualAndLayout(toData, idx, false, mlType, valueIndex);
	        });
	
	        // Update visual and layout of line
	        lineData.each(function (idx) {
	            var lineColor = lineData.getItemModel(idx).get('lineStyle.normal.color');
	            lineData.setItemVisual(idx, {
	                color: lineColor || fromData.getItemVisual(idx, 'color')
	            });
	            lineData.setItemLayout(idx, [fromData.getItemLayout(idx), toData.getItemLayout(idx)]);
	        });
	
	        lineDraw.updateData(lineData, fromData, toData);
	
	        // Set host model for tooltip
	        // FIXME
	        mlData.line.eachItemGraphicEl(function (el, idx) {
	            el.traverse(function (child) {
	                child.hostModel = mlModel;
	            });
	        });
	
	        function updateDataVisualAndLayout(data, idx, isFrom, mlType, valueIndex) {
	            var itemModel = data.getItemModel(idx);
	
	            var point;
	            var xPx = itemModel.get('x');
	            var yPx = itemModel.get('y');
	            if (xPx != null && yPx != null) {
	                point = [numberUtil.parsePercent(xPx, api.getWidth()), numberUtil.parsePercent(yPx, api.getHeight())];
	            } else {
	                // Chart like bar may have there own marker positioning logic
	                if (seriesModel.getMarkerPosition) {
	                    // Use the getMarkerPoisition
	                    point = seriesModel.getMarkerPosition(data.getValues(data.dimensions, idx));
	                } else {
	                    var x = data.get(dims[0], idx);
	                    var y = data.get(dims[1], idx);
	                    point = coordSys.dataToPoint([x, y]);
	                }
	                // Expand min, max, average line to the edge of grid
	                // FIXME Glue code
	                if (mlType && coordSys.type === 'cartesian2d') {
	                    var mlOnAxis = valueIndex != null ? coordSys.getAxis(valueIndex === 1 ? 'x' : 'y') : coordSys.getAxesByScale('ordinal')[0];
	                    if (mlOnAxis && mlOnAxis.onBand) {
	                        point[mlOnAxis.dim === 'x' ? 0 : 1] = mlOnAxis.toGlobalCoord(mlOnAxis.getExtent()[isFrom ? 0 : 1]);
	                    }
	                }
	            }
	
	            data.setItemLayout(idx, point);
	
	            data.setItemVisual(idx, {
	                symbolSize: itemModel.get('symbolSize') || symbolSize[isFrom ? 0 : 1],
	                symbol: itemModel.get('symbol', true) || symbolType[isFrom ? 0 : 1],
	                color: itemModel.get('itemStyle.normal.color') || seriesData.getVisual('color')
	            });
	        }
	
	        lineDraw.__keep = true;
	    }
	});
	
	/**
	 * @inner
	 * @param {module:echarts/coord/*} coordSys
	 * @param {module:echarts/model/Series} seriesModel
	 * @param {module:echarts/model/Model} mpModel
	 */
	function createList(coordSys, seriesModel, mlModel) {
	
	    var coordDimsInfos = zrUtil.map(coordSys.dimensions, function (coordDim) {
	        var info = seriesModel.getData().getDimensionInfo(seriesModel.coordDimToDataDim(coordDim)[0]);
	        info.name = coordDim;
	        return info;
	    });
	    var fromData = new List(coordDimsInfos, mlModel);
	    var toData = new List(coordDimsInfos, mlModel);
	    // No dimensions
	    var lineData = new List([], mlModel);
	
	    if (coordSys) {
	        var optData = zrUtil.filter(zrUtil.map(mlModel.get('data'), zrUtil.curry(markLineTransform, seriesModel, coordSys, mlModel)), zrUtil.curry(markLineFilter, coordSys));
	        fromData.initData(zrUtil.map(optData, function (item) {
	            return item[0];
	        }), null, markerHelper.dimValueGetter);
	        toData.initData(zrUtil.map(optData, function (item) {
	            return item[1];
	        }), null, markerHelper.dimValueGetter);
	        lineData.initData(zrUtil.map(optData, function (item) {
	            return item[2];
	        }));
	    }
	    return {
	        from: fromData,
	        to: toData,
	        line: lineData
	    };
	}

/***/ },
/* 543 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * DataZoom component entry
	 */
	
	var echarts = __webpack_require__(222);
	
	echarts.registerPreprocessor(__webpack_require__(544));
	
	__webpack_require__(545);
	__webpack_require__(546);
	__webpack_require__(547);
	__webpack_require__(549);

/***/ },
/* 544 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Timeline preprocessor
	 */
	
	var zrUtil = __webpack_require__(224);
	
	module.exports = function (option) {
	    var timelineOpt = option && option.timeline;
	
	    if (!zrUtil.isArray(timelineOpt)) {
	        timelineOpt = timelineOpt ? [timelineOpt] : [];
	    }
	
	    zrUtil.each(timelineOpt, function (opt) {
	        if (!opt) {
	            return;
	        }
	
	        compatibleEC2(opt);
	    });
	};
	
	function compatibleEC2(opt) {
	    var type = opt.type;
	
	    var ec2Types = { 'number': 'value', 'time': 'time' };
	
	    // Compatible with ec2
	    if (ec2Types[type]) {
	        opt.axisType = ec2Types[type];
	        delete opt.type;
	    }
	
	    transferItem(opt);
	
	    if (has(opt, 'controlPosition')) {
	        var controlStyle = opt.controlStyle || (opt.controlStyle = {});
	        if (!has(controlStyle, 'position')) {
	            controlStyle.position = opt.controlPosition;
	        }
	        if (controlStyle.position === 'none' && !has(controlStyle, 'show')) {
	            controlStyle.show = false;
	            delete controlStyle.position;
	        }
	        delete opt.controlPosition;
	    }
	
	    zrUtil.each(opt.data || [], function (dataItem) {
	        if (zrUtil.isObject(dataItem) && !zrUtil.isArray(dataItem)) {
	            if (!has(dataItem, 'value') && has(dataItem, 'name')) {
	                // In ec2, using name as value.
	                dataItem.value = dataItem.name;
	            }
	            transferItem(dataItem);
	        }
	    });
	}
	
	function transferItem(opt) {
	    var itemStyle = opt.itemStyle || (opt.itemStyle = {});
	
	    var itemStyleEmphasis = itemStyle.emphasis || (itemStyle.emphasis = {});
	
	    // Transfer label out
	    var label = opt.label || opt.label || {};
	    var labelNormal = label.normal || (label.normal = {});
	    var excludeLabelAttr = { normal: 1, emphasis: 1 };
	
	    zrUtil.each(label, function (value, name) {
	        if (!excludeLabelAttr[name] && !has(labelNormal, name)) {
	            labelNormal[name] = value;
	        }
	    });
	
	    if (itemStyleEmphasis.label && !has(label, 'emphasis')) {
	        label.emphasis = itemStyleEmphasis.label;
	        delete itemStyleEmphasis.label;
	    }
	}
	
	function has(obj, attr) {
	    return obj.hasOwnProperty(attr);
	}

/***/ },
/* 545 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(240).registerSubTypeDefaulter('timeline', function () {
	    // Only slider now.
	    return 'slider';
	});

/***/ },
/* 546 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Timeilne action
	 */
	
	var echarts = __webpack_require__(222);
	
	echarts.registerAction({ type: 'timelineChange', event: 'timelineChanged', update: 'prepareAndUpdate' }, function (payload, ecModel) {
	
	    var timelineModel = ecModel.getComponent('timeline');
	    if (timelineModel && payload.currentIndex != null) {
	        timelineModel.setCurrentIndex(payload.currentIndex);
	
	        if (!timelineModel.get('loop', true) && timelineModel.isIndexMax()) {
	            timelineModel.setPlayState(false);
	        }
	    }
	
	    ecModel.resetOption('timeline');
	});
	
	echarts.registerAction({ type: 'timelinePlayChange', event: 'timelinePlayChanged', update: 'update' }, function (payload, ecModel) {
	    var timelineModel = ecModel.getComponent('timeline');
	    if (timelineModel && payload.playState != null) {
	        timelineModel.setPlayState(payload.playState);
	    }
	});

/***/ },
/* 547 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Silder timeline model
	 */
	
	var TimelineModel = __webpack_require__(548);
	
	module.exports = TimelineModel.extend({
	
	    type: 'timeline.slider',
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	
	        backgroundColor: 'rgba(0,0,0,0)', // 时间轴背景颜色
	        borderColor: '#ccc', // 时间轴边框颜色
	        borderWidth: 0, // 时间轴边框线宽，单位px，默认为0（无边框）
	
	        orient: 'horizontal', // 'vertical'
	        inverse: false,
	
	        tooltip: { // boolean or Object
	            trigger: 'item' // data item may also have tootip attr.
	        },
	
	        symbol: 'emptyCircle',
	        symbolSize: 10,
	
	        lineStyle: {
	            show: true,
	            width: 2,
	            color: '#304654'
	        },
	        label: { // 文本标签
	            position: 'auto', // auto left right top bottom
	            // When using number, label position is not
	            // restricted by viewRect.
	            // positive: right/bottom, negative: left/top
	            normal: {
	                show: true,
	                interval: 'auto',
	                rotate: 0,
	                // formatter: null,
	                textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: '#304654'
	                }
	            },
	            emphasis: {
	                show: true,
	                textStyle: { // 其余属性默认使用全局文本样式，详见TEXTSTYLE
	                    color: '#c23531'
	                }
	            }
	        },
	        itemStyle: {
	            normal: {
	                color: '#304654',
	                borderWidth: 1
	            },
	            emphasis: {
	                color: '#c23531'
	            }
	        },
	
	        checkpointStyle: {
	            symbol: 'circle',
	            symbolSize: 13,
	            color: '#c23531',
	            borderWidth: 5,
	            borderColor: 'rgba(194,53,49, 0.5)',
	            animation: true,
	            animationDuration: 300,
	            animationEasing: 'quinticInOut'
	        },
	
	        controlStyle: {
	            show: true,
	            showPlayBtn: true,
	            showPrevBtn: true,
	            showNextBtn: true,
	            itemSize: 22,
	            itemGap: 12,
	            position: 'left', // 'left' 'right' 'top' 'bottom'
	            playIcon: 'path://M31.6,53C17.5,53,6,41.5,6,27.4S17.5,1.8,31.6,1.8C45.7,1.8,57.2,13.3,57.2,27.4S45.7,53,31.6,53z M31.6,3.3 C18.4,3.3,7.5,14.1,7.5,27.4c0,13.3,10.8,24.1,24.1,24.1C44.9,51.5,55.7,40.7,55.7,27.4C55.7,14.1,44.9,3.3,31.6,3.3z M24.9,21.3 c0-2.2,1.6-3.1,3.5-2l10.5,6.1c1.899,1.1,1.899,2.9,0,4l-10.5,6.1c-1.9,1.1-3.5,0.2-3.5-2V21.3z', // jshint ignore:line
	            stopIcon: 'path://M30.9,53.2C16.8,53.2,5.3,41.7,5.3,27.6S16.8,2,30.9,2C45,2,56.4,13.5,56.4,27.6S45,53.2,30.9,53.2z M30.9,3.5C17.6,3.5,6.8,14.4,6.8,27.6c0,13.3,10.8,24.1,24.101,24.1C44.2,51.7,55,40.9,55,27.6C54.9,14.4,44.1,3.5,30.9,3.5z M36.9,35.8c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H36c0.5,0,0.9,0.4,0.9,1V35.8z M27.8,35.8 c0,0.601-0.4,1-0.9,1h-1.3c-0.5,0-0.9-0.399-0.9-1V19.5c0-0.6,0.4-1,0.9-1H27c0.5,0,0.9,0.4,0.9,1L27.8,35.8L27.8,35.8z', // jshint ignore:line
	            nextIcon: 'path://M18.6,50.8l22.5-22.5c0.2-0.2,0.3-0.4,0.3-0.7c0-0.3-0.1-0.5-0.3-0.7L18.7,4.4c-0.1-0.1-0.2-0.3-0.2-0.5 c0-0.4,0.3-0.8,0.8-0.8c0.2,0,0.5,0.1,0.6,0.3l23.5,23.5l0,0c0.2,0.2,0.3,0.4,0.3,0.7c0,0.3-0.1,0.5-0.3,0.7l-0.1,0.1L19.7,52 c-0.1,0.1-0.3,0.2-0.5,0.2c-0.4,0-0.8-0.3-0.8-0.8C18.4,51.2,18.5,51,18.6,50.8z', // jshint ignore:line
	            prevIcon: 'path://M43,52.8L20.4,30.3c-0.2-0.2-0.3-0.4-0.3-0.7c0-0.3,0.1-0.5,0.3-0.7L42.9,6.4c0.1-0.1,0.2-0.3,0.2-0.5 c0-0.4-0.3-0.8-0.8-0.8c-0.2,0-0.5,0.1-0.6,0.3L18.3,28.8l0,0c-0.2,0.2-0.3,0.4-0.3,0.7c0,0.3,0.1,0.5,0.3,0.7l0.1,0.1L41.9,54 c0.1,0.1,0.3,0.2,0.5,0.2c0.4,0,0.8-0.3,0.8-0.8C43.2,53.2,43.1,53,43,52.8z', // jshint ignore:line
	            normal: {
	                color: '#304654',
	                borderColor: '#304654',
	                borderWidth: 1
	            },
	            emphasis: {
	                color: '#c23531',
	                borderColor: '#c23531',
	                borderWidth: 2
	            }
	        },
	        data: []
	    }
	
	});

/***/ },
/* 548 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Timeline model
	 */
	
	var ComponentModel = __webpack_require__(240);
	var List = __webpack_require__(315);
	var zrUtil = __webpack_require__(224);
	var modelUtil = __webpack_require__(226);
	
	var TimelineModel = ComponentModel.extend({
	
	    type: 'timeline',
	
	    layoutMode: 'box',
	
	    /**
	     * @protected
	     */
	    defaultOption: {
	
	        zlevel: 0, // 一级层叠
	        z: 4, // 二级层叠
	        show: true,
	
	        axisType: 'time', // 模式是时间类型，支持 value, category
	
	        realtime: true,
	
	        left: '20%',
	        top: null,
	        right: '20%',
	        bottom: 0,
	        width: null,
	        height: 40,
	        padding: 5,
	
	        controlPosition: 'left', // 'left' 'right' 'top' 'bottom' 'none'
	        autoPlay: false,
	        rewind: false, // 反向播放
	        loop: true,
	        playInterval: 2000, // 播放时间间隔，单位ms
	
	        currentIndex: 0,
	
	        itemStyle: {
	            normal: {},
	            emphasis: {}
	        },
	        label: {
	            normal: {
	                textStyle: {
	                    color: '#000'
	                }
	            },
	            emphasis: {}
	        },
	
	        data: []
	    },
	
	    /**
	     * @override
	     */
	    init: function init(option, parentModel, ecModel) {
	
	        /**
	         * @private
	         * @type {module:echarts/data/List}
	         */
	        this._data;
	
	        /**
	         * @private
	         * @type {Array.<string>}
	         */
	        this._names;
	
	        this.mergeDefaultAndTheme(option, ecModel);
	        this._initData();
	    },
	
	    /**
	     * @override
	     */
	    mergeOption: function mergeOption(option) {
	        TimelineModel.superApply(this, 'mergeOption', arguments);
	        this._initData();
	    },
	
	    /**
	     * @param {number} [currentIndex]
	     */
	    setCurrentIndex: function setCurrentIndex(currentIndex) {
	        if (currentIndex == null) {
	            currentIndex = this.option.currentIndex;
	        }
	        var count = this._data.count();
	
	        if (this.option.loop) {
	            currentIndex = (currentIndex % count + count) % count;
	        } else {
	            currentIndex >= count && (currentIndex = count - 1);
	            currentIndex < 0 && (currentIndex = 0);
	        }
	
	        this.option.currentIndex = currentIndex;
	    },
	
	    /**
	     * @return {number} currentIndex
	     */
	    getCurrentIndex: function getCurrentIndex() {
	        return this.option.currentIndex;
	    },
	
	    /**
	     * @return {boolean}
	     */
	    isIndexMax: function isIndexMax() {
	        return this.getCurrentIndex() >= this._data.count() - 1;
	    },
	
	    /**
	     * @param {boolean} state true: play, false: stop
	     */
	    setPlayState: function setPlayState(state) {
	        this.option.autoPlay = !!state;
	    },
	
	    /**
	     * @return {boolean} true: play, false: stop
	     */
	    getPlayState: function getPlayState() {
	        return !!this.option.autoPlay;
	    },
	
	    /**
	     * @private
	     */
	    _initData: function _initData() {
	        var thisOption = this.option;
	        var dataArr = thisOption.data || [];
	        var axisType = thisOption.axisType;
	        var names = this._names = [];
	
	        if (axisType === 'category') {
	            var idxArr = [];
	            zrUtil.each(dataArr, function (item, index) {
	                var value = modelUtil.getDataItemValue(item);
	                var newItem;
	
	                if (zrUtil.isObject(item)) {
	                    newItem = zrUtil.clone(item);
	                    newItem.value = index;
	                } else {
	                    newItem = index;
	                }
	
	                idxArr.push(newItem);
	
	                if (!zrUtil.isString(value) && (value == null || isNaN(value))) {
	                    value = '';
	                }
	
	                names.push(value + '');
	            });
	            dataArr = idxArr;
	        }
	
	        var dimType = { category: 'ordinal', time: 'time' }[axisType] || 'number';
	
	        var data = this._data = new List([{ name: 'value', type: dimType }], this);
	
	        data.initData(dataArr, names);
	    },
	
	    getData: function getData() {
	        return this._data;
	    },
	
	    /**
	     * @public
	     * @return {Array.<string>} categoreis
	     */
	    getCategories: function getCategories() {
	        if (this.get('axisType') === 'category') {
	            return this._names.slice();
	        }
	    }
	
	});
	
	module.exports = TimelineModel;

/***/ },
/* 549 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Silder timeline view
	 */
	
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var layout = __webpack_require__(242);
	var TimelineView = __webpack_require__(550);
	var TimelineAxis = __webpack_require__(551);
	var symbolUtil = __webpack_require__(321);
	var axisHelper = __webpack_require__(329);
	var BoundingRect = __webpack_require__(236);
	var matrix = __webpack_require__(238);
	var numberUtil = __webpack_require__(228);
	var modelUtil = __webpack_require__(226);
	var formatUtil = __webpack_require__(227);
	var encodeHTML = formatUtil.encodeHTML;
	
	var bind = zrUtil.bind;
	var each = zrUtil.each;
	
	var PI = Math.PI;
	
	module.exports = TimelineView.extend({
	
	    type: 'timeline.slider',
	
	    init: function init(ecModel, api) {
	
	        this.api = api;
	
	        /**
	         * @private
	         * @type {module:echarts/component/timeline/TimelineAxis}
	         */
	        this._axis;
	
	        /**
	         * @private
	         * @type {module:zrender/core/BoundingRect}
	         */
	        this._viewRect;
	
	        /**
	         * @type {number}
	         */
	        this._timer;
	
	        /**
	         * @type {module:zrende/Element}
	         */
	        this._currentPointer;
	
	        /**
	         * @type {module:zrender/container/Group}
	         */
	        this._mainGroup;
	
	        /**
	         * @type {module:zrender/container/Group}
	         */
	        this._labelGroup;
	    },
	
	    /**
	     * @override
	     */
	    render: function render(timelineModel, ecModel, api, payload) {
	        this.model = timelineModel;
	        this.api = api;
	        this.ecModel = ecModel;
	
	        this.group.removeAll();
	
	        if (timelineModel.get('show', true)) {
	
	            var layoutInfo = this._layout(timelineModel, api);
	            var mainGroup = this._createGroup('mainGroup');
	            var labelGroup = this._createGroup('labelGroup');
	
	            /**
	             * @private
	             * @type {module:echarts/component/timeline/TimelineAxis}
	             */
	            var axis = this._axis = this._createAxis(layoutInfo, timelineModel);
	
	            each(['AxisLine', 'AxisTick', 'Control', 'CurrentPointer'], function (name) {
	                this['_render' + name](layoutInfo, mainGroup, axis, timelineModel);
	            }, this);
	
	            this._renderAxisLabel(layoutInfo, labelGroup, axis, timelineModel);
	
	            this._position(layoutInfo, timelineModel);
	        }
	
	        this._doPlayStop();
	    },
	
	    /**
	     * @override
	     */
	    remove: function remove() {
	        this._clearTimer();
	        this.group.removeAll();
	    },
	
	    /**
	     * @override
	     */
	    dispose: function dispose() {
	        this._clearTimer();
	    },
	
	    _layout: function _layout(timelineModel, api) {
	        var labelPosOpt = timelineModel.get('label.normal.position');
	        var orient = timelineModel.get('orient');
	        var viewRect = getViewRect(timelineModel, api);
	        // Auto label offset.
	        if (labelPosOpt == null || labelPosOpt === 'auto') {
	            labelPosOpt = orient === 'horizontal' ? viewRect.y + viewRect.height / 2 < api.getHeight() / 2 ? '-' : '+' : viewRect.x + viewRect.width / 2 < api.getWidth() / 2 ? '+' : '-';
	        } else if (isNaN(labelPosOpt)) {
	            labelPosOpt = {
	                horizontal: { top: '-', bottom: '+' },
	                vertical: { left: '-', right: '+' }
	            }[orient][labelPosOpt];
	        }
	
	        // FIXME
	        // 暂没有实现用户传入
	        // var labelAlign = timelineModel.get('label.normal.textStyle.align');
	        // var labelBaseline = timelineModel.get('label.normal.textStyle.baseline');
	        var labelAlignMap = {
	            horizontal: 'center',
	            vertical: labelPosOpt >= 0 || labelPosOpt === '+' ? 'left' : 'right'
	        };
	
	        var labelBaselineMap = {
	            horizontal: labelPosOpt >= 0 || labelPosOpt === '+' ? 'top' : 'bottom',
	            vertical: 'middle'
	        };
	        var rotationMap = {
	            horizontal: 0,
	            vertical: PI / 2
	        };
	
	        // Position
	        var mainLength = orient === 'vertical' ? viewRect.height : viewRect.width;
	
	        var controlModel = timelineModel.getModel('controlStyle');
	        var showControl = controlModel.get('show');
	        var controlSize = showControl ? controlModel.get('itemSize') : 0;
	        var controlGap = showControl ? controlModel.get('itemGap') : 0;
	        var sizePlusGap = controlSize + controlGap;
	
	        // Special label rotate.
	        var labelRotation = timelineModel.get('label.normal.rotate') || 0;
	        labelRotation = labelRotation * PI / 180; // To radian.
	
	        var playPosition;
	        var prevBtnPosition;
	        var nextBtnPosition;
	        var axisExtent;
	        var controlPosition = controlModel.get('position', true);
	        var showControl = controlModel.get('show', true);
	        var showPlayBtn = showControl && controlModel.get('showPlayBtn', true);
	        var showPrevBtn = showControl && controlModel.get('showPrevBtn', true);
	        var showNextBtn = showControl && controlModel.get('showNextBtn', true);
	        var xLeft = 0;
	        var xRight = mainLength;
	
	        // position[0] means left, position[1] means middle.
	        if (controlPosition === 'left' || controlPosition === 'bottom') {
	            showPlayBtn && (playPosition = [0, 0], xLeft += sizePlusGap);
	            showPrevBtn && (prevBtnPosition = [xLeft, 0], xLeft += sizePlusGap);
	            showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	        } else {
	            // 'top' 'right'
	            showPlayBtn && (playPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	            showPrevBtn && (prevBtnPosition = [0, 0], xLeft += sizePlusGap);
	            showNextBtn && (nextBtnPosition = [xRight - controlSize, 0], xRight -= sizePlusGap);
	        }
	        axisExtent = [xLeft, xRight];
	
	        if (timelineModel.get('inverse')) {
	            axisExtent.reverse();
	        }
	
	        return {
	            viewRect: viewRect,
	            mainLength: mainLength,
	            orient: orient,
	
	            rotation: rotationMap[orient],
	            labelRotation: labelRotation,
	            labelPosOpt: labelPosOpt,
	            labelAlign: labelAlignMap[orient],
	            labelBaseline: labelBaselineMap[orient],
	
	            // Based on mainGroup.
	            playPosition: playPosition,
	            prevBtnPosition: prevBtnPosition,
	            nextBtnPosition: nextBtnPosition,
	            axisExtent: axisExtent,
	
	            controlSize: controlSize,
	            controlGap: controlGap
	        };
	    },
	
	    _position: function _position(layoutInfo, timelineModel) {
	        // Position is be called finally, because bounding rect is needed for
	        // adapt content to fill viewRect (auto adapt offset).
	
	        // Timeline may be not all in the viewRect when 'offset' is specified
	        // as a number, because it is more appropriate that label aligns at
	        // 'offset' but not the other edge defined by viewRect.
	
	        var mainGroup = this._mainGroup;
	        var labelGroup = this._labelGroup;
	
	        var viewRect = layoutInfo.viewRect;
	        if (layoutInfo.orient === 'vertical') {
	            // transfrom to horizontal, inverse rotate by left-top point.
	            var m = matrix.create();
	            var rotateOriginX = viewRect.x;
	            var rotateOriginY = viewRect.y + viewRect.height;
	            matrix.translate(m, m, [-rotateOriginX, -rotateOriginY]);
	            matrix.rotate(m, m, -PI / 2);
	            matrix.translate(m, m, [rotateOriginX, rotateOriginY]);
	            viewRect = viewRect.clone();
	            viewRect.applyTransform(m);
	        }
	
	        var viewBound = getBound(viewRect);
	        var mainBound = getBound(mainGroup.getBoundingRect());
	        var labelBound = getBound(labelGroup.getBoundingRect());
	
	        var mainPosition = mainGroup.position;
	        var labelsPosition = labelGroup.position;
	
	        labelsPosition[0] = mainPosition[0] = viewBound[0][0];
	
	        var labelPosOpt = layoutInfo.labelPosOpt;
	
	        if (isNaN(labelPosOpt)) {
	            // '+' or '-'
	            var mainBoundIdx = labelPosOpt === '+' ? 0 : 1;
	            toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	            toBound(labelsPosition, labelBound, viewBound, 1, 1 - mainBoundIdx);
	        } else {
	            var mainBoundIdx = labelPosOpt >= 0 ? 0 : 1;
	            toBound(mainPosition, mainBound, viewBound, 1, mainBoundIdx);
	            labelsPosition[1] = mainPosition[1] + labelPosOpt;
	        }
	
	        mainGroup.position = mainPosition;
	        labelGroup.position = labelsPosition;
	        mainGroup.rotation = labelGroup.rotation = layoutInfo.rotation;
	
	        setOrigin(mainGroup);
	        setOrigin(labelGroup);
	
	        function setOrigin(targetGroup) {
	            var pos = targetGroup.position;
	            targetGroup.origin = [viewBound[0][0] - pos[0], viewBound[1][0] - pos[1]];
	        }
	
	        function getBound(rect) {
	            // [[xmin, xmax], [ymin, ymax]]
	            return [[rect.x, rect.x + rect.width], [rect.y, rect.y + rect.height]];
	        }
	
	        function toBound(fromPos, from, to, dimIdx, boundIdx) {
	            fromPos[dimIdx] += to[dimIdx][boundIdx] - from[dimIdx][boundIdx];
	        }
	    },
	
	    _createAxis: function _createAxis(layoutInfo, timelineModel) {
	        var data = timelineModel.getData();
	        var axisType = timelineModel.get('axisType');
	
	        var scale = axisHelper.createScaleByModel(timelineModel, axisType);
	        var dataExtent = data.getDataExtent('value');
	        scale.setExtent(dataExtent[0], dataExtent[1]);
	        this._customizeScale(scale, data);
	        scale.niceTicks();
	
	        var axis = new TimelineAxis('value', scale, layoutInfo.axisExtent, axisType);
	        axis.model = timelineModel;
	
	        return axis;
	    },
	
	    _customizeScale: function _customizeScale(scale, data) {
	
	        scale.getTicks = function () {
	            return data.mapArray(['value'], function (value) {
	                return value;
	            });
	        };
	
	        scale.getTicksLabels = function () {
	            return zrUtil.map(this.getTicks(), scale.getLabel, scale);
	        };
	    },
	
	    _createGroup: function _createGroup(name) {
	        var newGroup = this['_' + name] = new graphic.Group();
	        this.group.add(newGroup);
	        return newGroup;
	    },
	
	    _renderAxisLine: function _renderAxisLine(layoutInfo, group, axis, timelineModel) {
	        var axisExtent = axis.getExtent();
	
	        if (!timelineModel.get('lineStyle.show')) {
	            return;
	        }
	
	        group.add(new graphic.Line({
	            shape: {
	                x1: axisExtent[0], y1: 0,
	                x2: axisExtent[1], y2: 0
	            },
	            style: zrUtil.extend({ lineCap: 'round' }, timelineModel.getModel('lineStyle').getLineStyle()),
	            silent: true,
	            z2: 1
	        }));
	    },
	
	    /**
	     * @private
	     */
	    _renderAxisTick: function _renderAxisTick(layoutInfo, group, axis, timelineModel) {
	        var data = timelineModel.getData();
	        var ticks = axis.scale.getTicks();
	        var tooltipHostModel = this._prepareTooltipHostModel(data, timelineModel);
	
	        each(ticks, function (value, dataIndex) {
	
	            var tickCoord = axis.dataToCoord(value);
	            var itemModel = data.getItemModel(dataIndex);
	            var itemStyleModel = itemModel.getModel('itemStyle.normal');
	            var hoverStyleModel = itemModel.getModel('itemStyle.emphasis');
	            var symbolOpt = {
	                position: [tickCoord, 0],
	                onclick: bind(this._changeTimeline, this, dataIndex)
	            };
	            var el = giveSymbol(itemModel, itemStyleModel, group, symbolOpt);
	            graphic.setHoverStyle(el, hoverStyleModel.getItemStyle());
	
	            if (itemModel.get('tooltip')) {
	                el.dataIndex = dataIndex;
	                el.hostModel = tooltipHostModel;
	            } else {
	                el.dataIndex = el.hostModel = null;
	            }
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _prepareTooltipHostModel: function _prepareTooltipHostModel(data, timelineModel) {
	        var tooltipHostModel = modelUtil.createDataFormatModel({}, data, timelineModel.get('data'));
	        var me = this;
	
	        tooltipHostModel.formatTooltip = function (dataIndex) {
	            return encodeHTML(me._axis.scale.getLabel(dataIndex));
	        };
	
	        return tooltipHostModel;
	    },
	
	    /**
	     * @private
	     */
	    _renderAxisLabel: function _renderAxisLabel(layoutInfo, group, axis, timelineModel) {
	        var labelModel = timelineModel.getModel('label.normal');
	
	        if (!labelModel.get('show')) {
	            return;
	        }
	
	        var data = timelineModel.getData();
	        var ticks = axis.scale.getTicks();
	        var labels = axisHelper.getFormattedLabels(axis, labelModel.get('formatter'));
	        var labelInterval = axis.getLabelInterval();
	
	        each(ticks, function (tick, dataIndex) {
	            if (axis.isLabelIgnored(dataIndex, labelInterval)) {
	                return;
	            }
	
	            var itemModel = data.getItemModel(dataIndex);
	            var itemTextStyleModel = itemModel.getModel('label.normal.textStyle');
	            var hoverTextStyleModel = itemModel.getModel('label.emphasis.textStyle');
	            var tickCoord = axis.dataToCoord(tick);
	            var textEl = new graphic.Text({
	                style: {
	                    text: labels[dataIndex],
	                    textAlign: layoutInfo.labelAlign,
	                    textVerticalAlign: layoutInfo.labelBaseline,
	                    textFont: itemTextStyleModel.getFont(),
	                    fill: itemTextStyleModel.getTextColor()
	                },
	                position: [tickCoord, 0],
	                rotation: layoutInfo.labelRotation - layoutInfo.rotation,
	                onclick: bind(this._changeTimeline, this, dataIndex),
	                silent: false
	            });
	
	            group.add(textEl);
	            graphic.setHoverStyle(textEl, hoverTextStyleModel.getItemStyle());
	        }, this);
	    },
	
	    /**
	     * @private
	     */
	    _renderControl: function _renderControl(layoutInfo, group, axis, timelineModel) {
	        var controlSize = layoutInfo.controlSize;
	        var rotation = layoutInfo.rotation;
	
	        var itemStyle = timelineModel.getModel('controlStyle.normal').getItemStyle();
	        var hoverStyle = timelineModel.getModel('controlStyle.emphasis').getItemStyle();
	        var rect = [0, -controlSize / 2, controlSize, controlSize];
	        var playState = timelineModel.getPlayState();
	        var inverse = timelineModel.get('inverse', true);
	
	        makeBtn(layoutInfo.nextBtnPosition, 'controlStyle.nextIcon', bind(this._changeTimeline, this, inverse ? '-' : '+'));
	        makeBtn(layoutInfo.prevBtnPosition, 'controlStyle.prevIcon', bind(this._changeTimeline, this, inverse ? '+' : '-'));
	        makeBtn(layoutInfo.playPosition, 'controlStyle.' + (playState ? 'stopIcon' : 'playIcon'), bind(this._handlePlayClick, this, !playState), true);
	
	        function makeBtn(position, iconPath, onclick, willRotate) {
	            if (!position) {
	                return;
	            }
	            var opt = {
	                position: position,
	                origin: [controlSize / 2, 0],
	                rotation: willRotate ? -rotation : 0,
	                rectHover: true,
	                style: itemStyle,
	                onclick: onclick
	            };
	            var btn = makeIcon(timelineModel, iconPath, rect, opt);
	            group.add(btn);
	            graphic.setHoverStyle(btn, hoverStyle);
	        }
	    },
	
	    _renderCurrentPointer: function _renderCurrentPointer(layoutInfo, group, axis, timelineModel) {
	        var data = timelineModel.getData();
	        var currentIndex = timelineModel.getCurrentIndex();
	        var pointerModel = data.getItemModel(currentIndex).getModel('checkpointStyle');
	        var me = this;
	
	        var callback = {
	            onCreate: function onCreate(pointer) {
	                pointer.draggable = true;
	                pointer.drift = bind(me._handlePointerDrag, me);
	                pointer.ondragend = bind(me._handlePointerDragend, me);
	                pointerMoveTo(pointer, currentIndex, axis, timelineModel, true);
	            },
	            onUpdate: function onUpdate(pointer) {
	                pointerMoveTo(pointer, currentIndex, axis, timelineModel);
	            }
	        };
	
	        // Reuse when exists, for animation and drag.
	        this._currentPointer = giveSymbol(pointerModel, pointerModel, this._mainGroup, {}, this._currentPointer, callback);
	    },
	
	    _handlePlayClick: function _handlePlayClick(nextState) {
	        this._clearTimer();
	        this.api.dispatchAction({
	            type: 'timelinePlayChange',
	            playState: nextState,
	            from: this.uid
	        });
	    },
	
	    _handlePointerDrag: function _handlePointerDrag(dx, dy, e) {
	        this._clearTimer();
	        this._pointerChangeTimeline([e.offsetX, e.offsetY]);
	    },
	
	    _handlePointerDragend: function _handlePointerDragend(e) {
	        this._pointerChangeTimeline([e.offsetX, e.offsetY], true);
	    },
	
	    _pointerChangeTimeline: function _pointerChangeTimeline(mousePos, trigger) {
	        var toCoord = this._toAxisCoord(mousePos)[0];
	
	        var axis = this._axis;
	        var axisExtent = numberUtil.asc(axis.getExtent().slice());
	
	        toCoord > axisExtent[1] && (toCoord = axisExtent[1]);
	        toCoord < axisExtent[0] && (toCoord = axisExtent[0]);
	
	        this._currentPointer.position[0] = toCoord;
	        this._currentPointer.dirty();
	
	        var targetDataIndex = this._findNearestTick(toCoord);
	        var timelineModel = this.model;
	
	        if (trigger || targetDataIndex !== timelineModel.getCurrentIndex() && timelineModel.get('realtime')) {
	            this._changeTimeline(targetDataIndex);
	        }
	    },
	
	    _doPlayStop: function _doPlayStop() {
	        this._clearTimer();
	
	        if (this.model.getPlayState()) {
	            this._timer = setTimeout(bind(handleFrame, this), this.model.get('playInterval'));
	        }
	
	        function handleFrame() {
	            // Do not cache
	            var timelineModel = this.model;
	            this._changeTimeline(timelineModel.getCurrentIndex() + (timelineModel.get('rewind', true) ? -1 : 1));
	        }
	    },
	
	    _toAxisCoord: function _toAxisCoord(vertex) {
	        var trans = this._mainGroup.getLocalTransform();
	        return graphic.applyTransform(vertex, trans, true);
	    },
	
	    _findNearestTick: function _findNearestTick(axisCoord) {
	        var data = this.model.getData();
	        var dist = Infinity;
	        var targetDataIndex;
	        var axis = this._axis;
	
	        data.each(['value'], function (value, dataIndex) {
	            var coord = axis.dataToCoord(value);
	            var d = Math.abs(coord - axisCoord);
	            if (d < dist) {
	                dist = d;
	                targetDataIndex = dataIndex;
	            }
	        });
	
	        return targetDataIndex;
	    },
	
	    _clearTimer: function _clearTimer() {
	        if (this._timer) {
	            clearTimeout(this._timer);
	            this._timer = null;
	        }
	    },
	
	    _changeTimeline: function _changeTimeline(nextIndex) {
	        var currentIndex = this.model.getCurrentIndex();
	
	        if (nextIndex === '+') {
	            nextIndex = currentIndex + 1;
	        } else if (nextIndex === '-') {
	            nextIndex = currentIndex - 1;
	        }
	
	        this.api.dispatchAction({
	            type: 'timelineChange',
	            currentIndex: nextIndex,
	            from: this.uid
	        });
	    }
	
	});
	
	function getViewRect(model, api) {
	    return layout.getLayoutRect(model.getBoxLayoutParams(), {
	        width: api.getWidth(),
	        height: api.getHeight()
	    }, model.get('padding'));
	}
	
	function makeIcon(timelineModel, objPath, rect, opts) {
	    var icon = graphic.makePath(timelineModel.get(objPath).replace(/^path:\/\//, ''), zrUtil.clone(opts || {}), new BoundingRect(rect[0], rect[1], rect[2], rect[3]), 'center');
	
	    return icon;
	}
	
	/**
	 * Create symbol or update symbol
	 */
	function giveSymbol(hostModel, itemStyleModel, group, opt, symbol, callback) {
	    var symbolType = hostModel.get('symbol');
	    var color = itemStyleModel.get('color');
	    var symbolSize = hostModel.get('symbolSize');
	    var halfSymbolSize = symbolSize / 2;
	    var itemStyle = itemStyleModel.getItemStyle(['color', 'symbol', 'symbolSize']);
	
	    if (!symbol) {
	        symbol = symbolUtil.createSymbol(symbolType, -halfSymbolSize, -halfSymbolSize, symbolSize, symbolSize, color);
	        group.add(symbol);
	        callback && callback.onCreate(symbol);
	    } else {
	        symbol.setStyle(itemStyle);
	        symbol.setColor(color);
	        group.add(symbol); // Group may be new, also need to add.
	        callback && callback.onUpdate(symbol);
	    }
	
	    opt = zrUtil.merge({
	        rectHover: true,
	        style: itemStyle,
	        z2: 100
	    }, opt, true);
	
	    symbol.attr(opt);
	
	    return symbol;
	}
	
	function pointerMoveTo(pointer, dataIndex, axis, timelineModel, noAnimation) {
	    if (pointer.dragging) {
	        return;
	    }
	
	    var pointerModel = timelineModel.getModel('checkpointStyle');
	    var toCoord = axis.dataToCoord(timelineModel.getData().get(['value'], dataIndex));
	
	    if (noAnimation || !pointerModel.get('animation', true)) {
	        pointer.attr({ position: [toCoord, 0] });
	    } else {
	        pointer.stopAnimation(true);
	        pointer.animateTo({ position: [toCoord, 0] }, pointerModel.get('animationDuration', true), pointerModel.get('animationEasing', true));
	    }
	}

/***/ },
/* 550 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Timeline view
	 */
	
	// var zrUtil = require('zrender/lib/core/util');
	// var graphic = require('../../util/graphic');
	var ComponentView = __webpack_require__(249);
	
	module.exports = ComponentView.extend({
	
	    type: 'timeline'
	});

/***/ },
/* 551 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var Axis = __webpack_require__(338);
	var axisHelper = __webpack_require__(329);
	
	/**
	 * Extend axis 2d
	 * @constructor module:echarts/coord/cartesian/Axis2D
	 * @extends {module:echarts/coord/cartesian/Axis}
	 * @param {string} dim
	 * @param {*} scale
	 * @param {Array.<number>} coordExtent
	 * @param {string} axisType
	 * @param {string} position
	 */
	var TimelineAxis = function TimelineAxis(dim, scale, coordExtent, axisType) {
	
	    Axis.call(this, dim, scale, coordExtent);
	
	    /**
	     * Axis type
	     *  - 'category'
	     *  - 'value'
	     *  - 'time'
	     *  - 'log'
	     * @type {string}
	     */
	    this.type = axisType || 'value';
	
	    /**
	     * @private
	     * @type {number}
	     */
	    this._autoLabelInterval;
	
	    /**
	     * Axis model
	     * @param {module:echarts/component/TimelineModel}
	     */
	    this.model = null;
	};
	
	TimelineAxis.prototype = {
	
	    constructor: TimelineAxis,
	
	    /**
	     * @public
	     * @return {number}
	     */
	    getLabelInterval: function getLabelInterval() {
	        var timelineModel = this.model;
	        var labelModel = timelineModel.getModel('label.normal');
	        var labelInterval = labelModel.get('interval');
	
	        if (labelInterval != null && labelInterval != 'auto') {
	            return labelInterval;
	        }
	
	        var labelInterval = this._autoLabelInterval;
	
	        if (!labelInterval) {
	            labelInterval = this._autoLabelInterval = axisHelper.getAxisLabelInterval(zrUtil.map(this.scale.getTicks(), this.dataToCoord, this), axisHelper.getFormattedLabels(this, labelModel.get('formatter')), labelModel.getModel('textStyle').getFont(), timelineModel.get('orient') === 'horizontal');
	        }
	
	        return labelInterval;
	    },
	
	    /**
	     * If label is ignored.
	     * Automatically used when axis is category and label can not be all shown
	     * @public
	     * @param  {number} idx
	     * @return {boolean}
	     */
	    isLabelIgnored: function isLabelIgnored(idx) {
	        if (this.type === 'category') {
	            var labelInterval = this.getLabelInterval();
	            return typeof labelInterval === 'function' && !labelInterval(idx, this.scale.getLabel(idx)) || idx % (labelInterval + 1);
	        }
	    }
	
	};
	
	zrUtil.inherits(TimelineAxis, Axis);
	
	module.exports = TimelineAxis;

/***/ },
/* 552 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(553);
	__webpack_require__(555);
	
	__webpack_require__(556);
	__webpack_require__(557);
	__webpack_require__(558);
	__webpack_require__(559);
	__webpack_require__(564);

/***/ },
/* 553 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var featureManager = __webpack_require__(554);
	var zrUtil = __webpack_require__(224);
	
	var ToolboxModel = __webpack_require__(222).extendComponentModel({
	
	    type: 'toolbox',
	
	    layoutMode: {
	        type: 'box',
	        ignoreSize: true
	    },
	
	    mergeDefaultAndTheme: function mergeDefaultAndTheme(option) {
	        ToolboxModel.superApply(this, 'mergeDefaultAndTheme', arguments);
	
	        zrUtil.each(this.option.feature, function (featureOpt, featureName) {
	            var Feature = featureManager.get(featureName);
	            Feature && zrUtil.merge(featureOpt, Feature.defaultOption);
	        });
	    },
	
	    defaultOption: {
	
	        show: true,
	
	        z: 6,
	
	        zlevel: 0,
	
	        orient: 'horizontal',
	
	        left: 'right',
	
	        top: 'top',
	
	        // right
	        // bottom
	
	        backgroundColor: 'transparent',
	
	        borderColor: '#ccc',
	
	        borderWidth: 0,
	
	        padding: 5,
	
	        itemSize: 15,
	
	        itemGap: 8,
	
	        showTitle: true,
	
	        iconStyle: {
	            normal: {
	                borderColor: '#666',
	                color: 'none'
	            },
	            emphasis: {
	                borderColor: '#3E98C5'
	            }
	        }
	        // textStyle: {},
	
	        // feature
	    }
	});
	
	module.exports = ToolboxModel;

/***/ },
/* 554 */
/***/ function(module, exports) {

	'use strict';
	
	var features = {};
	
	module.exports = {
	    register: function register(name, ctor) {
	        features[name] = ctor;
	    },
	
	    get: function get(name) {
	        return features[name];
	    }
	};

/***/ },
/* 555 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	
	var featureManager = __webpack_require__(554);
	var zrUtil = __webpack_require__(224);
	var graphic = __webpack_require__(263);
	var Model = __webpack_require__(229);
	var DataDiffer = __webpack_require__(316);
	var listComponentHelper = __webpack_require__(487);
	var textContain = __webpack_require__(235);
	
	module.exports = __webpack_require__(222).extendComponentView({
	
	    type: 'toolbox',
	
	    render: function render(toolboxModel, ecModel, api) {
	        var group = this.group;
	        group.removeAll();
	
	        if (!toolboxModel.get('show')) {
	            return;
	        }
	
	        var itemSize = +toolboxModel.get('itemSize');
	        var featureOpts = toolboxModel.get('feature') || {};
	        var features = this._features || (this._features = {});
	
	        var featureNames = [];
	        zrUtil.each(featureOpts, function (opt, name) {
	            featureNames.push(name);
	        });
	
	        new DataDiffer(this._featureNames || [], featureNames).add(process).update(process).remove(zrUtil.curry(process, null)).execute();
	
	        // Keep for diff.
	        this._featureNames = featureNames;
	
	        function process(newIndex, oldIndex) {
	            var featureName = featureNames[newIndex];
	            var oldName = featureNames[oldIndex];
	            var featureOpt = featureOpts[featureName];
	            var featureModel = new Model(featureOpt, toolboxModel, toolboxModel.ecModel);
	            var feature;
	
	            if (featureName && !oldName) {
	                // Create
	                if (isUserFeatureName(featureName)) {
	                    feature = {
	                        model: featureModel,
	                        onclick: featureModel.option.onclick,
	                        featureName: featureName
	                    };
	                } else {
	                    var Feature = featureManager.get(featureName);
	                    if (!Feature) {
	                        return;
	                    }
	                    feature = new Feature(featureModel);
	                }
	                features[featureName] = feature;
	            } else {
	                feature = features[oldName];
	                // If feature does not exsit.
	                if (!feature) {
	                    return;
	                }
	                feature.model = featureModel;
	            }
	
	            if (!featureName && oldName) {
	                feature.dispose && feature.dispose(ecModel, api);
	                return;
	            }
	
	            if (!featureModel.get('show') || feature.unusable) {
	                feature.remove && feature.remove(ecModel, api);
	                return;
	            }
	
	            createIconPaths(featureModel, feature, featureName);
	
	            featureModel.setIconStatus = function (iconName, status) {
	                var option = this.option;
	                var iconPaths = this.iconPaths;
	                option.iconStatus = option.iconStatus || {};
	                option.iconStatus[iconName] = status;
	                // FIXME
	                iconPaths[iconName] && iconPaths[iconName].trigger(status);
	            };
	
	            if (feature.render) {
	                feature.render(featureModel, ecModel, api);
	            }
	        }
	
	        function createIconPaths(featureModel, feature, featureName) {
	            var iconStyleModel = featureModel.getModel('iconStyle');
	
	            // If one feature has mutiple icon. they are orginaized as
	            // {
	            //     icon: {
	            //         foo: '',
	            //         bar: ''
	            //     },
	            //     title: {
	            //         foo: '',
	            //         bar: ''
	            //     }
	            // }
	            var icons = feature.getIcons ? feature.getIcons() : featureModel.get('icon');
	            var titles = featureModel.get('title') || {};
	            if (typeof icons === 'string') {
	                var icon = icons;
	                var title = titles;
	                icons = {};
	                titles = {};
	                icons[featureName] = icon;
	                titles[featureName] = title;
	            }
	            var iconPaths = featureModel.iconPaths = {};
	            zrUtil.each(icons, function (icon, iconName) {
	                var normalStyle = iconStyleModel.getModel('normal').getItemStyle();
	                var hoverStyle = iconStyleModel.getModel('emphasis').getItemStyle();
	
	                var style = {
	                    x: -itemSize / 2,
	                    y: -itemSize / 2,
	                    width: itemSize,
	                    height: itemSize
	                };
	                var path = icon.indexOf('image://') === 0 ? (style.image = icon.slice(8), new graphic.Image({ style: style })) : graphic.makePath(icon.replace('path://', ''), {
	                    style: normalStyle,
	                    hoverStyle: hoverStyle,
	                    rectHover: true
	                }, style, 'center');
	
	                graphic.setHoverStyle(path);
	
	                if (toolboxModel.get('showTitle')) {
	                    path.__title = titles[iconName];
	                    path.on('mouseover', function () {
	                        path.setStyle({
	                            text: titles[iconName],
	                            textPosition: hoverStyle.textPosition || 'bottom',
	                            textFill: hoverStyle.fill || hoverStyle.stroke || '#000',
	                            textAlign: hoverStyle.textAlign || 'center'
	                        });
	                    }).on('mouseout', function () {
	                        path.setStyle({
	                            textFill: null
	                        });
	                    });
	                }
	                path.trigger(featureModel.get('iconStatus.' + iconName) || 'normal');
	
	                group.add(path);
	                path.on('click', zrUtil.bind(feature.onclick, feature, ecModel, api, iconName));
	
	                iconPaths[iconName] = path;
	            });
	        }
	
	        listComponentHelper.layout(group, toolboxModel, api);
	        // Render background after group is layout
	        // FIXME
	        listComponentHelper.addBackground(group, toolboxModel);
	
	        // Adjust icon title positions to avoid them out of screen
	        group.eachChild(function (icon) {
	            var titleText = icon.__title;
	            var hoverStyle = icon.hoverStyle;
	            // May be background element
	            if (hoverStyle && titleText) {
	                var rect = textContain.getBoundingRect(titleText, hoverStyle.font);
	                var offsetX = icon.position[0] + group.position[0];
	                var offsetY = icon.position[1] + group.position[1] + itemSize;
	
	                var needPutOnTop = false;
	                if (offsetY + rect.height > api.getHeight()) {
	                    hoverStyle.textPosition = 'top';
	                    needPutOnTop = true;
	                }
	                var topOffset = needPutOnTop ? -5 - rect.height : itemSize + 8;
	                if (offsetX + rect.width / 2 > api.getWidth()) {
	                    hoverStyle.textPosition = ['100%', topOffset];
	                    hoverStyle.textAlign = 'right';
	                } else if (offsetX - rect.width / 2 < 0) {
	                    hoverStyle.textPosition = [0, topOffset];
	                    hoverStyle.textAlign = 'left';
	                }
	            }
	        });
	    },
	
	    remove: function remove(ecModel, api) {
	        zrUtil.each(this._features, function (feature) {
	            feature.remove && feature.remove(ecModel, api);
	        });
	        this.group.removeAll();
	    },
	
	    dispose: function dispose(ecModel, api) {
	        zrUtil.each(this._features, function (feature) {
	            feature.dispose && feature.dispose(ecModel, api);
	        });
	    }
	});
	
	function isUserFeatureName(featureName) {
	    return featureName.indexOf('my') === 0;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 556 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var env = __webpack_require__(299);
	
	function SaveAsImage(model) {
	    this.model = model;
	}
	
	SaveAsImage.defaultOption = {
	    show: true,
	    icon: 'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0',
	    title: '保存为图片',
	    type: 'png',
	    // Default use option.backgroundColor
	    // backgroundColor: '#fff',
	    name: '',
	    excludeComponents: ['toolbox'],
	    pixelRatio: 1,
	    lang: ['右键另存为图片']
	};
	
	SaveAsImage.prototype.unusable = !env.canvasSupported;
	
	var proto = SaveAsImage.prototype;
	
	proto.onclick = function (ecModel, api) {
	    var model = this.model;
	    var title = model.get('name') || ecModel.get('title.0.text') || 'echarts';
	    var $a = document.createElement('a');
	    var type = model.get('type', true) || 'png';
	    $a.download = title + '.' + type;
	    $a.target = '_blank';
	    var url = api.getConnectedDataURL({
	        type: type,
	        backgroundColor: model.get('backgroundColor', true) || ecModel.get('backgroundColor') || '#fff',
	        excludeComponents: model.get('excludeComponents'),
	        pixelRatio: model.get('pixelRatio')
	    });
	    $a.href = url;
	    // Chrome and Firefox
	    if (typeof MouseEvent === 'function') {
	        var evt = new MouseEvent('click', {
	            view: window,
	            bubbles: true,
	            cancelable: false
	        });
	        $a.dispatchEvent(evt);
	    }
	    // IE
	    else {
	            var lang = model.get('lang');
	            var html = '' + '<body style="margin:0;">' + '<img src="' + url + '" style="max-width:100%;" title="' + (lang && lang[0] || '') + '" />' + '</body>';
	            var tab = window.open();
	            tab.document.write(html);
	        }
	};
	
	__webpack_require__(554).register('saveAsImage', SaveAsImage);
	
	module.exports = SaveAsImage;

/***/ },
/* 557 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	
	function MagicType(model) {
	    this.model = model;
	}
	
	MagicType.defaultOption = {
	    show: true,
	    type: [],
	    // Icon group
	    icon: {
	        line: 'M4.1,28.9h7.1l9.3-22l7.4,38l9.7-19.7l3,12.8h14.9M4.1,58h51.4',
	        bar: 'M6.7,22.9h10V48h-10V22.9zM24.9,13h10v35h-10V13zM43.2,2h10v46h-10V2zM3.1,58h53.7',
	        stack: 'M8.2,38.4l-8.4,4.1l30.6,15.3L60,42.5l-8.1-4.1l-21.5,11L8.2,38.4z M51.9,30l-8.1,4.2l-13.4,6.9l-13.9-6.9L8.2,30l-8.4,4.2l8.4,4.2l22.2,11l21.5-11l8.1-4.2L51.9,30z M51.9,21.7l-8.1,4.2L35.7,30l-5.3,2.8L24.9,30l-8.4-4.1l-8.3-4.2l-8.4,4.2L8.2,30l8.3,4.2l13.9,6.9l13.4-6.9l8.1-4.2l8.1-4.1L51.9,21.7zM30.4,2.2L-0.2,17.5l8.4,4.1l8.3,4.2l8.4,4.2l5.5,2.7l5.3-2.7l8.1-4.2l8.1-4.2l8.1-4.1L30.4,2.2z', // jshint ignore:line
	        tiled: 'M2.3,2.2h22.8V25H2.3V2.2z M35,2.2h22.8V25H35V2.2zM2.3,35h22.8v22.8H2.3V35z M35,35h22.8v22.8H35V35z'
	    },
	    title: {
	        line: '切换为折线图',
	        bar: '切换为柱状图',
	        stack: '切换为堆叠',
	        tiled: '切换为平铺'
	    },
	    option: {},
	    seriesIndex: {}
	};
	
	var proto = MagicType.prototype;
	
	proto.getIcons = function () {
	    var model = this.model;
	    var availableIcons = model.get('icon');
	    var icons = {};
	    zrUtil.each(model.get('type'), function (type) {
	        if (availableIcons[type]) {
	            icons[type] = availableIcons[type];
	        }
	    });
	    return icons;
	};
	
	var seriesOptGenreator = {
	    'line': function line(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'bar') {
	            return zrUtil.merge({
	                id: seriesId,
	                type: 'line',
	                // Preserve data related option
	                data: seriesModel.get('data'),
	                stack: seriesModel.get('stack'),
	                markPoint: seriesModel.get('markPoint'),
	                markLine: seriesModel.get('markLine')
	            }, model.get('option.line'));
	        }
	    },
	    'bar': function bar(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line') {
	            return zrUtil.merge({
	                id: seriesId,
	                type: 'bar',
	                // Preserve data related option
	                data: seriesModel.get('data'),
	                stack: seriesModel.get('stack'),
	                markPoint: seriesModel.get('markPoint'),
	                markLine: seriesModel.get('markLine')
	            }, model.get('option.bar'));
	        }
	    },
	    'stack': function stack(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line' || seriesType === 'bar') {
	            return {
	                id: seriesId,
	                stack: '__ec_magicType_stack__'
	            };
	        }
	    },
	    'tiled': function tiled(seriesType, seriesId, seriesModel, model) {
	        if (seriesType === 'line' || seriesType === 'bar') {
	            return {
	                id: seriesId,
	                stack: ''
	            };
	        }
	    }
	};
	
	var radioTypes = [['line', 'bar'], ['stack', 'tiled']];
	
	proto.onclick = function (ecModel, api, type) {
	    var model = this.model;
	    var seriesIndex = model.get('seriesIndex.' + type);
	    // Not supported magicType
	    if (!seriesOptGenreator[type]) {
	        return;
	    }
	    var newOption = {
	        series: []
	    };
	    var generateNewSeriesTypes = function generateNewSeriesTypes(seriesModel) {
	        var seriesType = seriesModel.subType;
	        var seriesId = seriesModel.id;
	        var newSeriesOpt = seriesOptGenreator[type](seriesType, seriesId, seriesModel, model);
	        if (newSeriesOpt) {
	            // PENDING If merge original option?
	            zrUtil.defaults(newSeriesOpt, seriesModel.option);
	            newOption.series.push(newSeriesOpt);
	        }
	    };
	
	    zrUtil.each(radioTypes, function (radio) {
	        if (zrUtil.indexOf(radio, type) >= 0) {
	            zrUtil.each(radio, function (item) {
	                model.setIconStatus(item, 'normal');
	            });
	        }
	    });
	
	    model.setIconStatus(type, 'emphasis');
	
	    ecModel.eachComponent({
	        mainType: 'series',
	        seriesIndex: seriesIndex
	    }, generateNewSeriesTypes);
	    api.dispatchAction({
	        type: 'changeMagicType',
	        currentType: type,
	        newOption: newOption
	    });
	};
	
	var echarts = __webpack_require__(222);
	echarts.registerAction({
	    type: 'changeMagicType',
	    event: 'magicTypeChanged',
	    update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	    ecModel.mergeOption(payload.newOption);
	});
	
	__webpack_require__(554).register('magicType', MagicType);
	
	module.exports = MagicType;

/***/ },
/* 558 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @module echarts/component/toolbox/feature/DataView
	 */
	
	var zrUtil = __webpack_require__(224);
	var eventTool = __webpack_require__(301);
	
	var BLOCK_SPLITER = new Array(60).join('-');
	var ITEM_SPLITER = '\t';
	/**
	 * Group series into two types
	 *  1. on category axis, like line, bar
	 *  2. others, like scatter, pie
	 * @param {module:echarts/model/Global} ecModel
	 * @return {Object}
	 * @inner
	 */
	function groupSeries(ecModel) {
	    var seriesGroupByCategoryAxis = {};
	    var otherSeries = [];
	    var meta = [];
	    ecModel.eachRawSeries(function (seriesModel) {
	        var coordSys = seriesModel.coordinateSystem;
	
	        if (coordSys && (coordSys.type === 'cartesian2d' || coordSys.type === 'polar')) {
	            var baseAxis = coordSys.getBaseAxis();
	            if (baseAxis.type === 'category') {
	                var key = baseAxis.dim + '_' + baseAxis.index;
	                if (!seriesGroupByCategoryAxis[key]) {
	                    seriesGroupByCategoryAxis[key] = {
	                        categoryAxis: baseAxis,
	                        valueAxis: coordSys.getOtherAxis(baseAxis),
	                        series: []
	                    };
	                    meta.push({
	                        axisDim: baseAxis.dim,
	                        axisIndex: baseAxis.index
	                    });
	                }
	                seriesGroupByCategoryAxis[key].series.push(seriesModel);
	            } else {
	                otherSeries.push(seriesModel);
	            }
	        } else {
	            otherSeries.push(seriesModel);
	        }
	    });
	
	    return {
	        seriesGroupByCategoryAxis: seriesGroupByCategoryAxis,
	        other: otherSeries,
	        meta: meta
	    };
	}
	
	/**
	 * Assemble content of series on cateogory axis
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */
	function assembleSeriesWithCategoryAxis(series) {
	    var tables = [];
	    zrUtil.each(series, function (group, key) {
	        var categoryAxis = group.categoryAxis;
	        var valueAxis = group.valueAxis;
	        var valueAxisDim = valueAxis.dim;
	
	        var headers = [' '].concat(zrUtil.map(group.series, function (series) {
	            return series.name;
	        }));
	        var columns = [categoryAxis.model.getCategories()];
	        zrUtil.each(group.series, function (series) {
	            columns.push(series.getRawData().mapArray(valueAxisDim, function (val) {
	                return val;
	            }));
	        });
	        // Assemble table content
	        var lines = [headers.join(ITEM_SPLITER)];
	        for (var i = 0; i < columns[0].length; i++) {
	            var items = [];
	            for (var j = 0; j < columns.length; j++) {
	                items.push(columns[j][i]);
	            }
	            lines.push(items.join(ITEM_SPLITER));
	        }
	        tables.push(lines.join('\n'));
	    });
	    return tables.join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	
	/**
	 * Assemble content of other series
	 * @param {Array.<module:echarts/model/Series>} series
	 * @return {string}
	 * @inner
	 */
	function assembleOtherSeries(series) {
	    return zrUtil.map(series, function (series) {
	        var data = series.getRawData();
	        var lines = [series.name];
	        var vals = [];
	        data.each(data.dimensions, function () {
	            var argLen = arguments.length;
	            var dataIndex = arguments[argLen - 1];
	            var name = data.getName(dataIndex);
	            for (var i = 0; i < argLen - 1; i++) {
	                vals[i] = arguments[i];
	            }
	            lines.push((name ? name + ITEM_SPLITER : '') + vals.join(ITEM_SPLITER));
	        });
	        return lines.join('\n');
	    }).join('\n\n' + BLOCK_SPLITER + '\n\n');
	}
	
	/**
	 * @param {module:echarts/model/Global}
	 * @return {string}
	 * @inner
	 */
	function getContentFromModel(ecModel) {
	
	    var result = groupSeries(ecModel);
	
	    return {
	        value: zrUtil.filter([assembleSeriesWithCategoryAxis(result.seriesGroupByCategoryAxis), assembleOtherSeries(result.other)], function (str) {
	            return str.replace(/[\n\t\s]/g, '');
	        }).join('\n\n' + BLOCK_SPLITER + '\n\n'),
	
	        meta: result.meta
	    };
	}
	
	function trim(str) {
	    return str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');
	}
	/**
	 * If a block is tsv format
	 */
	function isTSVFormat(block) {
	    // Simple method to find out if a block is tsv format
	    var firstLine = block.slice(0, block.indexOf('\n'));
	    if (firstLine.indexOf(ITEM_SPLITER) >= 0) {
	        return true;
	    }
	}
	
	var itemSplitRegex = new RegExp('[' + ITEM_SPLITER + ']+', 'g');
	/**
	 * @param {string} tsv
	 * @return {Array.<Object>}
	 */
	function parseTSVContents(tsv) {
	    var tsvLines = tsv.split(/\n+/g);
	    var headers = trim(tsvLines.shift()).split(itemSplitRegex);
	
	    var categories = [];
	    var series = zrUtil.map(headers, function (header) {
	        return {
	            name: header,
	            data: []
	        };
	    });
	    for (var i = 0; i < tsvLines.length; i++) {
	        var items = trim(tsvLines[i]).split(itemSplitRegex);
	        categories.push(items.shift());
	        for (var j = 0; j < items.length; j++) {
	            series[j] && (series[j].data[i] = items[j]);
	        }
	    }
	    return {
	        series: series,
	        categories: categories
	    };
	}
	
	/**
	 * @param {string} str
	 * @return {Array.<Object>}
	 * @inner
	 */
	function parseListContents(str) {
	    var lines = str.split(/\n+/g);
	    var seriesName = trim(lines.shift());
	
	    var data = [];
	    for (var i = 0; i < lines.length; i++) {
	        var items = trim(lines[i]).split(itemSplitRegex);
	        var name = '';
	        var value;
	        var hasName = false;
	        if (isNaN(items[0])) {
	            // First item is name
	            hasName = true;
	            name = items[0];
	            items = items.slice(1);
	            data[i] = {
	                name: name,
	                value: []
	            };
	            value = data[i].value;
	        } else {
	            value = data[i] = [];
	        }
	        for (var j = 0; j < items.length; j++) {
	            value.push(+items[j]);
	        }
	        if (value.length === 1) {
	            hasName ? data[i].value = value[0] : data[i] = value[0];
	        }
	    }
	
	    return {
	        name: seriesName,
	        data: data
	    };
	}
	
	/**
	 * @param {string} str
	 * @param {Array.<Object>} blockMetaList
	 * @return {Object}
	 * @inner
	 */
	function parseContents(str, blockMetaList) {
	    var blocks = str.split(new RegExp('\n*' + BLOCK_SPLITER + '\n*', 'g'));
	    var newOption = {
	        series: []
	    };
	    zrUtil.each(blocks, function (block, idx) {
	        if (isTSVFormat(block)) {
	            var result = parseTSVContents(block);
	            var blockMeta = blockMetaList[idx];
	            var axisKey = blockMeta.axisDim + 'Axis';
	
	            if (blockMeta) {
	                newOption[axisKey] = newOption[axisKey] || [];
	                newOption[axisKey][blockMeta.axisIndex] = {
	                    data: result.categories
	                };
	                newOption.series = newOption.series.concat(result.series);
	            }
	        } else {
	            var result = parseListContents(block);
	            newOption.series.push(result);
	        }
	    });
	    return newOption;
	}
	
	/**
	 * @alias {module:echarts/component/toolbox/feature/DataView}
	 * @constructor
	 * @param {module:echarts/model/Model} model
	 */
	function DataView(model) {
	
	    this._dom = null;
	
	    this.model = model;
	}
	
	DataView.defaultOption = {
	    show: true,
	    readOnly: false,
	    icon: 'M17.5,17.3H33 M17.5,17.3H33 M45.4,29.5h-28 M11.5,2v56H51V14.8L38.4,2H11.5z M38.4,2.2v12.7H51 M45.4,41.7h-28',
	    title: '数据视图',
	    lang: ['数据视图', '关闭', '刷新'],
	    backgroundColor: '#fff',
	    textColor: '#000',
	    textareaColor: '#fff',
	    textareaBorderColor: '#333',
	    buttonColor: '#c23531',
	    buttonTextColor: '#fff'
	};
	
	DataView.prototype.onclick = function (ecModel, api) {
	    var container = api.getDom();
	    var model = this.model;
	    if (this._dom) {
	        container.removeChild(this._dom);
	    }
	    var root = document.createElement('div');
	    root.style.cssText = 'position:absolute;left:5px;top:5px;bottom:5px;right:5px;';
	    root.style.backgroundColor = model.get('backgroundColor') || '#fff';
	
	    // Create elements
	    var header = document.createElement('h4');
	    var lang = model.get('lang') || [];
	    header.innerHTML = lang[0] || model.get('title');
	    header.style.cssText = 'margin: 10px 20px;';
	    header.style.color = model.get('textColor');
	
	    var textarea = document.createElement('textarea');
	    // Textarea style
	    textarea.style.cssText = 'display:block;width:100%;font-size:14px;line-height:1.6rem;font-family:Monaco,Consolas,Courier new,monospace';
	    textarea.readOnly = model.get('readOnly');
	    textarea.style.color = model.get('textColor');
	    textarea.style.borderColor = model.get('textareaBorderColor');
	    textarea.style.backgroundColor = model.get('textareaColor');
	
	    var result = getContentFromModel(ecModel);
	    textarea.value = result.value;
	    var blockMetaList = result.meta;
	
	    var buttonContainer = document.createElement('div');
	    buttonContainer.style.cssText = 'position:absolute;bottom:0;left:0;right:0;';
	
	    var buttonStyle = 'float:right;margin-right:20px;border:none;' + 'cursor:pointer;padding:2px 5px;font-size:12px;border-radius:3px';
	    var closeButton = document.createElement('div');
	    var refreshButton = document.createElement('div');
	
	    buttonStyle += ';background-color:' + model.get('buttonColor');
	    buttonStyle += ';color:' + model.get('buttonTextColor');
	
	    var self = this;
	
	    function close() {
	        container.removeChild(root);
	        self._dom = null;
	    }
	    eventTool.addEventListener(closeButton, 'click', close);
	
	    eventTool.addEventListener(refreshButton, 'click', function () {
	        var newOption;
	        try {
	            newOption = parseContents(textarea.value, blockMetaList);
	        } catch (e) {
	            close();
	            throw new Error('Data view format error ' + e);
	        }
	        api.dispatchAction({
	            type: 'changeDataView',
	            newOption: newOption
	        });
	
	        close();
	    });
	
	    closeButton.innerHTML = lang[1];
	    refreshButton.innerHTML = lang[2];
	    refreshButton.style.cssText = buttonStyle;
	    closeButton.style.cssText = buttonStyle;
	
	    buttonContainer.appendChild(refreshButton);
	    buttonContainer.appendChild(closeButton);
	
	    // http://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
	    eventTool.addEventListener(textarea, 'keydown', function (e) {
	        if ((e.keyCode || e.which) === 9) {
	            // get caret position/selection
	            var val = this.value;
	            var start = this.selectionStart;
	            var end = this.selectionEnd;
	
	            // set textarea value to: text before caret + tab + text after caret
	            this.value = val.substring(0, start) + ITEM_SPLITER + val.substring(end);
	
	            // put caret at right position again
	            this.selectionStart = this.selectionEnd = start + 1;
	
	            // prevent the focus lose
	            eventTool.stop(e);
	        }
	    });
	
	    root.appendChild(header);
	    root.appendChild(textarea);
	    root.appendChild(buttonContainer);
	
	    textarea.style.height = container.clientHeight - 80 + 'px';
	
	    container.appendChild(root);
	    this._dom = root;
	};
	
	DataView.prototype.remove = function (ecModel, api) {
	    this._dom && api.getDom().removeChild(this._dom);
	};
	
	DataView.prototype.dispose = function (ecModel, api) {
	    this.remove(ecModel, api);
	};
	
	/**
	 * @inner
	 */
	function tryMergeDataOption(newData, originalData) {
	    return zrUtil.map(newData, function (newVal, idx) {
	        var original = originalData && originalData[idx];
	        if (zrUtil.isObject(original) && !zrUtil.isArray(original)) {
	            if (zrUtil.isObject(newVal) && !zrUtil.isArray(newVal)) {
	                newVal = newVal.value;
	            }
	            // Original data has option
	            return zrUtil.defaults({
	                value: newVal
	            }, original);
	        } else {
	            return newVal;
	        }
	    });
	}
	
	__webpack_require__(554).register('dataView', DataView);
	
	__webpack_require__(222).registerAction({
	    type: 'changeDataView',
	    event: 'dataViewChanged',
	    update: 'prepareAndUpdate'
	}, function (payload, ecModel) {
	    var newSeriesOptList = [];
	    zrUtil.each(payload.newOption.series, function (seriesOpt) {
	        var seriesModel = ecModel.getSeriesByName(seriesOpt.name)[0];
	        if (!seriesModel) {
	            // New created series
	            // Geuss the series type
	            newSeriesOptList.push(zrUtil.extend({
	                // Default is scatter
	                type: 'scatter'
	            }, seriesOpt));
	        } else {
	            var originalData = seriesModel.get('data');
	            newSeriesOptList.push({
	                name: seriesOpt.name,
	                data: tryMergeDataOption(seriesOpt.data, originalData)
	            });
	        }
	    });
	
	    ecModel.mergeOption(zrUtil.defaults({
	        series: newSeriesOptList
	    }, payload.newOption));
	});
	
	module.exports = DataView;

/***/ },
/* 559 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var zrUtil = __webpack_require__(224);
	var numberUtil = __webpack_require__(228);
	var SelectController = __webpack_require__(446);
	var BoundingRect = __webpack_require__(236);
	var Group = __webpack_require__(250);
	var history = __webpack_require__(560);
	var interactionMutex = __webpack_require__(381);
	
	var each = zrUtil.each;
	var asc = numberUtil.asc;
	
	// Use dataZoomSelect
	__webpack_require__(561);
	
	// Spectial component id start with \0ec\0, see echarts/model/Global.js~hasInnerId
	var DATA_ZOOM_ID_BASE = '\0_ec_\0toolbox-dataZoom_';
	
	function DataZoom(model) {
	    this.model = model;
	
	    /**
	     * @private
	     * @type {module:zrender/container/Group}
	     */
	    this._controllerGroup;
	
	    /**
	     * @private
	     * @type {module:echarts/component/helper/SelectController}
	     */
	    this._controller;
	
	    /**
	     * Is zoom active.
	     * @private
	     * @type {Object}
	     */
	    this._isZoomActive;
	}
	
	DataZoom.defaultOption = {
	    show: true,
	    // Icon group
	    icon: {
	        zoom: 'M0,13.5h26.9 M13.5,26.9V0 M32.1,13.5H58V58H13.5 V32.1',
	        back: 'M22,1.4L9.9,13.5l12.3,12.3 M10.3,13.5H54.9v44.6 H10.3v-26'
	    },
	    title: {
	        zoom: '区域缩放',
	        back: '区域缩放还原'
	    }
	};
	
	var proto = DataZoom.prototype;
	
	proto.render = function (featureModel, ecModel, api) {
	    updateBackBtnStatus(featureModel, ecModel);
	};
	
	proto.onclick = function (ecModel, api, type) {
	    var controllerGroup = this._controllerGroup;
	    if (!this._controllerGroup) {
	        controllerGroup = this._controllerGroup = new Group();
	        api.getZr().add(controllerGroup);
	    }
	
	    handlers[type].call(this, controllerGroup, this.model, ecModel, api);
	};
	
	proto.remove = function (ecModel, api) {
	    this._disposeController();
	    interactionMutex.release('globalPan', api.getZr());
	};
	
	proto.dispose = function (ecModel, api) {
	    var zr = api.getZr();
	    interactionMutex.release('globalPan', zr);
	    this._disposeController();
	    this._controllerGroup && zr.remove(this._controllerGroup);
	};
	
	/**
	 * @private
	 */
	var handlers = {
	
	    zoom: function zoom(controllerGroup, featureModel, ecModel, api) {
	        var isZoomActive = this._isZoomActive = !this._isZoomActive;
	        var zr = api.getZr();
	
	        interactionMutex[isZoomActive ? 'take' : 'release']('globalPan', zr);
	
	        featureModel.setIconStatus('zoom', isZoomActive ? 'emphasis' : 'normal');
	
	        if (isZoomActive) {
	            zr.setDefaultCursorStyle('crosshair');
	
	            this._createController(controllerGroup, featureModel, ecModel, api);
	        } else {
	            zr.setDefaultCursorStyle('default');
	            this._disposeController();
	        }
	    },
	
	    back: function back(controllerGroup, featureModel, ecModel, api) {
	        this._dispatchAction(history.pop(ecModel), api);
	    }
	};
	
	/**
	 * @private
	 */
	proto._createController = function (controllerGroup, featureModel, ecModel, api) {
	    var controller = this._controller = new SelectController('rect', api.getZr(), {
	        // FIXME
	        lineWidth: 3,
	        stroke: '#333',
	        fill: 'rgba(0,0,0,0.2)'
	    });
	    controller.on('selectEnd', zrUtil.bind(this._onSelected, this, controller, featureModel, ecModel, api));
	    controller.enable(controllerGroup, false);
	};
	
	proto._disposeController = function () {
	    var controller = this._controller;
	    if (controller) {
	        controller.off('selected');
	        controller.dispose();
	    }
	};
	
	function prepareCoordInfo(grid, ecModel) {
	    // Default use the first axis.
	    // FIXME
	    var coordInfo = [{ axisModel: grid.getAxis('x').model, axisIndex: 0 }, // x
	    { axisModel: grid.getAxis('y').model, axisIndex: 0 } // y
	    ];
	    coordInfo.grid = grid;
	
	    ecModel.eachComponent({ mainType: 'dataZoom', subType: 'select' }, function (dzModel, dataZoomIndex) {
	        if (isTheAxis('xAxis', coordInfo[0].axisModel, dzModel, ecModel)) {
	            coordInfo[0].dataZoomModel = dzModel;
	        }
	        if (isTheAxis('yAxis', coordInfo[1].axisModel, dzModel, ecModel)) {
	            coordInfo[1].dataZoomModel = dzModel;
	        }
	    });
	
	    return coordInfo;
	}
	
	function isTheAxis(axisName, axisModel, dataZoomModel, ecModel) {
	    var axisIndex = dataZoomModel.get(axisName + 'Index');
	    return axisIndex != null && ecModel.getComponent(axisName, axisIndex) === axisModel;
	}
	
	/**
	 * @private
	 */
	proto._onSelected = function (controller, featureModel, ecModel, api, selRanges) {
	    if (!selRanges.length) {
	        return;
	    }
	    var selRange = selRanges[0];
	
	    controller.update(); // remove cover
	
	    var snapshot = {};
	
	    // FIXME
	    // polar
	
	    ecModel.eachComponent('grid', function (gridModel, gridIndex) {
	        var grid = gridModel.coordinateSystem;
	        var coordInfo = prepareCoordInfo(grid, ecModel);
	        var selDataRange = pointToDataInCartesian(selRange, coordInfo);
	
	        if (selDataRange) {
	            var xBatchItem = scaleCartesianAxis(selDataRange, coordInfo, 0, 'x');
	            var yBatchItem = scaleCartesianAxis(selDataRange, coordInfo, 1, 'y');
	
	            xBatchItem && (snapshot[xBatchItem.dataZoomId] = xBatchItem);
	            yBatchItem && (snapshot[yBatchItem.dataZoomId] = yBatchItem);
	        }
	    }, this);
	
	    history.push(ecModel, snapshot);
	
	    this._dispatchAction(snapshot, api);
	};
	
	function pointToDataInCartesian(selRange, coordInfo) {
	    var grid = coordInfo.grid;
	
	    var selRect = new BoundingRect(selRange[0][0], selRange[1][0], selRange[0][1] - selRange[0][0], selRange[1][1] - selRange[1][0]);
	    if (!selRect.intersect(grid.getRect())) {
	        return;
	    }
	    var cartesian = grid.getCartesian(coordInfo[0].axisIndex, coordInfo[1].axisIndex);
	    var dataLeftTop = cartesian.pointToData([selRange[0][0], selRange[1][0]], true);
	    var dataRightBottom = cartesian.pointToData([selRange[0][1], selRange[1][1]], true);
	
	    return [asc([dataLeftTop[0], dataRightBottom[0]]), // x, using asc to handle inverse
	    asc([dataLeftTop[1], dataRightBottom[1]]) // y, using asc to handle inverse
	    ];
	}
	
	function scaleCartesianAxis(selDataRange, coordInfo, dimIdx, dimName) {
	    var dimCoordInfo = coordInfo[dimIdx];
	    var dataZoomModel = dimCoordInfo.dataZoomModel;
	
	    if (dataZoomModel) {
	        return {
	            dataZoomId: dataZoomModel.id,
	            startValue: selDataRange[dimIdx][0],
	            endValue: selDataRange[dimIdx][1]
	        };
	    }
	}
	
	/**
	 * @private
	 */
	proto._dispatchAction = function (snapshot, api) {
	    var batch = [];
	
	    each(snapshot, function (batchItem) {
	        batch.push(batchItem);
	    });
	
	    batch.length && api.dispatchAction({
	        type: 'dataZoom',
	        from: this.uid,
	        batch: zrUtil.clone(batch, true)
	    });
	};
	
	function updateBackBtnStatus(featureModel, ecModel) {
	    featureModel.setIconStatus('back', history.count(ecModel) > 1 ? 'emphasis' : 'normal');
	}
	
	__webpack_require__(554).register('dataZoom', DataZoom);
	
	// Create special dataZoom option for select
	__webpack_require__(222).registerPreprocessor(function (option) {
	    if (!option) {
	        return;
	    }
	
	    var dataZoomOpts = option.dataZoom || (option.dataZoom = []);
	    if (!zrUtil.isArray(dataZoomOpts)) {
	        dataZoomOpts = [dataZoomOpts];
	    }
	
	    var toolboxOpt = option.toolbox;
	    if (toolboxOpt) {
	        // Assume there is only one toolbox
	        if (zrUtil.isArray(toolboxOpt)) {
	            toolboxOpt = toolboxOpt[0];
	        }
	
	        if (toolboxOpt && toolboxOpt.feature) {
	            var dataZoomOpt = toolboxOpt.feature.dataZoom;
	            addForAxis('xAxis', dataZoomOpt);
	            addForAxis('yAxis', dataZoomOpt);
	        }
	    }
	
	    function addForAxis(axisName, dataZoomOpt) {
	        if (!dataZoomOpt) {
	            return;
	        }
	
	        var axisIndicesName = axisName + 'Index';
	        var givenAxisIndices = dataZoomOpt[axisIndicesName];
	        if (givenAxisIndices != null && !zrUtil.isArray(givenAxisIndices)) {
	            givenAxisIndices = givenAxisIndices === false ? [] : [givenAxisIndices];
	        }
	
	        forEachComponent(axisName, function (axisOpt, axisIndex) {
	            if (givenAxisIndices != null && zrUtil.indexOf(givenAxisIndices, axisIndex) === -1) {
	                return;
	            }
	            var newOpt = {
	                type: 'select',
	                $fromToolbox: true,
	                // Id for merge mapping.
	                id: DATA_ZOOM_ID_BASE + axisName + axisIndex
	            };
	            // FIXME
	            // Only support one axis now.
	            newOpt[axisIndicesName] = axisIndex;
	            dataZoomOpts.push(newOpt);
	        });
	    }
	
	    function forEachComponent(mainType, cb) {
	        var opts = option[mainType];
	        if (!zrUtil.isArray(opts)) {
	            opts = opts ? [opts] : [];
	        }
	        each(opts, cb);
	    }
	});
	
	module.exports = DataZoom;

/***/ },
/* 560 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file History manager.
	 */
	
	var zrUtil = __webpack_require__(224);
	var each = zrUtil.each;
	
	var ATTR = '\0_ec_hist_store';
	
	var history = {
	
	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @param {Object} newSnapshot {dataZoomId, batch: [payloadInfo, ...]}
	     */
	    push: function push(ecModel, newSnapshot) {
	        var store = giveStore(ecModel);
	
	        // If previous dataZoom can not be found,
	        // complete an range with current range.
	        each(newSnapshot, function (batchItem, dataZoomId) {
	            var i = store.length - 1;
	            for (; i >= 0; i--) {
	                var snapshot = store[i];
	                if (snapshot[dataZoomId]) {
	                    break;
	                }
	            }
	            if (i < 0) {
	                // No origin range set, create one by current range.
	                var dataZoomModel = ecModel.queryComponents({ mainType: 'dataZoom', subType: 'select', id: dataZoomId })[0];
	                if (dataZoomModel) {
	                    var percentRange = dataZoomModel.getPercentRange();
	                    store[0][dataZoomId] = {
	                        dataZoomId: dataZoomId,
	                        start: percentRange[0],
	                        end: percentRange[1]
	                    };
	                }
	            }
	        });
	
	        store.push(newSnapshot);
	    },
	
	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @return {Object} snapshot
	     */
	    pop: function pop(ecModel) {
	        var store = giveStore(ecModel);
	        var head = store[store.length - 1];
	        store.length > 1 && store.pop();
	
	        // Find top for all dataZoom.
	        var snapshot = {};
	        each(head, function (batchItem, dataZoomId) {
	            for (var i = store.length - 1; i >= 0; i--) {
	                var batchItem = store[i][dataZoomId];
	                if (batchItem) {
	                    snapshot[dataZoomId] = batchItem;
	                    break;
	                }
	            }
	        });
	
	        return snapshot;
	    },
	
	    /**
	     * @public
	     */
	    clear: function clear(ecModel) {
	        ecModel[ATTR] = null;
	    },
	
	    /**
	     * @public
	     * @param {module:echarts/model/Global} ecModel
	     * @return {number} records. always >= 1.
	     */
	    count: function count(ecModel) {
	        return giveStore(ecModel).length;
	    }
	
	};
	
	/**
	 * [{key: dataZoomId, value: {dataZoomId, range}}, ...]
	 * History length of each dataZoom may be different.
	 * this._history[0] is used to store origin range.
	 * @type {Array.<Object>}
	 */
	function giveStore(ecModel) {
	    var store = ecModel[ATTR];
	    if (!store) {
	        store = ecModel[ATTR] = [{}];
	    }
	    return store;
	}
	
	module.exports = history;

/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * DataZoom component entry
	 */
	
	__webpack_require__(508);
	
	__webpack_require__(509);
	__webpack_require__(511);
	
	__webpack_require__(562);
	__webpack_require__(563);
	
	__webpack_require__(519);
	__webpack_require__(520);

/***/ },
/* 562 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * @file Data zoom model
	 */
	
	var DataZoomModel = __webpack_require__(509);
	
	module.exports = DataZoomModel.extend({
	
	    type: 'dataZoom.select'
	
	});

/***/ },
/* 563 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(511).extend({
	
	    type: 'dataZoom.select'
	
	});

/***/ },
/* 564 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var history = __webpack_require__(560);
	
	function Restore(model) {
	    this.model = model;
	}
	
	Restore.defaultOption = {
	    show: true,
	    icon: 'M3.8,33.4 M47,18.9h9.8V8.7 M56.3,20.1 C52.1,9,40.5,0.6,26.8,2.1C12.6,3.7,1.6,16.2,2.1,30.6 M13,41.1H3.1v10.2 M3.7,39.9c4.2,11.1,15.8,19.5,29.5,18 c14.2-1.6,25.2-14.1,24.7-28.5',
	    title: '还原'
	};
	
	var proto = Restore.prototype;
	
	proto.onclick = function (ecModel, api, type) {
	    history.clear(ecModel);
	
	    api.dispatchAction({
	        type: 'restore',
	        from: this.uid
	    });
	};
	
	__webpack_require__(554).register('restore', Restore);
	
	__webpack_require__(222).registerAction({ type: 'restore', event: 'restore', update: 'prepareAndUpdate' }, function (payload, ecModel) {
	    ecModel.resetOption('recreate');
	});
	
	module.exports = Restore;

/***/ },
/* 565 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(566);
	__webpack_require__(298).registerPainter('vml', __webpack_require__(568));

/***/ },
/* 566 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };
	
	// http://www.w3.org/TR/NOTE-VML
	// TODO Use proxy like svg instead of overwrite brush methods
	
	if (!__webpack_require__(299).canvasSupported) {
	    var vec2 = __webpack_require__(237);
	    var BoundingRect = __webpack_require__(236);
	    var CMD = __webpack_require__(269).CMD;
	    var colorTool = __webpack_require__(259);
	    var textContain = __webpack_require__(235);
	    var RectText = __webpack_require__(268);
	    var Displayable = __webpack_require__(266);
	    var ZImage = __webpack_require__(280);
	    var Text = __webpack_require__(283);
	    var Path = __webpack_require__(265);
	
	    var Gradient = __webpack_require__(225);
	
	    var vmlCore = __webpack_require__(567);
	
	    var round = Math.round;
	    var sqrt = Math.sqrt;
	    var abs = Math.abs;
	    var cos = Math.cos;
	    var sin = Math.sin;
	    var mathMax = Math.max;
	
	    var applyTransform = vec2.applyTransform;
	
	    var comma = ',';
	    var imageTransformPrefix = 'progid:DXImageTransform.Microsoft';
	
	    var Z = 21600;
	    var Z2 = Z / 2;
	
	    var ZLEVEL_BASE = 100000;
	    var Z_BASE = 1000;
	
	    var initRootElStyle = function initRootElStyle(el) {
	        el.style.cssText = 'position:absolute;left:0;top:0;width:1px;height:1px;';
	        el.coordsize = Z + ',' + Z;
	        el.coordorigin = '0,0';
	    };
	
	    var encodeHtmlAttribute = function encodeHtmlAttribute(s) {
	        return String(s).replace(/&/g, '&amp;').replace(/"/g, '&quot;');
	    };
	
	    var rgb2Str = function rgb2Str(r, g, b) {
	        return 'rgb(' + [r, g, b].join(',') + ')';
	    };
	
	    var append = function append(parent, child) {
	        if (child && parent && child.parentNode !== parent) {
	            parent.appendChild(child);
	        }
	    };
	
	    var remove = function remove(parent, child) {
	        if (child && parent && child.parentNode === parent) {
	            parent.removeChild(child);
	        }
	    };
	
	    var getZIndex = function getZIndex(zlevel, z, z2) {
	        // z 的取值范围为 [0, 1000]
	        return (parseFloat(zlevel) || 0) * ZLEVEL_BASE + (parseFloat(z) || 0) * Z_BASE + z2;
	    };
	
	    var parsePercent = function parsePercent(value, maxValue) {
	        if (typeof value === 'string') {
	            if (value.lastIndexOf('%') >= 0) {
	                return parseFloat(value) / 100 * maxValue;
	            }
	            return parseFloat(value);
	        }
	        return value;
	    };
	
	    /***************************************************
	     * PATH
	     **************************************************/
	
	    var setColorAndOpacity = function setColorAndOpacity(el, color, opacity) {
	        var colorArr = colorTool.parse(color);
	        opacity = +opacity;
	        if (isNaN(opacity)) {
	            opacity = 1;
	        }
	        if (colorArr) {
	            el.color = rgb2Str(colorArr[0], colorArr[1], colorArr[2]);
	            el.opacity = opacity * colorArr[3];
	        }
	    };
	
	    var getColorAndAlpha = function getColorAndAlpha(color) {
	        var colorArr = colorTool.parse(color);
	        return [rgb2Str(colorArr[0], colorArr[1], colorArr[2]), colorArr[3]];
	    };
	
	    var updateFillNode = function updateFillNode(el, style, zrEl) {
	        // TODO pattern
	        var fill = style.fill;
	        if (fill != null) {
	            // Modified from excanvas
	            if (fill instanceof Gradient) {
	                var gradientType;
	                var angle = 0;
	                var focus = [0, 0];
	                // additional offset
	                var shift = 0;
	                // scale factor for offset
	                var expansion = 1;
	                var rect = zrEl.getBoundingRect();
	                var rectWidth = rect.width;
	                var rectHeight = rect.height;
	                if (fill.type === 'linear') {
	                    gradientType = 'gradient';
	                    var transform = zrEl.transform;
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var p1 = [fill.x2 * rectWidth, fill.y2 * rectHeight];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                        applyTransform(p1, p1, transform);
	                    }
	                    var dx = p1[0] - p0[0];
	                    var dy = p1[1] - p0[1];
	                    angle = Math.atan2(dx, dy) * 180 / Math.PI;
	                    // The angle should be a non-negative number.
	                    if (angle < 0) {
	                        angle += 360;
	                    }
	
	                    // Very small angles produce an unexpected result because they are
	                    // converted to a scientific notation string.
	                    if (angle < 1e-6) {
	                        angle = 0;
	                    }
	                } else {
	                    gradientType = 'gradientradial';
	                    var p0 = [fill.x * rectWidth, fill.y * rectHeight];
	                    var transform = zrEl.transform;
	                    var scale = zrEl.scale;
	                    var width = rectWidth;
	                    var height = rectHeight;
	                    focus = [
	                    // Percent in bounding rect
	                    (p0[0] - rect.x) / width, (p0[1] - rect.y) / height];
	                    if (transform) {
	                        applyTransform(p0, p0, transform);
	                    }
	
	                    width /= scale[0] * Z;
	                    height /= scale[1] * Z;
	                    var dimension = mathMax(width, height);
	                    shift = 2 * 0 / dimension;
	                    expansion = 2 * fill.r / dimension - shift;
	                }
	
	                // We need to sort the color stops in ascending order by offset,
	                // otherwise IE won't interpret it correctly.
	                var stops = fill.colorStops.slice();
	                stops.sort(function (cs1, cs2) {
	                    return cs1.offset - cs2.offset;
	                });
	
	                var length = stops.length;
	                // Color and alpha list of first and last stop
	                var colorAndAlphaList = [];
	                var colors = [];
	                for (var i = 0; i < length; i++) {
	                    var stop = stops[i];
	                    var colorAndAlpha = getColorAndAlpha(stop.color);
	                    colors.push(stop.offset * expansion + shift + ' ' + colorAndAlpha[0]);
	                    if (i === 0 || i === length - 1) {
	                        colorAndAlphaList.push(colorAndAlpha);
	                    }
	                }
	
	                if (length >= 2) {
	                    var color1 = colorAndAlphaList[0][0];
	                    var color2 = colorAndAlphaList[1][0];
	                    var opacity1 = colorAndAlphaList[0][1] * style.opacity;
	                    var opacity2 = colorAndAlphaList[1][1] * style.opacity;
	
	                    el.type = gradientType;
	                    el.method = 'none';
	                    el.focus = '100%';
	                    el.angle = angle;
	                    el.color = color1;
	                    el.color2 = color2;
	                    el.colors = colors.join(',');
	                    // When colors attribute is used, the meanings of opacity and o:opacity2
	                    // are reversed.
	                    el.opacity = opacity2;
	                    // FIXME g_o_:opacity ?
	                    el.opacity2 = opacity1;
	                }
	                if (gradientType === 'radial') {
	                    el.focusposition = focus.join(',');
	                }
	            } else {
	                // FIXME Change from Gradient fill to color fill
	                setColorAndOpacity(el, fill, style.opacity);
	            }
	        }
	    };
	
	    var updateStrokeNode = function updateStrokeNode(el, style) {
	        if (style.lineJoin != null) {
	            el.joinstyle = style.lineJoin;
	        }
	        if (style.miterLimit != null) {
	            el.miterlimit = style.miterLimit * Z;
	        }
	        if (style.lineCap != null) {
	            el.endcap = style.lineCap;
	        }
	        if (style.lineDash != null) {
	            el.dashstyle = style.lineDash.join(' ');
	        }
	        if (style.stroke != null && !(style.stroke instanceof Gradient)) {
	            setColorAndOpacity(el, style.stroke, style.opacity);
	        }
	    };
	
	    var updateFillAndStroke = function updateFillAndStroke(vmlEl, type, style, zrEl) {
	        var isFill = type == 'fill';
	        var el = vmlEl.getElementsByTagName(type)[0];
	        // Stroke must have lineWidth
	        if (style[type] != null && style[type] !== 'none' && (isFill || !isFill && style.lineWidth)) {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'true';
	            // FIXME Remove before updating, or set `colors` will throw error
	            if (style[type] instanceof Gradient) {
	                remove(vmlEl, el);
	            }
	            if (!el) {
	                el = vmlCore.createNode(type);
	            }
	
	            isFill ? updateFillNode(el, style, zrEl) : updateStrokeNode(el, style);
	            append(vmlEl, el);
	        } else {
	            vmlEl[isFill ? 'filled' : 'stroked'] = 'false';
	            remove(vmlEl, el);
	        }
	    };
	
	    var points = [[], [], []];
	    var pathDataToString = function pathDataToString(data, m) {
	        var M = CMD.M;
	        var C = CMD.C;
	        var L = CMD.L;
	        var A = CMD.A;
	        var Q = CMD.Q;
	
	        var str = [];
	        var nPoint;
	        var cmdStr;
	        var cmd;
	        var i;
	        var xi;
	        var yi;
	        for (i = 0; i < data.length;) {
	            cmd = data[i++];
	            cmdStr = '';
	            nPoint = 0;
	            switch (cmd) {
	                case M:
	                    cmdStr = ' m ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case L:
	                    cmdStr = ' l ';
	                    nPoint = 1;
	                    xi = data[i++];
	                    yi = data[i++];
	                    points[0][0] = xi;
	                    points[0][1] = yi;
	                    break;
	                case Q:
	                case C:
	                    cmdStr = ' c ';
	                    nPoint = 3;
	                    var x1 = data[i++];
	                    var y1 = data[i++];
	                    var x2 = data[i++];
	                    var y2 = data[i++];
	                    var x3;
	                    var y3;
	                    if (cmd === Q) {
	                        // Convert quadratic to cubic using degree elevation
	                        x3 = x2;
	                        y3 = y2;
	                        x2 = (x2 + 2 * x1) / 3;
	                        y2 = (y2 + 2 * y1) / 3;
	                        x1 = (xi + 2 * x1) / 3;
	                        y1 = (yi + 2 * y1) / 3;
	                    } else {
	                        x3 = data[i++];
	                        y3 = data[i++];
	                    }
	                    points[0][0] = x1;
	                    points[0][1] = y1;
	                    points[1][0] = x2;
	                    points[1][1] = y2;
	                    points[2][0] = x3;
	                    points[2][1] = y3;
	
	                    xi = x3;
	                    yi = y3;
	                    break;
	                case A:
	                    var x = 0;
	                    var y = 0;
	                    var sx = 1;
	                    var sy = 1;
	                    var angle = 0;
	                    if (m) {
	                        // Extract SRT from matrix
	                        x = m[4];
	                        y = m[5];
	                        sx = sqrt(m[0] * m[0] + m[1] * m[1]);
	                        sy = sqrt(m[2] * m[2] + m[3] * m[3]);
	                        angle = Math.atan2(-m[1] / sy, m[0] / sx);
	                    }
	
	                    var cx = data[i++];
	                    var cy = data[i++];
	                    var rx = data[i++];
	                    var ry = data[i++];
	                    var startAngle = data[i++] + angle;
	                    var endAngle = data[i++] + startAngle + angle;
	                    // FIXME
	                    // var psi = data[i++];
	                    i++;
	                    var clockwise = data[i++];
	
	                    var x0 = cx + cos(startAngle) * rx;
	                    var y0 = cy + sin(startAngle) * ry;
	
	                    var x1 = cx + cos(endAngle) * rx;
	                    var y1 = cy + sin(endAngle) * ry;
	
	                    var type = clockwise ? ' wa ' : ' at ';
	
	                    str.push(type, round(((cx - rx) * sx + x) * Z - Z2), comma, round(((cy - ry) * sy + y) * Z - Z2), comma, round(((cx + rx) * sx + x) * Z - Z2), comma, round(((cy + ry) * sy + y) * Z - Z2), comma, round((x0 * sx + x) * Z - Z2), comma, round((y0 * sy + y) * Z - Z2), comma, round((x1 * sx + x) * Z - Z2), comma, round((y1 * sy + y) * Z - Z2));
	
	                    xi = x1;
	                    yi = y1;
	                    break;
	                case CMD.R:
	                    var p0 = points[0];
	                    var p1 = points[1];
	                    // x0, y0
	                    p0[0] = data[i++];
	                    p0[1] = data[i++];
	                    // x1, y1
	                    p1[0] = p0[0] + data[i++];
	                    p1[1] = p0[1] + data[i++];
	
	                    if (m) {
	                        applyTransform(p0, p0, m);
	                        applyTransform(p1, p1, m);
	                    }
	
	                    p0[0] = round(p0[0] * Z - Z2);
	                    p1[0] = round(p1[0] * Z - Z2);
	                    p0[1] = round(p0[1] * Z - Z2);
	                    p1[1] = round(p1[1] * Z - Z2);
	                    str.push(
	                    // x0, y0
	                    ' m ', p0[0], comma, p0[1],
	                    // x1, y0
	                    ' l ', p1[0], comma, p0[1],
	                    // x1, y1
	                    ' l ', p1[0], comma, p1[1],
	                    // x0, y1
	                    ' l ', p0[0], comma, p1[1]);
	                    break;
	                case CMD.Z:
	                    // FIXME Update xi, yi
	                    str.push(' x ');
	            }
	
	            if (nPoint > 0) {
	                str.push(cmdStr);
	                for (var k = 0; k < nPoint; k++) {
	                    var p = points[k];
	
	                    m && applyTransform(p, p, m);
	                    // 不 round 会非常慢
	                    str.push(round(p[0] * Z - Z2), comma, round(p[1] * Z - Z2), k < nPoint - 1 ? comma : '');
	                }
	            }
	        }
	        return str.join('');
	    };
	
	    // Rewrite the original path method
	    Path.prototype.brush = function (vmlRoot) {
	        var style = this.style;
	
	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            vmlEl = vmlCore.createNode('shape');
	            initRootElStyle(vmlEl);
	
	            this._vmlEl = vmlEl;
	        }
	
	        updateFillAndStroke(vmlEl, 'fill', style, this);
	        updateFillAndStroke(vmlEl, 'stroke', style, this);
	
	        var m = this.transform;
	        var needTransform = m != null;
	        var strokeEl = vmlEl.getElementsByTagName('stroke')[0];
	        if (strokeEl) {
	            var lineWidth = style.lineWidth;
	            // Get the line scale.
	            // Determinant of this.m_ means how much the area is enlarged by the
	            // transformation. So its square root can be used as a scale factor
	            // for width.
	            if (needTransform && !style.strokeNoScale) {
	                var det = m[0] * m[3] - m[1] * m[2];
	                lineWidth *= sqrt(abs(det));
	            }
	            strokeEl.weight = lineWidth + 'px';
	        }
	
	        var path = this.path;
	        if (this.__dirtyPath) {
	            path.beginPath();
	            this.buildPath(path, this.shape);
	            this.__dirtyPath = false;
	        }
	
	        vmlEl.path = pathDataToString(path.data, this.transform);
	
	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Append to root
	        append(vmlRoot, vmlEl);
	
	        // Text
	        if (style.text) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	    };
	
	    Path.prototype.onRemoveFromStorage = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	        this.removeRectText(vmlRoot);
	    };
	
	    Path.prototype.onAddToStorage = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };
	
	    /***************************************************
	     * IMAGE
	     **************************************************/
	    var isImage = function isImage(img) {
	        // FIXME img instanceof Image 如果 img 是一个字符串的时候，IE8 下会报错
	        return (typeof img === 'undefined' ? 'undefined' : _typeof(img)) === 'object' && img.tagName && img.tagName.toUpperCase() === 'IMG';
	        // return img instanceof Image;
	    };
	
	    // Rewrite the original path method
	    ZImage.prototype.brush = function (vmlRoot) {
	        var style = this.style;
	        var image = style.image;
	
	        // Image original width, height
	        var ow;
	        var oh;
	
	        if (isImage(image)) {
	            var src = image.src;
	            if (src === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            } else {
	                var imageRuntimeStyle = image.runtimeStyle;
	                var oldRuntimeWidth = imageRuntimeStyle.width;
	                var oldRuntimeHeight = imageRuntimeStyle.height;
	                imageRuntimeStyle.width = 'auto';
	                imageRuntimeStyle.height = 'auto';
	
	                // get the original size
	                ow = image.width;
	                oh = image.height;
	
	                // and remove overides
	                imageRuntimeStyle.width = oldRuntimeWidth;
	                imageRuntimeStyle.height = oldRuntimeHeight;
	
	                // Caching image original width, height and src
	                this._imageSrc = src;
	                this._imageWidth = ow;
	                this._imageHeight = oh;
	            }
	            image = src;
	        } else {
	            if (image === this._imageSrc) {
	                ow = this._imageWidth;
	                oh = this._imageHeight;
	            }
	        }
	        if (!image) {
	            return;
	        }
	
	        var x = style.x || 0;
	        var y = style.y || 0;
	
	        var dw = style.width;
	        var dh = style.height;
	
	        var sw = style.sWidth;
	        var sh = style.sHeight;
	        var sx = style.sx || 0;
	        var sy = style.sy || 0;
	
	        var hasCrop = sw && sh;
	
	        var vmlEl = this._vmlEl;
	        if (!vmlEl) {
	            // FIXME 使用 group 在 left, top 都不是 0 的时候就无法显示了。
	            // vmlEl = vmlCore.createNode('group');
	            vmlEl = vmlCore.doc.createElement('div');
	            initRootElStyle(vmlEl);
	
	            this._vmlEl = vmlEl;
	        }
	
	        var vmlElStyle = vmlEl.style;
	        var hasRotation = false;
	        var m;
	        var scaleX = 1;
	        var scaleY = 1;
	        if (this.transform) {
	            m = this.transform;
	            scaleX = sqrt(m[0] * m[0] + m[1] * m[1]);
	            scaleY = sqrt(m[2] * m[2] + m[3] * m[3]);
	
	            hasRotation = m[1] || m[2];
	        }
	        if (hasRotation) {
	            // If filters are necessary (rotation exists), create them
	            // filters are bog-slow, so only create them if abbsolutely necessary
	            // The following check doesn't account for skews (which don't exist
	            // in the canvas spec (yet) anyway.
	            // From excanvas
	            var p0 = [x, y];
	            var p1 = [x + dw, y];
	            var p2 = [x, y + dh];
	            var p3 = [x + dw, y + dh];
	            applyTransform(p0, p0, m);
	            applyTransform(p1, p1, m);
	            applyTransform(p2, p2, m);
	            applyTransform(p3, p3, m);
	
	            var maxX = mathMax(p0[0], p1[0], p2[0], p3[0]);
	            var maxY = mathMax(p0[1], p1[1], p2[1], p3[1]);
	
	            var transformFilter = [];
	            transformFilter.push('M11=', m[0] / scaleX, comma, 'M12=', m[2] / scaleY, comma, 'M21=', m[1] / scaleX, comma, 'M22=', m[3] / scaleY, comma, 'Dx=', round(x * scaleX + m[4]), comma, 'Dy=', round(y * scaleY + m[5]));
	
	            vmlElStyle.padding = '0 ' + round(maxX) + 'px ' + round(maxY) + 'px 0';
	            // FIXME DXImageTransform 在 IE11 的兼容模式下不起作用
	            vmlElStyle.filter = imageTransformPrefix + '.Matrix(' + transformFilter.join('') + ', SizingMethod=clip)';
	        } else {
	            if (m) {
	                x = x * scaleX + m[4];
	                y = y * scaleY + m[5];
	            }
	            vmlElStyle.filter = '';
	            vmlElStyle.left = round(x) + 'px';
	            vmlElStyle.top = round(y) + 'px';
	        }
	
	        var imageEl = this._imageEl;
	        var cropEl = this._cropEl;
	
	        if (!imageEl) {
	            imageEl = vmlCore.doc.createElement('div');
	            this._imageEl = imageEl;
	        }
	        var imageELStyle = imageEl.style;
	        if (hasCrop) {
	            // Needs know image original width and height
	            if (!(ow && oh)) {
	                var tmpImage = new Image();
	                var self = this;
	                tmpImage.onload = function () {
	                    tmpImage.onload = null;
	                    ow = tmpImage.width;
	                    oh = tmpImage.height;
	                    // Adjust image width and height to fit the ratio destinationSize / sourceSize
	                    imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                    imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	
	                    // Caching image original width, height and src
	                    self._imageWidth = ow;
	                    self._imageHeight = oh;
	                    self._imageSrc = image;
	                };
	                tmpImage.src = image;
	            } else {
	                imageELStyle.width = round(scaleX * ow * dw / sw) + 'px';
	                imageELStyle.height = round(scaleY * oh * dh / sh) + 'px';
	            }
	
	            if (!cropEl) {
	                cropEl = vmlCore.doc.createElement('div');
	                cropEl.style.overflow = 'hidden';
	                this._cropEl = cropEl;
	            }
	            var cropElStyle = cropEl.style;
	            cropElStyle.width = round((dw + sx * dw / sw) * scaleX);
	            cropElStyle.height = round((dh + sy * dh / sh) * scaleY);
	            cropElStyle.filter = imageTransformPrefix + '.Matrix(Dx=' + -sx * dw / sw * scaleX + ',Dy=' + -sy * dh / sh * scaleY + ')';
	
	            if (!cropEl.parentNode) {
	                vmlEl.appendChild(cropEl);
	            }
	            if (imageEl.parentNode != cropEl) {
	                cropEl.appendChild(imageEl);
	            }
	        } else {
	            imageELStyle.width = round(scaleX * dw) + 'px';
	            imageELStyle.height = round(scaleY * dh) + 'px';
	
	            vmlEl.appendChild(imageEl);
	
	            if (cropEl && cropEl.parentNode) {
	                vmlEl.removeChild(cropEl);
	                this._cropEl = null;
	            }
	        }
	
	        var filterStr = '';
	        var alpha = style.opacity;
	        if (alpha < 1) {
	            filterStr += '.Alpha(opacity=' + round(alpha * 100) + ') ';
	        }
	        filterStr += imageTransformPrefix + '.AlphaImageLoader(src=' + image + ', SizingMethod=scale)';
	
	        imageELStyle.filter = filterStr;
	
	        vmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Append to root
	        append(vmlRoot, vmlEl);
	
	        // Text
	        if (style.text) {
	            this.drawRectText(vmlRoot, this.getBoundingRect());
	        }
	    };
	
	    ZImage.prototype.onRemoveFromStorage = function (vmlRoot) {
	        remove(vmlRoot, this._vmlEl);
	
	        this._vmlEl = null;
	        this._cropEl = null;
	        this._imageEl = null;
	
	        this.removeRectText(vmlRoot);
	    };
	
	    ZImage.prototype.onAddToStorage = function (vmlRoot) {
	        append(vmlRoot, this._vmlEl);
	        this.appendRectText(vmlRoot);
	    };
	
	    /***************************************************
	     * TEXT
	     **************************************************/
	
	    var DEFAULT_STYLE_NORMAL = 'normal';
	
	    var fontStyleCache = {};
	    var fontStyleCacheCount = 0;
	    var MAX_FONT_CACHE_SIZE = 100;
	    var fontEl = document.createElement('div');
	
	    var getFontStyle = function getFontStyle(fontString) {
	        var fontStyle = fontStyleCache[fontString];
	        if (!fontStyle) {
	            // Clear cache
	            if (fontStyleCacheCount > MAX_FONT_CACHE_SIZE) {
	                fontStyleCacheCount = 0;
	                fontStyleCache = {};
	            }
	
	            var style = fontEl.style;
	            var fontFamily;
	            try {
	                style.font = fontString;
	                fontFamily = style.fontFamily.split(',')[0];
	            } catch (e) {}
	
	            fontStyle = {
	                style: style.fontStyle || DEFAULT_STYLE_NORMAL,
	                variant: style.fontVariant || DEFAULT_STYLE_NORMAL,
	                weight: style.fontWeight || DEFAULT_STYLE_NORMAL,
	                size: parseFloat(style.fontSize || 12) | 0,
	                family: fontFamily || 'Microsoft YaHei'
	            };
	
	            fontStyleCache[fontString] = fontStyle;
	            fontStyleCacheCount++;
	        }
	        return fontStyle;
	    };
	
	    var textMeasureEl;
	    // Overwrite measure text method
	    textContain.measureText = function (text, textFont) {
	        var doc = vmlCore.doc;
	        if (!textMeasureEl) {
	            textMeasureEl = doc.createElement('div');
	            textMeasureEl.style.cssText = 'position:absolute;top:-20000px;left:0;' + 'padding:0;margin:0;border:none;white-space:pre;';
	            vmlCore.doc.body.appendChild(textMeasureEl);
	        }
	
	        try {
	            textMeasureEl.style.font = textFont;
	        } catch (ex) {
	            // Ignore failures to set to invalid font.
	        }
	        textMeasureEl.innerHTML = '';
	        // Don't use innerHTML or innerText because they allow markup/whitespace.
	        textMeasureEl.appendChild(doc.createTextNode(text));
	        return {
	            width: textMeasureEl.offsetWidth
	        };
	    };
	
	    var tmpRect = new BoundingRect();
	
	    var drawRectText = function drawRectText(vmlRoot, rect, textRect, fromTextEl) {
	
	        var style = this.style;
	        var text = style.text;
	        if (!text) {
	            return;
	        }
	
	        var x;
	        var y;
	        var align = style.textAlign;
	        var fontStyle = getFontStyle(style.textFont);
	        // FIXME encodeHtmlAttribute ?
	        var font = fontStyle.style + ' ' + fontStyle.variant + ' ' + fontStyle.weight + ' ' + fontStyle.size + 'px "' + fontStyle.family + '"';
	        var baseline = style.textBaseline;
	        var verticalAlign = style.textVerticalAlign;
	
	        textRect = textRect || textContain.getBoundingRect(text, font, align, baseline);
	
	        // Transform rect to view space
	        var m = this.transform;
	        // Ignore transform for text in other element
	        if (m && !fromTextEl) {
	            tmpRect.copy(rect);
	            tmpRect.applyTransform(m);
	            rect = tmpRect;
	        }
	
	        if (!fromTextEl) {
	            var textPosition = style.textPosition;
	            var distance = style.textDistance;
	            // Text position represented by coord
	            if (textPosition instanceof Array) {
	                x = rect.x + parsePercent(textPosition[0], rect.width);
	                y = rect.y + parsePercent(textPosition[1], rect.height);
	
	                align = align || 'left';
	                baseline = baseline || 'top';
	            } else {
	                var res = textContain.adjustTextPositionOnRect(textPosition, rect, textRect, distance);
	                x = res.x;
	                y = res.y;
	
	                // Default align and baseline when has textPosition
	                align = align || res.textAlign;
	                baseline = baseline || res.textBaseline;
	            }
	        } else {
	            x = rect.x;
	            y = rect.y;
	        }
	        if (verticalAlign) {
	            switch (verticalAlign) {
	                case 'middle':
	                    y -= textRect.height / 2;
	                    break;
	                case 'bottom':
	                    y -= textRect.height;
	                    break;
	                // 'top'
	            }
	            // Ignore baseline
	            baseline = 'top';
	        }
	
	        var fontSize = fontStyle.size;
	        // 1.75 is an arbitrary number, as there is no info about the text baseline
	        switch (baseline) {
	            case 'hanging':
	            case 'top':
	                y += fontSize / 1.75;
	                break;
	            case 'middle':
	                break;
	            default:
	                // case null:
	                // case 'alphabetic':
	                // case 'ideographic':
	                // case 'bottom':
	                y -= fontSize / 2.25;
	                break;
	        }
	        switch (align) {
	            case 'left':
	                break;
	            case 'center':
	                x -= textRect.width / 2;
	                break;
	            case 'right':
	                x -= textRect.width;
	                break;
	            // case 'end':
	            // align = elementStyle.direction == 'ltr' ? 'right' : 'left';
	            // break;
	            // case 'start':
	            // align = elementStyle.direction == 'rtl' ? 'right' : 'left';
	            // break;
	            // default:
	            //     align = 'left';
	        }
	
	        var createNode = vmlCore.createNode;
	
	        var textVmlEl = this._textVmlEl;
	        var pathEl;
	        var textPathEl;
	        var skewEl;
	        if (!textVmlEl) {
	            textVmlEl = createNode('line');
	            pathEl = createNode('path');
	            textPathEl = createNode('textpath');
	            skewEl = createNode('skew');
	
	            // FIXME Why here is not cammel case
	            // Align 'center' seems wrong
	            textPathEl.style['v-text-align'] = 'left';
	
	            initRootElStyle(textVmlEl);
	
	            pathEl.textpathok = true;
	            textPathEl.on = true;
	
	            textVmlEl.from = '0 0';
	            textVmlEl.to = '1000 0.05';
	
	            append(textVmlEl, skewEl);
	            append(textVmlEl, pathEl);
	            append(textVmlEl, textPathEl);
	
	            this._textVmlEl = textVmlEl;
	        } else {
	            // 这里是在前面 appendChild 保证顺序的前提下
	            skewEl = textVmlEl.firstChild;
	            pathEl = skewEl.nextSibling;
	            textPathEl = pathEl.nextSibling;
	        }
	
	        var coords = [x, y];
	        var textVmlElStyle = textVmlEl.style;
	        // Ignore transform for text in other element
	        if (m && fromTextEl) {
	            applyTransform(coords, coords, m);
	
	            skewEl.on = true;
	
	            skewEl.matrix = m[0].toFixed(3) + comma + m[2].toFixed(3) + comma + m[1].toFixed(3) + comma + m[3].toFixed(3) + ',0,0';
	
	            // Text position
	            skewEl.offset = (round(coords[0]) || 0) + ',' + (round(coords[1]) || 0);
	            // Left top point as origin
	            skewEl.origin = '0 0';
	
	            textVmlElStyle.left = '0px';
	            textVmlElStyle.top = '0px';
	        } else {
	            skewEl.on = false;
	            textVmlElStyle.left = round(x) + 'px';
	            textVmlElStyle.top = round(y) + 'px';
	        }
	
	        textPathEl.string = encodeHtmlAttribute(text);
	        // TODO
	        try {
	            textPathEl.style.font = font;
	        }
	        // Error font format
	        catch (e) {}
	
	        updateFillAndStroke(textVmlEl, 'fill', {
	            fill: fromTextEl ? style.fill : style.textFill,
	            opacity: style.opacity
	        }, this);
	        updateFillAndStroke(textVmlEl, 'stroke', {
	            stroke: fromTextEl ? style.stroke : style.textStroke,
	            opacity: style.opacity,
	            lineDash: style.lineDash
	        }, this);
	
	        textVmlEl.style.zIndex = getZIndex(this.zlevel, this.z, this.z2);
	
	        // Attached to root
	        append(vmlRoot, textVmlEl);
	    };
	
	    var removeRectText = function removeRectText(vmlRoot) {
	        remove(vmlRoot, this._textVmlEl);
	        this._textVmlEl = null;
	    };
	
	    var appendRectText = function appendRectText(vmlRoot) {
	        append(vmlRoot, this._textVmlEl);
	    };
	
	    var list = [RectText, Displayable, ZImage, Path, Text];
	
	    // In case Displayable has been mixed in RectText
	    for (var i = 0; i < list.length; i++) {
	        var proto = list[i].prototype;
	        proto.drawRectText = drawRectText;
	        proto.removeRectText = removeRectText;
	        proto.appendRectText = appendRectText;
	    }
	
	    Text.prototype.brush = function (root) {
	        var style = this.style;
	        if (style.text) {
	            this.drawRectText(root, {
	                x: style.x || 0, y: style.y || 0,
	                width: 0, height: 0
	            }, this.getBoundingRect(), true);
	        }
	    };
	
	    Text.prototype.onRemoveFromStorage = function (vmlRoot) {
	        this.removeRectText(vmlRoot);
	    };
	
	    Text.prototype.onAddToStorage = function (vmlRoot) {
	        this.appendRectText(vmlRoot);
	    };
	}

/***/ },
/* 567 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	if (!__webpack_require__(299).canvasSupported) {
	    var urn = 'urn:schemas-microsoft-com:vml';
	
	    var createNode;
	    var win = window;
	    var doc = win.document;
	
	    var vmlInited = false;
	
	    try {
	        !doc.namespaces.zrvml && doc.namespaces.add('zrvml', urn);
	        createNode = function createNode(tagName) {
	            return doc.createElement('<zrvml:' + tagName + ' class="zrvml">');
	        };
	    } catch (e) {
	        createNode = function createNode(tagName) {
	            return doc.createElement('<' + tagName + ' xmlns="' + urn + '" class="zrvml">');
	        };
	    }
	
	    // From raphael
	    var initVML = function initVML() {
	        if (vmlInited) {
	            return;
	        }
	        vmlInited = true;
	
	        var styleSheets = doc.styleSheets;
	        if (styleSheets.length < 31) {
	            doc.createStyleSheet().addRule('.zrvml', 'behavior:url(#default#VML)');
	        } else {
	            // http://msdn.microsoft.com/en-us/library/ms531194%28VS.85%29.aspx
	            styleSheets[0].addRule('.zrvml', 'behavior:url(#default#VML)');
	        }
	    };
	
	    // Not useing return to avoid error when converting to CommonJS module
	    module.exports = {
	        doc: doc,
	        initVML: initVML,
	        createNode: createNode
	    };
	}

/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * VML Painter.
	 *
	 * @module zrender/vml/Painter
	 */
	
	var zrLog = __webpack_require__(260);
	var vmlCore = __webpack_require__(567);
	
	function parseInt10(val) {
	    return parseInt(val, 10);
	}
	
	/**
	 * @alias module:zrender/vml/Painter
	 */
	function VMLPainter(root, storage) {
	
	    vmlCore.initVML();
	
	    this.root = root;
	
	    this.storage = storage;
	
	    var vmlViewport = document.createElement('div');
	
	    var vmlRoot = document.createElement('div');
	
	    vmlViewport.style.cssText = 'display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;';
	
	    vmlRoot.style.cssText = 'position:absolute;left:0;top:0;';
	
	    root.appendChild(vmlViewport);
	
	    this._vmlRoot = vmlRoot;
	    this._vmlViewport = vmlViewport;
	
	    this.resize();
	
	    // Modify storage
	    var oldDelFromMap = storage.delFromMap;
	    var oldAddToMap = storage.addToMap;
	    storage.delFromMap = function (elId) {
	        var el = storage.get(elId);
	
	        oldDelFromMap.call(storage, elId);
	
	        if (el) {
	            el.onRemoveFromStorage && el.onRemoveFromStorage(vmlRoot);
	        }
	    };
	
	    storage.addToMap = function (el) {
	        // Displayable already has a vml node
	        el.onAddToStorage && el.onAddToStorage(vmlRoot);
	
	        oldAddToMap.call(storage, el);
	    };
	
	    this._firstPaint = true;
	}
	
	VMLPainter.prototype = {
	
	    constructor: VMLPainter,
	
	    /**
	     * @return {HTMLDivElement}
	     */
	    getViewportRoot: function getViewportRoot() {
	        return this._vmlViewport;
	    },
	
	    /**
	     * 刷新
	     */
	    refresh: function refresh() {
	
	        var list = this.storage.getDisplayList(true, true);
	
	        this._paintList(list);
	    },
	
	    _paintList: function _paintList(list) {
	        var vmlRoot = this._vmlRoot;
	        for (var i = 0; i < list.length; i++) {
	            var el = list[i];
	            if (el.invisible || el.ignore) {
	                if (!el.__alreadyNotVisible) {
	                    el.onRemoveFromStorage(vmlRoot);
	                }
	                // Set as already invisible
	                el.__alreadyNotVisible = true;
	            } else {
	                if (el.__alreadyNotVisible) {
	                    el.onAddToStorage(vmlRoot);
	                }
	                el.__alreadyNotVisible = false;
	                if (el.__dirty) {
	                    el.beforeBrush && el.beforeBrush();
	                    el.brush(vmlRoot);
	                    el.afterBrush && el.afterBrush();
	                }
	            }
	            el.__dirty = false;
	        }
	
	        if (this._firstPaint) {
	            // Detached from document at first time
	            // to avoid page refreshing too many times
	
	            // FIXME 如果每次都先 removeChild 可能会导致一些填充和描边的效果改变
	            this._vmlViewport.appendChild(vmlRoot);
	            this._firstPaint = false;
	        }
	    },
	
	    resize: function resize() {
	        var width = this._getWidth();
	        var height = this._getHeight();
	
	        if (this._width != width && this._height != height) {
	            this._width = width;
	            this._height = height;
	
	            var vmlViewportStyle = this._vmlViewport.style;
	            vmlViewportStyle.width = width + 'px';
	            vmlViewportStyle.height = height + 'px';
	        }
	    },
	
	    dispose: function dispose() {
	        this.root.innerHTML = '';
	
	        this._vmlRoot = this._vmlViewport = this.storage = null;
	    },
	
	    getWidth: function getWidth() {
	        return this._width;
	    },
	
	    getHeight: function getHeight() {
	        return this._height;
	    },
	
	    _getWidth: function _getWidth() {
	        var root = this.root;
	        var stl = root.currentStyle;
	
	        return (root.clientWidth || parseInt10(stl.width)) - parseInt10(stl.paddingLeft) - parseInt10(stl.paddingRight) | 0;
	    },
	
	    _getHeight: function _getHeight() {
	        var root = this.root;
	        var stl = root.currentStyle;
	
	        return (root.clientHeight || parseInt10(stl.height)) - parseInt10(stl.paddingTop) - parseInt10(stl.paddingBottom) | 0;
	    }
	};
	
	// Not supported methods
	function createMethodNotSupport(method) {
	    return function () {
	        zrLog('In IE8.0 VML mode painter not support method "' + method + '"');
	    };
	}
	
	var notSupportedMethods = ['getLayer', 'insertLayer', 'eachLayer', 'eachBuildinLayer', 'eachOtherLayer', 'getLayers', 'modLayer', 'delLayer', 'clearLayer', 'toDataURL', 'pathToImage'];
	
	for (var i = 0; i < notSupportedMethods.length; i++) {
	    var name = notSupportedMethods[i];
	    VMLPainter.prototype[name] = createMethodNotSupport(name);
	}
	
	module.exports = VMLPainter;

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(159);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _react2.default.createClass({
	  displayName: 'ClusterAdmin',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      { className: 'container-fluid' },
	      _react2.default.createElement(
	        'div',
	        { className: 'row' },
	        _react2.default.createElement(
	          'div',
	          { className: 'col-sm-3 col-md-2 sidebar' },
	          _react2.default.createElement(
	            'ul',
	            { className: 'nav nav-sidebar' },
	            _react2.default.createElement(
	              'div',
	              { className: 'panel-group', id: 'clusterAdmin' },
	              _react2.default.createElement(
	                'div',
	                { className: 'panel panel-default' },
	                _react2.default.createElement(
	                  'div',
	                  { className: 'panel-heading' },
	                  _react2.default.createElement(
	                    'h4',
	                    { className: 'panel-title' },
	                    _react2.default.createElement(
	                      _reactRouter.Link,
	                      { activeStyle: { "color": "#fff", "backgroundColor": "#428bca" }, to: '/admin/cluster/', onlyActiveOnIndex: true },
	                      'Cluster'
	                    )
	                  )
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'panel panel-default' },
	                _react2.default.createElement(
	                  'div',
	                  { className: 'panel-heading' },
	                  _react2.default.createElement(
	                    'h4',
	                    { className: 'panel-title' },
	                    _react2.default.createElement(
	                      _reactRouter.Link,
	                      { activeStyle: { "color": "#fff", "backgroundColor": "#428bca" }, to: '/admin/cluster-member/crud' },
	                      'ClusterMember'
	                    )
	                  )
	                )
	              )
	            )
	          )
	        ),
	        this.props.children
	      )
	    );
	  }
	});

/***/ },
/* 570 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	
	exports.default = _react2.default.createClass({
	  displayName: 'ClusterCrud',
	  render: function render() {
	
	    var tableHeads = ['指标项', '指标值', '采集时间'];
	
	    var rowDatas = [['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00']];
	
	    return _react2.default.createElement(
	      'div',
	      { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	      _react2.default.createElement(
	        'div',
	        { className: 'sub-header' },
	        'Cluster管理'
	      ),
	      _react2.default.createElement(gmonitorui.SimpleResultTable, { theads: tableHeads,
	        rowDatas: rowDatas })
	    );
	  }
	});

/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	
	exports.default = _react2.default.createClass({
	  displayName: 'ClusterMemberCrud',
	  render: function render() {
	
	    var tableHeads = ['指标项', '指标值', '采集时间'];
	
	    var rowDatas = [['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00']];
	
	    return _react2.default.createElement(
	      'div',
	      { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	      _react2.default.createElement(
	        'div',
	        { className: 'sub-header' },
	        'Cluster Member管理'
	      ),
	      _react2.default.createElement(gmonitorui.SimpleResultTable, { theads: tableHeads,
	        rowDatas: rowDatas })
	    );
	  }
	});

/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _react2.default.createClass({
	  displayName: 'ClusterMemberRelation',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(
	        'h1',
	        null,
	        'ClusterMemberRelation'
	      )
	    );
	  }
	});

/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactRouter = __webpack_require__(159);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _react2.default.createClass({
	  displayName: 'DepartmentAdmin',
	  render: function render() {
	
	    return _react2.default.createElement(
	      'div',
	      { className: 'container-fluid' },
	      _react2.default.createElement(
	        'div',
	        { className: 'row' },
	        _react2.default.createElement(
	          'div',
	          { className: 'col-sm-3 col-md-2 sidebar' },
	          _react2.default.createElement(
	            'ul',
	            { className: 'nav nav-sidebar' },
	            _react2.default.createElement(
	              'div',
	              { className: 'panel-group', id: 'clusterAdmin' },
	              _react2.default.createElement(
	                'div',
	                { className: 'panel panel-default' },
	                _react2.default.createElement(
	                  'div',
	                  { className: 'panel-heading' },
	                  _react2.default.createElement(
	                    'h4',
	                    { className: 'panel-title' },
	                    _react2.default.createElement(
	                      _reactRouter.Link,
	                      { activeStyle: { "color": "#fff", "backgroundColor": "#428bca" }, to: '/admin/department/', onlyActiveOnIndex: true },
	                      '部门'
	                    )
	                  )
	                )
	              ),
	              _react2.default.createElement(
	                'div',
	                { className: 'panel panel-default' },
	                _react2.default.createElement(
	                  'div',
	                  { className: 'panel-heading' },
	                  _react2.default.createElement(
	                    'h4',
	                    { className: 'panel-title' },
	                    _react2.default.createElement(
	                      _reactRouter.Link,
	                      { activeStyle: { "color": "#fff", "backgroundColor": "#428bca" }, to: '/admin/account-member/crud' },
	                      '成员'
	                    )
	                  )
	                )
	              )
	            )
	          )
	        ),
	        this.props.children
	      )
	    );
	  }
	});

/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	
	exports.default = _react2.default.createClass({
	  displayName: 'DepartmentCrud',
	  render: function render() {
	
	    var tableHeads = ['指标项', '指标值', '采集时间'];
	
	    var rowDatas = [['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00'], ['CPU', '53.01%', '2015-12-14 22:22:00']];
	
	    return _react2.default.createElement(
	      'div',
	      { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	      _react2.default.createElement(
	        'div',
	        { className: 'sub-header' },
	        '部门管理'
	      ),
	      _react2.default.createElement(gmonitorui.SimpleResultTable, { theads: tableHeads,
	        rowDatas: rowDatas })
	    );
	  }
	});

/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _react2.default.createClass({
	  displayName: 'AccountMemberDeptRelation',
	  render: function render() {
	    return _react2.default.createElement(
	      'div',
	      null,
	      _react2.default.createElement(
	        'h1',
	        null,
	        'AccountMemberDeptRelation'
	      )
	    );
	  }
	});

/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(1);
	
	var _react2 = _interopRequireDefault(_react);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var gmonitorui = __webpack_require__(218);
	var Table = __webpack_require__(577);
	var Modal = __webpack_require__(579);
	
	exports.default = _react2.default.createClass({
	    displayName: 'AccountMemberCrud',
	
	
	    getInitialState: function getInitialState() {
	        return {
	            currentUpdateClusterId: '',
	            currentUpdateClusterAdmin: ''
	        };
	    },
	
	    handleClick: function handleClick(cluster, e) {
	        console.log(cluster);
	        this.setState({ currentUpdateClusterId: cluster.clusterId });
	        this.setState({ currentUpdateClusterAdmin: cluster.clusterAdmin });
	    },
	
	    updateCluster: function updateCluster() {
	        var currentUpdateClusterId = this.state.currentUpdateClusterId;
	        var currentUpdateClusterAdmin = this.state.currentUpdateClusterAdmin;
	        console.log(currentUpdateClusterId);
	        console.log(currentUpdateClusterAdmin);
	    },
	
	    componentDidMount: function componentDidMount() {
	        //TODO fetchData;
	        //console.log($('#myModal'));
	    },
	
	    createCluster: function createCluster() {
	        console.log('createCluster');
	    },
	
	    renderCreateModalBody: function renderCreateModalBody() {
	        return _react2.default.createElement(
	            'i',
	            null,
	            '增加Cluster'
	        );
	    },
	
	    renderCreateModalHeader: function renderCreateModalHeader() {
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'button',
	                { type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
	                _react2.default.createElement(
	                    'span',
	                    { 'aria-hidden': 'true' },
	                    '×'
	                )
	            ),
	            _react2.default.createElement(
	                'h4',
	                { className: 'modal-title', id: 'myModalLabel' },
	                '更新Cluster'
	            )
	        );
	    },
	
	    renderCreateModalFooter: function renderCreateModalFooter() {
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'button',
	                { type: 'button', onClick: this.createCluster, className: 'btn btn-primary' },
	                '确认创建'
	            )
	        );
	    },
	
	    renderUpdateModalBody: function renderUpdateModalBody() {
	        var handleUpdateClusterIdChange = function (event) {
	            this.setState({ currentUpdateClusterId: event.target.value });
	        }.bind(this);
	        var handleUpdateClusterAdminChange = function (event) {
	            this.setState({ currentUpdateClusterAdmin: event.target.value });
	        }.bind(this);
	
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement('input', { type: 'text', value: this.state.currentUpdateClusterId, onChange: handleUpdateClusterIdChange }),
	            _react2.default.createElement('input', { type: 'text', value: this.state.currentUpdateClusterAdmin, onChange: handleUpdateClusterAdminChange })
	        );
	    },
	
	    renderUpdateModalHeader: function renderUpdateModalHeader() {
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'button',
	                { type: 'button', className: 'close', 'data-dismiss': 'modal', 'aria-label': 'Close' },
	                _react2.default.createElement(
	                    'span',
	                    { 'aria-hidden': 'true' },
	                    '×'
	                )
	            ),
	            _react2.default.createElement(
	                'h4',
	                { className: 'modal-title', id: 'myModalLabel' },
	                '更新Cluster'
	            )
	        );
	    },
	
	    renderUpdateModalFooter: function renderUpdateModalFooter() {
	        return _react2.default.createElement(
	            'div',
	            null,
	            _react2.default.createElement(
	                'button',
	                { type: 'button',
	                    onClick: this.updateCluster,
	                    className: 'btn btn-primary' },
	                '确认更新'
	            )
	        );
	    },
	
	    render: function render() {
	
	        var rowDatas = [{ clusterId: '001', clusterAdmin: '张三' }, { clusterId: '002', clusterAdmin: '李四' }, { clusterId: '003', clusterAdmin: '王二麻子' }];
	
	        var renderRow = function (cluster) {
	            var cells = [];
	            cells.push(_react2.default.createElement(
	                'td',
	                null,
	                cluster.clusterId
	            ));
	            cells.push(_react2.default.createElement(
	                'td',
	                null,
	                cluster.clusterAdmin
	            ));
	            cells.push(_react2.default.createElement(
	                'td',
	                null,
	                _react2.default.createElement(
	                    'button',
	                    { type: 'button',
	                        onClick: this.handleClick.bind(this, cluster),
	                        'data-toggle': 'modal',
	                        'data-target': '#updateClusterModal',
	                        className: 'btn btn-success' },
	                    '修改Cluster成员'
	                )
	            ));
	            return _react2.default.createElement(
	                'tr',
	                null,
	                cells
	            );
	        }.bind(this);
	
	        var renderHeader = function renderHeader() {
	            return _react2.default.createElement(
	                'thead',
	                null,
	                _react2.default.createElement(
	                    'tr',
	                    null,
	                    _react2.default.createElement(
	                        'th',
	                        null,
	                        'ClusterId'
	                    ),
	                    _react2.default.createElement(
	                        'th',
	                        null,
	                        '联系人'
	                    ),
	                    _react2.default.createElement(
	                        'th',
	                        null,
	                        '操作'
	                    )
	                )
	            );
	        };
	
	        return _react2.default.createElement(
	            'div',
	            { className: 'col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main' },
	            _react2.default.createElement(
	                'div',
	                { className: 'sub-header' },
	                _react2.default.createElement(
	                    'button',
	                    { type: 'button',
	                        'data-toggle': 'modal', 'data-target': '#createClusterModal',
	                        className: 'btn btn-success' },
	                    '增加Cluster'
	                )
	            ),
	            _react2.default.createElement(Table, { datas: rowDatas, renderRow: renderRow, renderHeader: renderHeader }),
	            _react2.default.createElement(Modal, { modalId: 'createClusterModal',
	                renderBody: this.renderCreateModalBody,
	                renderHeader: this.renderCreateModalHeader,
	                renderFooter: this.renderCreateModalFooter }),
	            _react2.default.createElement(Modal, { modalId: 'updateClusterModal',
	                renderBody: this.renderUpdateModalBody,
	                renderHeader: this.renderUpdateModalHeader,
	                renderFooter: this.renderUpdateModalFooter })
	        );
	    }
	});

/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var React = __webpack_require__(1);
	var ObjectUtils = __webpack_require__(578);
	
	var Table = React.createClass({
	  displayName: 'Table',
	
	
	  propTypes: {
	    datas: React.PropTypes.array.isRequired,
	    renderRow: React.PropTypes.func.isRequired,
	    renderHeader: React.PropTypes.func,
	    renderFooter: React.PropTypes.func
	  },
	
	  render: function render() {
	    var rows = [];
	
	    this.props.datas.forEach(function (data, key) {
	      rows.push(this.props.renderRow(data, key));
	    }.bind(this));
	
	    var header = ObjectUtils.hasOwnProperty(this.props, 'renderHeader') ? this.props.renderHeader() : null;
	    var footer = ObjectUtils.hasOwnProperty(this.props, 'renderFooter') ? this.props.renderFooter() : null;
	
	    return React.createElement(
	      'div',
	      { className: 'table-responsive' },
	      React.createElement(
	        'table',
	        { className: 'table table-striped' },
	        header,
	        React.createElement(
	          'tbody',
	          null,
	          rows
	        ),
	        footer
	      )
	    );
	  }
	
	});
	
	module.exports = Table;

/***/ },
/* 578 */
/***/ function(module, exports) {

	"use strict";
	
	var ObjectUtils = {
	
	  hasOwnProperty: function hasOwnProperty(obj, prop) {
	    var proto = obj.__proto__ || obj.constructor.prototype;
	    return prop in obj && (!(prop in proto) || proto[prop] !== obj[prop]);
	  }
	
	};
	
	module.exports = ObjectUtils;

/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var React = __webpack_require__(1);
	
	var Modal = React.createClass({
	  displayName: "Modal",
	
	
	  propTypes: {
	    modalId: React.PropTypes.string.isRequired,
	    renderHeader: React.PropTypes.func.isRequired,
	    renderBody: React.PropTypes.func.isRequired,
	    renderFooter: React.PropTypes.func.isRequired
	  },
	
	  render: function render() {
	    return React.createElement(
	      "div",
	      { className: "modal fade",
	        id: this.props.modalId,
	        tabindex: "-1",
	        role: "dialog",
	        "aria-labelledby": "myModalLabel" },
	      React.createElement(
	        "div",
	        { className: "modal-dialog", role: "document" },
	        React.createElement(
	          "div",
	          { className: "modal-content" },
	          React.createElement(
	            "div",
	            { className: "modal-header" },
	            this.props.renderHeader()
	          ),
	          React.createElement(
	            "div",
	            { className: "modal-body" },
	            this.props.renderBody()
	          ),
	          React.createElement(
	            "div",
	            { className: "modal-footer" },
	            this.props.renderFooter()
	          )
	        )
	      )
	    );
	  }
	
	});
	
	module.exports = Modal;

/***/ }
/******/ ]);
//# sourceMappingURL=Gmonitor-bundle.js.map